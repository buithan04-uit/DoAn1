
DoAn1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c88  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000131c  08006e18  08006e18  00007e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008134  08008134  0000a084  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08008134  08008134  00009134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800813c  0800813c  0000a084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800813c  0800813c  0000913c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008140  08008140  00009140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  08008144  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a084  2**0
                  CONTENTS
 10 .bss          00000910  20000084  20000084  0000a084  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000994  20000994  0000a084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017edc  00000000  00000000  0000a0b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000354a  00000000  00000000  00021f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001778  00000000  00000000  000254e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001246  00000000  00000000  00026c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004abf  00000000  00000000  00027e9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bcf6  00000000  00000000  0002c95d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3893  00000000  00000000  00048653  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012bee6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000696c  00000000  00000000  0012bf2c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003d  00000000  00000000  00132898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006e00 	.word	0x08006e00

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	08006e00 	.word	0x08006e00

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <CircularBuffer_Init>:
#include "CircularBuffer.h"
#include <string.h>

// Khởi tạo buffer
void CircularBuffer_Init(CircularBuffer *cb)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
	cb->head = 0;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2200      	movs	r2, #0
 80005b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	cb->tail = 0;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2200      	movs	r2, #0
 80005c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
	cb->count = 0;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2200      	movs	r2, #0
 80005c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	memset(cb->buffer, 0, sizeof(cb->buffer));
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	2240      	movs	r2, #64	@ 0x40
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f005 ff4c 	bl	8006470 <memset>
}
 80005d8:	bf00      	nop
 80005da:	3708      	adds	r7, #8
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}

080005e0 <CircularBuffer_Push>:

// Thêm phần tử vào cuối buffer (push)
bool CircularBuffer_Push(CircularBuffer *cb, SensorReadout value)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	6039      	str	r1, [r7, #0]
	if (cb->count == CIRCULAR_BUFFER_SIZE)
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80005f0:	2b10      	cmp	r3, #16
 80005f2:	d116      	bne.n	8000622 <CircularBuffer_Push+0x42>
	{
		// Buffer đầy, ghi đè phần tử đầu
		cb->head = (cb->head + 1) % CIRCULAR_BUFFER_SIZE;
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80005fa:	3301      	adds	r3, #1
 80005fc:	425a      	negs	r2, r3
 80005fe:	f003 030f 	and.w	r3, r3, #15
 8000602:	f002 020f 	and.w	r2, r2, #15
 8000606:	bf58      	it	pl
 8000608:	4253      	negpl	r3, r2
 800060a:	b2da      	uxtb	r2, r3
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		cb->count--;
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8000618:	3b01      	subs	r3, #1
 800061a:	b2da      	uxtb	r2, r3
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	}
	cb->buffer[cb->tail] = value;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8000628:	687a      	ldr	r2, [r7, #4]
 800062a:	009b      	lsls	r3, r3, #2
 800062c:	4413      	add	r3, r2
 800062e:	463a      	mov	r2, r7
 8000630:	6810      	ldr	r0, [r2, #0]
 8000632:	6018      	str	r0, [r3, #0]
	cb->tail = (cb->tail + 1) % CIRCULAR_BUFFER_SIZE;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800063a:	3301      	adds	r3, #1
 800063c:	425a      	negs	r2, r3
 800063e:	f003 030f 	and.w	r3, r3, #15
 8000642:	f002 020f 	and.w	r2, r2, #15
 8000646:	bf58      	it	pl
 8000648:	4253      	negpl	r3, r2
 800064a:	b2da      	uxtb	r2, r3
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
	cb->count++;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8000658:	3301      	adds	r3, #1
 800065a:	b2da      	uxtb	r2, r3
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	return true;
 8000662:	2301      	movs	r3, #1
}
 8000664:	4618      	mov	r0, r3
 8000666:	370c      	adds	r7, #12
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr

08000670 <CircularBuffer_Pop>:

// Xóa phần tử đầu buffer (pop/shift)
bool CircularBuffer_Pop(CircularBuffer *cb, SensorReadout *value)
{
 8000670:	b480      	push	{r7}
 8000672:	b083      	sub	sp, #12
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]
 8000678:	6039      	str	r1, [r7, #0]
	if (cb->count == 0)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8000680:	2b00      	cmp	r3, #0
 8000682:	d101      	bne.n	8000688 <CircularBuffer_Pop+0x18>
		return false;
 8000684:	2300      	movs	r3, #0
 8000686:	e020      	b.n	80006ca <CircularBuffer_Pop+0x5a>
	*value = cb->buffer[cb->head];
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800068e:	6839      	ldr	r1, [r7, #0]
 8000690:	687a      	ldr	r2, [r7, #4]
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	4413      	add	r3, r2
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	600b      	str	r3, [r1, #0]
	cb->head = (cb->head + 1) % CIRCULAR_BUFFER_SIZE;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80006a0:	3301      	adds	r3, #1
 80006a2:	425a      	negs	r2, r3
 80006a4:	f003 030f 	and.w	r3, r3, #15
 80006a8:	f002 020f 	and.w	r2, r2, #15
 80006ac:	bf58      	it	pl
 80006ae:	4253      	negpl	r3, r2
 80006b0:	b2da      	uxtb	r2, r3
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	cb->count--;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80006be:	3b01      	subs	r3, #1
 80006c0:	b2da      	uxtb	r2, r3
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	return true;
 80006c8:	2301      	movs	r3, #1
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr

080006d6 <MAX30100_Begin>:

extern I2C_HandleTypeDef hi2c1;
extern char data[1024];
// Khởi tạo cảm biến
bool MAX30100_Begin(MAX30100 *dev)
{
 80006d6:	b580      	push	{r7, lr}
 80006d8:	b082      	sub	sp, #8
 80006da:	af00      	add	r7, sp, #0
 80006dc:	6078      	str	r0, [r7, #4]
    if (MAX30100_GetPartId(dev) != EXPECTED_PART_ID)
 80006de:	6878      	ldr	r0, [r7, #4]
 80006e0:	f000 f8bb 	bl	800085a <MAX30100_GetPartId>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b11      	cmp	r3, #17
 80006e8:	d001      	beq.n	80006ee <MAX30100_Begin+0x18>
        return false;
 80006ea:	2300      	movs	r3, #0
 80006ec:	e01e      	b.n	800072c <MAX30100_Begin+0x56>

    // Thoát shutdown, chọn chế độ SPO2_HR
    MAX30100_WriteRegister(MAX30100_REG_MODE_CONFIGURATION, MAX30100_MODE_SPO2_HR);
 80006ee:	2103      	movs	r1, #3
 80006f0:	2006      	movs	r0, #6
 80006f2:	f000 f8db 	bl	80008ac <MAX30100_WriteRegister>
    HAL_Delay(2);
 80006f6:	2002      	movs	r0, #2
 80006f8:	f002 fa7c 	bl	8002bf4 <HAL_Delay>

    // Cấu hình SPO2: sampling rate, pulse width, highres
    MAX30100_ConfigureSPO2(dev, DEFAULT_SAMPLING_RATE, DEFAULT_PULSE_WIDTH, true);
 80006fc:	2301      	movs	r3, #1
 80006fe:	2203      	movs	r2, #3
 8000700:	2101      	movs	r1, #1
 8000702:	6878      	ldr	r0, [r7, #4]
 8000704:	f000 f825 	bl	8000752 <MAX30100_ConfigureSPO2>
    HAL_Delay(2);
 8000708:	2002      	movs	r0, #2
 800070a:	f002 fa73 	bl	8002bf4 <HAL_Delay>

    // Cấu hình dòng điện LED
    MAX30100_SetLedsCurrent(dev, DEFAULT_IR_LED_CURRENT, DEFAULT_RED_LED_CURRENT);
 800070e:	220f      	movs	r2, #15
 8000710:	210f      	movs	r1, #15
 8000712:	6878      	ldr	r0, [r7, #4]
 8000714:	f000 f849 	bl	80007aa <MAX30100_SetLedsCurrent>
    HAL_Delay(2);
 8000718:	2002      	movs	r0, #2
 800071a:	f002 fa6b 	bl	8002bf4 <HAL_Delay>

    // Reset FIFO
    MAX30100_ResetFifo(dev);
 800071e:	6878      	ldr	r0, [r7, #4]
 8000720:	f000 f887 	bl	8000832 <MAX30100_ResetFifo>
    HAL_Delay(2);
 8000724:	2002      	movs	r0, #2
 8000726:	f002 fa65 	bl	8002bf4 <HAL_Delay>

    return true;
 800072a:	2301      	movs	r3, #1
}
 800072c:	4618      	mov	r0, r3
 800072e:	3708      	adds	r7, #8
 8000730:	46bd      	mov	sp, r7
 8000732:	bd80      	pop	{r7, pc}

08000734 <MAX30100_SetMode>:

// Chọn chế độ đo (HR, SPO2, ...)
void MAX30100_SetMode(MAX30100 *dev, Mode mode)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
 800073c:	460b      	mov	r3, r1
 800073e:	70fb      	strb	r3, [r7, #3]
    MAX30100_WriteRegister(MAX30100_REG_MODE_CONFIGURATION, mode);
 8000740:	78fb      	ldrb	r3, [r7, #3]
 8000742:	4619      	mov	r1, r3
 8000744:	2006      	movs	r0, #6
 8000746:	f000 f8b1 	bl	80008ac <MAX30100_WriteRegister>
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}

08000752 <MAX30100_ConfigureSPO2>:

// Cấu hình sampling rate, pulse width, highres
void MAX30100_ConfigureSPO2(MAX30100 *dev, SamplingRate sr, LEDPulseWidth pw, bool highres)
{
 8000752:	b580      	push	{r7, lr}
 8000754:	b084      	sub	sp, #16
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
 800075a:	4608      	mov	r0, r1
 800075c:	4611      	mov	r1, r2
 800075e:	461a      	mov	r2, r3
 8000760:	4603      	mov	r3, r0
 8000762:	70fb      	strb	r3, [r7, #3]
 8000764:	460b      	mov	r3, r1
 8000766:	70bb      	strb	r3, [r7, #2]
 8000768:	4613      	mov	r3, r2
 800076a:	707b      	strb	r3, [r7, #1]
    uint8_t value = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	73fb      	strb	r3, [r7, #15]
    value |= (sr << 2); // Sampling rate
 8000770:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000774:	009b      	lsls	r3, r3, #2
 8000776:	b25a      	sxtb	r2, r3
 8000778:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800077c:	4313      	orrs	r3, r2
 800077e:	b25b      	sxtb	r3, r3
 8000780:	73fb      	strb	r3, [r7, #15]
    value |= pw;        // Pulse width
 8000782:	7bfa      	ldrb	r2, [r7, #15]
 8000784:	78bb      	ldrb	r3, [r7, #2]
 8000786:	4313      	orrs	r3, r2
 8000788:	73fb      	strb	r3, [r7, #15]
    if (highres)
 800078a:	787b      	ldrb	r3, [r7, #1]
 800078c:	2b00      	cmp	r3, #0
 800078e:	d003      	beq.n	8000798 <MAX30100_ConfigureSPO2+0x46>
        value |= MAX30100_SPC_SPO2_HI_RES_EN;
 8000790:	7bfb      	ldrb	r3, [r7, #15]
 8000792:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000796:	73fb      	strb	r3, [r7, #15]
    MAX30100_WriteRegister(MAX30100_REG_SPO2_CONFIGURATION, value);
 8000798:	7bfb      	ldrb	r3, [r7, #15]
 800079a:	4619      	mov	r1, r3
 800079c:	2007      	movs	r0, #7
 800079e:	f000 f885 	bl	80008ac <MAX30100_WriteRegister>
}
 80007a2:	bf00      	nop
 80007a4:	3710      	adds	r7, #16
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}

080007aa <MAX30100_SetLedsCurrent>:

// Cấu hình dòng điện LED
void MAX30100_SetLedsCurrent(MAX30100 *dev, LEDCurrent irLedCurrent, LEDCurrent redLedCurrent)
{
 80007aa:	b580      	push	{r7, lr}
 80007ac:	b082      	sub	sp, #8
 80007ae:	af00      	add	r7, sp, #0
 80007b0:	6078      	str	r0, [r7, #4]
 80007b2:	460b      	mov	r3, r1
 80007b4:	70fb      	strb	r3, [r7, #3]
 80007b6:	4613      	mov	r3, r2
 80007b8:	70bb      	strb	r3, [r7, #2]
    MAX30100_WriteRegister(MAX30100_REG_LED_CONFIGURATION, (redLedCurrent << 4) | irLedCurrent);
 80007ba:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80007be:	011b      	lsls	r3, r3, #4
 80007c0:	b25a      	sxtb	r2, r3
 80007c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80007c6:	4313      	orrs	r3, r2
 80007c8:	b25b      	sxtb	r3, r3
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	4619      	mov	r1, r3
 80007ce:	2009      	movs	r0, #9
 80007d0:	f000 f86c 	bl	80008ac <MAX30100_WriteRegister>
}
 80007d4:	bf00      	nop
 80007d6:	3708      	adds	r7, #8
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <MAX30100_Update>:

// Đọc dữ liệu mới từ FIFO, cập nhật buffer
void MAX30100_Update(MAX30100 *dev)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
    MAX30100_ReadFifoData(dev);
 80007e4:	6878      	ldr	r0, [r7, #4]
 80007e6:	f000 f899 	bl	800091c <MAX30100_ReadFifoData>
}
 80007ea:	bf00      	nop
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <MAX30100_GetRawValues>:

// Lấy giá trị raw IR/RED mới nhất
bool MAX30100_GetRawValues(MAX30100 *dev, uint16_t *ir, uint16_t *red)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b086      	sub	sp, #24
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	60f8      	str	r0, [r7, #12]
 80007fa:	60b9      	str	r1, [r7, #8]
 80007fc:	607a      	str	r2, [r7, #4]
    SensorReadout readout;
    if (!CircularBuffer_Pop(&dev->readoutsBuffer, &readout))
 80007fe:	68fb      	ldr	r3, [r7, #12]
 8000800:	f107 0214 	add.w	r2, r7, #20
 8000804:	4611      	mov	r1, r2
 8000806:	4618      	mov	r0, r3
 8000808:	f7ff ff32 	bl	8000670 <CircularBuffer_Pop>
 800080c:	4603      	mov	r3, r0
 800080e:	f083 0301 	eor.w	r3, r3, #1
 8000812:	b2db      	uxtb	r3, r3
 8000814:	2b00      	cmp	r3, #0
 8000816:	d001      	beq.n	800081c <MAX30100_GetRawValues+0x2a>
        return false;
 8000818:	2300      	movs	r3, #0
 800081a:	e006      	b.n	800082a <MAX30100_GetRawValues+0x38>
    *ir = readout.ir;
 800081c:	8aba      	ldrh	r2, [r7, #20]
 800081e:	68bb      	ldr	r3, [r7, #8]
 8000820:	801a      	strh	r2, [r3, #0]
    *red = readout.red;
 8000822:	8afa      	ldrh	r2, [r7, #22]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	801a      	strh	r2, [r3, #0]
    return true;
 8000828:	2301      	movs	r3, #1
}
 800082a:	4618      	mov	r0, r3
 800082c:	3718      	adds	r7, #24
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}

08000832 <MAX30100_ResetFifo>:

// Reset FIFO
void MAX30100_ResetFifo(MAX30100 *dev)
{
 8000832:	b580      	push	{r7, lr}
 8000834:	b082      	sub	sp, #8
 8000836:	af00      	add	r7, sp, #0
 8000838:	6078      	str	r0, [r7, #4]
    MAX30100_WriteRegister(MAX30100_REG_FIFO_WRITE_POINTER, 0);
 800083a:	2100      	movs	r1, #0
 800083c:	2002      	movs	r0, #2
 800083e:	f000 f835 	bl	80008ac <MAX30100_WriteRegister>
    MAX30100_WriteRegister(MAX30100_REG_FIFO_READ_POINTER, 0);
 8000842:	2100      	movs	r1, #0
 8000844:	2004      	movs	r0, #4
 8000846:	f000 f831 	bl	80008ac <MAX30100_WriteRegister>
    MAX30100_WriteRegister(MAX30100_REG_FIFO_OVERFLOW_COUNTER, 0);
 800084a:	2100      	movs	r1, #0
 800084c:	2003      	movs	r0, #3
 800084e:	f000 f82d 	bl	80008ac <MAX30100_WriteRegister>
}
 8000852:	bf00      	nop
 8000854:	3708      	adds	r7, #8
 8000856:	46bd      	mov	sp, r7
 8000858:	bd80      	pop	{r7, pc}

0800085a <MAX30100_GetPartId>:
    MAX30100_WriteRegister(MAX30100_REG_MODE_CONFIGURATION, modeConfig);
}

// Đọc Part ID
uint8_t MAX30100_GetPartId(MAX30100 *dev)
{
 800085a:	b580      	push	{r7, lr}
 800085c:	b082      	sub	sp, #8
 800085e:	af00      	add	r7, sp, #0
 8000860:	6078      	str	r0, [r7, #4]
    return MAX30100_ReadRegister(MAX30100_REG_PART_ID);
 8000862:	20ff      	movs	r0, #255	@ 0xff
 8000864:	f000 f806 	bl	8000874 <MAX30100_ReadRegister>
 8000868:	4603      	mov	r3, r0
}
 800086a:	4618      	mov	r0, r3
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
	...

08000874 <MAX30100_ReadRegister>:

// --- I2C giao tiếp sử dụng HAL ---
uint8_t MAX30100_ReadRegister(uint8_t address)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b088      	sub	sp, #32
 8000878:	af04      	add	r7, sp, #16
 800087a:	4603      	mov	r3, r0
 800087c:	71fb      	strb	r3, [r7, #7]
    uint8_t value = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c1, MAX30100_I2C_ADDRESS << 1, address, 1, &value, 1, 100);
 8000882:	79fb      	ldrb	r3, [r7, #7]
 8000884:	b29a      	uxth	r2, r3
 8000886:	2364      	movs	r3, #100	@ 0x64
 8000888:	9302      	str	r3, [sp, #8]
 800088a:	2301      	movs	r3, #1
 800088c:	9301      	str	r3, [sp, #4]
 800088e:	f107 030f 	add.w	r3, r7, #15
 8000892:	9300      	str	r3, [sp, #0]
 8000894:	2301      	movs	r3, #1
 8000896:	21ae      	movs	r1, #174	@ 0xae
 8000898:	4803      	ldr	r0, [pc, #12]	@ (80008a8 <MAX30100_ReadRegister+0x34>)
 800089a:	f003 f94f 	bl	8003b3c <HAL_I2C_Mem_Read>
    return value;
 800089e:	7bfb      	ldrb	r3, [r7, #15]
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3710      	adds	r7, #16
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	200001f0 	.word	0x200001f0

080008ac <MAX30100_WriteRegister>:

void MAX30100_WriteRegister(uint8_t address, uint8_t data)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b086      	sub	sp, #24
 80008b0:	af04      	add	r7, sp, #16
 80008b2:	4603      	mov	r3, r0
 80008b4:	460a      	mov	r2, r1
 80008b6:	71fb      	strb	r3, [r7, #7]
 80008b8:	4613      	mov	r3, r2
 80008ba:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c1, MAX30100_I2C_ADDRESS << 1, address, 1, &data, 1, 100);
 80008bc:	79fb      	ldrb	r3, [r7, #7]
 80008be:	b29a      	uxth	r2, r3
 80008c0:	2364      	movs	r3, #100	@ 0x64
 80008c2:	9302      	str	r3, [sp, #8]
 80008c4:	2301      	movs	r3, #1
 80008c6:	9301      	str	r3, [sp, #4]
 80008c8:	1dbb      	adds	r3, r7, #6
 80008ca:	9300      	str	r3, [sp, #0]
 80008cc:	2301      	movs	r3, #1
 80008ce:	21ae      	movs	r1, #174	@ 0xae
 80008d0:	4803      	ldr	r0, [pc, #12]	@ (80008e0 <MAX30100_WriteRegister+0x34>)
 80008d2:	f003 f839 	bl	8003948 <HAL_I2C_Mem_Write>
}
 80008d6:	bf00      	nop
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
 80008de:	bf00      	nop
 80008e0:	200001f0 	.word	0x200001f0

080008e4 <MAX30100_BurstRead>:

void MAX30100_BurstRead(uint8_t baseAddress, uint8_t *buffer, uint8_t length)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b086      	sub	sp, #24
 80008e8:	af04      	add	r7, sp, #16
 80008ea:	4603      	mov	r3, r0
 80008ec:	6039      	str	r1, [r7, #0]
 80008ee:	71fb      	strb	r3, [r7, #7]
 80008f0:	4613      	mov	r3, r2
 80008f2:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Read(&hi2c1, MAX30100_I2C_ADDRESS << 1, baseAddress, 1, buffer, length, 100);
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	b29a      	uxth	r2, r3
 80008f8:	79bb      	ldrb	r3, [r7, #6]
 80008fa:	b29b      	uxth	r3, r3
 80008fc:	2164      	movs	r1, #100	@ 0x64
 80008fe:	9102      	str	r1, [sp, #8]
 8000900:	9301      	str	r3, [sp, #4]
 8000902:	683b      	ldr	r3, [r7, #0]
 8000904:	9300      	str	r3, [sp, #0]
 8000906:	2301      	movs	r3, #1
 8000908:	21ae      	movs	r1, #174	@ 0xae
 800090a:	4803      	ldr	r0, [pc, #12]	@ (8000918 <MAX30100_BurstRead+0x34>)
 800090c:	f003 f916 	bl	8003b3c <HAL_I2C_Mem_Read>
}
 8000910:	bf00      	nop
 8000912:	3708      	adds	r7, #8
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	200001f0 	.word	0x200001f0

0800091c <MAX30100_ReadFifoData>:

void MAX30100_ReadFifoData(MAX30100 *dev)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b086      	sub	sp, #24
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
    uint8_t buffer[4];
    MAX30100_BurstRead(MAX30100_REG_FIFO_DATA, buffer, 4);
 8000924:	f107 0310 	add.w	r3, r7, #16
 8000928:	2204      	movs	r2, #4
 800092a:	4619      	mov	r1, r3
 800092c:	2005      	movs	r0, #5
 800092e:	f7ff ffd9 	bl	80008e4 <MAX30100_BurstRead>

    uint16_t ir = (uint16_t)((buffer[0] << 8) | buffer[1]);
 8000932:	7c3b      	ldrb	r3, [r7, #16]
 8000934:	b21b      	sxth	r3, r3
 8000936:	021b      	lsls	r3, r3, #8
 8000938:	b21a      	sxth	r2, r3
 800093a:	7c7b      	ldrb	r3, [r7, #17]
 800093c:	b21b      	sxth	r3, r3
 800093e:	4313      	orrs	r3, r2
 8000940:	b21b      	sxth	r3, r3
 8000942:	82fb      	strh	r3, [r7, #22]
    uint16_t red = (uint16_t)((buffer[2] << 8) | buffer[3]);
 8000944:	7cbb      	ldrb	r3, [r7, #18]
 8000946:	b21b      	sxth	r3, r3
 8000948:	021b      	lsls	r3, r3, #8
 800094a:	b21a      	sxth	r2, r3
 800094c:	7cfb      	ldrb	r3, [r7, #19]
 800094e:	b21b      	sxth	r3, r3
 8000950:	4313      	orrs	r3, r2
 8000952:	b21b      	sxth	r3, r3
 8000954:	82bb      	strh	r3, [r7, #20]
    // // Hiển thị giá trị lên LCD hoặc UART để kiểm tra
    // sprintf(data, "IR:%u RED:%u", ir, red);
    // ILI9341_WriteString(0, 0, data, Font_7x10, ILI9341_YELLOW, ILI9341_BLACK);

    SensorReadout readout;
    readout.ir = ir;
 8000956:	8afb      	ldrh	r3, [r7, #22]
 8000958:	81bb      	strh	r3, [r7, #12]
    readout.red = red;
 800095a:	8abb      	ldrh	r3, [r7, #20]
 800095c:	81fb      	strh	r3, [r7, #14]
    CircularBuffer_Push(&dev->readoutsBuffer, readout);
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	68f9      	ldr	r1, [r7, #12]
 8000962:	4618      	mov	r0, r3
 8000964:	f7ff fe3c 	bl	80005e0 <CircularBuffer_Push>
}
 8000968:	bf00      	nop
 800096a:	3718      	adds	r7, #24
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}

08000970 <BeatDetector_GetRate>:
    bd->lastMaxValue = 0;
    bd->tsLastBeat = 0;
}

float BeatDetector_GetRate(BeatDetector *bd)
{
 8000970:	b480      	push	{r7}
 8000972:	b083      	sub	sp, #12
 8000974:	af00      	add	r7, sp, #0
 8000976:	6078      	str	r0, [r7, #4]
    if (bd->beatPeriod != 0)
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	edd3 7a02 	vldr	s15, [r3, #8]
 800097e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000986:	d00f      	beq.n	80009a8 <BeatDetector_GetRate+0x38>
    {
        return 1.0f / bd->beatPeriod * 1000.0f * 60.0f;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	ed93 7a02 	vldr	s14, [r3, #8]
 800098e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8000992:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000996:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 80009bc <BeatDetector_GetRate+0x4c>
 800099a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800099e:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 80009c0 <BeatDetector_GetRate+0x50>
 80009a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80009a6:	e001      	b.n	80009ac <BeatDetector_GetRate+0x3c>
    }
    else
    {
        return 0.0f;
 80009a8:	eddf 7a06 	vldr	s15, [pc, #24]	@ 80009c4 <BeatDetector_GetRate+0x54>
    }
}
 80009ac:	eeb0 0a67 	vmov.f32	s0, s15
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	447a0000 	.word	0x447a0000
 80009c0:	42700000 	.word	0x42700000
 80009c4:	00000000 	.word	0x00000000

080009c8 <BeatDetector_AddSample>:
    return bd->threshold;
}

// Hàm chính: thêm mẫu mới, trả về true nếu phát hiện nhịp
bool BeatDetector_AddSample(BeatDetector *bd, float sample, uint32_t timestamp_ms)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	ed87 0a02 	vstr	s0, [r7, #8]
 80009d4:	6079      	str	r1, [r7, #4]
    bool beatDetected = false;
 80009d6:	2300      	movs	r3, #0
 80009d8:	75fb      	strb	r3, [r7, #23]

    switch (bd->state)
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	2b04      	cmp	r3, #4
 80009e0:	f200 80b1 	bhi.w	8000b46 <BeatDetector_AddSample+0x17e>
 80009e4:	a201      	add	r2, pc, #4	@ (adr r2, 80009ec <BeatDetector_AddSample+0x24>)
 80009e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ea:	bf00      	nop
 80009ec:	08000a01 	.word	0x08000a01
 80009f0:	08000a13 	.word	0x08000a13
 80009f4:	08000a6f 	.word	0x08000a6f
 80009f8:	08000aa9 	.word	0x08000aa9
 80009fc:	08000b2b 	.word	0x08000b2b
    {
    case BEATDETECTOR_STATE_INIT:
        if (timestamp_ms > BEATDETECTOR_INIT_HOLDOFF)
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000a06:	f240 809d 	bls.w	8000b44 <BeatDetector_AddSample+0x17c>
        {
            bd->state = BEATDETECTOR_STATE_WAITING;
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	701a      	strb	r2, [r3, #0]
        }
        break;
 8000a10:	e098      	b.n	8000b44 <BeatDetector_AddSample+0x17c>

    case BEATDETECTOR_STATE_WAITING:
        if (sample > bd->threshold)
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	edd3 7a01 	vldr	s15, [r3, #4]
 8000a18:	ed97 7a02 	vldr	s14, [r7, #8]
 8000a1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a24:	dd10      	ble.n	8000a48 <BeatDetector_AddSample+0x80>
        {
            bd->threshold = MIN(sample, BEATDETECTOR_MAX_THRESHOLD);
 8000a26:	edd7 7a02 	vldr	s15, [r7, #8]
 8000a2a:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8000b50 <BeatDetector_AddSample+0x188>
 8000a2e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a36:	d501      	bpl.n	8000a3c <BeatDetector_AddSample+0x74>
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	e000      	b.n	8000a3e <BeatDetector_AddSample+0x76>
 8000a3c:	4b45      	ldr	r3, [pc, #276]	@ (8000b54 <BeatDetector_AddSample+0x18c>)
 8000a3e:	68fa      	ldr	r2, [r7, #12]
 8000a40:	6053      	str	r3, [r2, #4]
            bd->state = BEATDETECTOR_STATE_FOLLOWING_SLOPE;
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	2202      	movs	r2, #2
 8000a46:	701a      	strb	r2, [r3, #0]
        }
        // Tracking lost, resetting
        if (timestamp_ms - bd->tsLastBeat > BEATDETECTOR_INVALID_READOUT_DELAY)
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	691b      	ldr	r3, [r3, #16]
 8000a4c:	687a      	ldr	r2, [r7, #4]
 8000a4e:	1ad3      	subs	r3, r2, r3
 8000a50:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000a54:	d907      	bls.n	8000a66 <BeatDetector_AddSample+0x9e>
        {
            bd->beatPeriod = 0;
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	f04f 0200 	mov.w	r2, #0
 8000a5c:	609a      	str	r2, [r3, #8]
            bd->lastMaxValue = 0;
 8000a5e:	68fb      	ldr	r3, [r7, #12]
 8000a60:	f04f 0200 	mov.w	r2, #0
 8000a64:	60da      	str	r2, [r3, #12]
        }
        BeatDetector_DecreaseThreshold(bd);
 8000a66:	68f8      	ldr	r0, [r7, #12]
 8000a68:	f000 f87a 	bl	8000b60 <BeatDetector_DecreaseThreshold>
        break;
 8000a6c:	e06b      	b.n	8000b46 <BeatDetector_AddSample+0x17e>

    case BEATDETECTOR_STATE_FOLLOWING_SLOPE:
        if (sample < bd->threshold)
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	edd3 7a01 	vldr	s15, [r3, #4]
 8000a74:	ed97 7a02 	vldr	s14, [r7, #8]
 8000a78:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a80:	d503      	bpl.n	8000a8a <BeatDetector_AddSample+0xc2>
        {
            bd->state = BEATDETECTOR_STATE_MAYBE_DETECTED;
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	2203      	movs	r2, #3
 8000a86:	701a      	strb	r2, [r3, #0]
        }
        else
        {
            bd->threshold = MIN(sample, BEATDETECTOR_MAX_THRESHOLD);
        }
        break;
 8000a88:	e05d      	b.n	8000b46 <BeatDetector_AddSample+0x17e>
            bd->threshold = MIN(sample, BEATDETECTOR_MAX_THRESHOLD);
 8000a8a:	edd7 7a02 	vldr	s15, [r7, #8]
 8000a8e:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8000b50 <BeatDetector_AddSample+0x188>
 8000a92:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a9a:	d501      	bpl.n	8000aa0 <BeatDetector_AddSample+0xd8>
 8000a9c:	68bb      	ldr	r3, [r7, #8]
 8000a9e:	e000      	b.n	8000aa2 <BeatDetector_AddSample+0xda>
 8000aa0:	4b2c      	ldr	r3, [pc, #176]	@ (8000b54 <BeatDetector_AddSample+0x18c>)
 8000aa2:	68fa      	ldr	r2, [r7, #12]
 8000aa4:	6053      	str	r3, [r2, #4]
        break;
 8000aa6:	e04e      	b.n	8000b46 <BeatDetector_AddSample+0x17e>

    case BEATDETECTOR_STATE_MAYBE_DETECTED:
        if (sample + BEATDETECTOR_STEP_RESILIENCY < bd->threshold)
 8000aa8:	edd7 7a02 	vldr	s15, [r7, #8]
 8000aac:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8000ab0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	edd3 7a01 	vldr	s15, [r3, #4]
 8000aba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000abe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ac2:	d52e      	bpl.n	8000b22 <BeatDetector_AddSample+0x15a>
        {
            // Found a beat
            beatDetected = true;
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	75fb      	strb	r3, [r7, #23]
            bd->lastMaxValue = sample;
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	68ba      	ldr	r2, [r7, #8]
 8000acc:	60da      	str	r2, [r3, #12]
            bd->state = BEATDETECTOR_STATE_MASKING;
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	2204      	movs	r2, #4
 8000ad2:	701a      	strb	r2, [r3, #0]
            float delta = (float)(timestamp_ms - bd->tsLastBeat);
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	691b      	ldr	r3, [r3, #16]
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	1ad3      	subs	r3, r2, r3
 8000adc:	ee07 3a90 	vmov	s15, r3
 8000ae0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ae4:	edc7 7a04 	vstr	s15, [r7, #16]
            if (delta > 0)
 8000ae8:	edd7 7a04 	vldr	s15, [r7, #16]
 8000aec:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000af0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000af4:	dd11      	ble.n	8000b1a <BeatDetector_AddSample+0x152>
            {
                bd->beatPeriod = BEATDETECTOR_BPFILTER_ALPHA * delta +
 8000af6:	edd7 7a04 	vldr	s15, [r7, #16]
 8000afa:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000b58 <BeatDetector_AddSample+0x190>
 8000afe:	ee27 7a87 	vmul.f32	s14, s15, s14
                                 (1.0f - BEATDETECTOR_BPFILTER_ALPHA) * bd->beatPeriod;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	edd3 7a02 	vldr	s15, [r3, #8]
 8000b08:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8000b5c <BeatDetector_AddSample+0x194>
 8000b0c:	ee67 7aa6 	vmul.f32	s15, s15, s13
                bd->beatPeriod = BEATDETECTOR_BPFILTER_ALPHA * delta +
 8000b10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	edc3 7a02 	vstr	s15, [r3, #8]
            }
            bd->tsLastBeat = timestamp_ms;
 8000b1a:	68fb      	ldr	r3, [r7, #12]
 8000b1c:	687a      	ldr	r2, [r7, #4]
 8000b1e:	611a      	str	r2, [r3, #16]
        }
        else
        {
            bd->state = BEATDETECTOR_STATE_FOLLOWING_SLOPE;
        }
        break;
 8000b20:	e011      	b.n	8000b46 <BeatDetector_AddSample+0x17e>
            bd->state = BEATDETECTOR_STATE_FOLLOWING_SLOPE;
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	2202      	movs	r2, #2
 8000b26:	701a      	strb	r2, [r3, #0]
        break;
 8000b28:	e00d      	b.n	8000b46 <BeatDetector_AddSample+0x17e>

    case BEATDETECTOR_STATE_MASKING:
        if (timestamp_ms - bd->tsLastBeat > BEATDETECTOR_MASKING_HOLDOFF)
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	691b      	ldr	r3, [r3, #16]
 8000b2e:	687a      	ldr	r2, [r7, #4]
 8000b30:	1ad3      	subs	r3, r2, r3
 8000b32:	2bc8      	cmp	r3, #200	@ 0xc8
 8000b34:	d902      	bls.n	8000b3c <BeatDetector_AddSample+0x174>
        {
            bd->state = BEATDETECTOR_STATE_WAITING;
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	2201      	movs	r2, #1
 8000b3a:	701a      	strb	r2, [r3, #0]
        }
        BeatDetector_DecreaseThreshold(bd);
 8000b3c:	68f8      	ldr	r0, [r7, #12]
 8000b3e:	f000 f80f 	bl	8000b60 <BeatDetector_DecreaseThreshold>
        break;
 8000b42:	e000      	b.n	8000b46 <BeatDetector_AddSample+0x17e>
        break;
 8000b44:	bf00      	nop
    }

    return beatDetected;
 8000b46:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b48:	4618      	mov	r0, r3
 8000b4a:	3718      	adds	r7, #24
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	44480000 	.word	0x44480000
 8000b54:	44480000 	.word	0x44480000
 8000b58:	3f19999a 	.word	0x3f19999a
 8000b5c:	3ecccccc 	.word	0x3ecccccc

08000b60 <BeatDetector_DecreaseThreshold>:

// Hàm giảm ngưỡng threshold
static void BeatDetector_DecreaseThreshold(BeatDetector *bd)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b083      	sub	sp, #12
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
    if (bd->lastMaxValue > 0 && bd->beatPeriod > 0)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	edd3 7a03 	vldr	s15, [r3, #12]
 8000b6e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b76:	dd20      	ble.n	8000bba <BeatDetector_DecreaseThreshold+0x5a>
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	edd3 7a02 	vldr	s15, [r3, #8]
 8000b7e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b86:	dd18      	ble.n	8000bba <BeatDetector_DecreaseThreshold+0x5a>
    {
        bd->threshold -= bd->lastMaxValue * (1.0f - BEATDETECTOR_THRESHOLD_FALLOFF_TARGET) /
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	ed93 7a01 	vldr	s14, [r3, #4]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	edd3 7a03 	vldr	s15, [r3, #12]
 8000b94:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8000bf8 <BeatDetector_DecreaseThreshold+0x98>
 8000b98:	ee27 6aa6 	vmul.f32	s12, s15, s13
                         (bd->beatPeriod / BEATDETECTOR_SAMPLES_PERIOD);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	edd3 7a02 	vldr	s15, [r3, #8]
 8000ba2:	eef2 5a04 	vmov.f32	s11, #36	@ 0x41200000  10.0
 8000ba6:	eec7 6aa5 	vdiv.f32	s13, s15, s11
        bd->threshold -= bd->lastMaxValue * (1.0f - BEATDETECTOR_THRESHOLD_FALLOFF_TARGET) /
 8000baa:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000bae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	edc3 7a01 	vstr	s15, [r3, #4]
 8000bb8:	e009      	b.n	8000bce <BeatDetector_DecreaseThreshold+0x6e>
    }
    else
    {
        bd->threshold *= BEATDETECTOR_THRESHOLD_DECAY_FACTOR;
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	edd3 7a01 	vldr	s15, [r3, #4]
 8000bc0:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8000bfc <BeatDetector_DecreaseThreshold+0x9c>
 8000bc4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	edc3 7a01 	vstr	s15, [r3, #4]
    }
    if (bd->threshold < BEATDETECTOR_MIN_THRESHOLD)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	edd3 7a01 	vldr	s15, [r3, #4]
 8000bd4:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8000bd8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000be0:	d400      	bmi.n	8000be4 <BeatDetector_DecreaseThreshold+0x84>
    {
        bd->threshold = BEATDETECTOR_MIN_THRESHOLD;
    }
 8000be2:	e002      	b.n	8000bea <BeatDetector_DecreaseThreshold+0x8a>
        bd->threshold = BEATDETECTOR_MIN_THRESHOLD;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	4a06      	ldr	r2, [pc, #24]	@ (8000c00 <BeatDetector_DecreaseThreshold+0xa0>)
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop
 8000bf8:	3f333333 	.word	0x3f333333
 8000bfc:	3f7d70a4 	.word	0x3f7d70a4
 8000c00:	41a00000 	.word	0x41a00000

08000c04 <FilterBuLp1_Step>:
	f->v[1] = 0.0f;
}

// Bước lọc (step)
static inline float FilterBuLp1_Step(FilterBuLp1 *f, float x)
{
 8000c04:	b480      	push	{r7}
 8000c06:	b083      	sub	sp, #12
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	6078      	str	r0, [r7, #4]
 8000c0c:	ed87 0a00 	vstr	s0, [r7]
	f->v[0] = f->v[1];
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	685a      	ldr	r2, [r3, #4]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	601a      	str	r2, [r3, #0]
	f->v[1] = (0.2452372752527856f * x) + (0.5095254494944288f * f->v[0]);
 8000c18:	edd7 7a00 	vldr	s15, [r7]
 8000c1c:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8000c5c <FilterBuLp1_Step+0x58>
 8000c20:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	edd3 7a00 	vldr	s15, [r3]
 8000c2a:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8000c60 <FilterBuLp1_Step+0x5c>
 8000c2e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000c32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	edc3 7a01 	vstr	s15, [r3, #4]
	return (f->v[0] + f->v[1]);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	ed93 7a00 	vldr	s14, [r3]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	edd3 7a01 	vldr	s15, [r3, #4]
 8000c48:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000c4c:	eeb0 0a67 	vmov.f32	s0, s15
 8000c50:	370c      	adds	r7, #12
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	3e7b1f7b 	.word	0x3e7b1f7b
 8000c60:	3f027043 	.word	0x3f027043

08000c64 <DCRemover_Init>:
	float dcw;
} DCRemover;

// Khởi tạo DCRemover với alpha
static inline void DCRemover_Init(DCRemover *dcr, float alpha)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
 8000c6c:	ed87 0a00 	vstr	s0, [r7]
	dcr->alpha = alpha;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	683a      	ldr	r2, [r7, #0]
 8000c74:	601a      	str	r2, [r3, #0]
	dcr->dcw = 0.0f;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	f04f 0200 	mov.w	r2, #0
 8000c7c:	605a      	str	r2, [r3, #4]
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr

08000c8a <DCRemover_Step>:

// Bước lọc (step)
static inline float DCRemover_Step(DCRemover *dcr, float x)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	b085      	sub	sp, #20
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
 8000c92:	ed87 0a00 	vstr	s0, [r7]
	float olddcw = dcr->dcw;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	60fb      	str	r3, [r7, #12]
	dcr->dcw = x + dcr->alpha * dcr->dcw;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	ed93 7a00 	vldr	s14, [r3]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ca8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000cac:	edd7 7a00 	vldr	s15, [r7]
 8000cb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	edc3 7a01 	vstr	s15, [r3, #4]
	return dcr->dcw - olddcw;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	ed93 7a01 	vldr	s14, [r3, #4]
 8000cc0:	edd7 7a03 	vldr	s15, [r7, #12]
 8000cc4:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8000cc8:	eeb0 0a67 	vmov.f32	s0, s15
 8000ccc:	3714      	adds	r7, #20
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <DCRemover_GetDCW>:

// Lấy giá trị DC hiện tại
static inline float DCRemover_GetDCW(DCRemover *dcr)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	b083      	sub	sp, #12
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	6078      	str	r0, [r7, #4]
	return dcr->dcw;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	685b      	ldr	r3, [r3, #4]
 8000ce2:	ee07 3a90 	vmov	s15, r3
}
 8000ce6:	eeb0 0a67 	vmov.f32	s0, s15
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <PulseOximeter_Init>:

static void checkSample(PulseOximeter *po);
static void checkCurrentBias(PulseOximeter *po);

void PulseOximeter_Init(PulseOximeter *po)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
    po->state = PULSEOXIMETER_STATE_INIT;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2200      	movs	r2, #0
 8000d00:	701a      	strb	r2, [r3, #0]
    po->tsFirstBeatDetected = 0;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2200      	movs	r2, #0
 8000d06:	605a      	str	r2, [r3, #4]
    po->tsLastBeatDetected = 0;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]
    po->tsLastBiasCheck = 0;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2200      	movs	r2, #0
 8000d12:	60da      	str	r2, [r3, #12]
    po->tsLastCurrentAdjustment = 0;
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2200      	movs	r2, #0
 8000d18:	611a      	str	r2, [r3, #16]
    po->redLedCurrentIndex = (uint8_t)RED_LED_CURRENT_START;
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2208      	movs	r2, #8
 8000d1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    po->irLedCurrent = DEFAULT_IR_LED_CURRENT;
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	220f      	movs	r2, #15
 8000d26:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    po->onBeatDetected = NULL;
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    CircularBuffer_Init(&po->hrm.readoutsBuffer);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	3358      	adds	r3, #88	@ 0x58
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff fc38 	bl	80005ac <CircularBuffer_Init>
}
 8000d3c:	bf00      	nop
 8000d3e:	3708      	adds	r7, #8
 8000d40:	46bd      	mov	sp, r7
 8000d42:	bd80      	pop	{r7, pc}

08000d44 <PulseOximeter_Begin>:

bool PulseOximeter_Begin(PulseOximeter *po, PulseOximeterDebuggingMode debuggingMode)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	460b      	mov	r3, r1
 8000d4e:	70fb      	strb	r3, [r7, #3]
    po->debuggingMode = debuggingMode;
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	78fa      	ldrb	r2, [r7, #3]
 8000d54:	705a      	strb	r2, [r3, #1]

    bool ready = MAX30100_Begin(&po->hrm);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	3358      	adds	r3, #88	@ 0x58
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	f7ff fcbb 	bl	80006d6 <MAX30100_Begin>
 8000d60:	4603      	mov	r3, r0
 8000d62:	73fb      	strb	r3, [r7, #15]

    if (!ready)
 8000d64:	7bfb      	ldrb	r3, [r7, #15]
 8000d66:	f083 0301 	eor.w	r3, r3, #1
 8000d6a:	b2db      	uxtb	r3, r3
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d001      	beq.n	8000d74 <PulseOximeter_Begin+0x30>
    {
        // Có thể thêm debug qua UART nếu cần
        return false;
 8000d70:	2300      	movs	r3, #0
 8000d72:	e02b      	b.n	8000dcc <PulseOximeter_Begin+0x88>
    }

    MAX30100_SetMode(&po->hrm, MAX30100_MODE_SPO2_HR);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	3358      	adds	r3, #88	@ 0x58
 8000d78:	2103      	movs	r1, #3
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff fcda 	bl	8000734 <MAX30100_SetMode>
	MAX30100_SetLedsCurrent(&po->hrm, po->irLedCurrent, (LEDCurrent)po->redLedCurrentIndex);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	f893 1041 	ldrb.w	r1, [r3, #65]	@ 0x41
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000d92:	461a      	mov	r2, r3
 8000d94:	f7ff fd09 	bl	80007aa <MAX30100_SetLedsCurrent>
	// Thay thế 3 dòng dưới đây:
	// MAX30100_SetLedsPulseWidth(&po->hrm, MAX30100_SPC_PW_1600US_16BITS);
	// MAX30100_SetSamplingRate(&po->hrm, MAX30100_SAMPRATE_100HZ);
	// MAX30100_SetHighresModeEnabled(&po->hrm, true);
	// Bằng 1 dòng này:
	MAX30100_ConfigureSPO2(&po->hrm, MAX30100_SAMPRATE_100HZ, MAX30100_SPC_PW_1600US_16BITS, true);
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8000d9e:	2301      	movs	r3, #1
 8000da0:	2203      	movs	r2, #3
 8000da2:	2101      	movs	r1, #1
 8000da4:	f7ff fcd5 	bl	8000752 <MAX30100_ConfigureSPO2>

    DCRemover_Init(&po->irDCRemover, DC_REMOVER_ALPHA);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3328      	adds	r3, #40	@ 0x28
 8000dac:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8000dd4 <PulseOximeter_Begin+0x90>
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff ff57 	bl	8000c64 <DCRemover_Init>
    DCRemover_Init(&po->redDCRemover, DC_REMOVER_ALPHA);
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	3330      	adds	r3, #48	@ 0x30
 8000dba:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8000dd4 <PulseOximeter_Begin+0x90>
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff ff50 	bl	8000c64 <DCRemover_Init>

    po->state = PULSEOXIMETER_STATE_IDLE;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2201      	movs	r2, #1
 8000dc8:	701a      	strb	r2, [r3, #0]

    return true;
 8000dca:	2301      	movs	r3, #1
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3710      	adds	r7, #16
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	3f733333 	.word	0x3f733333

08000dd8 <PulseOximeter_Update>:

void PulseOximeter_Update(PulseOximeter *po)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b082      	sub	sp, #8
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
    MAX30100_Update(&po->hrm);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	3358      	adds	r3, #88	@ 0x58
 8000de4:	4618      	mov	r0, r3
 8000de6:	f7ff fcf9 	bl	80007dc <MAX30100_Update>
    checkSample(po);
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	f000 f834 	bl	8000e58 <checkSample>
    checkCurrentBias(po);
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f000 f8b1 	bl	8000f58 <checkCurrentBias>
}
 8000df6:	bf00      	nop
 8000df8:	3708      	adds	r7, #8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}

08000dfe <PulseOximeter_GetHeartRate>:

float PulseOximeter_GetHeartRate(PulseOximeter *po)
{
 8000dfe:	b580      	push	{r7, lr}
 8000e00:	b082      	sub	sp, #8
 8000e02:	af00      	add	r7, sp, #0
 8000e04:	6078      	str	r0, [r7, #4]
    return BeatDetector_GetRate(&po->beatDetector);
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	3314      	adds	r3, #20
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f7ff fdb0 	bl	8000970 <BeatDetector_GetRate>
 8000e10:	eef0 7a40 	vmov.f32	s15, s0
}
 8000e14:	eeb0 0a67 	vmov.f32	s0, s15
 8000e18:	3708      	adds	r7, #8
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <PulseOximeter_GetSpO2>:

uint8_t PulseOximeter_GetSpO2(PulseOximeter *po)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b082      	sub	sp, #8
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	6078      	str	r0, [r7, #4]
    return SpO2Calculator_GetSpO2(&po->spO2calculator);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	3344      	adds	r3, #68	@ 0x44
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f000 f9d6 	bl	80011dc <SpO2Calculator_GetSpO2>
 8000e30:	4603      	mov	r3, r0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <PulseOximeter_SetOnBeatDetectedCallback>:
{
    return po->redLedCurrentIndex;
}

void PulseOximeter_SetOnBeatDetectedCallback(PulseOximeter *po, void (*cb)(void))
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	b083      	sub	sp, #12
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
 8000e42:	6039      	str	r1, [r7, #0]
    po->onBeatDetected = cb;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	683a      	ldr	r2, [r7, #0]
 8000e48:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
}
 8000e4c:	bf00      	nop
 8000e4e:	370c      	adds	r7, #12
 8000e50:	46bd      	mov	sp, r7
 8000e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e56:	4770      	bx	lr

08000e58 <checkSample>:
}

// --- Hàm nội bộ ---

static void checkSample(PulseOximeter *po)
{
 8000e58:	b590      	push	{r4, r7, lr}
 8000e5a:	b089      	sub	sp, #36	@ 0x24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
    uint16_t rawIRValue, rawRedValue;

    // Lấy tất cả sample có sẵn
    while (MAX30100_GetRawValues(&po->hrm, &rawIRValue, &rawRedValue))
 8000e60:	e069      	b.n	8000f36 <checkSample+0xde>
    {
        float irACValue = DCRemover_Step(&po->irDCRemover, (float)rawIRValue);
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	3328      	adds	r3, #40	@ 0x28
 8000e66:	8a3a      	ldrh	r2, [r7, #16]
 8000e68:	ee07 2a90 	vmov	s15, r2
 8000e6c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e70:	eeb0 0a67 	vmov.f32	s0, s15
 8000e74:	4618      	mov	r0, r3
 8000e76:	f7ff ff08 	bl	8000c8a <DCRemover_Step>
 8000e7a:	ed87 0a07 	vstr	s0, [r7, #28]
        float redACValue = DCRemover_Step(&po->redDCRemover, (float)rawRedValue);
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	3330      	adds	r3, #48	@ 0x30
 8000e82:	89fa      	ldrh	r2, [r7, #14]
 8000e84:	ee07 2a90 	vmov	s15, r2
 8000e88:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e8c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff fefa 	bl	8000c8a <DCRemover_Step>
 8000e96:	ed87 0a06 	vstr	s0, [r7, #24]

        // Tín hiệu đưa vào beat detector là đảo dấu vì spike âm
float filteredPulseValue = FilterBuLp1_Step(&po->lpf, -irACValue);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	3338      	adds	r3, #56	@ 0x38
 8000e9e:	edd7 7a07 	vldr	s15, [r7, #28]
 8000ea2:	eef1 7a67 	vneg.f32	s15, s15
 8000ea6:	eeb0 0a67 	vmov.f32	s0, s15
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff feaa 	bl	8000c04 <FilterBuLp1_Step>
 8000eb0:	ed87 0a05 	vstr	s0, [r7, #20]
        bool beatDetected = BeatDetector_AddSample(&po->beatDetector, filteredPulseValue, HAL_GetTick());
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	f103 0414 	add.w	r4, r3, #20
 8000eba:	f001 fe8f 	bl	8002bdc <HAL_GetTick>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	ed97 0a05 	vldr	s0, [r7, #20]
 8000ec6:	4620      	mov	r0, r4
 8000ec8:	f7ff fd7e 	bl	80009c8 <BeatDetector_AddSample>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	74fb      	strb	r3, [r7, #19]

        if (BeatDetector_GetRate(&po->beatDetector) > 0)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3314      	adds	r3, #20
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff fd4b 	bl	8000970 <BeatDetector_GetRate>
 8000eda:	eef0 7a40 	vmov.f32	s15, s0
 8000ede:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000ee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ee6:	dd0e      	ble.n	8000f06 <checkSample+0xae>
        {
            po->state = PULSEOXIMETER_STATE_DETECTING;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2202      	movs	r2, #2
 8000eec:	701a      	strb	r2, [r3, #0]
            SpO2Calculator_Update(&po->spO2calculator, irACValue, redACValue, beatDetected);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	3344      	adds	r3, #68	@ 0x44
 8000ef2:	7cfa      	ldrb	r2, [r7, #19]
 8000ef4:	4611      	mov	r1, r2
 8000ef6:	edd7 0a06 	vldr	s1, [r7, #24]
 8000efa:	ed97 0a07 	vldr	s0, [r7, #28]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 f8c6 	bl	8001090 <SpO2Calculator_Update>
 8000f04:	e00b      	b.n	8000f1e <checkSample+0xc6>
        }
        else if (po->state == PULSEOXIMETER_STATE_DETECTING)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d107      	bne.n	8000f1e <checkSample+0xc6>
        {
            po->state = PULSEOXIMETER_STATE_IDLE;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2201      	movs	r2, #1
 8000f12:	701a      	strb	r2, [r3, #0]
            SpO2Calculator_Reset(&po->spO2calculator);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	3344      	adds	r3, #68	@ 0x44
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f000 f89d 	bl	8001058 <SpO2Calculator_Reset>
        }

        // Nếu cần debug, có thể gửi giá trị qua UART ở đây

        if (beatDetected && po->onBeatDetected)
 8000f1e:	7cfb      	ldrb	r3, [r7, #19]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d008      	beq.n	8000f36 <checkSample+0xde>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d003      	beq.n	8000f36 <checkSample+0xde>
        {
            po->onBeatDetected();
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000f34:	4798      	blx	r3
    while (MAX30100_GetRawValues(&po->hrm, &rawIRValue, &rawRedValue))
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	3358      	adds	r3, #88	@ 0x58
 8000f3a:	f107 020e 	add.w	r2, r7, #14
 8000f3e:	f107 0110 	add.w	r1, r7, #16
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff fc55 	bl	80007f2 <MAX30100_GetRawValues>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d189      	bne.n	8000e62 <checkSample+0xa>
        }
    }
}
 8000f4e:	bf00      	nop
 8000f50:	bf00      	nop
 8000f52:	3724      	adds	r7, #36	@ 0x24
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd90      	pop	{r4, r7, pc}

08000f58 <checkCurrentBias>:

static void checkCurrentBias(PulseOximeter *po)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	ed2d 8b02 	vpush	{d8}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
    // Điều chỉnh dòng LED đỏ để cân bằng DC giữa IR và RED
    if (HAL_GetTick() - po->tsLastBiasCheck > CURRENT_ADJUSTMENT_PERIOD_MS)
 8000f64:	f001 fe3a 	bl	8002bdc <HAL_GetTick>
 8000f68:	4602      	mov	r2, r0
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	68db      	ldr	r3, [r3, #12]
 8000f6e:	1ad3      	subs	r3, r2, r3
 8000f70:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000f74:	d967      	bls.n	8001046 <checkCurrentBias+0xee>
    {
        bool changed = false;
 8000f76:	2300      	movs	r3, #0
 8000f78:	73fb      	strb	r3, [r7, #15]
        if (DCRemover_GetDCW(&po->irDCRemover) - DCRemover_GetDCW(&po->redDCRemover) > 70000 && po->redLedCurrentIndex < MAX30100_LED_CURR_50MA)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	3328      	adds	r3, #40	@ 0x28
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff fea9 	bl	8000cd6 <DCRemover_GetDCW>
 8000f84:	eeb0 8a40 	vmov.f32	s16, s0
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3330      	adds	r3, #48	@ 0x30
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f7ff fea2 	bl	8000cd6 <DCRemover_GetDCW>
 8000f92:	eef0 7a40 	vmov.f32	s15, s0
 8000f96:	ee78 7a67 	vsub.f32	s15, s16, s15
 8000f9a:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8001054 <checkCurrentBias+0xfc>
 8000f9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fa6:	dd0f      	ble.n	8000fc8 <checkCurrentBias+0x70>
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000fae:	2b0e      	cmp	r3, #14
 8000fb0:	d80a      	bhi.n	8000fc8 <checkCurrentBias+0x70>
        {
            ++po->redLedCurrentIndex;
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000fb8:	3301      	adds	r3, #1
 8000fba:	b2da      	uxtb	r2, r3
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
            changed = true;
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	73fb      	strb	r3, [r7, #15]
 8000fc6:	e025      	b.n	8001014 <checkCurrentBias+0xbc>
        }
        else if (DCRemover_GetDCW(&po->redDCRemover) - DCRemover_GetDCW(&po->irDCRemover) > 70000 && po->redLedCurrentIndex > 0)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3330      	adds	r3, #48	@ 0x30
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f7ff fe82 	bl	8000cd6 <DCRemover_GetDCW>
 8000fd2:	eeb0 8a40 	vmov.f32	s16, s0
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	3328      	adds	r3, #40	@ 0x28
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f7ff fe7b 	bl	8000cd6 <DCRemover_GetDCW>
 8000fe0:	eef0 7a40 	vmov.f32	s15, s0
 8000fe4:	ee78 7a67 	vsub.f32	s15, s16, s15
 8000fe8:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001054 <checkCurrentBias+0xfc>
 8000fec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ff0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ff4:	dd0e      	ble.n	8001014 <checkCurrentBias+0xbc>
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d009      	beq.n	8001014 <checkCurrentBias+0xbc>
        {
            --po->redLedCurrentIndex;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001006:	3b01      	subs	r3, #1
 8001008:	b2da      	uxtb	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
            changed = true;
 8001010:	2301      	movs	r3, #1
 8001012:	73fb      	strb	r3, [r7, #15]
        }

        if (changed)
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d010      	beq.n	800103c <checkCurrentBias+0xe4>
        {
            MAX30100_SetLedsCurrent(&po->hrm, po->irLedCurrent, (LEDCurrent)po->redLedCurrentIndex);
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	f893 1041 	ldrb.w	r1, [r3, #65]	@ 0x41
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800102c:	461a      	mov	r2, r3
 800102e:	f7ff fbbc 	bl	80007aa <MAX30100_SetLedsCurrent>
            po->tsLastCurrentAdjustment = HAL_GetTick();
 8001032:	f001 fdd3 	bl	8002bdc <HAL_GetTick>
 8001036:	4602      	mov	r2, r0
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	611a      	str	r2, [r3, #16]
            // Có thể gửi giá trị qua UART nếu cần debug
        }

        po->tsLastBiasCheck = HAL_GetTick();
 800103c:	f001 fdce 	bl	8002bdc <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	60da      	str	r2, [r3, #12]
    }
}
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	ecbd 8b02 	vpop	{d8}
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	4788b800 	.word	0x4788b800

08001058 <SpO2Calculator_Reset>:
    100, 100, 100, 100, 99, 99, 99, 99, 99, 99, 98, 98, 98, 98,
    98, 97, 97, 97, 97, 97, 97, 96, 96, 96, 96, 96, 96, 95, 95,
    95, 95, 95, 95, 94, 94, 94, 94, 94, 93, 93, 93, 93, 93};

void SpO2Calculator_Reset(SpO2Calculator *calc)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
    calc->samplesRecorded = 0;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2200      	movs	r2, #0
 8001064:	60da      	str	r2, [r3, #12]
    calc->redACValueSqSum = 0;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	f04f 0200 	mov.w	r2, #0
 800106c:	605a      	str	r2, [r3, #4]
    calc->irACValueSqSum = 0;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	f04f 0200 	mov.w	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
    calc->beatsDetectedNum = 0;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	721a      	strb	r2, [r3, #8]
    calc->spO2 = 0;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	741a      	strb	r2, [r3, #16]
}
 8001082:	bf00      	nop
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
	...

08001090 <SpO2Calculator_Update>:

void SpO2Calculator_Update(SpO2Calculator *calc, float irACValue, float redACValue, bool beatDetected)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	ed2d 8b02 	vpush	{d8}
 8001096:	b088      	sub	sp, #32
 8001098:	af00      	add	r7, sp, #0
 800109a:	6178      	str	r0, [r7, #20]
 800109c:	ed87 0a04 	vstr	s0, [r7, #16]
 80010a0:	edc7 0a03 	vstr	s1, [r7, #12]
 80010a4:	460b      	mov	r3, r1
 80010a6:	72fb      	strb	r3, [r7, #11]
    calc->irACValueSqSum += irACValue * irACValue;
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	ed93 7a00 	vldr	s14, [r3]
 80010ae:	edd7 7a04 	vldr	s15, [r7, #16]
 80010b2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80010b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010ba:	697b      	ldr	r3, [r7, #20]
 80010bc:	edc3 7a00 	vstr	s15, [r3]
    calc->redACValueSqSum += redACValue * redACValue;
 80010c0:	697b      	ldr	r3, [r7, #20]
 80010c2:	ed93 7a01 	vldr	s14, [r3, #4]
 80010c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80010ca:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80010ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	edc3 7a01 	vstr	s15, [r3, #4]
    calc->samplesRecorded++;
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	1c5a      	adds	r2, r3, #1
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	60da      	str	r2, [r3, #12]

    if (beatDetected)
 80010e2:	7afb      	ldrb	r3, [r7, #11]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d06b      	beq.n	80011c0 <SpO2Calculator_Update+0x130>
    {
        calc->beatsDetectedNum++;
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	7a1b      	ldrb	r3, [r3, #8]
 80010ec:	3301      	adds	r3, #1
 80010ee:	b2da      	uxtb	r2, r3
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	721a      	strb	r2, [r3, #8]
        if (calc->beatsDetectedNum == CALCULATE_EVERY_N_BEATS)
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	7a1b      	ldrb	r3, [r3, #8]
 80010f8:	2b03      	cmp	r3, #3
 80010fa:	d161      	bne.n	80011c0 <SpO2Calculator_Update+0x130>
        {
            float acSqRatio = 100.0f * logf(calc->redACValueSqSum / calc->samplesRecorded) / logf(calc->irACValueSqSum / calc->samplesRecorded);
 80010fc:	697b      	ldr	r3, [r7, #20]
 80010fe:	ed93 7a01 	vldr	s14, [r3, #4]
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	68db      	ldr	r3, [r3, #12]
 8001106:	ee07 3a90 	vmov	s15, r3
 800110a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800110e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001112:	eeb0 0a66 	vmov.f32	s0, s13
 8001116:	f005 fd53 	bl	8006bc0 <logf>
 800111a:	eef0 7a40 	vmov.f32	s15, s0
 800111e:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 80011cc <SpO2Calculator_Update+0x13c>
 8001122:	ee27 8a87 	vmul.f32	s16, s15, s14
 8001126:	697b      	ldr	r3, [r7, #20]
 8001128:	ed93 7a00 	vldr	s14, [r3]
 800112c:	697b      	ldr	r3, [r7, #20]
 800112e:	68db      	ldr	r3, [r3, #12]
 8001130:	ee07 3a90 	vmov	s15, r3
 8001134:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001138:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800113c:	eeb0 0a66 	vmov.f32	s0, s13
 8001140:	f005 fd3e 	bl	8006bc0 <logf>
 8001144:	eeb0 7a40 	vmov.f32	s14, s0
 8001148:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800114c:	edc7 7a06 	vstr	s15, [r7, #24]
            uint8_t index = 0;
 8001150:	2300      	movs	r3, #0
 8001152:	77fb      	strb	r3, [r7, #31]

            if (acSqRatio > 66)
 8001154:	edd7 7a06 	vldr	s15, [r7, #24]
 8001158:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80011d0 <SpO2Calculator_Update+0x140>
 800115c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001160:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001164:	dd0a      	ble.n	800117c <SpO2Calculator_Update+0xec>
            {
                index = (uint8_t)acSqRatio - 66;
 8001166:	edd7 7a06 	vldr	s15, [r7, #24]
 800116a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800116e:	edc7 7a01 	vstr	s15, [r7, #4]
 8001172:	793b      	ldrb	r3, [r7, #4]
 8001174:	b2db      	uxtb	r3, r3
 8001176:	3b42      	subs	r3, #66	@ 0x42
 8001178:	77fb      	strb	r3, [r7, #31]
 800117a:	e012      	b.n	80011a2 <SpO2Calculator_Update+0x112>
            }
            else if (acSqRatio > 50)
 800117c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001180:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80011d4 <SpO2Calculator_Update+0x144>
 8001184:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800118c:	dd09      	ble.n	80011a2 <SpO2Calculator_Update+0x112>
            {
                index = (uint8_t)acSqRatio - 50;
 800118e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001192:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001196:	edc7 7a01 	vstr	s15, [r7, #4]
 800119a:	793b      	ldrb	r3, [r7, #4]
 800119c:	b2db      	uxtb	r3, r3
 800119e:	3b32      	subs	r3, #50	@ 0x32
 80011a0:	77fb      	strb	r3, [r7, #31]
            }
            // Reset sau mỗi lần tính toán
            SpO2Calculator_Reset(calc);
 80011a2:	6978      	ldr	r0, [r7, #20]
 80011a4:	f7ff ff58 	bl	8001058 <SpO2Calculator_Reset>

            if (index < 43)
 80011a8:	7ffb      	ldrb	r3, [r7, #31]
 80011aa:	2b2a      	cmp	r3, #42	@ 0x2a
 80011ac:	d805      	bhi.n	80011ba <SpO2Calculator_Update+0x12a>
            {
                calc->spO2 = SpO2Calculator_spO2LUT[index];
 80011ae:	7ffb      	ldrb	r3, [r7, #31]
 80011b0:	4a09      	ldr	r2, [pc, #36]	@ (80011d8 <SpO2Calculator_Update+0x148>)
 80011b2:	5cd2      	ldrb	r2, [r2, r3]
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	741a      	strb	r2, [r3, #16]
            {
                calc->spO2 = SpO2Calculator_spO2LUT[42];
            }
        }
    }
}
 80011b8:	e002      	b.n	80011c0 <SpO2Calculator_Update+0x130>
                calc->spO2 = SpO2Calculator_spO2LUT[42];
 80011ba:	225d      	movs	r2, #93	@ 0x5d
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	741a      	strb	r2, [r3, #16]
}
 80011c0:	bf00      	nop
 80011c2:	3720      	adds	r7, #32
 80011c4:	46bd      	mov	sp, r7
 80011c6:	ecbd 8b02 	vpop	{d8}
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	42c80000 	.word	0x42c80000
 80011d0:	42840000 	.word	0x42840000
 80011d4:	42480000 	.word	0x42480000
 80011d8:	08007068 	.word	0x08007068

080011dc <SpO2Calculator_GetSpO2>:

uint8_t SpO2Calculator_GetSpO2(SpO2Calculator *calc)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
    return calc->spO2;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	7c1b      	ldrb	r3, [r3, #16]
 80011e8:	4618      	mov	r0, r3
 80011ea:	370c      	adds	r7, #12
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr

080011f4 <setCalibrationMatrix>:
#include "calibrate.h"

int setCalibrationMatrix( POINT_T * displayPtr,
						  POINT_T * screenPtr,
                          MATRIX * matrixPtr)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b087      	sub	sp, #28
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	60f8      	str	r0, [r7, #12]
 80011fc:	60b9      	str	r1, [r7, #8]
 80011fe:	607a      	str	r2, [r7, #4]

    int  retValue = OK ;
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]



    matrixPtr->Divider = ((screenPtr[0].x - screenPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) -
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	3310      	adds	r3, #16
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	1ad3      	subs	r3, r2, r3
 8001210:	68ba      	ldr	r2, [r7, #8]
 8001212:	3208      	adds	r2, #8
 8001214:	6851      	ldr	r1, [r2, #4]
 8001216:	68ba      	ldr	r2, [r7, #8]
 8001218:	3210      	adds	r2, #16
 800121a:	6852      	ldr	r2, [r2, #4]
 800121c:	1a8a      	subs	r2, r1, r2
 800121e:	fb03 f202 	mul.w	r2, r3, r2
                         ((screenPtr[1].x - screenPtr[2].x) * (screenPtr[0].y - screenPtr[2].y)) ;
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	3308      	adds	r3, #8
 8001226:	6819      	ldr	r1, [r3, #0]
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	3310      	adds	r3, #16
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	1acb      	subs	r3, r1, r3
 8001230:	68b9      	ldr	r1, [r7, #8]
 8001232:	6848      	ldr	r0, [r1, #4]
 8001234:	68b9      	ldr	r1, [r7, #8]
 8001236:	3110      	adds	r1, #16
 8001238:	6849      	ldr	r1, [r1, #4]
 800123a:	1a41      	subs	r1, r0, r1
 800123c:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->Divider = ((screenPtr[0].x - screenPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) -
 8001240:	1ad2      	subs	r2, r2, r3
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	619a      	str	r2, [r3, #24]

    if( matrixPtr->Divider == 0 )
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	699b      	ldr	r3, [r3, #24]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d103      	bne.n	8001256 <setCalibrationMatrix+0x62>
    {
        retValue = NOT_OK ;
 800124e:	f04f 33ff 	mov.w	r3, #4294967295
 8001252:	617b      	str	r3, [r7, #20]
 8001254:	e105      	b.n	8001462 <setCalibrationMatrix+0x26e>
    }
    else
    {
        matrixPtr->An = ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) -
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	681a      	ldr	r2, [r3, #0]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	3310      	adds	r3, #16
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	68ba      	ldr	r2, [r7, #8]
 8001264:	3208      	adds	r2, #8
 8001266:	6851      	ldr	r1, [r2, #4]
 8001268:	68ba      	ldr	r2, [r7, #8]
 800126a:	3210      	adds	r2, #16
 800126c:	6852      	ldr	r2, [r2, #4]
 800126e:	1a8a      	subs	r2, r1, r2
 8001270:	fb03 f202 	mul.w	r2, r3, r2
                        ((displayPtr[1].x - displayPtr[2].x) * (screenPtr[0].y - screenPtr[2].y)) ;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	3308      	adds	r3, #8
 8001278:	6819      	ldr	r1, [r3, #0]
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	3310      	adds	r3, #16
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	1acb      	subs	r3, r1, r3
 8001282:	68b9      	ldr	r1, [r7, #8]
 8001284:	6848      	ldr	r0, [r1, #4]
 8001286:	68b9      	ldr	r1, [r7, #8]
 8001288:	3110      	adds	r1, #16
 800128a:	6849      	ldr	r1, [r1, #4]
 800128c:	1a41      	subs	r1, r0, r1
 800128e:	fb01 f303 	mul.w	r3, r1, r3
        matrixPtr->An = ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) -
 8001292:	1ad2      	subs	r2, r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	601a      	str	r2, [r3, #0]

        matrixPtr->Bn = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].x - displayPtr[2].x)) -
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	3310      	adds	r3, #16
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	68fa      	ldr	r2, [r7, #12]
 80012a6:	3208      	adds	r2, #8
 80012a8:	6811      	ldr	r1, [r2, #0]
 80012aa:	68fa      	ldr	r2, [r7, #12]
 80012ac:	3210      	adds	r2, #16
 80012ae:	6812      	ldr	r2, [r2, #0]
 80012b0:	1a8a      	subs	r2, r1, r2
 80012b2:	fb03 f202 	mul.w	r2, r3, r2
                        ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].x - screenPtr[2].x)) ;
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	6819      	ldr	r1, [r3, #0]
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	3310      	adds	r3, #16
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	1acb      	subs	r3, r1, r3
 80012c2:	68b9      	ldr	r1, [r7, #8]
 80012c4:	3108      	adds	r1, #8
 80012c6:	6808      	ldr	r0, [r1, #0]
 80012c8:	68b9      	ldr	r1, [r7, #8]
 80012ca:	3110      	adds	r1, #16
 80012cc:	6809      	ldr	r1, [r1, #0]
 80012ce:	1a41      	subs	r1, r0, r1
 80012d0:	fb01 f303 	mul.w	r3, r1, r3
        matrixPtr->Bn = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].x - displayPtr[2].x)) -
 80012d4:	1ad2      	subs	r2, r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	605a      	str	r2, [r3, #4]

        matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
 80012da:	68bb      	ldr	r3, [r7, #8]
 80012dc:	3310      	adds	r3, #16
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	68fa      	ldr	r2, [r7, #12]
 80012e2:	3208      	adds	r2, #8
 80012e4:	6812      	ldr	r2, [r2, #0]
 80012e6:	fb03 f202 	mul.w	r2, r3, r2
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	3308      	adds	r3, #8
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	68f9      	ldr	r1, [r7, #12]
 80012f2:	3110      	adds	r1, #16
 80012f4:	6809      	ldr	r1, [r1, #0]
 80012f6:	fb01 f303 	mul.w	r3, r1, r3
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	68ba      	ldr	r2, [r7, #8]
 80012fe:	6852      	ldr	r2, [r2, #4]
 8001300:	fb03 f202 	mul.w	r2, r3, r2
                        (screenPtr[0].x * displayPtr[2].x - screenPtr[2].x * displayPtr[0].x) * screenPtr[1].y +
 8001304:	68bb      	ldr	r3, [r7, #8]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	68f9      	ldr	r1, [r7, #12]
 800130a:	3110      	adds	r1, #16
 800130c:	6809      	ldr	r1, [r1, #0]
 800130e:	fb03 f101 	mul.w	r1, r3, r1
 8001312:	68bb      	ldr	r3, [r7, #8]
 8001314:	3310      	adds	r3, #16
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	68f8      	ldr	r0, [r7, #12]
 800131a:	6800      	ldr	r0, [r0, #0]
 800131c:	fb00 f303 	mul.w	r3, r0, r3
 8001320:	1acb      	subs	r3, r1, r3
 8001322:	68b9      	ldr	r1, [r7, #8]
 8001324:	3108      	adds	r1, #8
 8001326:	6849      	ldr	r1, [r1, #4]
 8001328:	fb01 f303 	mul.w	r3, r1, r3
        matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
 800132c:	441a      	add	r2, r3
                        (screenPtr[1].x * displayPtr[0].x - screenPtr[0].x * displayPtr[1].x) * screenPtr[2].y ;
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	3308      	adds	r3, #8
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	68f9      	ldr	r1, [r7, #12]
 8001336:	6809      	ldr	r1, [r1, #0]
 8001338:	fb03 f101 	mul.w	r1, r3, r1
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	68f8      	ldr	r0, [r7, #12]
 8001342:	3008      	adds	r0, #8
 8001344:	6800      	ldr	r0, [r0, #0]
 8001346:	fb00 f303 	mul.w	r3, r0, r3
 800134a:	1acb      	subs	r3, r1, r3
 800134c:	68b9      	ldr	r1, [r7, #8]
 800134e:	3110      	adds	r1, #16
 8001350:	6849      	ldr	r1, [r1, #4]
 8001352:	fb01 f303 	mul.w	r3, r1, r3
                        (screenPtr[0].x * displayPtr[2].x - screenPtr[2].x * displayPtr[0].x) * screenPtr[1].y +
 8001356:	441a      	add	r2, r3
        matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	609a      	str	r2, [r3, #8]

        matrixPtr->Dn = ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].y - screenPtr[2].y)) -
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	685a      	ldr	r2, [r3, #4]
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	3310      	adds	r3, #16
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	68ba      	ldr	r2, [r7, #8]
 800136a:	3208      	adds	r2, #8
 800136c:	6851      	ldr	r1, [r2, #4]
 800136e:	68ba      	ldr	r2, [r7, #8]
 8001370:	3210      	adds	r2, #16
 8001372:	6852      	ldr	r2, [r2, #4]
 8001374:	1a8a      	subs	r2, r1, r2
 8001376:	fb03 f202 	mul.w	r2, r3, r2
                        ((displayPtr[1].y - displayPtr[2].y) * (screenPtr[0].y - screenPtr[2].y)) ;
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	3308      	adds	r3, #8
 800137e:	6859      	ldr	r1, [r3, #4]
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	3310      	adds	r3, #16
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	1acb      	subs	r3, r1, r3
 8001388:	68b9      	ldr	r1, [r7, #8]
 800138a:	6848      	ldr	r0, [r1, #4]
 800138c:	68b9      	ldr	r1, [r7, #8]
 800138e:	3110      	adds	r1, #16
 8001390:	6849      	ldr	r1, [r1, #4]
 8001392:	1a41      	subs	r1, r0, r1
 8001394:	fb01 f303 	mul.w	r3, r1, r3
        matrixPtr->Dn = ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].y - screenPtr[2].y)) -
 8001398:	1ad2      	subs	r2, r2, r3
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	60da      	str	r2, [r3, #12]

        matrixPtr->En = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].y - displayPtr[2].y)) -
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	3310      	adds	r3, #16
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	68fa      	ldr	r2, [r7, #12]
 80013ac:	3208      	adds	r2, #8
 80013ae:	6851      	ldr	r1, [r2, #4]
 80013b0:	68fa      	ldr	r2, [r7, #12]
 80013b2:	3210      	adds	r2, #16
 80013b4:	6852      	ldr	r2, [r2, #4]
 80013b6:	1a8a      	subs	r2, r1, r2
 80013b8:	fb03 f202 	mul.w	r2, r3, r2
                        ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].x - screenPtr[2].x)) ;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	6859      	ldr	r1, [r3, #4]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	3310      	adds	r3, #16
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	1acb      	subs	r3, r1, r3
 80013c8:	68b9      	ldr	r1, [r7, #8]
 80013ca:	3108      	adds	r1, #8
 80013cc:	6808      	ldr	r0, [r1, #0]
 80013ce:	68b9      	ldr	r1, [r7, #8]
 80013d0:	3110      	adds	r1, #16
 80013d2:	6809      	ldr	r1, [r1, #0]
 80013d4:	1a41      	subs	r1, r0, r1
 80013d6:	fb01 f303 	mul.w	r3, r1, r3
        matrixPtr->En = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].y - displayPtr[2].y)) -
 80013da:	1ad2      	subs	r2, r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	611a      	str	r2, [r3, #16]

        matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	3310      	adds	r3, #16
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	3208      	adds	r2, #8
 80013ea:	6852      	ldr	r2, [r2, #4]
 80013ec:	fb03 f202 	mul.w	r2, r3, r2
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	3308      	adds	r3, #8
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	68f9      	ldr	r1, [r7, #12]
 80013f8:	3110      	adds	r1, #16
 80013fa:	6849      	ldr	r1, [r1, #4]
 80013fc:	fb01 f303 	mul.w	r3, r1, r3
 8001400:	1ad3      	subs	r3, r2, r3
 8001402:	68ba      	ldr	r2, [r7, #8]
 8001404:	6852      	ldr	r2, [r2, #4]
 8001406:	fb03 f202 	mul.w	r2, r3, r2
                        (screenPtr[0].x * displayPtr[2].y - screenPtr[2].x * displayPtr[0].y) * screenPtr[1].y +
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	68f9      	ldr	r1, [r7, #12]
 8001410:	3110      	adds	r1, #16
 8001412:	6849      	ldr	r1, [r1, #4]
 8001414:	fb03 f101 	mul.w	r1, r3, r1
 8001418:	68bb      	ldr	r3, [r7, #8]
 800141a:	3310      	adds	r3, #16
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	68f8      	ldr	r0, [r7, #12]
 8001420:	6840      	ldr	r0, [r0, #4]
 8001422:	fb00 f303 	mul.w	r3, r0, r3
 8001426:	1acb      	subs	r3, r1, r3
 8001428:	68b9      	ldr	r1, [r7, #8]
 800142a:	3108      	adds	r1, #8
 800142c:	6849      	ldr	r1, [r1, #4]
 800142e:	fb01 f303 	mul.w	r3, r1, r3
        matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
 8001432:	441a      	add	r2, r3
                        (screenPtr[1].x * displayPtr[0].y - screenPtr[0].x * displayPtr[1].y) * screenPtr[2].y ;
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	3308      	adds	r3, #8
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	68f9      	ldr	r1, [r7, #12]
 800143c:	6849      	ldr	r1, [r1, #4]
 800143e:	fb03 f101 	mul.w	r1, r3, r1
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	68f8      	ldr	r0, [r7, #12]
 8001448:	3008      	adds	r0, #8
 800144a:	6840      	ldr	r0, [r0, #4]
 800144c:	fb00 f303 	mul.w	r3, r0, r3
 8001450:	1acb      	subs	r3, r1, r3
 8001452:	68b9      	ldr	r1, [r7, #8]
 8001454:	3110      	adds	r1, #16
 8001456:	6849      	ldr	r1, [r1, #4]
 8001458:	fb01 f303 	mul.w	r3, r1, r3
                        (screenPtr[0].x * displayPtr[2].y - screenPtr[2].x * displayPtr[0].y) * screenPtr[1].y +
 800145c:	441a      	add	r2, r3
        matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	615a      	str	r2, [r3, #20]
    }

    return( retValue ) ;
 8001462:	697b      	ldr	r3, [r7, #20]

} /* end of setCalibrationMatrix() */
 8001464:	4618      	mov	r0, r3
 8001466:	371c      	adds	r7, #28
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <lcdInit>:
                                bool colorOrder,
                                bool horizontalRefreshOrder);


void lcdInit(void)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b082      	sub	sp, #8
 8001474:	af02      	add	r7, sp, #8
  lcdPortraitConfig = lcdBuildMemoryAccessControlConfig(
 8001476:	2300      	movs	r3, #0
 8001478:	9301      	str	r3, [sp, #4]
 800147a:	2301      	movs	r3, #1
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	2300      	movs	r3, #0
 8001480:	2200      	movs	r2, #0
 8001482:	2101      	movs	r1, #1
 8001484:	2000      	movs	r0, #0
 8001486:	f000 fc0b 	bl	8001ca0 <lcdBuildMemoryAccessControlConfig>
 800148a:	4603      	mov	r3, r0
 800148c:	461a      	mov	r2, r3
 800148e:	4bae      	ldr	r3, [pc, #696]	@ (8001748 <lcdInit+0x2d8>)
 8001490:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlNormalOrder,		// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeConfig = lcdBuildMemoryAccessControlConfig(
 8001492:	2300      	movs	r3, #0
 8001494:	9301      	str	r3, [sp, #4]
 8001496:	2301      	movs	r3, #1
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	2300      	movs	r3, #0
 800149c:	2201      	movs	r2, #1
 800149e:	2100      	movs	r1, #0
 80014a0:	2000      	movs	r0, #0
 80014a2:	f000 fbfd 	bl	8001ca0 <lcdBuildMemoryAccessControlConfig>
 80014a6:	4603      	mov	r3, r0
 80014a8:	461a      	mov	r2, r3
 80014aa:	4ba8      	ldr	r3, [pc, #672]	@ (800174c <lcdInit+0x2dc>)
 80014ac:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdPortraitMirrorConfig = lcdBuildMemoryAccessControlConfig(
 80014ae:	2300      	movs	r3, #0
 80014b0:	9301      	str	r3, [sp, #4]
 80014b2:	2301      	movs	r3, #1
 80014b4:	9300      	str	r3, [sp, #0]
 80014b6:	2300      	movs	r3, #0
 80014b8:	2200      	movs	r2, #0
 80014ba:	2100      	movs	r1, #0
 80014bc:	2001      	movs	r0, #1
 80014be:	f000 fbef 	bl	8001ca0 <lcdBuildMemoryAccessControlConfig>
 80014c2:	4603      	mov	r3, r0
 80014c4:	461a      	mov	r2, r3
 80014c6:	4ba2      	ldr	r3, [pc, #648]	@ (8001750 <lcdInit+0x2e0>)
 80014c8:	701a      	strb	r2, [r3, #0]
		                                            MemoryAccessControlNormalOrder,		// rowColumnExchange
		                                            MemoryAccessControlNormalOrder,		// verticalRefreshOrder
		                                            MemoryAccessControlColorOrderBGR,	// colorOrder
		                                            MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeMirrorConfig = lcdBuildMemoryAccessControlConfig(
 80014ca:	2300      	movs	r3, #0
 80014cc:	9301      	str	r3, [sp, #4]
 80014ce:	2301      	movs	r3, #1
 80014d0:	9300      	str	r3, [sp, #0]
 80014d2:	2300      	movs	r3, #0
 80014d4:	2201      	movs	r2, #1
 80014d6:	2101      	movs	r1, #1
 80014d8:	2001      	movs	r0, #1
 80014da:	f000 fbe1 	bl	8001ca0 <lcdBuildMemoryAccessControlConfig>
 80014de:	4603      	mov	r3, r0
 80014e0:	461a      	mov	r2, r3
 80014e2:	4b9c      	ldr	r3, [pc, #624]	@ (8001754 <lcdInit+0x2e4>)
 80014e4:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdReset();
 80014e6:	f000 fbb1 	bl	8001c4c <lcdReset>

  lcdWriteCommand(ILI9341_DISPLAYOFF);
 80014ea:	2028      	movs	r0, #40	@ 0x28
 80014ec:	f000 fbb8 	bl	8001c60 <lcdWriteCommand>

  lcdWriteCommand(0xCF);
 80014f0:	20cf      	movs	r0, #207	@ 0xcf
 80014f2:	f000 fbb5 	bl	8001c60 <lcdWriteCommand>
  lcdWriteData(0x00);
 80014f6:	2000      	movs	r0, #0
 80014f8:	f000 fbc2 	bl	8001c80 <lcdWriteData>
  lcdWriteData(0x83);
 80014fc:	2083      	movs	r0, #131	@ 0x83
 80014fe:	f000 fbbf 	bl	8001c80 <lcdWriteData>
  lcdWriteData(0x30);
 8001502:	2030      	movs	r0, #48	@ 0x30
 8001504:	f000 fbbc 	bl	8001c80 <lcdWriteData>

  lcdWriteCommand(0xED);
 8001508:	20ed      	movs	r0, #237	@ 0xed
 800150a:	f000 fba9 	bl	8001c60 <lcdWriteCommand>
  lcdWriteData(0x64);
 800150e:	2064      	movs	r0, #100	@ 0x64
 8001510:	f000 fbb6 	bl	8001c80 <lcdWriteData>
  lcdWriteData(0x03);
 8001514:	2003      	movs	r0, #3
 8001516:	f000 fbb3 	bl	8001c80 <lcdWriteData>
  lcdWriteData(0x12);
 800151a:	2012      	movs	r0, #18
 800151c:	f000 fbb0 	bl	8001c80 <lcdWriteData>
  lcdWriteData(0x81);
 8001520:	2081      	movs	r0, #129	@ 0x81
 8001522:	f000 fbad 	bl	8001c80 <lcdWriteData>

  lcdWriteCommand(0xE8);
 8001526:	20e8      	movs	r0, #232	@ 0xe8
 8001528:	f000 fb9a 	bl	8001c60 <lcdWriteCommand>
  lcdWriteData(0x85);
 800152c:	2085      	movs	r0, #133	@ 0x85
 800152e:	f000 fba7 	bl	8001c80 <lcdWriteData>
  lcdWriteData(0x01);
 8001532:	2001      	movs	r0, #1
 8001534:	f000 fba4 	bl	8001c80 <lcdWriteData>
  lcdWriteData(0x79);
 8001538:	2079      	movs	r0, #121	@ 0x79
 800153a:	f000 fba1 	bl	8001c80 <lcdWriteData>

  lcdWriteCommand(0xCB);
 800153e:	20cb      	movs	r0, #203	@ 0xcb
 8001540:	f000 fb8e 	bl	8001c60 <lcdWriteCommand>
  lcdWriteData(0x39);
 8001544:	2039      	movs	r0, #57	@ 0x39
 8001546:	f000 fb9b 	bl	8001c80 <lcdWriteData>
  lcdWriteData(0x2C);
 800154a:	202c      	movs	r0, #44	@ 0x2c
 800154c:	f000 fb98 	bl	8001c80 <lcdWriteData>
  lcdWriteData(0x00);
 8001550:	2000      	movs	r0, #0
 8001552:	f000 fb95 	bl	8001c80 <lcdWriteData>
  lcdWriteData(0x34);
 8001556:	2034      	movs	r0, #52	@ 0x34
 8001558:	f000 fb92 	bl	8001c80 <lcdWriteData>
  lcdWriteData(0x02);
 800155c:	2002      	movs	r0, #2
 800155e:	f000 fb8f 	bl	8001c80 <lcdWriteData>

  lcdWriteCommand(0xF7);
 8001562:	20f7      	movs	r0, #247	@ 0xf7
 8001564:	f000 fb7c 	bl	8001c60 <lcdWriteCommand>
  lcdWriteData(0x20);
 8001568:	2020      	movs	r0, #32
 800156a:	f000 fb89 	bl	8001c80 <lcdWriteData>

  lcdWriteCommand(0xEA);
 800156e:	20ea      	movs	r0, #234	@ 0xea
 8001570:	f000 fb76 	bl	8001c60 <lcdWriteCommand>
  lcdWriteData(0x00);
 8001574:	2000      	movs	r0, #0
 8001576:	f000 fb83 	bl	8001c80 <lcdWriteData>
  lcdWriteData(0x00);
 800157a:	2000      	movs	r0, #0
 800157c:	f000 fb80 	bl	8001c80 <lcdWriteData>

  lcdWriteCommand(ILI9341_POWERCONTROL1);
 8001580:	20c0      	movs	r0, #192	@ 0xc0
 8001582:	f000 fb6d 	bl	8001c60 <lcdWriteCommand>
  lcdWriteData(0x26);
 8001586:	2026      	movs	r0, #38	@ 0x26
 8001588:	f000 fb7a 	bl	8001c80 <lcdWriteData>

  lcdWriteCommand(ILI9341_POWERCONTROL2);
 800158c:	20c1      	movs	r0, #193	@ 0xc1
 800158e:	f000 fb67 	bl	8001c60 <lcdWriteCommand>
  lcdWriteData(0x11);
 8001592:	2011      	movs	r0, #17
 8001594:	f000 fb74 	bl	8001c80 <lcdWriteData>

  lcdWriteCommand(ILI9341_VCOMCONTROL1);
 8001598:	20c5      	movs	r0, #197	@ 0xc5
 800159a:	f000 fb61 	bl	8001c60 <lcdWriteCommand>
  lcdWriteData(0x35);
 800159e:	2035      	movs	r0, #53	@ 0x35
 80015a0:	f000 fb6e 	bl	8001c80 <lcdWriteData>
  lcdWriteData(0x3E);
 80015a4:	203e      	movs	r0, #62	@ 0x3e
 80015a6:	f000 fb6b 	bl	8001c80 <lcdWriteData>

  lcdWriteCommand(ILI9341_VCOMCONTROL2);
 80015aa:	20c7      	movs	r0, #199	@ 0xc7
 80015ac:	f000 fb58 	bl	8001c60 <lcdWriteCommand>
  lcdWriteData(0xBE);
 80015b0:	20be      	movs	r0, #190	@ 0xbe
 80015b2:	f000 fb65 	bl	8001c80 <lcdWriteData>

  lcdWriteCommand(ILI9341_MEMCONTROL);
 80015b6:	2036      	movs	r0, #54	@ 0x36
 80015b8:	f000 fb52 	bl	8001c60 <lcdWriteCommand>
  lcdWriteData(lcdPortraitConfig);
 80015bc:	4b62      	ldr	r3, [pc, #392]	@ (8001748 <lcdInit+0x2d8>)
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	4618      	mov	r0, r3
 80015c2:	f000 fb5d 	bl	8001c80 <lcdWriteData>

  lcdWriteCommand(ILI9341_PIXELFORMAT);
 80015c6:	203a      	movs	r0, #58	@ 0x3a
 80015c8:	f000 fb4a 	bl	8001c60 <lcdWriteCommand>
  lcdWriteData(0x55);
 80015cc:	2055      	movs	r0, #85	@ 0x55
 80015ce:	f000 fb57 	bl	8001c80 <lcdWriteData>

  lcdWriteCommand(ILI9341_FRAMECONTROLNORMAL);
 80015d2:	20b1      	movs	r0, #177	@ 0xb1
 80015d4:	f000 fb44 	bl	8001c60 <lcdWriteCommand>
  lcdWriteData(0x00);
 80015d8:	2000      	movs	r0, #0
 80015da:	f000 fb51 	bl	8001c80 <lcdWriteData>
  lcdWriteData(0x1B);
 80015de:	201b      	movs	r0, #27
 80015e0:	f000 fb4e 	bl	8001c80 <lcdWriteData>

  lcdWriteCommand(0xF2);
 80015e4:	20f2      	movs	r0, #242	@ 0xf2
 80015e6:	f000 fb3b 	bl	8001c60 <lcdWriteCommand>
  lcdWriteData(0x08);
 80015ea:	2008      	movs	r0, #8
 80015ec:	f000 fb48 	bl	8001c80 <lcdWriteData>

  lcdWriteCommand(ILI9341_GAMMASET);
 80015f0:	2026      	movs	r0, #38	@ 0x26
 80015f2:	f000 fb35 	bl	8001c60 <lcdWriteCommand>
  lcdWriteData(0x01);
 80015f6:	2001      	movs	r0, #1
 80015f8:	f000 fb42 	bl	8001c80 <lcdWriteData>

  lcdWriteCommand(ILI9341_POSITIVEGAMMCORR);
 80015fc:	20e0      	movs	r0, #224	@ 0xe0
 80015fe:	f000 fb2f 	bl	8001c60 <lcdWriteCommand>
  lcdWriteData(0x1F);
 8001602:	201f      	movs	r0, #31
 8001604:	f000 fb3c 	bl	8001c80 <lcdWriteData>
  lcdWriteData(0x1A);
 8001608:	201a      	movs	r0, #26
 800160a:	f000 fb39 	bl	8001c80 <lcdWriteData>
  lcdWriteData(0x18);
 800160e:	2018      	movs	r0, #24
 8001610:	f000 fb36 	bl	8001c80 <lcdWriteData>
  lcdWriteData(0x0A);
 8001614:	200a      	movs	r0, #10
 8001616:	f000 fb33 	bl	8001c80 <lcdWriteData>
  lcdWriteData(0x0F);
 800161a:	200f      	movs	r0, #15
 800161c:	f000 fb30 	bl	8001c80 <lcdWriteData>
  lcdWriteData(0x06);
 8001620:	2006      	movs	r0, #6
 8001622:	f000 fb2d 	bl	8001c80 <lcdWriteData>
  lcdWriteData(0x45);
 8001626:	2045      	movs	r0, #69	@ 0x45
 8001628:	f000 fb2a 	bl	8001c80 <lcdWriteData>
  lcdWriteData(0x87);
 800162c:	2087      	movs	r0, #135	@ 0x87
 800162e:	f000 fb27 	bl	8001c80 <lcdWriteData>
  lcdWriteData(0x32);
 8001632:	2032      	movs	r0, #50	@ 0x32
 8001634:	f000 fb24 	bl	8001c80 <lcdWriteData>
  lcdWriteData(0x0A);
 8001638:	200a      	movs	r0, #10
 800163a:	f000 fb21 	bl	8001c80 <lcdWriteData>
  lcdWriteData(0x07);
 800163e:	2007      	movs	r0, #7
 8001640:	f000 fb1e 	bl	8001c80 <lcdWriteData>
  lcdWriteData(0x02);
 8001644:	2002      	movs	r0, #2
 8001646:	f000 fb1b 	bl	8001c80 <lcdWriteData>
  lcdWriteData(0x07);
 800164a:	2007      	movs	r0, #7
 800164c:	f000 fb18 	bl	8001c80 <lcdWriteData>
  lcdWriteData(0x05);
 8001650:	2005      	movs	r0, #5
 8001652:	f000 fb15 	bl	8001c80 <lcdWriteData>
  lcdWriteData(0x00);
 8001656:	2000      	movs	r0, #0
 8001658:	f000 fb12 	bl	8001c80 <lcdWriteData>

  lcdWriteCommand(ILI9341_NEGATIVEGAMMCORR);
 800165c:	20e1      	movs	r0, #225	@ 0xe1
 800165e:	f000 faff 	bl	8001c60 <lcdWriteCommand>
  lcdWriteData(0x00);
 8001662:	2000      	movs	r0, #0
 8001664:	f000 fb0c 	bl	8001c80 <lcdWriteData>
  lcdWriteData(0x25);
 8001668:	2025      	movs	r0, #37	@ 0x25
 800166a:	f000 fb09 	bl	8001c80 <lcdWriteData>
  lcdWriteData(0x27);
 800166e:	2027      	movs	r0, #39	@ 0x27
 8001670:	f000 fb06 	bl	8001c80 <lcdWriteData>
  lcdWriteData(0x05);
 8001674:	2005      	movs	r0, #5
 8001676:	f000 fb03 	bl	8001c80 <lcdWriteData>
  lcdWriteData(0x10);
 800167a:	2010      	movs	r0, #16
 800167c:	f000 fb00 	bl	8001c80 <lcdWriteData>
  lcdWriteData(0x09);
 8001680:	2009      	movs	r0, #9
 8001682:	f000 fafd 	bl	8001c80 <lcdWriteData>
  lcdWriteData(0x3A);
 8001686:	203a      	movs	r0, #58	@ 0x3a
 8001688:	f000 fafa 	bl	8001c80 <lcdWriteData>
  lcdWriteData(0x78);
 800168c:	2078      	movs	r0, #120	@ 0x78
 800168e:	f000 faf7 	bl	8001c80 <lcdWriteData>
  lcdWriteData(0x4D);
 8001692:	204d      	movs	r0, #77	@ 0x4d
 8001694:	f000 faf4 	bl	8001c80 <lcdWriteData>
  lcdWriteData(0x05);
 8001698:	2005      	movs	r0, #5
 800169a:	f000 faf1 	bl	8001c80 <lcdWriteData>
  lcdWriteData(0x18);
 800169e:	2018      	movs	r0, #24
 80016a0:	f000 faee 	bl	8001c80 <lcdWriteData>
  lcdWriteData(0x0D);
 80016a4:	200d      	movs	r0, #13
 80016a6:	f000 faeb 	bl	8001c80 <lcdWriteData>
  lcdWriteData(0x38);
 80016aa:	2038      	movs	r0, #56	@ 0x38
 80016ac:	f000 fae8 	bl	8001c80 <lcdWriteData>
  lcdWriteData(0x3A);
 80016b0:	203a      	movs	r0, #58	@ 0x3a
 80016b2:	f000 fae5 	bl	8001c80 <lcdWriteData>
  lcdWriteData(0x1F);
 80016b6:	201f      	movs	r0, #31
 80016b8:	f000 fae2 	bl	8001c80 <lcdWriteData>

  lcdWriteCommand(ILI9341_COLADDRSET);
 80016bc:	202a      	movs	r0, #42	@ 0x2a
 80016be:	f000 facf 	bl	8001c60 <lcdWriteCommand>
  lcdWriteData(0x00);
 80016c2:	2000      	movs	r0, #0
 80016c4:	f000 fadc 	bl	8001c80 <lcdWriteData>
  lcdWriteData(0x00);
 80016c8:	2000      	movs	r0, #0
 80016ca:	f000 fad9 	bl	8001c80 <lcdWriteData>
  lcdWriteData(0x00);
 80016ce:	2000      	movs	r0, #0
 80016d0:	f000 fad6 	bl	8001c80 <lcdWriteData>
  lcdWriteData(0xEF);
 80016d4:	20ef      	movs	r0, #239	@ 0xef
 80016d6:	f000 fad3 	bl	8001c80 <lcdWriteData>

  lcdWriteCommand(ILI9341_PAGEADDRSET);
 80016da:	202b      	movs	r0, #43	@ 0x2b
 80016dc:	f000 fac0 	bl	8001c60 <lcdWriteCommand>
  lcdWriteData(0x00);
 80016e0:	2000      	movs	r0, #0
 80016e2:	f000 facd 	bl	8001c80 <lcdWriteData>
  lcdWriteData(0x00);
 80016e6:	2000      	movs	r0, #0
 80016e8:	f000 faca 	bl	8001c80 <lcdWriteData>
  lcdWriteData(0x01);
 80016ec:	2001      	movs	r0, #1
 80016ee:	f000 fac7 	bl	8001c80 <lcdWriteData>
  lcdWriteData(0x3F);
 80016f2:	203f      	movs	r0, #63	@ 0x3f
 80016f4:	f000 fac4 	bl	8001c80 <lcdWriteData>

  lcdWriteCommand(ILI9341_ENTRYMODE);
 80016f8:	20b7      	movs	r0, #183	@ 0xb7
 80016fa:	f000 fab1 	bl	8001c60 <lcdWriteCommand>
  lcdWriteData(0x07);
 80016fe:	2007      	movs	r0, #7
 8001700:	f000 fabe 	bl	8001c80 <lcdWriteData>

  lcdWriteCommand(ILI9341_DISPLAYFUNC);
 8001704:	20b6      	movs	r0, #182	@ 0xb6
 8001706:	f000 faab 	bl	8001c60 <lcdWriteCommand>
  lcdWriteData(0x0A);
 800170a:	200a      	movs	r0, #10
 800170c:	f000 fab8 	bl	8001c80 <lcdWriteData>
  lcdWriteData(0x82);
 8001710:	2082      	movs	r0, #130	@ 0x82
 8001712:	f000 fab5 	bl	8001c80 <lcdWriteData>
  lcdWriteData(0x27);
 8001716:	2027      	movs	r0, #39	@ 0x27
 8001718:	f000 fab2 	bl	8001c80 <lcdWriteData>
  lcdWriteData(0x00);
 800171c:	2000      	movs	r0, #0
 800171e:	f000 faaf 	bl	8001c80 <lcdWriteData>

  lcdWriteCommand(ILI9341_SLEEPOUT);
 8001722:	2011      	movs	r0, #17
 8001724:	f000 fa9c 	bl	8001c60 <lcdWriteCommand>
  HAL_Delay(100);
 8001728:	2064      	movs	r0, #100	@ 0x64
 800172a:	f001 fa63 	bl	8002bf4 <HAL_Delay>
  lcdWriteCommand(ILI9341_DISPLAYON);
 800172e:	2029      	movs	r0, #41	@ 0x29
 8001730:	f000 fa96 	bl	8001c60 <lcdWriteCommand>
  HAL_Delay(100);
 8001734:	2064      	movs	r0, #100	@ 0x64
 8001736:	f001 fa5d 	bl	8002bf4 <HAL_Delay>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 800173a:	202c      	movs	r0, #44	@ 0x2c
 800173c:	f000 fa90 	bl	8001c60 <lcdWriteCommand>
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	200000a4 	.word	0x200000a4
 800174c:	200000a5 	.word	0x200000a5
 8001750:	200000a6 	.word	0x200000a6
 8001754:	200000a7 	.word	0x200000a7

08001758 <lcdFillRGB>:
		}
	}
}

void lcdFillRGB(uint16_t color)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	4603      	mov	r3, r0
 8001760:	80fb      	strh	r3, [r7, #6]
  lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 8001762:	4b11      	ldr	r3, [pc, #68]	@ (80017a8 <lcdFillRGB+0x50>)
 8001764:	881b      	ldrh	r3, [r3, #0]
 8001766:	3b01      	subs	r3, #1
 8001768:	b29a      	uxth	r2, r3
 800176a:	4b0f      	ldr	r3, [pc, #60]	@ (80017a8 <lcdFillRGB+0x50>)
 800176c:	885b      	ldrh	r3, [r3, #2]
 800176e:	3b01      	subs	r3, #1
 8001770:	b29b      	uxth	r3, r3
 8001772:	2100      	movs	r1, #0
 8001774:	2000      	movs	r0, #0
 8001776:	f000 fa1d 	bl	8001bb4 <lcdSetWindow>
  int dimensions = lcdProperties.width * lcdProperties.height;
 800177a:	4b0b      	ldr	r3, [pc, #44]	@ (80017a8 <lcdFillRGB+0x50>)
 800177c:	881b      	ldrh	r3, [r3, #0]
 800177e:	461a      	mov	r2, r3
 8001780:	4b09      	ldr	r3, [pc, #36]	@ (80017a8 <lcdFillRGB+0x50>)
 8001782:	885b      	ldrh	r3, [r3, #2]
 8001784:	fb02 f303 	mul.w	r3, r2, r3
 8001788:	60fb      	str	r3, [r7, #12]
  while(dimensions--)
 800178a:	e003      	b.n	8001794 <lcdFillRGB+0x3c>
  {
    lcdWriteData(color);
 800178c:	88fb      	ldrh	r3, [r7, #6]
 800178e:	4618      	mov	r0, r3
 8001790:	f000 fa76 	bl	8001c80 <lcdWriteData>
  while(dimensions--)
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	1e5a      	subs	r2, r3, #1
 8001798:	60fa      	str	r2, [r7, #12]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f6      	bne.n	800178c <lcdFillRGB+0x34>
  }
}
 800179e:	bf00      	nop
 80017a0:	bf00      	nop
 80017a2:	3710      	adds	r7, #16
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	20000010 	.word	0x20000010

080017ac <lcdDrawPixel>:
 * \param color    Color
 *
 * \return void
 */
void lcdDrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b082      	sub	sp, #8
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	4603      	mov	r3, r0
 80017b4:	80fb      	strh	r3, [r7, #6]
 80017b6:	460b      	mov	r3, r1
 80017b8:	80bb      	strh	r3, [r7, #4]
 80017ba:	4613      	mov	r3, r2
 80017bc:	807b      	strh	r3, [r7, #2]
    // Clip
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 80017be:	4b0c      	ldr	r3, [pc, #48]	@ (80017f0 <lcdDrawPixel+0x44>)
 80017c0:	881b      	ldrh	r3, [r3, #0]
 80017c2:	88fa      	ldrh	r2, [r7, #6]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d20f      	bcs.n	80017e8 <lcdDrawPixel+0x3c>
 80017c8:	4b09      	ldr	r3, [pc, #36]	@ (80017f0 <lcdDrawPixel+0x44>)
 80017ca:	885b      	ldrh	r3, [r3, #2]
 80017cc:	88ba      	ldrh	r2, [r7, #4]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d20a      	bcs.n	80017e8 <lcdDrawPixel+0x3c>
        return;

    lcdSetWindow(x, y, x, y);
 80017d2:	88bb      	ldrh	r3, [r7, #4]
 80017d4:	88fa      	ldrh	r2, [r7, #6]
 80017d6:	88b9      	ldrh	r1, [r7, #4]
 80017d8:	88f8      	ldrh	r0, [r7, #6]
 80017da:	f000 f9eb 	bl	8001bb4 <lcdSetWindow>
    lcdWriteData(color);
 80017de:	887b      	ldrh	r3, [r7, #2]
 80017e0:	4618      	mov	r0, r3
 80017e2:	f000 fa4d 	bl	8001c80 <lcdWriteData>
 80017e6:	e000      	b.n	80017ea <lcdDrawPixel+0x3e>
        return;
 80017e8:	bf00      	nop
}
 80017ea:	3708      	adds	r7, #8
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000010 	.word	0x20000010

080017f4 <lcdDrawChar>:
 * \param size		Character Size
 *
 * \return void
 */
void lcdDrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg)
{
 80017f4:	b590      	push	{r4, r7, lr}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	4604      	mov	r4, r0
 80017fc:	4608      	mov	r0, r1
 80017fe:	4611      	mov	r1, r2
 8001800:	461a      	mov	r2, r3
 8001802:	4623      	mov	r3, r4
 8001804:	80fb      	strh	r3, [r7, #6]
 8001806:	4603      	mov	r3, r0
 8001808:	80bb      	strh	r3, [r7, #4]
 800180a:	460b      	mov	r3, r1
 800180c:	70fb      	strb	r3, [r7, #3]
 800180e:	4613      	mov	r3, r2
 8001810:	803b      	strh	r3, [r7, #0]
	if ((x >= lcdProperties.width) || 			// Clip right
 8001812:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001816:	4a4a      	ldr	r2, [pc, #296]	@ (8001940 <lcdDrawChar+0x14c>)
 8001818:	8812      	ldrh	r2, [r2, #0]
 800181a:	4293      	cmp	r3, r2
 800181c:	f280 808c 	bge.w	8001938 <lcdDrawChar+0x144>
			(y >= lcdProperties.height) || 		// Clip bottom
 8001820:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001824:	4a46      	ldr	r2, [pc, #280]	@ (8001940 <lcdDrawChar+0x14c>)
 8001826:	8852      	ldrh	r2, [r2, #2]
	if ((x >= lcdProperties.width) || 			// Clip right
 8001828:	4293      	cmp	r3, r2
 800182a:	f280 8085 	bge.w	8001938 <lcdDrawChar+0x144>
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 800182e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001832:	4a44      	ldr	r2, [pc, #272]	@ (8001944 <lcdDrawChar+0x150>)
 8001834:	6892      	ldr	r2, [r2, #8]
 8001836:	8892      	ldrh	r2, [r2, #4]
 8001838:	4413      	add	r3, r2
			(y >= lcdProperties.height) || 		// Clip bottom
 800183a:	2b00      	cmp	r3, #0
 800183c:	db7c      	blt.n	8001938 <lcdDrawChar+0x144>
			((y + lcdFont.pFont->Height) < 0))  // Clip top
 800183e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001842:	4a40      	ldr	r2, [pc, #256]	@ (8001944 <lcdDrawChar+0x150>)
 8001844:	6892      	ldr	r2, [r2, #8]
 8001846:	88d2      	ldrh	r2, [r2, #6]
 8001848:	4413      	add	r3, r2
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 800184a:	2b00      	cmp	r3, #0
 800184c:	db74      	blt.n	8001938 <lcdDrawChar+0x144>
		return;

	uint8_t fontCoeff = lcdFont.pFont->Height / 8;
 800184e:	4b3d      	ldr	r3, [pc, #244]	@ (8001944 <lcdDrawChar+0x150>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	88db      	ldrh	r3, [r3, #6]
 8001854:	08db      	lsrs	r3, r3, #3
 8001856:	b29b      	uxth	r3, r3
 8001858:	72bb      	strb	r3, [r7, #10]
	uint8_t xP = 0;
 800185a:	2300      	movs	r3, #0
 800185c:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 800185e:	2300      	movs	r3, #0
 8001860:	73bb      	strb	r3, [r7, #14]
 8001862:	e061      	b.n	8001928 <lcdDrawChar+0x134>
	{
		uint8_t line;

		for(uint8_t k = 0; k < fontCoeff; k++)
 8001864:	2300      	movs	r3, #0
 8001866:	733b      	strb	r3, [r7, #12]
 8001868:	e055      	b.n	8001916 <lcdDrawChar+0x122>
		{
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * fontCoeff) + (i * fontCoeff) + k];
 800186a:	4b36      	ldr	r3, [pc, #216]	@ (8001944 <lcdDrawChar+0x150>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	78fa      	ldrb	r2, [r7, #3]
 8001872:	3a20      	subs	r2, #32
 8001874:	4933      	ldr	r1, [pc, #204]	@ (8001944 <lcdDrawChar+0x150>)
 8001876:	6889      	ldr	r1, [r1, #8]
 8001878:	88c9      	ldrh	r1, [r1, #6]
 800187a:	fb01 f202 	mul.w	r2, r1, r2
 800187e:	7ab9      	ldrb	r1, [r7, #10]
 8001880:	fb02 f101 	mul.w	r1, r2, r1
 8001884:	7bba      	ldrb	r2, [r7, #14]
 8001886:	7ab8      	ldrb	r0, [r7, #10]
 8001888:	fb00 f202 	mul.w	r2, r0, r2
 800188c:	4411      	add	r1, r2
 800188e:	7b3a      	ldrb	r2, [r7, #12]
 8001890:	440a      	add	r2, r1
 8001892:	4413      	add	r3, r2
 8001894:	781b      	ldrb	r3, [r3, #0]
 8001896:	737b      	strb	r3, [r7, #13]

			for(uint8_t j = 0; j < 8; j++)
 8001898:	2300      	movs	r3, #0
 800189a:	72fb      	strb	r3, [r7, #11]
 800189c:	e032      	b.n	8001904 <lcdDrawChar+0x110>
			{
				if((line & 0x80) == 0x80)
 800189e:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	da12      	bge.n	80018cc <lcdDrawChar+0xd8>
				{
					lcdDrawPixel(x + j + xP, y + i, color);
 80018a6:	7afb      	ldrb	r3, [r7, #11]
 80018a8:	b29a      	uxth	r2, r3
 80018aa:	88fb      	ldrh	r3, [r7, #6]
 80018ac:	4413      	add	r3, r2
 80018ae:	b29a      	uxth	r2, r3
 80018b0:	7bfb      	ldrb	r3, [r7, #15]
 80018b2:	b29b      	uxth	r3, r3
 80018b4:	4413      	add	r3, r2
 80018b6:	b298      	uxth	r0, r3
 80018b8:	7bbb      	ldrb	r3, [r7, #14]
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	88bb      	ldrh	r3, [r7, #4]
 80018be:	4413      	add	r3, r2
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	883a      	ldrh	r2, [r7, #0]
 80018c4:	4619      	mov	r1, r3
 80018c6:	f7ff ff71 	bl	80017ac <lcdDrawPixel>
 80018ca:	e015      	b.n	80018f8 <lcdDrawChar+0x104>
				}
				else if (bg != color)
 80018cc:	8c3a      	ldrh	r2, [r7, #32]
 80018ce:	883b      	ldrh	r3, [r7, #0]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d011      	beq.n	80018f8 <lcdDrawChar+0x104>
				{
					lcdDrawPixel(x + j + xP, y + i, bg);
 80018d4:	7afb      	ldrb	r3, [r7, #11]
 80018d6:	b29a      	uxth	r2, r3
 80018d8:	88fb      	ldrh	r3, [r7, #6]
 80018da:	4413      	add	r3, r2
 80018dc:	b29a      	uxth	r2, r3
 80018de:	7bfb      	ldrb	r3, [r7, #15]
 80018e0:	b29b      	uxth	r3, r3
 80018e2:	4413      	add	r3, r2
 80018e4:	b298      	uxth	r0, r3
 80018e6:	7bbb      	ldrb	r3, [r7, #14]
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	88bb      	ldrh	r3, [r7, #4]
 80018ec:	4413      	add	r3, r2
 80018ee:	b29b      	uxth	r3, r3
 80018f0:	8c3a      	ldrh	r2, [r7, #32]
 80018f2:	4619      	mov	r1, r3
 80018f4:	f7ff ff5a 	bl	80017ac <lcdDrawPixel>
				}
				line <<= 1;
 80018f8:	7b7b      	ldrb	r3, [r7, #13]
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	737b      	strb	r3, [r7, #13]
			for(uint8_t j = 0; j < 8; j++)
 80018fe:	7afb      	ldrb	r3, [r7, #11]
 8001900:	3301      	adds	r3, #1
 8001902:	72fb      	strb	r3, [r7, #11]
 8001904:	7afb      	ldrb	r3, [r7, #11]
 8001906:	2b07      	cmp	r3, #7
 8001908:	d9c9      	bls.n	800189e <lcdDrawChar+0xaa>
			}

			xP += 8;
 800190a:	7bfb      	ldrb	r3, [r7, #15]
 800190c:	3308      	adds	r3, #8
 800190e:	73fb      	strb	r3, [r7, #15]
		for(uint8_t k = 0; k < fontCoeff; k++)
 8001910:	7b3b      	ldrb	r3, [r7, #12]
 8001912:	3301      	adds	r3, #1
 8001914:	733b      	strb	r3, [r7, #12]
 8001916:	7b3a      	ldrb	r2, [r7, #12]
 8001918:	7abb      	ldrb	r3, [r7, #10]
 800191a:	429a      	cmp	r2, r3
 800191c:	d3a5      	bcc.n	800186a <lcdDrawChar+0x76>
		}

		xP = 0;
 800191e:	2300      	movs	r3, #0
 8001920:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8001922:	7bbb      	ldrb	r3, [r7, #14]
 8001924:	3301      	adds	r3, #1
 8001926:	73bb      	strb	r3, [r7, #14]
 8001928:	7bbb      	ldrb	r3, [r7, #14]
 800192a:	b29a      	uxth	r2, r3
 800192c:	4b05      	ldr	r3, [pc, #20]	@ (8001944 <lcdDrawChar+0x150>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	88db      	ldrh	r3, [r3, #6]
 8001932:	429a      	cmp	r2, r3
 8001934:	d396      	bcc.n	8001864 <lcdDrawChar+0x70>
 8001936:	e000      	b.n	800193a <lcdDrawChar+0x146>
		return;
 8001938:	bf00      	nop
	}
}
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	bd90      	pop	{r4, r7, pc}
 8001940:	20000010 	.word	0x20000010
 8001944:	20000018 	.word	0x20000018

08001948 <lcdPrintf>:
 * \param
 *
 * \return void
 */
void lcdPrintf(const char *fmt, ...)
{
 8001948:	b40f      	push	{r0, r1, r2, r3}
 800194a:	b590      	push	{r4, r7, lr}
 800194c:	b085      	sub	sp, #20
 800194e:	af02      	add	r7, sp, #8
	static char buf[256];
	char *p;
	va_list lst;

	va_start(lst, fmt);
 8001950:	f107 031c 	add.w	r3, r7, #28
 8001954:	603b      	str	r3, [r7, #0]
	vsprintf(buf, fmt, lst);
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	69b9      	ldr	r1, [r7, #24]
 800195a:	483d      	ldr	r0, [pc, #244]	@ (8001a50 <lcdPrintf+0x108>)
 800195c:	f004 fd7e 	bl	800645c <vsiprintf>
	va_end(lst);

	p = buf;
 8001960:	4b3b      	ldr	r3, [pc, #236]	@ (8001a50 <lcdPrintf+0x108>)
 8001962:	607b      	str	r3, [r7, #4]
	while (*p)
 8001964:	e067      	b.n	8001a36 <lcdPrintf+0xee>
	{
		if (*p == '\n')
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	2b0a      	cmp	r3, #10
 800196c:	d10c      	bne.n	8001988 <lcdPrintf+0x40>
		{
			cursorXY.y += lcdFont.pFont->Height;
 800196e:	4b39      	ldr	r3, [pc, #228]	@ (8001a54 <lcdPrintf+0x10c>)
 8001970:	885a      	ldrh	r2, [r3, #2]
 8001972:	4b39      	ldr	r3, [pc, #228]	@ (8001a58 <lcdPrintf+0x110>)
 8001974:	689b      	ldr	r3, [r3, #8]
 8001976:	88db      	ldrh	r3, [r3, #6]
 8001978:	4413      	add	r3, r2
 800197a:	b29a      	uxth	r2, r3
 800197c:	4b35      	ldr	r3, [pc, #212]	@ (8001a54 <lcdPrintf+0x10c>)
 800197e:	805a      	strh	r2, [r3, #2]
			cursorXY.x = 0;
 8001980:	4b34      	ldr	r3, [pc, #208]	@ (8001a54 <lcdPrintf+0x10c>)
 8001982:	2200      	movs	r2, #0
 8001984:	801a      	strh	r2, [r3, #0]
 8001986:	e04a      	b.n	8001a1e <lcdPrintf+0xd6>
		}
		else if (*p == '\r')
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	781b      	ldrb	r3, [r3, #0]
 800198c:	2b0d      	cmp	r3, #13
 800198e:	d046      	beq.n	8001a1e <lcdPrintf+0xd6>
		{
			// skip em
		}
		else if (*p == '\t')
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	2b09      	cmp	r3, #9
 8001996:	d10b      	bne.n	80019b0 <lcdPrintf+0x68>
		{
			cursorXY.x += lcdFont.pFont->Width * 4;
 8001998:	4b2e      	ldr	r3, [pc, #184]	@ (8001a54 <lcdPrintf+0x10c>)
 800199a:	881a      	ldrh	r2, [r3, #0]
 800199c:	4b2e      	ldr	r3, [pc, #184]	@ (8001a58 <lcdPrintf+0x110>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	889b      	ldrh	r3, [r3, #4]
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	b29b      	uxth	r3, r3
 80019a6:	4413      	add	r3, r2
 80019a8:	b29a      	uxth	r2, r3
 80019aa:	4b2a      	ldr	r3, [pc, #168]	@ (8001a54 <lcdPrintf+0x10c>)
 80019ac:	801a      	strh	r2, [r3, #0]
 80019ae:	e036      	b.n	8001a1e <lcdPrintf+0xd6>
		}
		else
		{
			lcdDrawChar(cursorXY.x, cursorXY.y, *p, lcdFont.TextColor, lcdFont.BackColor);
 80019b0:	4b28      	ldr	r3, [pc, #160]	@ (8001a54 <lcdPrintf+0x10c>)
 80019b2:	881b      	ldrh	r3, [r3, #0]
 80019b4:	b218      	sxth	r0, r3
 80019b6:	4b27      	ldr	r3, [pc, #156]	@ (8001a54 <lcdPrintf+0x10c>)
 80019b8:	885b      	ldrh	r3, [r3, #2]
 80019ba:	b219      	sxth	r1, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	781a      	ldrb	r2, [r3, #0]
 80019c0:	4b25      	ldr	r3, [pc, #148]	@ (8001a58 <lcdPrintf+0x110>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	b29c      	uxth	r4, r3
 80019c6:	4b24      	ldr	r3, [pc, #144]	@ (8001a58 <lcdPrintf+0x110>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	b29b      	uxth	r3, r3
 80019cc:	9300      	str	r3, [sp, #0]
 80019ce:	4623      	mov	r3, r4
 80019d0:	f7ff ff10 	bl	80017f4 <lcdDrawChar>
			cursorXY.x += lcdFont.pFont->Width;
 80019d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001a54 <lcdPrintf+0x10c>)
 80019d6:	881a      	ldrh	r2, [r3, #0]
 80019d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001a58 <lcdPrintf+0x110>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	889b      	ldrh	r3, [r3, #4]
 80019de:	4413      	add	r3, r2
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a54 <lcdPrintf+0x10c>)
 80019e4:	801a      	strh	r2, [r3, #0]
			if (lcdFont.TextWrap && (cursorXY.x > (lcdProperties.width - lcdFont.pFont->Width)))
 80019e6:	4b1c      	ldr	r3, [pc, #112]	@ (8001a58 <lcdPrintf+0x110>)
 80019e8:	7b1b      	ldrb	r3, [r3, #12]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d017      	beq.n	8001a1e <lcdPrintf+0xd6>
 80019ee:	4b19      	ldr	r3, [pc, #100]	@ (8001a54 <lcdPrintf+0x10c>)
 80019f0:	881b      	ldrh	r3, [r3, #0]
 80019f2:	461a      	mov	r2, r3
 80019f4:	4b19      	ldr	r3, [pc, #100]	@ (8001a5c <lcdPrintf+0x114>)
 80019f6:	881b      	ldrh	r3, [r3, #0]
 80019f8:	4619      	mov	r1, r3
 80019fa:	4b17      	ldr	r3, [pc, #92]	@ (8001a58 <lcdPrintf+0x110>)
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	889b      	ldrh	r3, [r3, #4]
 8001a00:	1acb      	subs	r3, r1, r3
 8001a02:	429a      	cmp	r2, r3
 8001a04:	dd0b      	ble.n	8001a1e <lcdPrintf+0xd6>
			{
				cursorXY.y += lcdFont.pFont->Height;
 8001a06:	4b13      	ldr	r3, [pc, #76]	@ (8001a54 <lcdPrintf+0x10c>)
 8001a08:	885a      	ldrh	r2, [r3, #2]
 8001a0a:	4b13      	ldr	r3, [pc, #76]	@ (8001a58 <lcdPrintf+0x110>)
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	88db      	ldrh	r3, [r3, #6]
 8001a10:	4413      	add	r3, r2
 8001a12:	b29a      	uxth	r2, r3
 8001a14:	4b0f      	ldr	r3, [pc, #60]	@ (8001a54 <lcdPrintf+0x10c>)
 8001a16:	805a      	strh	r2, [r3, #2]
				cursorXY.x = 0;
 8001a18:	4b0e      	ldr	r3, [pc, #56]	@ (8001a54 <lcdPrintf+0x10c>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	3301      	adds	r3, #1
 8001a22:	607b      	str	r3, [r7, #4]

		if (cursorXY.y >= lcdProperties.height)
 8001a24:	4b0b      	ldr	r3, [pc, #44]	@ (8001a54 <lcdPrintf+0x10c>)
 8001a26:	885a      	ldrh	r2, [r3, #2]
 8001a28:	4b0c      	ldr	r3, [pc, #48]	@ (8001a5c <lcdPrintf+0x114>)
 8001a2a:	885b      	ldrh	r3, [r3, #2]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d302      	bcc.n	8001a36 <lcdPrintf+0xee>
		{
			cursorXY.y = 0;
 8001a30:	4b08      	ldr	r3, [pc, #32]	@ (8001a54 <lcdPrintf+0x10c>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	805a      	strh	r2, [r3, #2]
	while (*p)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d193      	bne.n	8001966 <lcdPrintf+0x1e>
		}
	}
}
 8001a3e:	bf00      	nop
 8001a40:	bf00      	nop
 8001a42:	370c      	adds	r7, #12
 8001a44:	46bd      	mov	sp, r7
 8001a46:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001a4a:	b004      	add	sp, #16
 8001a4c:	4770      	bx	lr
 8001a4e:	bf00      	nop
 8001a50:	200000a8 	.word	0x200000a8
 8001a54:	200000a0 	.word	0x200000a0
 8001a58:	20000018 	.word	0x20000018
 8001a5c:	20000010 	.word	0x20000010

08001a60 <lcdSetTextFont>:
 * \param font pointer font
 *
 * \return void
 */
void lcdSetTextFont(sFONT* font)
{
 8001a60:	b480      	push	{r7}
 8001a62:	b083      	sub	sp, #12
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
	lcdFont.pFont = font;
 8001a68:	4a04      	ldr	r2, [pc, #16]	@ (8001a7c <lcdSetTextFont+0x1c>)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6093      	str	r3, [r2, #8]
}
 8001a6e:	bf00      	nop
 8001a70:	370c      	adds	r7, #12
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	20000018 	.word	0x20000018

08001a80 <lcdSetTextColor>:
 * \param b		Background color
 *
 * \return void
 */
void lcdSetTextColor(uint16_t c, uint16_t b)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4603      	mov	r3, r0
 8001a88:	460a      	mov	r2, r1
 8001a8a:	80fb      	strh	r3, [r7, #6]
 8001a8c:	4613      	mov	r3, r2
 8001a8e:	80bb      	strh	r3, [r7, #4]
	lcdFont.TextColor = c;
 8001a90:	88fb      	ldrh	r3, [r7, #6]
 8001a92:	4a05      	ldr	r2, [pc, #20]	@ (8001aa8 <lcdSetTextColor+0x28>)
 8001a94:	6013      	str	r3, [r2, #0]
	lcdFont.BackColor = b;
 8001a96:	88bb      	ldrh	r3, [r7, #4]
 8001a98:	4a03      	ldr	r2, [pc, #12]	@ (8001aa8 <lcdSetTextColor+0x28>)
 8001a9a:	6053      	str	r3, [r2, #4]
}
 8001a9c:	bf00      	nop
 8001a9e:	370c      	adds	r7, #12
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	20000018 	.word	0x20000018

08001aac <lcdSetOrientation>:
{
	lcdFont.TextWrap = w;
}

void lcdSetOrientation(lcdOrientationTypeDef value)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b082      	sub	sp, #8
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	71fb      	strb	r3, [r7, #7]
	lcdProperties.orientation = value;
 8001ab6:	4a2d      	ldr	r2, [pc, #180]	@ (8001b6c <lcdSetOrientation+0xc0>)
 8001ab8:	79fb      	ldrb	r3, [r7, #7]
 8001aba:	7113      	strb	r3, [r2, #4]
	lcdWriteCommand(ILI9341_MEMCONTROL);
 8001abc:	2036      	movs	r0, #54	@ 0x36
 8001abe:	f000 f8cf 	bl	8001c60 <lcdWriteCommand>

	switch (lcdProperties.orientation)
 8001ac2:	4b2a      	ldr	r3, [pc, #168]	@ (8001b6c <lcdSetOrientation+0xc0>)
 8001ac4:	791b      	ldrb	r3, [r3, #4]
 8001ac6:	2b03      	cmp	r3, #3
 8001ac8:	d83e      	bhi.n	8001b48 <lcdSetOrientation+0x9c>
 8001aca:	a201      	add	r2, pc, #4	@ (adr r2, 8001ad0 <lcdSetOrientation+0x24>)
 8001acc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ad0:	08001ae1 	.word	0x08001ae1
 8001ad4:	08001b15 	.word	0x08001b15
 8001ad8:	08001afb 	.word	0x08001afb
 8001adc:	08001b2f 	.word	0x08001b2f
	{
		case LCD_ORIENTATION_PORTRAIT:
			lcdWriteData(lcdPortraitConfig);
 8001ae0:	4b23      	ldr	r3, [pc, #140]	@ (8001b70 <lcdSetOrientation+0xc4>)
 8001ae2:	781b      	ldrb	r3, [r3, #0]
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	f000 f8cb 	bl	8001c80 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 8001aea:	4b20      	ldr	r3, [pc, #128]	@ (8001b6c <lcdSetOrientation+0xc0>)
 8001aec:	22f0      	movs	r2, #240	@ 0xf0
 8001aee:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_HEIGHT;
 8001af0:	4b1e      	ldr	r3, [pc, #120]	@ (8001b6c <lcdSetOrientation+0xc0>)
 8001af2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001af6:	805a      	strh	r2, [r3, #2]
			break;
 8001af8:	e027      	b.n	8001b4a <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_PORTRAIT_MIRROR:
			lcdWriteData(lcdPortraitMirrorConfig);
 8001afa:	4b1e      	ldr	r3, [pc, #120]	@ (8001b74 <lcdSetOrientation+0xc8>)
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	4618      	mov	r0, r3
 8001b00:	f000 f8be 	bl	8001c80 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 8001b04:	4b19      	ldr	r3, [pc, #100]	@ (8001b6c <lcdSetOrientation+0xc0>)
 8001b06:	22f0      	movs	r2, #240	@ 0xf0
 8001b08:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_HEIGHT;
 8001b0a:	4b18      	ldr	r3, [pc, #96]	@ (8001b6c <lcdSetOrientation+0xc0>)
 8001b0c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001b10:	805a      	strh	r2, [r3, #2]
			break;
 8001b12:	e01a      	b.n	8001b4a <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_LANDSCAPE:
			lcdWriteData(lcdLandscapeConfig);
 8001b14:	4b18      	ldr	r3, [pc, #96]	@ (8001b78 <lcdSetOrientation+0xcc>)
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f000 f8b1 	bl	8001c80 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 8001b1e:	4b13      	ldr	r3, [pc, #76]	@ (8001b6c <lcdSetOrientation+0xc0>)
 8001b20:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001b24:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 8001b26:	4b11      	ldr	r3, [pc, #68]	@ (8001b6c <lcdSetOrientation+0xc0>)
 8001b28:	22f0      	movs	r2, #240	@ 0xf0
 8001b2a:	805a      	strh	r2, [r3, #2]
			break;
 8001b2c:	e00d      	b.n	8001b4a <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_LANDSCAPE_MIRROR:
			lcdWriteData(lcdLandscapeMirrorConfig);
 8001b2e:	4b13      	ldr	r3, [pc, #76]	@ (8001b7c <lcdSetOrientation+0xd0>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f000 f8a4 	bl	8001c80 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 8001b38:	4b0c      	ldr	r3, [pc, #48]	@ (8001b6c <lcdSetOrientation+0xc0>)
 8001b3a:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001b3e:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 8001b40:	4b0a      	ldr	r3, [pc, #40]	@ (8001b6c <lcdSetOrientation+0xc0>)
 8001b42:	22f0      	movs	r2, #240	@ 0xf0
 8001b44:	805a      	strh	r2, [r3, #2]
			break;
 8001b46:	e000      	b.n	8001b4a <lcdSetOrientation+0x9e>
		default:
			break;
 8001b48:	bf00      	nop
	}

	//lcdWriteCommand(ILI9341_MEMORYWRITE);
	lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 8001b4a:	4b08      	ldr	r3, [pc, #32]	@ (8001b6c <lcdSetOrientation+0xc0>)
 8001b4c:	881b      	ldrh	r3, [r3, #0]
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	b29a      	uxth	r2, r3
 8001b52:	4b06      	ldr	r3, [pc, #24]	@ (8001b6c <lcdSetOrientation+0xc0>)
 8001b54:	885b      	ldrh	r3, [r3, #2]
 8001b56:	3b01      	subs	r3, #1
 8001b58:	b29b      	uxth	r3, r3
 8001b5a:	2100      	movs	r1, #0
 8001b5c:	2000      	movs	r0, #0
 8001b5e:	f000 f829 	bl	8001bb4 <lcdSetWindow>
}
 8001b62:	bf00      	nop
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20000010 	.word	0x20000010
 8001b70:	200000a4 	.word	0x200000a4
 8001b74:	200000a6 	.word	0x200000a6
 8001b78:	200000a5 	.word	0x200000a5
 8001b7c:	200000a7 	.word	0x200000a7

08001b80 <lcdSetCursor>:

void lcdSetCursor(unsigned short x, unsigned short y)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b082      	sub	sp, #8
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	460a      	mov	r2, r1
 8001b8a:	80fb      	strh	r3, [r7, #6]
 8001b8c:	4613      	mov	r3, r2
 8001b8e:	80bb      	strh	r3, [r7, #4]
	cursorXY.x = x;
 8001b90:	4a07      	ldr	r2, [pc, #28]	@ (8001bb0 <lcdSetCursor+0x30>)
 8001b92:	88fb      	ldrh	r3, [r7, #6]
 8001b94:	8013      	strh	r3, [r2, #0]
	cursorXY.y = y;
 8001b96:	4a06      	ldr	r2, [pc, #24]	@ (8001bb0 <lcdSetCursor+0x30>)
 8001b98:	88bb      	ldrh	r3, [r7, #4]
 8001b9a:	8053      	strh	r3, [r2, #2]
	lcdSetWindow(x, y, x, y);
 8001b9c:	88bb      	ldrh	r3, [r7, #4]
 8001b9e:	88fa      	ldrh	r2, [r7, #6]
 8001ba0:	88b9      	ldrh	r1, [r7, #4]
 8001ba2:	88f8      	ldrh	r0, [r7, #6]
 8001ba4:	f000 f806 	bl	8001bb4 <lcdSetWindow>
}
 8001ba8:	bf00      	nop
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	200000a0 	.word	0x200000a0

08001bb4 <lcdSetWindow>:
 * \param y1         Rigth bottom window y-coordinate
 *
 * \return void
 */
void lcdSetWindow(unsigned short x0, unsigned short y0, unsigned short x1, unsigned short y1)
{
 8001bb4:	b590      	push	{r4, r7, lr}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4604      	mov	r4, r0
 8001bbc:	4608      	mov	r0, r1
 8001bbe:	4611      	mov	r1, r2
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	4623      	mov	r3, r4
 8001bc4:	80fb      	strh	r3, [r7, #6]
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	80bb      	strh	r3, [r7, #4]
 8001bca:	460b      	mov	r3, r1
 8001bcc:	807b      	strh	r3, [r7, #2]
 8001bce:	4613      	mov	r3, r2
 8001bd0:	803b      	strh	r3, [r7, #0]
  lcdWriteCommand(ILI9341_COLADDRSET);
 8001bd2:	202a      	movs	r0, #42	@ 0x2a
 8001bd4:	f000 f844 	bl	8001c60 <lcdWriteCommand>
  lcdWriteData((x0 >> 8) & 0xFF);
 8001bd8:	88fb      	ldrh	r3, [r7, #6]
 8001bda:	0a1b      	lsrs	r3, r3, #8
 8001bdc:	b29b      	uxth	r3, r3
 8001bde:	4618      	mov	r0, r3
 8001be0:	f000 f84e 	bl	8001c80 <lcdWriteData>
  lcdWriteData(x0 & 0xFF);
 8001be4:	88fb      	ldrh	r3, [r7, #6]
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	4618      	mov	r0, r3
 8001bec:	f000 f848 	bl	8001c80 <lcdWriteData>
  lcdWriteData((x1 >> 8) & 0xFF);
 8001bf0:	887b      	ldrh	r3, [r7, #2]
 8001bf2:	0a1b      	lsrs	r3, r3, #8
 8001bf4:	b29b      	uxth	r3, r3
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f000 f842 	bl	8001c80 <lcdWriteData>
  lcdWriteData(x1 & 0xFF);
 8001bfc:	887b      	ldrh	r3, [r7, #2]
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	b29b      	uxth	r3, r3
 8001c02:	4618      	mov	r0, r3
 8001c04:	f000 f83c 	bl	8001c80 <lcdWriteData>
  lcdWriteCommand(ILI9341_PAGEADDRSET);
 8001c08:	202b      	movs	r0, #43	@ 0x2b
 8001c0a:	f000 f829 	bl	8001c60 <lcdWriteCommand>
  lcdWriteData((y0 >> 8) & 0xFF);
 8001c0e:	88bb      	ldrh	r3, [r7, #4]
 8001c10:	0a1b      	lsrs	r3, r3, #8
 8001c12:	b29b      	uxth	r3, r3
 8001c14:	4618      	mov	r0, r3
 8001c16:	f000 f833 	bl	8001c80 <lcdWriteData>
  lcdWriteData(y0 & 0xFF);
 8001c1a:	88bb      	ldrh	r3, [r7, #4]
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	b29b      	uxth	r3, r3
 8001c20:	4618      	mov	r0, r3
 8001c22:	f000 f82d 	bl	8001c80 <lcdWriteData>
  lcdWriteData((y1 >> 8) & 0xFF);
 8001c26:	883b      	ldrh	r3, [r7, #0]
 8001c28:	0a1b      	lsrs	r3, r3, #8
 8001c2a:	b29b      	uxth	r3, r3
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f000 f827 	bl	8001c80 <lcdWriteData>
  lcdWriteData(y1 & 0xFF);
 8001c32:	883b      	ldrh	r3, [r7, #0]
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	4618      	mov	r0, r3
 8001c3a:	f000 f821 	bl	8001c80 <lcdWriteData>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 8001c3e:	202c      	movs	r0, #44	@ 0x2c
 8001c40:	f000 f80e 	bl	8001c60 <lcdWriteCommand>
}
 8001c44:	bf00      	nop
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd90      	pop	{r4, r7, pc}

08001c4c <lcdReset>:
  }
  while (i < dataLength);
}

static void lcdReset(void)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	af00      	add	r7, sp, #0
	lcdWriteCommand(ILI9341_SOFTRESET);
 8001c50:	2001      	movs	r0, #1
 8001c52:	f000 f805 	bl	8001c60 <lcdWriteCommand>
	HAL_Delay(50);
 8001c56:	2032      	movs	r0, #50	@ 0x32
 8001c58:	f000 ffcc 	bl	8002bf4 <HAL_Delay>
}
 8001c5c:	bf00      	nop
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <lcdWriteCommand>:

// Write an 8 bit command to the IC driver
static void lcdWriteCommand(unsigned char command)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	4603      	mov	r3, r0
 8001c68:	71fb      	strb	r3, [r7, #7]
	LCD_CmdWrite(command);
 8001c6a:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 8001c6e:	79fa      	ldrb	r2, [r7, #7]
 8001c70:	b292      	uxth	r2, r2
 8001c72:	801a      	strh	r2, [r3, #0]
}
 8001c74:	bf00      	nop
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <lcdWriteData>:

// Write an 16 bit data word to the IC driver
static void lcdWriteData(unsigned short data)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	80fb      	strh	r3, [r7, #6]
	LCD_DataWrite(data);
 8001c8a:	4a04      	ldr	r2, [pc, #16]	@ (8001c9c <lcdWriteData+0x1c>)
 8001c8c:	88fb      	ldrh	r3, [r7, #6]
 8001c8e:	8013      	strh	r3, [r2, #0]
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	60080000 	.word	0x60080000

08001ca0 <lcdBuildMemoryAccessControlConfig>:
                        bool columnAddressOrder,
                        bool rowColumnExchange,
                        bool verticalRefreshOrder,
                        bool colorOrder,
                        bool horizontalRefreshOrder)
{
 8001ca0:	b490      	push	{r4, r7}
 8001ca2:	b084      	sub	sp, #16
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	4604      	mov	r4, r0
 8001ca8:	4608      	mov	r0, r1
 8001caa:	4611      	mov	r1, r2
 8001cac:	461a      	mov	r2, r3
 8001cae:	4623      	mov	r3, r4
 8001cb0:	71fb      	strb	r3, [r7, #7]
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	71bb      	strb	r3, [r7, #6]
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	717b      	strb	r3, [r7, #5]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	713b      	strb	r3, [r7, #4]
  unsigned char value 				= 0;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	73fb      	strb	r3, [r7, #15]
  if(horizontalRefreshOrder) value 	|= ILI9341_MADCTL_MH;
 8001cc2:	7f3b      	ldrb	r3, [r7, #28]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d003      	beq.n	8001cd0 <lcdBuildMemoryAccessControlConfig+0x30>
 8001cc8:	7bfb      	ldrb	r3, [r7, #15]
 8001cca:	f043 0304 	orr.w	r3, r3, #4
 8001cce:	73fb      	strb	r3, [r7, #15]
  if(colorOrder) value 				|= ILI9341_MADCTL_BGR;
 8001cd0:	7e3b      	ldrb	r3, [r7, #24]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d003      	beq.n	8001cde <lcdBuildMemoryAccessControlConfig+0x3e>
 8001cd6:	7bfb      	ldrb	r3, [r7, #15]
 8001cd8:	f043 0308 	orr.w	r3, r3, #8
 8001cdc:	73fb      	strb	r3, [r7, #15]
  if(verticalRefreshOrder) value 	|= ILI9341_MADCTL_ML;
 8001cde:	793b      	ldrb	r3, [r7, #4]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d003      	beq.n	8001cec <lcdBuildMemoryAccessControlConfig+0x4c>
 8001ce4:	7bfb      	ldrb	r3, [r7, #15]
 8001ce6:	f043 0310 	orr.w	r3, r3, #16
 8001cea:	73fb      	strb	r3, [r7, #15]
  if(rowColumnExchange) value 		|= ILI9341_MADCTL_MV;
 8001cec:	797b      	ldrb	r3, [r7, #5]
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d003      	beq.n	8001cfa <lcdBuildMemoryAccessControlConfig+0x5a>
 8001cf2:	7bfb      	ldrb	r3, [r7, #15]
 8001cf4:	f043 0320 	orr.w	r3, r3, #32
 8001cf8:	73fb      	strb	r3, [r7, #15]
  if(columnAddressOrder) value 		|= ILI9341_MADCTL_MX;
 8001cfa:	79bb      	ldrb	r3, [r7, #6]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d003      	beq.n	8001d08 <lcdBuildMemoryAccessControlConfig+0x68>
 8001d00:	7bfb      	ldrb	r3, [r7, #15]
 8001d02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001d06:	73fb      	strb	r3, [r7, #15]
  if(rowAddressOrder) value 		|= ILI9341_MADCTL_MY;
 8001d08:	79fb      	ldrb	r3, [r7, #7]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <lcdBuildMemoryAccessControlConfig+0x76>
 8001d0e:	7bfb      	ldrb	r3, [r7, #15]
 8001d10:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001d14:	73fb      	strb	r3, [r7, #15]
  return value;
 8001d16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	3710      	adds	r7, #16
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bc90      	pop	{r4, r7}
 8001d20:	4770      	bx	lr

08001d22 <onBeatDetected>:
//
void RunProgram();
void Max30100 ();
void AD8232_ReadData();
void ECG_DrawWave(uint16_t value);
void onBeatDetected(void) {
 8001d22:	b480      	push	{r7}
 8001d24:	af00      	add	r7, sp, #0
    // Xử lý khi phát hiện nhịp tim (bật LED, gửi UART, ...)

}
 8001d26:	bf00      	nop
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr

08001d30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08a      	sub	sp, #40	@ 0x28
 8001d34:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d36:	f000 feeb 	bl	8002b10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d3a:	f000 f8e7 	bl	8001f0c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d3e:	f000 fa7d 	bl	800223c <MX_GPIO_Init>
  MX_FSMC_Init();
 8001d42:	f000 fb29 	bl	8002398 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8001d46:	f000 fa4f 	bl	80021e8 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8001d4a:	f000 f9c9 	bl	80020e0 <MX_SPI2_Init>
  MX_TIM2_Init();
 8001d4e:	f000 f9fd 	bl	800214c <MX_TIM2_Init>
  MX_I2C1_Init();
 8001d52:	f000 f997 	bl	8002084 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001d56:	f000 f943 	bl	8001fe0 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  //-----------------------------

  LCD_BL_ON();
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	2102      	movs	r1, #2
 8001d5e:	485d      	ldr	r0, [pc, #372]	@ (8001ed4 <main+0x1a4>)
 8001d60:	f001 fc7c 	bl	800365c <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim2);
 8001d64:	485c      	ldr	r0, [pc, #368]	@ (8001ed8 <main+0x1a8>)
 8001d66:	f003 fa87 	bl	8005278 <HAL_TIM_Base_Start_IT>
  TouchCalibrate();
 8001d6a:	f000 fe79 	bl	8002a60 <TouchCalibrate>

  lcdInit();
 8001d6e:	f7ff fb7f 	bl	8001470 <lcdInit>
  int i = 2;
 8001d72:	2302      	movs	r3, #2
 8001d74:	627b      	str	r3, [r7, #36]	@ 0x24

  lcdSetOrientation(i%4);
 8001d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d78:	425a      	negs	r2, r3
 8001d7a:	f003 0303 	and.w	r3, r3, #3
 8001d7e:	f002 0203 	and.w	r2, r2, #3
 8001d82:	bf58      	it	pl
 8001d84:	4253      	negpl	r3, r2
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	4618      	mov	r0, r3
 8001d8a:	f7ff fe8f 	bl	8001aac <lcdSetOrientation>
  lcdFillRGB(COLOR_BLUE);
 8001d8e:	201f      	movs	r0, #31
 8001d90:	f7ff fce2 	bl	8001758 <lcdFillRGB>

  PulseOximeter_Init(&pox);
 8001d94:	4851      	ldr	r0, [pc, #324]	@ (8001edc <main+0x1ac>)
 8001d96:	f7fe ffad 	bl	8000cf4 <PulseOximeter_Init>
    PulseOximeter_SetOnBeatDetectedCallback(&pox, onBeatDetected);
 8001d9a:	4951      	ldr	r1, [pc, #324]	@ (8001ee0 <main+0x1b0>)
 8001d9c:	484f      	ldr	r0, [pc, #316]	@ (8001edc <main+0x1ac>)
 8001d9e:	f7ff f84c 	bl	8000e3a <PulseOximeter_SetOnBeatDetectedCallback>
    lcdSetTextColor(COLOR_RED,COLOR_BLACK);   // Màu chữ: vàng, nền: đen
 8001da2:	2100      	movs	r1, #0
 8001da4:	f44f 4078 	mov.w	r0, #63488	@ 0xf800
 8001da8:	f7ff fe6a 	bl	8001a80 <lcdSetTextColor>
    lcdSetTextFont(&Font16);
 8001dac:	484d      	ldr	r0, [pc, #308]	@ (8001ee4 <main+0x1b4>)
 8001dae:	f7ff fe57 	bl	8001a60 <lcdSetTextFont>
    if (!PulseOximeter_Begin(&pox, PULSEOXIMETER_DEBUGGINGMODE_NONE)) {
 8001db2:	2100      	movs	r1, #0
 8001db4:	4849      	ldr	r0, [pc, #292]	@ (8001edc <main+0x1ac>)
 8001db6:	f7fe ffc5 	bl	8000d44 <PulseOximeter_Begin>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	f083 0301 	eor.w	r3, r3, #1
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d008      	beq.n	8001dd8 <main+0xa8>
    	lcdSetCursor(0, 0);
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	2000      	movs	r0, #0
 8001dca:	f7ff fed9 	bl	8001b80 <lcdSetCursor>
    	lcdPrintf("Initializing!!");
 8001dce:	4846      	ldr	r0, [pc, #280]	@ (8001ee8 <main+0x1b8>)
 8001dd0:	f7ff fdba 	bl	8001948 <lcdPrintf>
        while (1); // Lỗi khởi tạo, dừng lại
 8001dd4:	bf00      	nop
 8001dd6:	e7fd      	b.n	8001dd4 <main+0xa4>
    } else {
    	lcdSetCursor(0, 0);
 8001dd8:	2100      	movs	r1, #0
 8001dda:	2000      	movs	r0, #0
 8001ddc:	f7ff fed0 	bl	8001b80 <lcdSetCursor>
    	    	lcdPrintf("Init successfull");
 8001de0:	4842      	ldr	r0, [pc, #264]	@ (8001eec <main+0x1bc>)
 8001de2:	f7ff fdb1 	bl	8001948 <lcdPrintf>
//  	  ILI9341_WriteString(0, 0, "Init Successfull !!" , Font_7x10, ILI9341_CYAN, ILI9341_BLACK);
    }
    // Sau khi PulseOximeter_Begin(&pox, ...);
    // Sau khi PulseOximeter_Begin(&pox, ...);
    uint8_t spo2cfg = MAX30100_ReadRegister(MAX30100_REG_SPO2_CONFIGURATION);
 8001de6:	2007      	movs	r0, #7
 8001de8:	f7fe fd44 	bl	8000874 <MAX30100_ReadRegister>
 8001dec:	4603      	mov	r3, r0
 8001dee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    spo2cfg |= (1 << 6); // Bật EN_SPO2
 8001df2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001df6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001dfa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    MAX30100_WriteRegister(MAX30100_REG_SPO2_CONFIGURATION, spo2cfg);
 8001dfe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001e02:	4619      	mov	r1, r3
 8001e04:	2007      	movs	r0, #7
 8001e06:	f7fe fd51 	bl	80008ac <MAX30100_WriteRegister>

    // Đọc lại để kiểm tra
    spo2cfg = MAX30100_ReadRegister(MAX30100_REG_SPO2_CONFIGURATION);
 8001e0a:	2007      	movs	r0, #7
 8001e0c:	f7fe fd32 	bl	8000874 <MAX30100_ReadRegister>
 8001e10:	4603      	mov	r3, r0
 8001e12:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    sprintf(MAX30100_data, "SPO2CFG:0x%02X", spo2cfg);
 8001e16:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	4934      	ldr	r1, [pc, #208]	@ (8001ef0 <main+0x1c0>)
 8001e1e:	4835      	ldr	r0, [pc, #212]	@ (8001ef4 <main+0x1c4>)
 8001e20:	f004 fae4 	bl	80063ec <siprintf>

    lcdSetCursor(0, 15);
 8001e24:	210f      	movs	r1, #15
 8001e26:	2000      	movs	r0, #0
 8001e28:	f7ff feaa 	bl	8001b80 <lcdSetCursor>
    lcdPrintf(MAX30100_data);
 8001e2c:	4831      	ldr	r0, [pc, #196]	@ (8001ef4 <main+0x1c4>)
 8001e2e:	f7ff fd8b 	bl	8001948 <lcdPrintf>
    MAX30100_WriteRegister(MAX30100_REG_INTERRUPT_STATUS, 0x00);
 8001e32:	2100      	movs	r1, #0
 8001e34:	2000      	movs	r0, #0
 8001e36:	f7fe fd39 	bl	80008ac <MAX30100_WriteRegister>
    uint8_t mode = MAX30100_ReadRegister(MAX30100_REG_MODE_CONFIGURATION);
 8001e3a:	2006      	movs	r0, #6
 8001e3c:	f7fe fd1a 	bl	8000874 <MAX30100_ReadRegister>
 8001e40:	4603      	mov	r3, r0
 8001e42:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
    char dbg[32];
    sprintf(dbg, "MODE:0x%02X", mode);
 8001e46:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8001e4a:	463b      	mov	r3, r7
 8001e4c:	492a      	ldr	r1, [pc, #168]	@ (8001ef8 <main+0x1c8>)
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f004 facc 	bl	80063ec <siprintf>
    lcdSetCursor(0, 30);
 8001e54:	211e      	movs	r1, #30
 8001e56:	2000      	movs	r0, #0
 8001e58:	f7ff fe92 	bl	8001b80 <lcdSetCursor>
    lcdPrintf(dbg);
 8001e5c:	463b      	mov	r3, r7
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7ff fd72 	bl	8001948 <lcdPrintf>
//    ILI9341_WriteString(0, 30, dbg, Font_7x10, ILI9341_RED, ILI9341_BLACK);

    uint8_t status = MAX30100_ReadRegister(MAX30100_REG_INTERRUPT_STATUS);
 8001e64:	2000      	movs	r0, #0
 8001e66:	f7fe fd05 	bl	8000874 <MAX30100_ReadRegister>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    sprintf(dbg, "INT:0x%02X", status);
 8001e70:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8001e74:	463b      	mov	r3, r7
 8001e76:	4921      	ldr	r1, [pc, #132]	@ (8001efc <main+0x1cc>)
 8001e78:	4618      	mov	r0, r3
 8001e7a:	f004 fab7 	bl	80063ec <siprintf>
    lcdSetCursor(0, 45);
 8001e7e:	212d      	movs	r1, #45	@ 0x2d
 8001e80:	2000      	movs	r0, #0
 8001e82:	f7ff fe7d 	bl	8001b80 <lcdSetCursor>
    lcdPrintf(dbg);
 8001e86:	463b      	mov	r3, r7
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f7ff fd5d 	bl	8001948 <lcdPrintf>
//    ILI9341_WriteString(0, 45, dbg, Font_7x10, ILI9341_RED, ILI9341_BLACK);

    uint8_t part_id = MAX30100_GetPartId(&pox.hrm);
 8001e8e:	481c      	ldr	r0, [pc, #112]	@ (8001f00 <main+0x1d0>)
 8001e90:	f7fe fce3 	bl	800085a <MAX30100_GetPartId>
 8001e94:	4603      	mov	r3, r0
 8001e96:	f887 3020 	strb.w	r3, [r7, #32]
    sprintf(MAX30100_data, "PartID: 0x%02X", part_id);
 8001e9a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	4918      	ldr	r1, [pc, #96]	@ (8001f04 <main+0x1d4>)
 8001ea2:	4814      	ldr	r0, [pc, #80]	@ (8001ef4 <main+0x1c4>)
 8001ea4:	f004 faa2 	bl	80063ec <siprintf>
    lcdSetCursor(0, 60);
 8001ea8:	213c      	movs	r1, #60	@ 0x3c
 8001eaa:	2000      	movs	r0, #0
 8001eac:	f7ff fe68 	bl	8001b80 <lcdSetCursor>
    lcdPrintf(MAX30100_data);
 8001eb0:	4810      	ldr	r0, [pc, #64]	@ (8001ef4 <main+0x1c4>)
 8001eb2:	f7ff fd49 	bl	8001948 <lcdPrintf>
//    ILI9341_WriteString(0, 60, data, Font_7x10, ILI9341_CYAN, ILI9341_BLACK);

    HAL_Delay(5000);
 8001eb6:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001eba:	f000 fe9b 	bl	8002bf4 <HAL_Delay>
    tsLastReport = HAL_GetTick();
 8001ebe:	f000 fe8d 	bl	8002bdc <HAL_GetTick>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	4a10      	ldr	r2, [pc, #64]	@ (8001f08 <main+0x1d8>)
 8001ec6:	6013      	str	r3, [r2, #0]
    lcdFillRGB(COLOR_BLACK);
 8001ec8:	2000      	movs	r0, #0
 8001eca:	f7ff fc45 	bl	8001758 <lcdFillRGB>
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  //RunProgram();
	  Max30100();
 8001ece:	f000 fb27 	bl	8002520 <Max30100>
 8001ed2:	e7fc      	b.n	8001ece <main+0x19e>
 8001ed4:	40020400 	.word	0x40020400
 8001ed8:	2000029c 	.word	0x2000029c
 8001edc:	2000037c 	.word	0x2000037c
 8001ee0:	08001d23 	.word	0x08001d23
 8001ee4:	20000008 	.word	0x20000008
 8001ee8:	08006e18 	.word	0x08006e18
 8001eec:	08006e28 	.word	0x08006e28
 8001ef0:	08006e3c 	.word	0x08006e3c
 8001ef4:	20000420 	.word	0x20000420
 8001ef8:	08006e4c 	.word	0x08006e4c
 8001efc:	08006e58 	.word	0x08006e58
 8001f00:	200003d4 	.word	0x200003d4
 8001f04:	08006e64 	.word	0x08006e64
 8001f08:	2000041c 	.word	0x2000041c

08001f0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b094      	sub	sp, #80	@ 0x50
 8001f10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f12:	f107 0320 	add.w	r3, r7, #32
 8001f16:	2230      	movs	r2, #48	@ 0x30
 8001f18:	2100      	movs	r1, #0
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f004 faa8 	bl	8006470 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f20:	f107 030c 	add.w	r3, r7, #12
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	605a      	str	r2, [r3, #4]
 8001f2a:	609a      	str	r2, [r3, #8]
 8001f2c:	60da      	str	r2, [r3, #12]
 8001f2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f30:	2300      	movs	r3, #0
 8001f32:	60bb      	str	r3, [r7, #8]
 8001f34:	4b28      	ldr	r3, [pc, #160]	@ (8001fd8 <SystemClock_Config+0xcc>)
 8001f36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f38:	4a27      	ldr	r2, [pc, #156]	@ (8001fd8 <SystemClock_Config+0xcc>)
 8001f3a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f40:	4b25      	ldr	r3, [pc, #148]	@ (8001fd8 <SystemClock_Config+0xcc>)
 8001f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f44:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f48:	60bb      	str	r3, [r7, #8]
 8001f4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	607b      	str	r3, [r7, #4]
 8001f50:	4b22      	ldr	r3, [pc, #136]	@ (8001fdc <SystemClock_Config+0xd0>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a21      	ldr	r2, [pc, #132]	@ (8001fdc <SystemClock_Config+0xd0>)
 8001f56:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f5a:	6013      	str	r3, [r2, #0]
 8001f5c:	4b1f      	ldr	r3, [pc, #124]	@ (8001fdc <SystemClock_Config+0xd0>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f64:	607b      	str	r3, [r7, #4]
 8001f66:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001f6c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001f70:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001f72:	2302      	movs	r3, #2
 8001f74:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001f76:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001f7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001f7c:	2304      	movs	r3, #4
 8001f7e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001f80:	23a8      	movs	r3, #168	@ 0xa8
 8001f82:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001f84:	2302      	movs	r3, #2
 8001f86:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001f88:	2304      	movs	r3, #4
 8001f8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f8c:	f107 0320 	add.w	r3, r7, #32
 8001f90:	4618      	mov	r0, r3
 8001f92:	f002 fbb9 	bl	8004708 <HAL_RCC_OscConfig>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d001      	beq.n	8001fa0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001f9c:	f000 fb1e 	bl	80025dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fa0:	230f      	movs	r3, #15
 8001fa2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fa4:	2302      	movs	r3, #2
 8001fa6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001fac:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001fb0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001fb2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fb6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001fb8:	f107 030c 	add.w	r3, r7, #12
 8001fbc:	2105      	movs	r1, #5
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f002 fe1a 	bl	8004bf8 <HAL_RCC_ClockConfig>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d001      	beq.n	8001fce <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001fca:	f000 fb07 	bl	80025dc <Error_Handler>
  }
}
 8001fce:	bf00      	nop
 8001fd0:	3750      	adds	r7, #80	@ 0x50
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	40007000 	.word	0x40007000

08001fe0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001fe6:	463b      	mov	r3, r7
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001ff2:	4b21      	ldr	r3, [pc, #132]	@ (8002078 <MX_ADC1_Init+0x98>)
 8001ff4:	4a21      	ldr	r2, [pc, #132]	@ (800207c <MX_ADC1_Init+0x9c>)
 8001ff6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001ff8:	4b1f      	ldr	r3, [pc, #124]	@ (8002078 <MX_ADC1_Init+0x98>)
 8001ffa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001ffe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002000:	4b1d      	ldr	r3, [pc, #116]	@ (8002078 <MX_ADC1_Init+0x98>)
 8002002:	2200      	movs	r2, #0
 8002004:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002006:	4b1c      	ldr	r3, [pc, #112]	@ (8002078 <MX_ADC1_Init+0x98>)
 8002008:	2200      	movs	r2, #0
 800200a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800200c:	4b1a      	ldr	r3, [pc, #104]	@ (8002078 <MX_ADC1_Init+0x98>)
 800200e:	2201      	movs	r2, #1
 8002010:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002012:	4b19      	ldr	r3, [pc, #100]	@ (8002078 <MX_ADC1_Init+0x98>)
 8002014:	2200      	movs	r2, #0
 8002016:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800201a:	4b17      	ldr	r3, [pc, #92]	@ (8002078 <MX_ADC1_Init+0x98>)
 800201c:	2200      	movs	r2, #0
 800201e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002020:	4b15      	ldr	r3, [pc, #84]	@ (8002078 <MX_ADC1_Init+0x98>)
 8002022:	4a17      	ldr	r2, [pc, #92]	@ (8002080 <MX_ADC1_Init+0xa0>)
 8002024:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002026:	4b14      	ldr	r3, [pc, #80]	@ (8002078 <MX_ADC1_Init+0x98>)
 8002028:	2200      	movs	r2, #0
 800202a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800202c:	4b12      	ldr	r3, [pc, #72]	@ (8002078 <MX_ADC1_Init+0x98>)
 800202e:	2201      	movs	r2, #1
 8002030:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002032:	4b11      	ldr	r3, [pc, #68]	@ (8002078 <MX_ADC1_Init+0x98>)
 8002034:	2200      	movs	r2, #0
 8002036:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800203a:	4b0f      	ldr	r3, [pc, #60]	@ (8002078 <MX_ADC1_Init+0x98>)
 800203c:	2201      	movs	r2, #1
 800203e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002040:	480d      	ldr	r0, [pc, #52]	@ (8002078 <MX_ADC1_Init+0x98>)
 8002042:	f000 fdfb 	bl	8002c3c <HAL_ADC_Init>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800204c:	f000 fac6 	bl	80025dc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002050:	2300      	movs	r3, #0
 8002052:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002054:	2301      	movs	r3, #1
 8002056:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8002058:	2307      	movs	r3, #7
 800205a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800205c:	463b      	mov	r3, r7
 800205e:	4619      	mov	r1, r3
 8002060:	4805      	ldr	r0, [pc, #20]	@ (8002078 <MX_ADC1_Init+0x98>)
 8002062:	f000 fe2f 	bl	8002cc4 <HAL_ADC_ConfigChannel>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800206c:	f000 fab6 	bl	80025dc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002070:	bf00      	nop
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}
 8002078:	200001a8 	.word	0x200001a8
 800207c:	40012000 	.word	0x40012000
 8002080:	0f000001 	.word	0x0f000001

08002084 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002088:	4b12      	ldr	r3, [pc, #72]	@ (80020d4 <MX_I2C1_Init+0x50>)
 800208a:	4a13      	ldr	r2, [pc, #76]	@ (80020d8 <MX_I2C1_Init+0x54>)
 800208c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800208e:	4b11      	ldr	r3, [pc, #68]	@ (80020d4 <MX_I2C1_Init+0x50>)
 8002090:	4a12      	ldr	r2, [pc, #72]	@ (80020dc <MX_I2C1_Init+0x58>)
 8002092:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002094:	4b0f      	ldr	r3, [pc, #60]	@ (80020d4 <MX_I2C1_Init+0x50>)
 8002096:	2200      	movs	r2, #0
 8002098:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800209a:	4b0e      	ldr	r3, [pc, #56]	@ (80020d4 <MX_I2C1_Init+0x50>)
 800209c:	2200      	movs	r2, #0
 800209e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80020a0:	4b0c      	ldr	r3, [pc, #48]	@ (80020d4 <MX_I2C1_Init+0x50>)
 80020a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80020a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80020a8:	4b0a      	ldr	r3, [pc, #40]	@ (80020d4 <MX_I2C1_Init+0x50>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80020ae:	4b09      	ldr	r3, [pc, #36]	@ (80020d4 <MX_I2C1_Init+0x50>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020b4:	4b07      	ldr	r3, [pc, #28]	@ (80020d4 <MX_I2C1_Init+0x50>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020ba:	4b06      	ldr	r3, [pc, #24]	@ (80020d4 <MX_I2C1_Init+0x50>)
 80020bc:	2200      	movs	r2, #0
 80020be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020c0:	4804      	ldr	r0, [pc, #16]	@ (80020d4 <MX_I2C1_Init+0x50>)
 80020c2:	f001 fafd 	bl	80036c0 <HAL_I2C_Init>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d001      	beq.n	80020d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80020cc:	f000 fa86 	bl	80025dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80020d0:	bf00      	nop
 80020d2:	bd80      	pop	{r7, pc}
 80020d4:	200001f0 	.word	0x200001f0
 80020d8:	40005400 	.word	0x40005400
 80020dc:	00061a80 	.word	0x00061a80

080020e0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80020e4:	4b17      	ldr	r3, [pc, #92]	@ (8002144 <MX_SPI2_Init+0x64>)
 80020e6:	4a18      	ldr	r2, [pc, #96]	@ (8002148 <MX_SPI2_Init+0x68>)
 80020e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80020ea:	4b16      	ldr	r3, [pc, #88]	@ (8002144 <MX_SPI2_Init+0x64>)
 80020ec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80020f0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80020f2:	4b14      	ldr	r3, [pc, #80]	@ (8002144 <MX_SPI2_Init+0x64>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80020f8:	4b12      	ldr	r3, [pc, #72]	@ (8002144 <MX_SPI2_Init+0x64>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020fe:	4b11      	ldr	r3, [pc, #68]	@ (8002144 <MX_SPI2_Init+0x64>)
 8002100:	2200      	movs	r2, #0
 8002102:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002104:	4b0f      	ldr	r3, [pc, #60]	@ (8002144 <MX_SPI2_Init+0x64>)
 8002106:	2200      	movs	r2, #0
 8002108:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800210a:	4b0e      	ldr	r3, [pc, #56]	@ (8002144 <MX_SPI2_Init+0x64>)
 800210c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002110:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8002112:	4b0c      	ldr	r3, [pc, #48]	@ (8002144 <MX_SPI2_Init+0x64>)
 8002114:	2228      	movs	r2, #40	@ 0x28
 8002116:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002118:	4b0a      	ldr	r3, [pc, #40]	@ (8002144 <MX_SPI2_Init+0x64>)
 800211a:	2200      	movs	r2, #0
 800211c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800211e:	4b09      	ldr	r3, [pc, #36]	@ (8002144 <MX_SPI2_Init+0x64>)
 8002120:	2200      	movs	r2, #0
 8002122:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002124:	4b07      	ldr	r3, [pc, #28]	@ (8002144 <MX_SPI2_Init+0x64>)
 8002126:	2200      	movs	r2, #0
 8002128:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800212a:	4b06      	ldr	r3, [pc, #24]	@ (8002144 <MX_SPI2_Init+0x64>)
 800212c:	220a      	movs	r2, #10
 800212e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002130:	4804      	ldr	r0, [pc, #16]	@ (8002144 <MX_SPI2_Init+0x64>)
 8002132:	f002 ff81 	bl	8005038 <HAL_SPI_Init>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d001      	beq.n	8002140 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800213c:	f000 fa4e 	bl	80025dc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002140:	bf00      	nop
 8002142:	bd80      	pop	{r7, pc}
 8002144:	20000244 	.word	0x20000244
 8002148:	40003800 	.word	0x40003800

0800214c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002152:	f107 0308 	add.w	r3, r7, #8
 8002156:	2200      	movs	r2, #0
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	605a      	str	r2, [r3, #4]
 800215c:	609a      	str	r2, [r3, #8]
 800215e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002160:	463b      	mov	r3, r7
 8002162:	2200      	movs	r2, #0
 8002164:	601a      	str	r2, [r3, #0]
 8002166:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002168:	4b1e      	ldr	r3, [pc, #120]	@ (80021e4 <MX_TIM2_Init+0x98>)
 800216a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800216e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8499;
 8002170:	4b1c      	ldr	r3, [pc, #112]	@ (80021e4 <MX_TIM2_Init+0x98>)
 8002172:	f242 1233 	movw	r2, #8499	@ 0x2133
 8002176:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002178:	4b1a      	ldr	r3, [pc, #104]	@ (80021e4 <MX_TIM2_Init+0x98>)
 800217a:	2200      	movs	r2, #0
 800217c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 800217e:	4b19      	ldr	r3, [pc, #100]	@ (80021e4 <MX_TIM2_Init+0x98>)
 8002180:	f242 720f 	movw	r2, #9999	@ 0x270f
 8002184:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002186:	4b17      	ldr	r3, [pc, #92]	@ (80021e4 <MX_TIM2_Init+0x98>)
 8002188:	2200      	movs	r2, #0
 800218a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800218c:	4b15      	ldr	r3, [pc, #84]	@ (80021e4 <MX_TIM2_Init+0x98>)
 800218e:	2200      	movs	r2, #0
 8002190:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002192:	4814      	ldr	r0, [pc, #80]	@ (80021e4 <MX_TIM2_Init+0x98>)
 8002194:	f003 f821 	bl	80051da <HAL_TIM_Base_Init>
 8002198:	4603      	mov	r3, r0
 800219a:	2b00      	cmp	r3, #0
 800219c:	d001      	beq.n	80021a2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800219e:	f000 fa1d 	bl	80025dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021a8:	f107 0308 	add.w	r3, r7, #8
 80021ac:	4619      	mov	r1, r3
 80021ae:	480d      	ldr	r0, [pc, #52]	@ (80021e4 <MX_TIM2_Init+0x98>)
 80021b0:	f003 f8d2 	bl	8005358 <HAL_TIM_ConfigClockSource>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d001      	beq.n	80021be <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80021ba:	f000 fa0f 	bl	80025dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80021be:	2300      	movs	r3, #0
 80021c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80021c2:	2300      	movs	r3, #0
 80021c4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80021c6:	463b      	mov	r3, r7
 80021c8:	4619      	mov	r1, r3
 80021ca:	4806      	ldr	r0, [pc, #24]	@ (80021e4 <MX_TIM2_Init+0x98>)
 80021cc:	f003 fad2 	bl	8005774 <HAL_TIMEx_MasterConfigSynchronization>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80021d6:	f000 fa01 	bl	80025dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80021da:	bf00      	nop
 80021dc:	3718      	adds	r7, #24
 80021de:	46bd      	mov	sp, r7
 80021e0:	bd80      	pop	{r7, pc}
 80021e2:	bf00      	nop
 80021e4:	2000029c 	.word	0x2000029c

080021e8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021ec:	4b11      	ldr	r3, [pc, #68]	@ (8002234 <MX_USART1_UART_Init+0x4c>)
 80021ee:	4a12      	ldr	r2, [pc, #72]	@ (8002238 <MX_USART1_UART_Init+0x50>)
 80021f0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80021f2:	4b10      	ldr	r3, [pc, #64]	@ (8002234 <MX_USART1_UART_Init+0x4c>)
 80021f4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80021f8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021fa:	4b0e      	ldr	r3, [pc, #56]	@ (8002234 <MX_USART1_UART_Init+0x4c>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002200:	4b0c      	ldr	r3, [pc, #48]	@ (8002234 <MX_USART1_UART_Init+0x4c>)
 8002202:	2200      	movs	r2, #0
 8002204:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002206:	4b0b      	ldr	r3, [pc, #44]	@ (8002234 <MX_USART1_UART_Init+0x4c>)
 8002208:	2200      	movs	r2, #0
 800220a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800220c:	4b09      	ldr	r3, [pc, #36]	@ (8002234 <MX_USART1_UART_Init+0x4c>)
 800220e:	220c      	movs	r2, #12
 8002210:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002212:	4b08      	ldr	r3, [pc, #32]	@ (8002234 <MX_USART1_UART_Init+0x4c>)
 8002214:	2200      	movs	r2, #0
 8002216:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002218:	4b06      	ldr	r3, [pc, #24]	@ (8002234 <MX_USART1_UART_Init+0x4c>)
 800221a:	2200      	movs	r2, #0
 800221c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800221e:	4805      	ldr	r0, [pc, #20]	@ (8002234 <MX_USART1_UART_Init+0x4c>)
 8002220:	f003 fb24 	bl	800586c <HAL_UART_Init>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800222a:	f000 f9d7 	bl	80025dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800222e:	bf00      	nop
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	200002e4 	.word	0x200002e4
 8002238:	40011000 	.word	0x40011000

0800223c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b08c      	sub	sp, #48	@ 0x30
 8002240:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002242:	f107 031c 	add.w	r3, r7, #28
 8002246:	2200      	movs	r2, #0
 8002248:	601a      	str	r2, [r3, #0]
 800224a:	605a      	str	r2, [r3, #4]
 800224c:	609a      	str	r2, [r3, #8]
 800224e:	60da      	str	r2, [r3, #12]
 8002250:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002252:	2300      	movs	r3, #0
 8002254:	61bb      	str	r3, [r7, #24]
 8002256:	4b4c      	ldr	r3, [pc, #304]	@ (8002388 <MX_GPIO_Init+0x14c>)
 8002258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225a:	4a4b      	ldr	r2, [pc, #300]	@ (8002388 <MX_GPIO_Init+0x14c>)
 800225c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002260:	6313      	str	r3, [r2, #48]	@ 0x30
 8002262:	4b49      	ldr	r3, [pc, #292]	@ (8002388 <MX_GPIO_Init+0x14c>)
 8002264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002266:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800226a:	61bb      	str	r3, [r7, #24]
 800226c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800226e:	2300      	movs	r3, #0
 8002270:	617b      	str	r3, [r7, #20]
 8002272:	4b45      	ldr	r3, [pc, #276]	@ (8002388 <MX_GPIO_Init+0x14c>)
 8002274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002276:	4a44      	ldr	r2, [pc, #272]	@ (8002388 <MX_GPIO_Init+0x14c>)
 8002278:	f043 0301 	orr.w	r3, r3, #1
 800227c:	6313      	str	r3, [r2, #48]	@ 0x30
 800227e:	4b42      	ldr	r3, [pc, #264]	@ (8002388 <MX_GPIO_Init+0x14c>)
 8002280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	617b      	str	r3, [r7, #20]
 8002288:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	613b      	str	r3, [r7, #16]
 800228e:	4b3e      	ldr	r3, [pc, #248]	@ (8002388 <MX_GPIO_Init+0x14c>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002292:	4a3d      	ldr	r2, [pc, #244]	@ (8002388 <MX_GPIO_Init+0x14c>)
 8002294:	f043 0304 	orr.w	r3, r3, #4
 8002298:	6313      	str	r3, [r2, #48]	@ 0x30
 800229a:	4b3b      	ldr	r3, [pc, #236]	@ (8002388 <MX_GPIO_Init+0x14c>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229e:	f003 0304 	and.w	r3, r3, #4
 80022a2:	613b      	str	r3, [r7, #16]
 80022a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80022a6:	2300      	movs	r3, #0
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	4b37      	ldr	r3, [pc, #220]	@ (8002388 <MX_GPIO_Init+0x14c>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ae:	4a36      	ldr	r2, [pc, #216]	@ (8002388 <MX_GPIO_Init+0x14c>)
 80022b0:	f043 0302 	orr.w	r3, r3, #2
 80022b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80022b6:	4b34      	ldr	r3, [pc, #208]	@ (8002388 <MX_GPIO_Init+0x14c>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ba:	f003 0302 	and.w	r3, r3, #2
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80022c2:	2300      	movs	r3, #0
 80022c4:	60bb      	str	r3, [r7, #8]
 80022c6:	4b30      	ldr	r3, [pc, #192]	@ (8002388 <MX_GPIO_Init+0x14c>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022ca:	4a2f      	ldr	r2, [pc, #188]	@ (8002388 <MX_GPIO_Init+0x14c>)
 80022cc:	f043 0310 	orr.w	r3, r3, #16
 80022d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80022d2:	4b2d      	ldr	r3, [pc, #180]	@ (8002388 <MX_GPIO_Init+0x14c>)
 80022d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d6:	f003 0310 	and.w	r3, r3, #16
 80022da:	60bb      	str	r3, [r7, #8]
 80022dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	607b      	str	r3, [r7, #4]
 80022e2:	4b29      	ldr	r3, [pc, #164]	@ (8002388 <MX_GPIO_Init+0x14c>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e6:	4a28      	ldr	r2, [pc, #160]	@ (8002388 <MX_GPIO_Init+0x14c>)
 80022e8:	f043 0308 	orr.w	r3, r3, #8
 80022ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80022ee:	4b26      	ldr	r3, [pc, #152]	@ (8002388 <MX_GPIO_Init+0x14c>)
 80022f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022f2:	f003 0308 	and.w	r3, r3, #8
 80022f6:	607b      	str	r3, [r7, #4]
 80022f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_BL_Pin|TOUCH_CS_Pin, GPIO_PIN_RESET);
 80022fa:	2200      	movs	r2, #0
 80022fc:	f241 0102 	movw	r1, #4098	@ 0x1002
 8002300:	4822      	ldr	r0, [pc, #136]	@ (800238c <MX_GPIO_Init+0x150>)
 8002302:	f001 f9ab 	bl	800365c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8002306:	2306      	movs	r3, #6
 8002308:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800230a:	2300      	movs	r3, #0
 800230c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230e:	2300      	movs	r3, #0
 8002310:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002312:	f107 031c 	add.w	r3, r7, #28
 8002316:	4619      	mov	r1, r3
 8002318:	481d      	ldr	r0, [pc, #116]	@ (8002390 <MX_GPIO_Init+0x154>)
 800231a:	f001 f803 	bl	8003324 <HAL_GPIO_Init>

  /*Configure GPIO pin : TC_PEN_Pin */
  GPIO_InitStruct.Pin = TC_PEN_Pin;
 800231e:	2320      	movs	r3, #32
 8002320:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002322:	2300      	movs	r3, #0
 8002324:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002326:	2300      	movs	r3, #0
 8002328:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(TC_PEN_GPIO_Port, &GPIO_InitStruct);
 800232a:	f107 031c 	add.w	r3, r7, #28
 800232e:	4619      	mov	r1, r3
 8002330:	4818      	ldr	r0, [pc, #96]	@ (8002394 <MX_GPIO_Init+0x158>)
 8002332:	f000 fff7 	bl	8003324 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002336:	2301      	movs	r3, #1
 8002338:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800233a:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800233e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002340:	2301      	movs	r3, #1
 8002342:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002344:	f107 031c 	add.w	r3, r7, #28
 8002348:	4619      	mov	r1, r3
 800234a:	4810      	ldr	r0, [pc, #64]	@ (800238c <MX_GPIO_Init+0x150>)
 800234c:	f000 ffea 	bl	8003324 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BL_Pin TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin|TOUCH_CS_Pin;
 8002350:	f241 0302 	movw	r3, #4098	@ 0x1002
 8002354:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002356:	2301      	movs	r3, #1
 8002358:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800235a:	2300      	movs	r3, #0
 800235c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800235e:	2300      	movs	r3, #0
 8002360:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002362:	f107 031c 	add.w	r3, r7, #28
 8002366:	4619      	mov	r1, r3
 8002368:	4808      	ldr	r0, [pc, #32]	@ (800238c <MX_GPIO_Init+0x150>)
 800236a:	f000 ffdb 	bl	8003324 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800236e:	2200      	movs	r2, #0
 8002370:	2100      	movs	r1, #0
 8002372:	2006      	movs	r0, #6
 8002374:	f000 ff9f 	bl	80032b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8002378:	2006      	movs	r0, #6
 800237a:	f000 ffb8 	bl	80032ee <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800237e:	bf00      	nop
 8002380:	3730      	adds	r7, #48	@ 0x30
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40023800 	.word	0x40023800
 800238c:	40020400 	.word	0x40020400
 8002390:	40020000 	.word	0x40020000
 8002394:	40020800 	.word	0x40020800

08002398 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b088      	sub	sp, #32
 800239c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800239e:	1d3b      	adds	r3, r7, #4
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]
 80023a4:	605a      	str	r2, [r3, #4]
 80023a6:	609a      	str	r2, [r3, #8]
 80023a8:	60da      	str	r2, [r3, #12]
 80023aa:	611a      	str	r2, [r3, #16]
 80023ac:	615a      	str	r2, [r3, #20]
 80023ae:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 80023b0:	4b27      	ldr	r3, [pc, #156]	@ (8002450 <MX_FSMC_Init+0xb8>)
 80023b2:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 80023b6:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 80023b8:	4b25      	ldr	r3, [pc, #148]	@ (8002450 <MX_FSMC_Init+0xb8>)
 80023ba:	4a26      	ldr	r2, [pc, #152]	@ (8002454 <MX_FSMC_Init+0xbc>)
 80023bc:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80023be:	4b24      	ldr	r3, [pc, #144]	@ (8002450 <MX_FSMC_Init+0xb8>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80023c4:	4b22      	ldr	r3, [pc, #136]	@ (8002450 <MX_FSMC_Init+0xb8>)
 80023c6:	2200      	movs	r2, #0
 80023c8:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80023ca:	4b21      	ldr	r3, [pc, #132]	@ (8002450 <MX_FSMC_Init+0xb8>)
 80023cc:	2200      	movs	r2, #0
 80023ce:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80023d0:	4b1f      	ldr	r3, [pc, #124]	@ (8002450 <MX_FSMC_Init+0xb8>)
 80023d2:	2210      	movs	r2, #16
 80023d4:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80023d6:	4b1e      	ldr	r3, [pc, #120]	@ (8002450 <MX_FSMC_Init+0xb8>)
 80023d8:	2200      	movs	r2, #0
 80023da:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80023dc:	4b1c      	ldr	r3, [pc, #112]	@ (8002450 <MX_FSMC_Init+0xb8>)
 80023de:	2200      	movs	r2, #0
 80023e0:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80023e2:	4b1b      	ldr	r3, [pc, #108]	@ (8002450 <MX_FSMC_Init+0xb8>)
 80023e4:	2200      	movs	r2, #0
 80023e6:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80023e8:	4b19      	ldr	r3, [pc, #100]	@ (8002450 <MX_FSMC_Init+0xb8>)
 80023ea:	2200      	movs	r2, #0
 80023ec:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80023ee:	4b18      	ldr	r3, [pc, #96]	@ (8002450 <MX_FSMC_Init+0xb8>)
 80023f0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80023f4:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80023f6:	4b16      	ldr	r3, [pc, #88]	@ (8002450 <MX_FSMC_Init+0xb8>)
 80023f8:	2200      	movs	r2, #0
 80023fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80023fc:	4b14      	ldr	r3, [pc, #80]	@ (8002450 <MX_FSMC_Init+0xb8>)
 80023fe:	2200      	movs	r2, #0
 8002400:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002402:	4b13      	ldr	r3, [pc, #76]	@ (8002450 <MX_FSMC_Init+0xb8>)
 8002404:	2200      	movs	r2, #0
 8002406:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8002408:	4b11      	ldr	r3, [pc, #68]	@ (8002450 <MX_FSMC_Init+0xb8>)
 800240a:	2200      	movs	r2, #0
 800240c:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800240e:	4b10      	ldr	r3, [pc, #64]	@ (8002450 <MX_FSMC_Init+0xb8>)
 8002410:	2200      	movs	r2, #0
 8002412:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 1;
 8002414:	2301      	movs	r3, #1
 8002416:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8002418:	230f      	movs	r3, #15
 800241a:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 5;
 800241c:	2305      	movs	r3, #5
 800241e:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 8002420:	2300      	movs	r3, #0
 8002422:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8002424:	2310      	movs	r3, #16
 8002426:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8002428:	2311      	movs	r3, #17
 800242a:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800242c:	2300      	movs	r3, #0
 800242e:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8002430:	1d3b      	adds	r3, r7, #4
 8002432:	2200      	movs	r2, #0
 8002434:	4619      	mov	r1, r3
 8002436:	4806      	ldr	r0, [pc, #24]	@ (8002450 <MX_FSMC_Init+0xb8>)
 8002438:	f002 fe87 	bl	800514a <HAL_SRAM_Init>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d001      	beq.n	8002446 <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8002442:	f000 f8cb 	bl	80025dc <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8002446:	bf00      	nop
 8002448:	3720      	adds	r7, #32
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	2000032c 	.word	0x2000032c
 8002454:	a0000104 	.word	0xa0000104

08002458 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b082      	sub	sp, #8
 800245c:	af00      	add	r7, sp, #0
 800245e:	4603      	mov	r3, r0
 8002460:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0)
 8002462:	88fb      	ldrh	r3, [r7, #6]
 8002464:	2b01      	cmp	r3, #1
 8002466:	d112      	bne.n	800248e <HAL_GPIO_EXTI_Callback+0x36>
    {
        // Xử lý khi có ngắt từ PB0 tại đây
		  lcdSetTextColor(COLOR_CYAN, COLOR_BLACK);
 8002468:	2100      	movs	r1, #0
 800246a:	f240 70ff 	movw	r0, #2047	@ 0x7ff
 800246e:	f7ff fb07 	bl	8001a80 <lcdSetTextColor>
		  lcdSetTextFont(&Font16);
 8002472:	4809      	ldr	r0, [pc, #36]	@ (8002498 <HAL_GPIO_EXTI_Callback+0x40>)
 8002474:	f7ff faf4 	bl	8001a60 <lcdSetTextFont>
		  lcdSetCursor(5, 5);
 8002478:	2105      	movs	r1, #5
 800247a:	2005      	movs	r0, #5
 800247c:	f7ff fb80 	bl	8001b80 <lcdSetCursor>
		  lcdPrintf("MAX30100 is ready.\r\n");
 8002480:	4806      	ldr	r0, [pc, #24]	@ (800249c <HAL_GPIO_EXTI_Callback+0x44>)
 8002482:	f7ff fa61 	bl	8001948 <lcdPrintf>
		  HAL_Delay(3000);
 8002486:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800248a:	f000 fbb3 	bl	8002bf4 <HAL_Delay>
    }
}
 800248e:	bf00      	nop
 8002490:	3708      	adds	r7, #8
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}
 8002496:	bf00      	nop
 8002498:	20000008 	.word	0x20000008
 800249c:	08006e74 	.word	0x08006e74

080024a0 <Send_AT_Command>:
    		Reload = true;
    		count = 0;
    	}
    }
}
void Send_AT_Command(UART_HandleTypeDef *huart, const char *command, uint32_t timeout) {
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b084      	sub	sp, #16
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	60f8      	str	r0, [r7, #12]
 80024a8:	60b9      	str	r1, [r7, #8]
 80024aa:	607a      	str	r2, [r7, #4]
    // Gửi lệnh qua UART

    HAL_UART_Transmit(huart, (uint8_t *)command, strlen(command), HAL_MAX_DELAY);
 80024ac:	68b8      	ldr	r0, [r7, #8]
 80024ae:	f7fd fe8f 	bl	80001d0 <strlen>
 80024b2:	4603      	mov	r3, r0
 80024b4:	b29a      	uxth	r2, r3
 80024b6:	f04f 33ff 	mov.w	r3, #4294967295
 80024ba:	68b9      	ldr	r1, [r7, #8]
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f003 fa25 	bl	800590c <HAL_UART_Transmit>
//    lcdSetCursor(5,220);
//    Screen0();
//    lcdSetTextColor(COLOR_BLACK, COLOR_THEME_SKYBLUE_BASE);
//    lcdSetTextFont(&Font16);
//    lcdPrintf("ESP: %s\n", uart_rx_buffer);
}
 80024c2:	bf00      	nop
 80024c4:	3710      	adds	r7, #16
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
	...

080024cc <Send_AT_Commands>:
    memset(uart_rx_buffer, 0, UART_BUFFER_SIZE); // Xóa buffer
    HAL_UART_Receive(huart, uart_rx_buffer, UART_BUFFER_SIZE, timeout);
}


void Send_AT_Commands(UART_HandleTypeDef *huart) {
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b090      	sub	sp, #64	@ 0x40
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
	char data[50];
	sprintf(data, "hr= %d, spO2= %d\r\n", heartRate,spo2);
 80024d4:	4b0f      	ldr	r3, [pc, #60]	@ (8002514 <Send_AT_Commands+0x48>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	461a      	mov	r2, r3
 80024da:	4b0f      	ldr	r3, [pc, #60]	@ (8002518 <Send_AT_Commands+0x4c>)
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	f107 000c 	add.w	r0, r7, #12
 80024e2:	490e      	ldr	r1, [pc, #56]	@ (800251c <Send_AT_Commands+0x50>)
 80024e4:	f003 ff82 	bl	80063ec <siprintf>
	lcdSetCursor(0, 100);
 80024e8:	2164      	movs	r1, #100	@ 0x64
 80024ea:	2000      	movs	r0, #0
 80024ec:	f7ff fb48 	bl	8001b80 <lcdSetCursor>
	lcdPrintf(data);
 80024f0:	f107 030c 	add.w	r3, r7, #12
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff fa27 	bl	8001948 <lcdPrintf>
	Send_AT_Command(huart, data , 10000);
 80024fa:	f107 030c 	add.w	r3, r7, #12
 80024fe:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002502:	4619      	mov	r1, r3
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f7ff ffcb 	bl	80024a0 <Send_AT_Command>

}
 800250a:	bf00      	nop
 800250c:	3740      	adds	r7, #64	@ 0x40
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	20000820 	.word	0x20000820
 8002518:	20000821 	.word	0x20000821
 800251c:	08006e8c 	.word	0x08006e8c

08002520 <Max30100>:

void RunProgram(){

}

void Max30100 () {
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
    PulseOximeter_Update(&pox);
 8002526:	4825      	ldr	r0, [pc, #148]	@ (80025bc <Max30100+0x9c>)
 8002528:	f7fe fc56 	bl	8000dd8 <PulseOximeter_Update>

    // Định kỳ báo cáo nhịp tim và SpO2 mỗi 500ms
    if (HAL_GetTick() - tsLastReport > 500) {
 800252c:	f000 fb56 	bl	8002bdc <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	4b23      	ldr	r3, [pc, #140]	@ (80025c0 <Max30100+0xa0>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	1ad3      	subs	r3, r2, r3
 8002538:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 800253c:	d937      	bls.n	80025ae <Max30100+0x8e>
        heartRate = PulseOximeter_GetHeartRate(&pox);
 800253e:	481f      	ldr	r0, [pc, #124]	@ (80025bc <Max30100+0x9c>)
 8002540:	f7fe fc5d 	bl	8000dfe <PulseOximeter_GetHeartRate>
 8002544:	eef0 7a40 	vmov.f32	s15, s0
 8002548:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800254c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002550:	793b      	ldrb	r3, [r7, #4]
 8002552:	b2da      	uxtb	r2, r3
 8002554:	4b1b      	ldr	r3, [pc, #108]	@ (80025c4 <Max30100+0xa4>)
 8002556:	701a      	strb	r2, [r3, #0]
        spo2 = PulseOximeter_GetSpO2(&pox);
 8002558:	4818      	ldr	r0, [pc, #96]	@ (80025bc <Max30100+0x9c>)
 800255a:	f7fe fc60 	bl	8000e1e <PulseOximeter_GetSpO2>
 800255e:	4603      	mov	r3, r0
 8002560:	461a      	mov	r2, r3
 8002562:	4b19      	ldr	r3, [pc, #100]	@ (80025c8 <Max30100+0xa8>)
 8002564:	701a      	strb	r2, [r3, #0]

        // Hiển thị LCD
        sprintf(MAX30100_data, "HR: %d bpm", heartRate);
 8002566:	4b17      	ldr	r3, [pc, #92]	@ (80025c4 <Max30100+0xa4>)
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	461a      	mov	r2, r3
 800256c:	4917      	ldr	r1, [pc, #92]	@ (80025cc <Max30100+0xac>)
 800256e:	4818      	ldr	r0, [pc, #96]	@ (80025d0 <Max30100+0xb0>)
 8002570:	f003 ff3c 	bl	80063ec <siprintf>
        lcdSetCursor(0, 15);
 8002574:	210f      	movs	r1, #15
 8002576:	2000      	movs	r0, #0
 8002578:	f7ff fb02 	bl	8001b80 <lcdSetCursor>
        lcdPrintf(MAX30100_data);
 800257c:	4814      	ldr	r0, [pc, #80]	@ (80025d0 <Max30100+0xb0>)
 800257e:	f7ff f9e3 	bl	8001948 <lcdPrintf>
        sprintf(MAX30100_data, "SpO2: %d %%", spo2);
 8002582:	4b11      	ldr	r3, [pc, #68]	@ (80025c8 <Max30100+0xa8>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	461a      	mov	r2, r3
 8002588:	4912      	ldr	r1, [pc, #72]	@ (80025d4 <Max30100+0xb4>)
 800258a:	4811      	ldr	r0, [pc, #68]	@ (80025d0 <Max30100+0xb0>)
 800258c:	f003 ff2e 	bl	80063ec <siprintf>
        lcdSetCursor(0, 30);
 8002590:	211e      	movs	r1, #30
 8002592:	2000      	movs	r0, #0
 8002594:	f7ff faf4 	bl	8001b80 <lcdSetCursor>
        lcdPrintf(MAX30100_data);
 8002598:	480d      	ldr	r0, [pc, #52]	@ (80025d0 <Max30100+0xb0>)
 800259a:	f7ff f9d5 	bl	8001948 <lcdPrintf>


        Send_AT_Commands(&huart1);
 800259e:	480e      	ldr	r0, [pc, #56]	@ (80025d8 <Max30100+0xb8>)
 80025a0:	f7ff ff94 	bl	80024cc <Send_AT_Commands>
        tsLastReport = HAL_GetTick();
 80025a4:	f000 fb1a 	bl	8002bdc <HAL_GetTick>
 80025a8:	4603      	mov	r3, r0
 80025aa:	4a05      	ldr	r2, [pc, #20]	@ (80025c0 <Max30100+0xa0>)
 80025ac:	6013      	str	r3, [r2, #0]
    }

    HAL_Delay(10);
 80025ae:	200a      	movs	r0, #10
 80025b0:	f000 fb20 	bl	8002bf4 <HAL_Delay>
}
 80025b4:	bf00      	nop
 80025b6:	3708      	adds	r7, #8
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}
 80025bc:	2000037c 	.word	0x2000037c
 80025c0:	2000041c 	.word	0x2000041c
 80025c4:	20000820 	.word	0x20000820
 80025c8:	20000821 	.word	0x20000821
 80025cc:	08007010 	.word	0x08007010
 80025d0:	20000420 	.word	0x20000420
 80025d4:	0800701c 	.word	0x0800701c
 80025d8:	200002e4 	.word	0x200002e4

080025dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025dc:	b480      	push	{r7}
 80025de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025e0:	b672      	cpsid	i
}
 80025e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025e4:	bf00      	nop
 80025e6:	e7fd      	b.n	80025e4 <Error_Handler+0x8>

080025e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ee:	2300      	movs	r3, #0
 80025f0:	607b      	str	r3, [r7, #4]
 80025f2:	4b10      	ldr	r3, [pc, #64]	@ (8002634 <HAL_MspInit+0x4c>)
 80025f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f6:	4a0f      	ldr	r2, [pc, #60]	@ (8002634 <HAL_MspInit+0x4c>)
 80025f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80025fe:	4b0d      	ldr	r3, [pc, #52]	@ (8002634 <HAL_MspInit+0x4c>)
 8002600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002602:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002606:	607b      	str	r3, [r7, #4]
 8002608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800260a:	2300      	movs	r3, #0
 800260c:	603b      	str	r3, [r7, #0]
 800260e:	4b09      	ldr	r3, [pc, #36]	@ (8002634 <HAL_MspInit+0x4c>)
 8002610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002612:	4a08      	ldr	r2, [pc, #32]	@ (8002634 <HAL_MspInit+0x4c>)
 8002614:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002618:	6413      	str	r3, [r2, #64]	@ 0x40
 800261a:	4b06      	ldr	r3, [pc, #24]	@ (8002634 <HAL_MspInit+0x4c>)
 800261c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800261e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002622:	603b      	str	r3, [r7, #0]
 8002624:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002626:	bf00      	nop
 8002628:	370c      	adds	r7, #12
 800262a:	46bd      	mov	sp, r7
 800262c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002630:	4770      	bx	lr
 8002632:	bf00      	nop
 8002634:	40023800 	.word	0x40023800

08002638 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b08a      	sub	sp, #40	@ 0x28
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002640:	f107 0314 	add.w	r3, r7, #20
 8002644:	2200      	movs	r2, #0
 8002646:	601a      	str	r2, [r3, #0]
 8002648:	605a      	str	r2, [r3, #4]
 800264a:	609a      	str	r2, [r3, #8]
 800264c:	60da      	str	r2, [r3, #12]
 800264e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a17      	ldr	r2, [pc, #92]	@ (80026b4 <HAL_ADC_MspInit+0x7c>)
 8002656:	4293      	cmp	r3, r2
 8002658:	d127      	bne.n	80026aa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800265a:	2300      	movs	r3, #0
 800265c:	613b      	str	r3, [r7, #16]
 800265e:	4b16      	ldr	r3, [pc, #88]	@ (80026b8 <HAL_ADC_MspInit+0x80>)
 8002660:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002662:	4a15      	ldr	r2, [pc, #84]	@ (80026b8 <HAL_ADC_MspInit+0x80>)
 8002664:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002668:	6453      	str	r3, [r2, #68]	@ 0x44
 800266a:	4b13      	ldr	r3, [pc, #76]	@ (80026b8 <HAL_ADC_MspInit+0x80>)
 800266c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800266e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002672:	613b      	str	r3, [r7, #16]
 8002674:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002676:	2300      	movs	r3, #0
 8002678:	60fb      	str	r3, [r7, #12]
 800267a:	4b0f      	ldr	r3, [pc, #60]	@ (80026b8 <HAL_ADC_MspInit+0x80>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267e:	4a0e      	ldr	r2, [pc, #56]	@ (80026b8 <HAL_ADC_MspInit+0x80>)
 8002680:	f043 0301 	orr.w	r3, r3, #1
 8002684:	6313      	str	r3, [r2, #48]	@ 0x30
 8002686:	4b0c      	ldr	r3, [pc, #48]	@ (80026b8 <HAL_ADC_MspInit+0x80>)
 8002688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800268a:	f003 0301 	and.w	r3, r3, #1
 800268e:	60fb      	str	r3, [r7, #12]
 8002690:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002692:	2301      	movs	r3, #1
 8002694:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002696:	2303      	movs	r3, #3
 8002698:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269a:	2300      	movs	r3, #0
 800269c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800269e:	f107 0314 	add.w	r3, r7, #20
 80026a2:	4619      	mov	r1, r3
 80026a4:	4805      	ldr	r0, [pc, #20]	@ (80026bc <HAL_ADC_MspInit+0x84>)
 80026a6:	f000 fe3d 	bl	8003324 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80026aa:	bf00      	nop
 80026ac:	3728      	adds	r7, #40	@ 0x28
 80026ae:	46bd      	mov	sp, r7
 80026b0:	bd80      	pop	{r7, pc}
 80026b2:	bf00      	nop
 80026b4:	40012000 	.word	0x40012000
 80026b8:	40023800 	.word	0x40023800
 80026bc:	40020000 	.word	0x40020000

080026c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b08a      	sub	sp, #40	@ 0x28
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026c8:	f107 0314 	add.w	r3, r7, #20
 80026cc:	2200      	movs	r2, #0
 80026ce:	601a      	str	r2, [r3, #0]
 80026d0:	605a      	str	r2, [r3, #4]
 80026d2:	609a      	str	r2, [r3, #8]
 80026d4:	60da      	str	r2, [r3, #12]
 80026d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a19      	ldr	r2, [pc, #100]	@ (8002744 <HAL_I2C_MspInit+0x84>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d12b      	bne.n	800273a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026e2:	2300      	movs	r3, #0
 80026e4:	613b      	str	r3, [r7, #16]
 80026e6:	4b18      	ldr	r3, [pc, #96]	@ (8002748 <HAL_I2C_MspInit+0x88>)
 80026e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026ea:	4a17      	ldr	r2, [pc, #92]	@ (8002748 <HAL_I2C_MspInit+0x88>)
 80026ec:	f043 0302 	orr.w	r3, r3, #2
 80026f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80026f2:	4b15      	ldr	r3, [pc, #84]	@ (8002748 <HAL_I2C_MspInit+0x88>)
 80026f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026f6:	f003 0302 	and.w	r3, r3, #2
 80026fa:	613b      	str	r3, [r7, #16]
 80026fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80026fe:	23c0      	movs	r3, #192	@ 0xc0
 8002700:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002702:	2312      	movs	r3, #18
 8002704:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002706:	2300      	movs	r3, #0
 8002708:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800270a:	2303      	movs	r3, #3
 800270c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800270e:	2304      	movs	r3, #4
 8002710:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002712:	f107 0314 	add.w	r3, r7, #20
 8002716:	4619      	mov	r1, r3
 8002718:	480c      	ldr	r0, [pc, #48]	@ (800274c <HAL_I2C_MspInit+0x8c>)
 800271a:	f000 fe03 	bl	8003324 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800271e:	2300      	movs	r3, #0
 8002720:	60fb      	str	r3, [r7, #12]
 8002722:	4b09      	ldr	r3, [pc, #36]	@ (8002748 <HAL_I2C_MspInit+0x88>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002726:	4a08      	ldr	r2, [pc, #32]	@ (8002748 <HAL_I2C_MspInit+0x88>)
 8002728:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800272c:	6413      	str	r3, [r2, #64]	@ 0x40
 800272e:	4b06      	ldr	r3, [pc, #24]	@ (8002748 <HAL_I2C_MspInit+0x88>)
 8002730:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002732:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800273a:	bf00      	nop
 800273c:	3728      	adds	r7, #40	@ 0x28
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
 8002742:	bf00      	nop
 8002744:	40005400 	.word	0x40005400
 8002748:	40023800 	.word	0x40023800
 800274c:	40020400 	.word	0x40020400

08002750 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b08a      	sub	sp, #40	@ 0x28
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002758:	f107 0314 	add.w	r3, r7, #20
 800275c:	2200      	movs	r2, #0
 800275e:	601a      	str	r2, [r3, #0]
 8002760:	605a      	str	r2, [r3, #4]
 8002762:	609a      	str	r2, [r3, #8]
 8002764:	60da      	str	r2, [r3, #12]
 8002766:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a19      	ldr	r2, [pc, #100]	@ (80027d4 <HAL_SPI_MspInit+0x84>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d12c      	bne.n	80027cc <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002772:	2300      	movs	r3, #0
 8002774:	613b      	str	r3, [r7, #16]
 8002776:	4b18      	ldr	r3, [pc, #96]	@ (80027d8 <HAL_SPI_MspInit+0x88>)
 8002778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277a:	4a17      	ldr	r2, [pc, #92]	@ (80027d8 <HAL_SPI_MspInit+0x88>)
 800277c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002780:	6413      	str	r3, [r2, #64]	@ 0x40
 8002782:	4b15      	ldr	r3, [pc, #84]	@ (80027d8 <HAL_SPI_MspInit+0x88>)
 8002784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002786:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800278a:	613b      	str	r3, [r7, #16]
 800278c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800278e:	2300      	movs	r3, #0
 8002790:	60fb      	str	r3, [r7, #12]
 8002792:	4b11      	ldr	r3, [pc, #68]	@ (80027d8 <HAL_SPI_MspInit+0x88>)
 8002794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002796:	4a10      	ldr	r2, [pc, #64]	@ (80027d8 <HAL_SPI_MspInit+0x88>)
 8002798:	f043 0302 	orr.w	r3, r3, #2
 800279c:	6313      	str	r3, [r2, #48]	@ 0x30
 800279e:	4b0e      	ldr	r3, [pc, #56]	@ (80027d8 <HAL_SPI_MspInit+0x88>)
 80027a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80027aa:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 80027ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b0:	2302      	movs	r3, #2
 80027b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b4:	2300      	movs	r3, #0
 80027b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b8:	2303      	movs	r3, #3
 80027ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80027bc:	2305      	movs	r3, #5
 80027be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027c0:	f107 0314 	add.w	r3, r7, #20
 80027c4:	4619      	mov	r1, r3
 80027c6:	4805      	ldr	r0, [pc, #20]	@ (80027dc <HAL_SPI_MspInit+0x8c>)
 80027c8:	f000 fdac 	bl	8003324 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80027cc:	bf00      	nop
 80027ce:	3728      	adds	r7, #40	@ 0x28
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40003800 	.word	0x40003800
 80027d8:	40023800 	.word	0x40023800
 80027dc:	40020400 	.word	0x40020400

080027e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b085      	sub	sp, #20
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027f0:	d10d      	bne.n	800280e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027f2:	2300      	movs	r3, #0
 80027f4:	60fb      	str	r3, [r7, #12]
 80027f6:	4b09      	ldr	r3, [pc, #36]	@ (800281c <HAL_TIM_Base_MspInit+0x3c>)
 80027f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fa:	4a08      	ldr	r2, [pc, #32]	@ (800281c <HAL_TIM_Base_MspInit+0x3c>)
 80027fc:	f043 0301 	orr.w	r3, r3, #1
 8002800:	6413      	str	r3, [r2, #64]	@ 0x40
 8002802:	4b06      	ldr	r3, [pc, #24]	@ (800281c <HAL_TIM_Base_MspInit+0x3c>)
 8002804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002806:	f003 0301 	and.w	r3, r3, #1
 800280a:	60fb      	str	r3, [r7, #12]
 800280c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800280e:	bf00      	nop
 8002810:	3714      	adds	r7, #20
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
 800281a:	bf00      	nop
 800281c:	40023800 	.word	0x40023800

08002820 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b08a      	sub	sp, #40	@ 0x28
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002828:	f107 0314 	add.w	r3, r7, #20
 800282c:	2200      	movs	r2, #0
 800282e:	601a      	str	r2, [r3, #0]
 8002830:	605a      	str	r2, [r3, #4]
 8002832:	609a      	str	r2, [r3, #8]
 8002834:	60da      	str	r2, [r3, #12]
 8002836:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a19      	ldr	r2, [pc, #100]	@ (80028a4 <HAL_UART_MspInit+0x84>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d12c      	bne.n	800289c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002842:	2300      	movs	r3, #0
 8002844:	613b      	str	r3, [r7, #16]
 8002846:	4b18      	ldr	r3, [pc, #96]	@ (80028a8 <HAL_UART_MspInit+0x88>)
 8002848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800284a:	4a17      	ldr	r2, [pc, #92]	@ (80028a8 <HAL_UART_MspInit+0x88>)
 800284c:	f043 0310 	orr.w	r3, r3, #16
 8002850:	6453      	str	r3, [r2, #68]	@ 0x44
 8002852:	4b15      	ldr	r3, [pc, #84]	@ (80028a8 <HAL_UART_MspInit+0x88>)
 8002854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002856:	f003 0310 	and.w	r3, r3, #16
 800285a:	613b      	str	r3, [r7, #16]
 800285c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800285e:	2300      	movs	r3, #0
 8002860:	60fb      	str	r3, [r7, #12]
 8002862:	4b11      	ldr	r3, [pc, #68]	@ (80028a8 <HAL_UART_MspInit+0x88>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002866:	4a10      	ldr	r2, [pc, #64]	@ (80028a8 <HAL_UART_MspInit+0x88>)
 8002868:	f043 0301 	orr.w	r3, r3, #1
 800286c:	6313      	str	r3, [r2, #48]	@ 0x30
 800286e:	4b0e      	ldr	r3, [pc, #56]	@ (80028a8 <HAL_UART_MspInit+0x88>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	60fb      	str	r3, [r7, #12]
 8002878:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800287a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800287e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002880:	2302      	movs	r3, #2
 8002882:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002884:	2300      	movs	r3, #0
 8002886:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002888:	2303      	movs	r3, #3
 800288a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800288c:	2307      	movs	r3, #7
 800288e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002890:	f107 0314 	add.w	r3, r7, #20
 8002894:	4619      	mov	r1, r3
 8002896:	4805      	ldr	r0, [pc, #20]	@ (80028ac <HAL_UART_MspInit+0x8c>)
 8002898:	f000 fd44 	bl	8003324 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 800289c:	bf00      	nop
 800289e:	3728      	adds	r7, #40	@ 0x28
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40011000 	.word	0x40011000
 80028a8:	40023800 	.word	0x40023800
 80028ac:	40020000 	.word	0x40020000

080028b0 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b086      	sub	sp, #24
 80028b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80028b6:	1d3b      	adds	r3, r7, #4
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	605a      	str	r2, [r3, #4]
 80028be:	609a      	str	r2, [r3, #8]
 80028c0:	60da      	str	r2, [r3, #12]
 80028c2:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80028c4:	4b1c      	ldr	r3, [pc, #112]	@ (8002938 <HAL_FSMC_MspInit+0x88>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d131      	bne.n	8002930 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80028cc:	4b1a      	ldr	r3, [pc, #104]	@ (8002938 <HAL_FSMC_MspInit+0x88>)
 80028ce:	2201      	movs	r2, #1
 80028d0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80028d2:	2300      	movs	r3, #0
 80028d4:	603b      	str	r3, [r7, #0]
 80028d6:	4b19      	ldr	r3, [pc, #100]	@ (800293c <HAL_FSMC_MspInit+0x8c>)
 80028d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028da:	4a18      	ldr	r2, [pc, #96]	@ (800293c <HAL_FSMC_MspInit+0x8c>)
 80028dc:	f043 0301 	orr.w	r3, r3, #1
 80028e0:	6393      	str	r3, [r2, #56]	@ 0x38
 80028e2:	4b16      	ldr	r3, [pc, #88]	@ (800293c <HAL_FSMC_MspInit+0x8c>)
 80028e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028e6:	f003 0301 	and.w	r3, r3, #1
 80028ea:	603b      	str	r3, [r7, #0]
 80028ec:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80028ee:	f64f 7380 	movw	r3, #65408	@ 0xff80
 80028f2:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f4:	2302      	movs	r3, #2
 80028f6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028f8:	2300      	movs	r3, #0
 80028fa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028fc:	2303      	movs	r3, #3
 80028fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002900:	230c      	movs	r3, #12
 8002902:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002904:	1d3b      	adds	r3, r7, #4
 8002906:	4619      	mov	r1, r3
 8002908:	480d      	ldr	r0, [pc, #52]	@ (8002940 <HAL_FSMC_MspInit+0x90>)
 800290a:	f000 fd0b 	bl	8003324 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 800290e:	f24e 73b3 	movw	r3, #59315	@ 0xe7b3
 8002912:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002914:	2302      	movs	r3, #2
 8002916:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002918:	2300      	movs	r3, #0
 800291a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800291c:	2303      	movs	r3, #3
 800291e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002920:	230c      	movs	r3, #12
 8002922:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002924:	1d3b      	adds	r3, r7, #4
 8002926:	4619      	mov	r1, r3
 8002928:	4806      	ldr	r0, [pc, #24]	@ (8002944 <HAL_FSMC_MspInit+0x94>)
 800292a:	f000 fcfb 	bl	8003324 <HAL_GPIO_Init>
 800292e:	e000      	b.n	8002932 <HAL_FSMC_MspInit+0x82>
    return;
 8002930:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 8002932:	3718      	adds	r7, #24
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}
 8002938:	20000824 	.word	0x20000824
 800293c:	40023800 	.word	0x40023800
 8002940:	40021000 	.word	0x40021000
 8002944:	40020c00 	.word	0x40020c00

08002948 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8002950:	f7ff ffae 	bl	80028b0 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002954:	bf00      	nop
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800295c:	b480      	push	{r7}
 800295e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002960:	bf00      	nop
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800296a:	b480      	push	{r7}
 800296c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800296e:	bf00      	nop
 8002970:	e7fd      	b.n	800296e <HardFault_Handler+0x4>

08002972 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002972:	b480      	push	{r7}
 8002974:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002976:	bf00      	nop
 8002978:	e7fd      	b.n	8002976 <MemManage_Handler+0x4>

0800297a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800297a:	b480      	push	{r7}
 800297c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800297e:	bf00      	nop
 8002980:	e7fd      	b.n	800297e <BusFault_Handler+0x4>

08002982 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002982:	b480      	push	{r7}
 8002984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002986:	bf00      	nop
 8002988:	e7fd      	b.n	8002986 <UsageFault_Handler+0x4>

0800298a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800298a:	b480      	push	{r7}
 800298c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800298e:	bf00      	nop
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002998:	b480      	push	{r7}
 800299a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800299c:	bf00      	nop
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029a6:	b480      	push	{r7}
 80029a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029aa:	bf00      	nop
 80029ac:	46bd      	mov	sp, r7
 80029ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b2:	4770      	bx	lr

080029b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029b8:	f000 f8fc 	bl	8002bb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80029bc:	bf00      	nop
 80029be:	bd80      	pop	{r7, pc}

080029c0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80029c4:	2001      	movs	r0, #1
 80029c6:	f000 fe63 	bl	8003690 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80029ca:	bf00      	nop
 80029cc:	bd80      	pop	{r7, pc}
	...

080029d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029d8:	4a14      	ldr	r2, [pc, #80]	@ (8002a2c <_sbrk+0x5c>)
 80029da:	4b15      	ldr	r3, [pc, #84]	@ (8002a30 <_sbrk+0x60>)
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029e4:	4b13      	ldr	r3, [pc, #76]	@ (8002a34 <_sbrk+0x64>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d102      	bne.n	80029f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029ec:	4b11      	ldr	r3, [pc, #68]	@ (8002a34 <_sbrk+0x64>)
 80029ee:	4a12      	ldr	r2, [pc, #72]	@ (8002a38 <_sbrk+0x68>)
 80029f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029f2:	4b10      	ldr	r3, [pc, #64]	@ (8002a34 <_sbrk+0x64>)
 80029f4:	681a      	ldr	r2, [r3, #0]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	4413      	add	r3, r2
 80029fa:	693a      	ldr	r2, [r7, #16]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	d207      	bcs.n	8002a10 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a00:	f003 fd4e 	bl	80064a0 <__errno>
 8002a04:	4603      	mov	r3, r0
 8002a06:	220c      	movs	r2, #12
 8002a08:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a0a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a0e:	e009      	b.n	8002a24 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a10:	4b08      	ldr	r3, [pc, #32]	@ (8002a34 <_sbrk+0x64>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a16:	4b07      	ldr	r3, [pc, #28]	@ (8002a34 <_sbrk+0x64>)
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	4a05      	ldr	r2, [pc, #20]	@ (8002a34 <_sbrk+0x64>)
 8002a20:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a22:	68fb      	ldr	r3, [r7, #12]
}
 8002a24:	4618      	mov	r0, r3
 8002a26:	3718      	adds	r7, #24
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	20020000 	.word	0x20020000
 8002a30:	00000400 	.word	0x00000400
 8002a34:	20000828 	.word	0x20000828
 8002a38:	20000998 	.word	0x20000998

08002a3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002a40:	4b06      	ldr	r3, [pc, #24]	@ (8002a5c <SystemInit+0x20>)
 8002a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a46:	4a05      	ldr	r2, [pc, #20]	@ (8002a5c <SystemInit+0x20>)
 8002a48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a50:	bf00      	nop
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	e000ed00 	.word	0xe000ed00

08002a60 <TouchCalibrate>:

	return true;
}

void TouchCalibrate(void)
{
 8002a60:	b5b0      	push	{r4, r5, r7, lr}
 8002a62:	b08c      	sub	sp, #48	@ 0x30
 8002a64:	af00      	add	r7, sp, #0
//	uint16_t x;
//	uint16_t y;
	POINT_T raw_points[3];
	POINT_T display_points[3] = {{40, 40}, {200, 40}, {200, 280}};
 8002a66:	4b13      	ldr	r3, [pc, #76]	@ (8002ab4 <TouchCalibrate+0x54>)
 8002a68:	463c      	mov	r4, r7
 8002a6a:	461d      	mov	r5, r3
 8002a6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002a6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002a70:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002a74:	e884 0003 	stmia.w	r4, {r0, r1}

	raw_points[0].x = 2970;
 8002a78:	f640 339a 	movw	r3, #2970	@ 0xb9a
 8002a7c:	61bb      	str	r3, [r7, #24]
	raw_points[0].y = 670;
 8002a7e:	f240 239e 	movw	r3, #670	@ 0x29e
 8002a82:	61fb      	str	r3, [r7, #28]



    /* second point */

	raw_points[1].x = 865;
 8002a84:	f240 3361 	movw	r3, #865	@ 0x361
 8002a88:	623b      	str	r3, [r7, #32]
	raw_points[1].y = 711;
 8002a8a:	f240 23c7 	movw	r3, #711	@ 0x2c7
 8002a8e:	627b      	str	r3, [r7, #36]	@ 0x24




	raw_points[2].x = 789;
 8002a90:	f240 3315 	movw	r3, #789	@ 0x315
 8002a94:	62bb      	str	r3, [r7, #40]	@ 0x28
	raw_points[2].y = 3239;
 8002a96:	f640 43a7 	movw	r3, #3239	@ 0xca7
 8002a9a:	62fb      	str	r3, [r7, #44]	@ 0x2c



	(void)setCalibrationMatrix(display_points, raw_points, &matrix);
 8002a9c:	f107 0118 	add.w	r1, r7, #24
 8002aa0:	463b      	mov	r3, r7
 8002aa2:	4a05      	ldr	r2, [pc, #20]	@ (8002ab8 <TouchCalibrate+0x58>)
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7fe fba5 	bl	80011f4 <setCalibrationMatrix>
}
 8002aaa:	bf00      	nop
 8002aac:	3730      	adds	r7, #48	@ 0x30
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bdb0      	pop	{r4, r5, r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	08007050 	.word	0x08007050
 8002ab8:	2000082c 	.word	0x2000082c

08002abc <Reset_Handler>:
 8002abc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002af4 <LoopFillZerobss+0xe>
 8002ac0:	f7ff ffbc 	bl	8002a3c <SystemInit>
 8002ac4:	480c      	ldr	r0, [pc, #48]	@ (8002af8 <LoopFillZerobss+0x12>)
 8002ac6:	490d      	ldr	r1, [pc, #52]	@ (8002afc <LoopFillZerobss+0x16>)
 8002ac8:	4a0d      	ldr	r2, [pc, #52]	@ (8002b00 <LoopFillZerobss+0x1a>)
 8002aca:	2300      	movs	r3, #0
 8002acc:	e002      	b.n	8002ad4 <LoopCopyDataInit>

08002ace <CopyDataInit>:
 8002ace:	58d4      	ldr	r4, [r2, r3]
 8002ad0:	50c4      	str	r4, [r0, r3]
 8002ad2:	3304      	adds	r3, #4

08002ad4 <LoopCopyDataInit>:
 8002ad4:	18c4      	adds	r4, r0, r3
 8002ad6:	428c      	cmp	r4, r1
 8002ad8:	d3f9      	bcc.n	8002ace <CopyDataInit>
 8002ada:	4a0a      	ldr	r2, [pc, #40]	@ (8002b04 <LoopFillZerobss+0x1e>)
 8002adc:	4c0a      	ldr	r4, [pc, #40]	@ (8002b08 <LoopFillZerobss+0x22>)
 8002ade:	2300      	movs	r3, #0
 8002ae0:	e001      	b.n	8002ae6 <LoopFillZerobss>

08002ae2 <FillZerobss>:
 8002ae2:	6013      	str	r3, [r2, #0]
 8002ae4:	3204      	adds	r2, #4

08002ae6 <LoopFillZerobss>:
 8002ae6:	42a2      	cmp	r2, r4
 8002ae8:	d3fb      	bcc.n	8002ae2 <FillZerobss>
 8002aea:	f003 fcdf 	bl	80064ac <__libc_init_array>
 8002aee:	f7ff f91f 	bl	8001d30 <main>
 8002af2:	4770      	bx	lr
 8002af4:	20020000 	.word	0x20020000
 8002af8:	20000000 	.word	0x20000000
 8002afc:	20000084 	.word	0x20000084
 8002b00:	08008144 	.word	0x08008144
 8002b04:	20000084 	.word	0x20000084
 8002b08:	20000994 	.word	0x20000994

08002b0c <ADC_IRQHandler>:
 8002b0c:	e7fe      	b.n	8002b0c <ADC_IRQHandler>
	...

08002b10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b14:	4b0e      	ldr	r3, [pc, #56]	@ (8002b50 <HAL_Init+0x40>)
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a0d      	ldr	r2, [pc, #52]	@ (8002b50 <HAL_Init+0x40>)
 8002b1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002b1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b20:	4b0b      	ldr	r3, [pc, #44]	@ (8002b50 <HAL_Init+0x40>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a0a      	ldr	r2, [pc, #40]	@ (8002b50 <HAL_Init+0x40>)
 8002b26:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b2c:	4b08      	ldr	r3, [pc, #32]	@ (8002b50 <HAL_Init+0x40>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4a07      	ldr	r2, [pc, #28]	@ (8002b50 <HAL_Init+0x40>)
 8002b32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b38:	2003      	movs	r0, #3
 8002b3a:	f000 fbb1 	bl	80032a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b3e:	200f      	movs	r0, #15
 8002b40:	f000 f808 	bl	8002b54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b44:	f7ff fd50 	bl	80025e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	bd80      	pop	{r7, pc}
 8002b4e:	bf00      	nop
 8002b50:	40023c00 	.word	0x40023c00

08002b54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b082      	sub	sp, #8
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b5c:	4b12      	ldr	r3, [pc, #72]	@ (8002ba8 <HAL_InitTick+0x54>)
 8002b5e:	681a      	ldr	r2, [r3, #0]
 8002b60:	4b12      	ldr	r3, [pc, #72]	@ (8002bac <HAL_InitTick+0x58>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	4619      	mov	r1, r3
 8002b66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002b6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b72:	4618      	mov	r0, r3
 8002b74:	f000 fbc9 	bl	800330a <HAL_SYSTICK_Config>
 8002b78:	4603      	mov	r3, r0
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d001      	beq.n	8002b82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e00e      	b.n	8002ba0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2b0f      	cmp	r3, #15
 8002b86:	d80a      	bhi.n	8002b9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b88:	2200      	movs	r2, #0
 8002b8a:	6879      	ldr	r1, [r7, #4]
 8002b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b90:	f000 fb91 	bl	80032b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b94:	4a06      	ldr	r2, [pc, #24]	@ (8002bb0 <HAL_InitTick+0x5c>)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	e000      	b.n	8002ba0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b9e:	2301      	movs	r3, #1
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3708      	adds	r7, #8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}
 8002ba8:	20000028 	.word	0x20000028
 8002bac:	20000030 	.word	0x20000030
 8002bb0:	2000002c 	.word	0x2000002c

08002bb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bb8:	4b06      	ldr	r3, [pc, #24]	@ (8002bd4 <HAL_IncTick+0x20>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	4b06      	ldr	r3, [pc, #24]	@ (8002bd8 <HAL_IncTick+0x24>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4413      	add	r3, r2
 8002bc4:	4a04      	ldr	r2, [pc, #16]	@ (8002bd8 <HAL_IncTick+0x24>)
 8002bc6:	6013      	str	r3, [r2, #0]
}
 8002bc8:	bf00      	nop
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
 8002bd2:	bf00      	nop
 8002bd4:	20000030 	.word	0x20000030
 8002bd8:	20000848 	.word	0x20000848

08002bdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  return uwTick;
 8002be0:	4b03      	ldr	r3, [pc, #12]	@ (8002bf0 <HAL_GetTick+0x14>)
 8002be2:	681b      	ldr	r3, [r3, #0]
}
 8002be4:	4618      	mov	r0, r3
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr
 8002bee:	bf00      	nop
 8002bf0:	20000848 	.word	0x20000848

08002bf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002bfc:	f7ff ffee 	bl	8002bdc <HAL_GetTick>
 8002c00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c0c:	d005      	beq.n	8002c1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c0e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c38 <HAL_Delay+0x44>)
 8002c10:	781b      	ldrb	r3, [r3, #0]
 8002c12:	461a      	mov	r2, r3
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	4413      	add	r3, r2
 8002c18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c1a:	bf00      	nop
 8002c1c:	f7ff ffde 	bl	8002bdc <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	68fa      	ldr	r2, [r7, #12]
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d8f7      	bhi.n	8002c1c <HAL_Delay+0x28>
  {
  }
}
 8002c2c:	bf00      	nop
 8002c2e:	bf00      	nop
 8002c30:	3710      	adds	r7, #16
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}
 8002c36:	bf00      	nop
 8002c38:	20000030 	.word	0x20000030

08002c3c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b084      	sub	sp, #16
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c44:	2300      	movs	r3, #0
 8002c46:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d101      	bne.n	8002c52 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e033      	b.n	8002cba <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d109      	bne.n	8002c6e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f7ff fcec 	bl	8002638 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2200      	movs	r2, #0
 8002c64:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2200      	movs	r2, #0
 8002c6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c72:	f003 0310 	and.w	r3, r3, #16
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d118      	bne.n	8002cac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002c82:	f023 0302 	bic.w	r3, r3, #2
 8002c86:	f043 0202 	orr.w	r2, r3, #2
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002c8e:	6878      	ldr	r0, [r7, #4]
 8002c90:	f000 f93a 	bl	8002f08 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2200      	movs	r2, #0
 8002c98:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c9e:	f023 0303 	bic.w	r3, r3, #3
 8002ca2:	f043 0201 	orr.w	r2, r3, #1
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	641a      	str	r2, [r3, #64]	@ 0x40
 8002caa:	e001      	b.n	8002cb0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
	...

08002cc4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d101      	bne.n	8002ce0 <HAL_ADC_ConfigChannel+0x1c>
 8002cdc:	2302      	movs	r3, #2
 8002cde:	e105      	b.n	8002eec <HAL_ADC_ConfigChannel+0x228>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	2b09      	cmp	r3, #9
 8002cee:	d925      	bls.n	8002d3c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	68d9      	ldr	r1, [r3, #12]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	b29b      	uxth	r3, r3
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	4613      	mov	r3, r2
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	4413      	add	r3, r2
 8002d04:	3b1e      	subs	r3, #30
 8002d06:	2207      	movs	r2, #7
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	43da      	mvns	r2, r3
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	400a      	ands	r2, r1
 8002d14:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	68d9      	ldr	r1, [r3, #12]
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	689a      	ldr	r2, [r3, #8]
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	b29b      	uxth	r3, r3
 8002d26:	4618      	mov	r0, r3
 8002d28:	4603      	mov	r3, r0
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	4403      	add	r3, r0
 8002d2e:	3b1e      	subs	r3, #30
 8002d30:	409a      	lsls	r2, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	430a      	orrs	r2, r1
 8002d38:	60da      	str	r2, [r3, #12]
 8002d3a:	e022      	b.n	8002d82 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6919      	ldr	r1, [r3, #16]
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	b29b      	uxth	r3, r3
 8002d48:	461a      	mov	r2, r3
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	4413      	add	r3, r2
 8002d50:	2207      	movs	r2, #7
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	43da      	mvns	r2, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	400a      	ands	r2, r1
 8002d5e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6919      	ldr	r1, [r3, #16]
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	689a      	ldr	r2, [r3, #8]
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	b29b      	uxth	r3, r3
 8002d70:	4618      	mov	r0, r3
 8002d72:	4603      	mov	r3, r0
 8002d74:	005b      	lsls	r3, r3, #1
 8002d76:	4403      	add	r3, r0
 8002d78:	409a      	lsls	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	430a      	orrs	r2, r1
 8002d80:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	2b06      	cmp	r3, #6
 8002d88:	d824      	bhi.n	8002dd4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685a      	ldr	r2, [r3, #4]
 8002d94:	4613      	mov	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4413      	add	r3, r2
 8002d9a:	3b05      	subs	r3, #5
 8002d9c:	221f      	movs	r2, #31
 8002d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002da2:	43da      	mvns	r2, r3
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	400a      	ands	r2, r1
 8002daa:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	b29b      	uxth	r3, r3
 8002db8:	4618      	mov	r0, r3
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	009b      	lsls	r3, r3, #2
 8002dc2:	4413      	add	r3, r2
 8002dc4:	3b05      	subs	r3, #5
 8002dc6:	fa00 f203 	lsl.w	r2, r0, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	430a      	orrs	r2, r1
 8002dd0:	635a      	str	r2, [r3, #52]	@ 0x34
 8002dd2:	e04c      	b.n	8002e6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	2b0c      	cmp	r3, #12
 8002dda:	d824      	bhi.n	8002e26 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685a      	ldr	r2, [r3, #4]
 8002de6:	4613      	mov	r3, r2
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	4413      	add	r3, r2
 8002dec:	3b23      	subs	r3, #35	@ 0x23
 8002dee:	221f      	movs	r2, #31
 8002df0:	fa02 f303 	lsl.w	r3, r2, r3
 8002df4:	43da      	mvns	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	400a      	ands	r2, r1
 8002dfc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685a      	ldr	r2, [r3, #4]
 8002e10:	4613      	mov	r3, r2
 8002e12:	009b      	lsls	r3, r3, #2
 8002e14:	4413      	add	r3, r2
 8002e16:	3b23      	subs	r3, #35	@ 0x23
 8002e18:	fa00 f203 	lsl.w	r2, r0, r3
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	430a      	orrs	r2, r1
 8002e22:	631a      	str	r2, [r3, #48]	@ 0x30
 8002e24:	e023      	b.n	8002e6e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	685a      	ldr	r2, [r3, #4]
 8002e30:	4613      	mov	r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	4413      	add	r3, r2
 8002e36:	3b41      	subs	r3, #65	@ 0x41
 8002e38:	221f      	movs	r2, #31
 8002e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e3e:	43da      	mvns	r2, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	400a      	ands	r2, r1
 8002e46:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	4618      	mov	r0, r3
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4413      	add	r3, r2
 8002e60:	3b41      	subs	r3, #65	@ 0x41
 8002e62:	fa00 f203 	lsl.w	r2, r0, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e6e:	4b22      	ldr	r3, [pc, #136]	@ (8002ef8 <HAL_ADC_ConfigChannel+0x234>)
 8002e70:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a21      	ldr	r2, [pc, #132]	@ (8002efc <HAL_ADC_ConfigChannel+0x238>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d109      	bne.n	8002e90 <HAL_ADC_ConfigChannel+0x1cc>
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2b12      	cmp	r3, #18
 8002e82:	d105      	bne.n	8002e90 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a19      	ldr	r2, [pc, #100]	@ (8002efc <HAL_ADC_ConfigChannel+0x238>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d123      	bne.n	8002ee2 <HAL_ADC_ConfigChannel+0x21e>
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	2b10      	cmp	r3, #16
 8002ea0:	d003      	beq.n	8002eaa <HAL_ADC_ConfigChannel+0x1e6>
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2b11      	cmp	r3, #17
 8002ea8:	d11b      	bne.n	8002ee2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	2b10      	cmp	r3, #16
 8002ebc:	d111      	bne.n	8002ee2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ebe:	4b10      	ldr	r3, [pc, #64]	@ (8002f00 <HAL_ADC_ConfigChannel+0x23c>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	4a10      	ldr	r2, [pc, #64]	@ (8002f04 <HAL_ADC_ConfigChannel+0x240>)
 8002ec4:	fba2 2303 	umull	r2, r3, r2, r3
 8002ec8:	0c9a      	lsrs	r2, r3, #18
 8002eca:	4613      	mov	r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	4413      	add	r3, r2
 8002ed0:	005b      	lsls	r3, r3, #1
 8002ed2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002ed4:	e002      	b.n	8002edc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1f9      	bne.n	8002ed6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	3714      	adds	r7, #20
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr
 8002ef8:	40012300 	.word	0x40012300
 8002efc:	40012000 	.word	0x40012000
 8002f00:	20000028 	.word	0x20000028
 8002f04:	431bde83 	.word	0x431bde83

08002f08 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f10:	4b79      	ldr	r3, [pc, #484]	@ (80030f8 <ADC_Init+0x1f0>)
 8002f12:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	685a      	ldr	r2, [r3, #4]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	431a      	orrs	r2, r3
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	685a      	ldr	r2, [r3, #4]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002f3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	6859      	ldr	r1, [r3, #4]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	021a      	lsls	r2, r3, #8
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	685a      	ldr	r2, [r3, #4]
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002f60:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	6859      	ldr	r1, [r3, #4]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	689a      	ldr	r2, [r3, #8]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	430a      	orrs	r2, r1
 8002f72:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	689a      	ldr	r2, [r3, #8]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f82:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6899      	ldr	r1, [r3, #8]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	68da      	ldr	r2, [r3, #12]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	430a      	orrs	r2, r1
 8002f94:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f9a:	4a58      	ldr	r2, [pc, #352]	@ (80030fc <ADC_Init+0x1f4>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d022      	beq.n	8002fe6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	689a      	ldr	r2, [r3, #8]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002fae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6899      	ldr	r1, [r3, #8]
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	430a      	orrs	r2, r1
 8002fc0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002fd0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	6899      	ldr	r1, [r3, #8]
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	430a      	orrs	r2, r1
 8002fe2:	609a      	str	r2, [r3, #8]
 8002fe4:	e00f      	b.n	8003006 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ff4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003004:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	689a      	ldr	r2, [r3, #8]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 0202 	bic.w	r2, r2, #2
 8003014:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	6899      	ldr	r1, [r3, #8]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	7e1b      	ldrb	r3, [r3, #24]
 8003020:	005a      	lsls	r2, r3, #1
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	430a      	orrs	r2, r1
 8003028:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003030:	2b00      	cmp	r3, #0
 8003032:	d01b      	beq.n	800306c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	685a      	ldr	r2, [r3, #4]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003042:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685a      	ldr	r2, [r3, #4]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003052:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	6859      	ldr	r1, [r3, #4]
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800305e:	3b01      	subs	r3, #1
 8003060:	035a      	lsls	r2, r3, #13
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	430a      	orrs	r2, r1
 8003068:	605a      	str	r2, [r3, #4]
 800306a:	e007      	b.n	800307c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	685a      	ldr	r2, [r3, #4]
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800307a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800308a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	69db      	ldr	r3, [r3, #28]
 8003096:	3b01      	subs	r3, #1
 8003098:	051a      	lsls	r2, r3, #20
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	430a      	orrs	r2, r1
 80030a0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	689a      	ldr	r2, [r3, #8]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80030b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6899      	ldr	r1, [r3, #8]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80030be:	025a      	lsls	r2, r3, #9
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	430a      	orrs	r2, r1
 80030c6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80030d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6899      	ldr	r1, [r3, #8]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	695b      	ldr	r3, [r3, #20]
 80030e2:	029a      	lsls	r2, r3, #10
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	430a      	orrs	r2, r1
 80030ea:	609a      	str	r2, [r3, #8]
}
 80030ec:	bf00      	nop
 80030ee:	3714      	adds	r7, #20
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr
 80030f8:	40012300 	.word	0x40012300
 80030fc:	0f000001 	.word	0x0f000001

08003100 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003100:	b480      	push	{r7}
 8003102:	b085      	sub	sp, #20
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f003 0307 	and.w	r3, r3, #7
 800310e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003110:	4b0c      	ldr	r3, [pc, #48]	@ (8003144 <__NVIC_SetPriorityGrouping+0x44>)
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003116:	68ba      	ldr	r2, [r7, #8]
 8003118:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800311c:	4013      	ands	r3, r2
 800311e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003128:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800312c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003130:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003132:	4a04      	ldr	r2, [pc, #16]	@ (8003144 <__NVIC_SetPriorityGrouping+0x44>)
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	60d3      	str	r3, [r2, #12]
}
 8003138:	bf00      	nop
 800313a:	3714      	adds	r7, #20
 800313c:	46bd      	mov	sp, r7
 800313e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003142:	4770      	bx	lr
 8003144:	e000ed00 	.word	0xe000ed00

08003148 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003148:	b480      	push	{r7}
 800314a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800314c:	4b04      	ldr	r3, [pc, #16]	@ (8003160 <__NVIC_GetPriorityGrouping+0x18>)
 800314e:	68db      	ldr	r3, [r3, #12]
 8003150:	0a1b      	lsrs	r3, r3, #8
 8003152:	f003 0307 	and.w	r3, r3, #7
}
 8003156:	4618      	mov	r0, r3
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr
 8003160:	e000ed00 	.word	0xe000ed00

08003164 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	4603      	mov	r3, r0
 800316c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800316e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003172:	2b00      	cmp	r3, #0
 8003174:	db0b      	blt.n	800318e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003176:	79fb      	ldrb	r3, [r7, #7]
 8003178:	f003 021f 	and.w	r2, r3, #31
 800317c:	4907      	ldr	r1, [pc, #28]	@ (800319c <__NVIC_EnableIRQ+0x38>)
 800317e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003182:	095b      	lsrs	r3, r3, #5
 8003184:	2001      	movs	r0, #1
 8003186:	fa00 f202 	lsl.w	r2, r0, r2
 800318a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800318e:	bf00      	nop
 8003190:	370c      	adds	r7, #12
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	e000e100 	.word	0xe000e100

080031a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	4603      	mov	r3, r0
 80031a8:	6039      	str	r1, [r7, #0]
 80031aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	db0a      	blt.n	80031ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031b4:	683b      	ldr	r3, [r7, #0]
 80031b6:	b2da      	uxtb	r2, r3
 80031b8:	490c      	ldr	r1, [pc, #48]	@ (80031ec <__NVIC_SetPriority+0x4c>)
 80031ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031be:	0112      	lsls	r2, r2, #4
 80031c0:	b2d2      	uxtb	r2, r2
 80031c2:	440b      	add	r3, r1
 80031c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031c8:	e00a      	b.n	80031e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	b2da      	uxtb	r2, r3
 80031ce:	4908      	ldr	r1, [pc, #32]	@ (80031f0 <__NVIC_SetPriority+0x50>)
 80031d0:	79fb      	ldrb	r3, [r7, #7]
 80031d2:	f003 030f 	and.w	r3, r3, #15
 80031d6:	3b04      	subs	r3, #4
 80031d8:	0112      	lsls	r2, r2, #4
 80031da:	b2d2      	uxtb	r2, r2
 80031dc:	440b      	add	r3, r1
 80031de:	761a      	strb	r2, [r3, #24]
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr
 80031ec:	e000e100 	.word	0xe000e100
 80031f0:	e000ed00 	.word	0xe000ed00

080031f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031f4:	b480      	push	{r7}
 80031f6:	b089      	sub	sp, #36	@ 0x24
 80031f8:	af00      	add	r7, sp, #0
 80031fa:	60f8      	str	r0, [r7, #12]
 80031fc:	60b9      	str	r1, [r7, #8]
 80031fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	f003 0307 	and.w	r3, r3, #7
 8003206:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	f1c3 0307 	rsb	r3, r3, #7
 800320e:	2b04      	cmp	r3, #4
 8003210:	bf28      	it	cs
 8003212:	2304      	movcs	r3, #4
 8003214:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	3304      	adds	r3, #4
 800321a:	2b06      	cmp	r3, #6
 800321c:	d902      	bls.n	8003224 <NVIC_EncodePriority+0x30>
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	3b03      	subs	r3, #3
 8003222:	e000      	b.n	8003226 <NVIC_EncodePriority+0x32>
 8003224:	2300      	movs	r3, #0
 8003226:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003228:	f04f 32ff 	mov.w	r2, #4294967295
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	fa02 f303 	lsl.w	r3, r2, r3
 8003232:	43da      	mvns	r2, r3
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	401a      	ands	r2, r3
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800323c:	f04f 31ff 	mov.w	r1, #4294967295
 8003240:	697b      	ldr	r3, [r7, #20]
 8003242:	fa01 f303 	lsl.w	r3, r1, r3
 8003246:	43d9      	mvns	r1, r3
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800324c:	4313      	orrs	r3, r2
         );
}
 800324e:	4618      	mov	r0, r3
 8003250:	3724      	adds	r7, #36	@ 0x24
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
	...

0800325c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	3b01      	subs	r3, #1
 8003268:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800326c:	d301      	bcc.n	8003272 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800326e:	2301      	movs	r3, #1
 8003270:	e00f      	b.n	8003292 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003272:	4a0a      	ldr	r2, [pc, #40]	@ (800329c <SysTick_Config+0x40>)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	3b01      	subs	r3, #1
 8003278:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800327a:	210f      	movs	r1, #15
 800327c:	f04f 30ff 	mov.w	r0, #4294967295
 8003280:	f7ff ff8e 	bl	80031a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003284:	4b05      	ldr	r3, [pc, #20]	@ (800329c <SysTick_Config+0x40>)
 8003286:	2200      	movs	r2, #0
 8003288:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800328a:	4b04      	ldr	r3, [pc, #16]	@ (800329c <SysTick_Config+0x40>)
 800328c:	2207      	movs	r2, #7
 800328e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003290:	2300      	movs	r3, #0
}
 8003292:	4618      	mov	r0, r3
 8003294:	3708      	adds	r7, #8
 8003296:	46bd      	mov	sp, r7
 8003298:	bd80      	pop	{r7, pc}
 800329a:	bf00      	nop
 800329c:	e000e010 	.word	0xe000e010

080032a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b082      	sub	sp, #8
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80032a8:	6878      	ldr	r0, [r7, #4]
 80032aa:	f7ff ff29 	bl	8003100 <__NVIC_SetPriorityGrouping>
}
 80032ae:	bf00      	nop
 80032b0:	3708      	adds	r7, #8
 80032b2:	46bd      	mov	sp, r7
 80032b4:	bd80      	pop	{r7, pc}

080032b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80032b6:	b580      	push	{r7, lr}
 80032b8:	b086      	sub	sp, #24
 80032ba:	af00      	add	r7, sp, #0
 80032bc:	4603      	mov	r3, r0
 80032be:	60b9      	str	r1, [r7, #8]
 80032c0:	607a      	str	r2, [r7, #4]
 80032c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032c4:	2300      	movs	r3, #0
 80032c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032c8:	f7ff ff3e 	bl	8003148 <__NVIC_GetPriorityGrouping>
 80032cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	68b9      	ldr	r1, [r7, #8]
 80032d2:	6978      	ldr	r0, [r7, #20]
 80032d4:	f7ff ff8e 	bl	80031f4 <NVIC_EncodePriority>
 80032d8:	4602      	mov	r2, r0
 80032da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032de:	4611      	mov	r1, r2
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff ff5d 	bl	80031a0 <__NVIC_SetPriority>
}
 80032e6:	bf00      	nop
 80032e8:	3718      	adds	r7, #24
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}

080032ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032ee:	b580      	push	{r7, lr}
 80032f0:	b082      	sub	sp, #8
 80032f2:	af00      	add	r7, sp, #0
 80032f4:	4603      	mov	r3, r0
 80032f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff ff31 	bl	8003164 <__NVIC_EnableIRQ>
}
 8003302:	bf00      	nop
 8003304:	3708      	adds	r7, #8
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}

0800330a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800330a:	b580      	push	{r7, lr}
 800330c:	b082      	sub	sp, #8
 800330e:	af00      	add	r7, sp, #0
 8003310:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f7ff ffa2 	bl	800325c <SysTick_Config>
 8003318:	4603      	mov	r3, r0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3708      	adds	r7, #8
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
	...

08003324 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003324:	b480      	push	{r7}
 8003326:	b089      	sub	sp, #36	@ 0x24
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800332e:	2300      	movs	r3, #0
 8003330:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003332:	2300      	movs	r3, #0
 8003334:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003336:	2300      	movs	r3, #0
 8003338:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800333a:	2300      	movs	r3, #0
 800333c:	61fb      	str	r3, [r7, #28]
 800333e:	e16b      	b.n	8003618 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003340:	2201      	movs	r2, #1
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	fa02 f303 	lsl.w	r3, r2, r3
 8003348:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	697a      	ldr	r2, [r7, #20]
 8003350:	4013      	ands	r3, r2
 8003352:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003354:	693a      	ldr	r2, [r7, #16]
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	429a      	cmp	r2, r3
 800335a:	f040 815a 	bne.w	8003612 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685b      	ldr	r3, [r3, #4]
 8003362:	f003 0303 	and.w	r3, r3, #3
 8003366:	2b01      	cmp	r3, #1
 8003368:	d005      	beq.n	8003376 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003372:	2b02      	cmp	r3, #2
 8003374:	d130      	bne.n	80033d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800337c:	69fb      	ldr	r3, [r7, #28]
 800337e:	005b      	lsls	r3, r3, #1
 8003380:	2203      	movs	r2, #3
 8003382:	fa02 f303 	lsl.w	r3, r2, r3
 8003386:	43db      	mvns	r3, r3
 8003388:	69ba      	ldr	r2, [r7, #24]
 800338a:	4013      	ands	r3, r2
 800338c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800338e:	683b      	ldr	r3, [r7, #0]
 8003390:	68da      	ldr	r2, [r3, #12]
 8003392:	69fb      	ldr	r3, [r7, #28]
 8003394:	005b      	lsls	r3, r3, #1
 8003396:	fa02 f303 	lsl.w	r3, r2, r3
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	4313      	orrs	r3, r2
 800339e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	69ba      	ldr	r2, [r7, #24]
 80033a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80033ac:	2201      	movs	r2, #1
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	fa02 f303 	lsl.w	r3, r2, r3
 80033b4:	43db      	mvns	r3, r3
 80033b6:	69ba      	ldr	r2, [r7, #24]
 80033b8:	4013      	ands	r3, r2
 80033ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	091b      	lsrs	r3, r3, #4
 80033c2:	f003 0201 	and.w	r2, r3, #1
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	fa02 f303 	lsl.w	r3, r2, r3
 80033cc:	69ba      	ldr	r2, [r7, #24]
 80033ce:	4313      	orrs	r3, r2
 80033d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	69ba      	ldr	r2, [r7, #24]
 80033d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f003 0303 	and.w	r3, r3, #3
 80033e0:	2b03      	cmp	r3, #3
 80033e2:	d017      	beq.n	8003414 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	2203      	movs	r2, #3
 80033f0:	fa02 f303 	lsl.w	r3, r2, r3
 80033f4:	43db      	mvns	r3, r3
 80033f6:	69ba      	ldr	r2, [r7, #24]
 80033f8:	4013      	ands	r3, r2
 80033fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	fa02 f303 	lsl.w	r3, r2, r3
 8003408:	69ba      	ldr	r2, [r7, #24]
 800340a:	4313      	orrs	r3, r2
 800340c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	f003 0303 	and.w	r3, r3, #3
 800341c:	2b02      	cmp	r3, #2
 800341e:	d123      	bne.n	8003468 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003420:	69fb      	ldr	r3, [r7, #28]
 8003422:	08da      	lsrs	r2, r3, #3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	3208      	adds	r2, #8
 8003428:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800342c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	009b      	lsls	r3, r3, #2
 8003436:	220f      	movs	r2, #15
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	43db      	mvns	r3, r3
 800343e:	69ba      	ldr	r2, [r7, #24]
 8003440:	4013      	ands	r3, r2
 8003442:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	691a      	ldr	r2, [r3, #16]
 8003448:	69fb      	ldr	r3, [r7, #28]
 800344a:	f003 0307 	and.w	r3, r3, #7
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	fa02 f303 	lsl.w	r3, r2, r3
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	4313      	orrs	r3, r2
 8003458:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	08da      	lsrs	r2, r3, #3
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	3208      	adds	r2, #8
 8003462:	69b9      	ldr	r1, [r7, #24]
 8003464:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	2203      	movs	r2, #3
 8003474:	fa02 f303 	lsl.w	r3, r2, r3
 8003478:	43db      	mvns	r3, r3
 800347a:	69ba      	ldr	r2, [r7, #24]
 800347c:	4013      	ands	r3, r2
 800347e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003480:	683b      	ldr	r3, [r7, #0]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f003 0203 	and.w	r2, r3, #3
 8003488:	69fb      	ldr	r3, [r7, #28]
 800348a:	005b      	lsls	r3, r3, #1
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	4313      	orrs	r3, r2
 8003494:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 80b4 	beq.w	8003612 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034aa:	2300      	movs	r3, #0
 80034ac:	60fb      	str	r3, [r7, #12]
 80034ae:	4b60      	ldr	r3, [pc, #384]	@ (8003630 <HAL_GPIO_Init+0x30c>)
 80034b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034b2:	4a5f      	ldr	r2, [pc, #380]	@ (8003630 <HAL_GPIO_Init+0x30c>)
 80034b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80034b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80034ba:	4b5d      	ldr	r3, [pc, #372]	@ (8003630 <HAL_GPIO_Init+0x30c>)
 80034bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80034c2:	60fb      	str	r3, [r7, #12]
 80034c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034c6:	4a5b      	ldr	r2, [pc, #364]	@ (8003634 <HAL_GPIO_Init+0x310>)
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	089b      	lsrs	r3, r3, #2
 80034cc:	3302      	adds	r3, #2
 80034ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	f003 0303 	and.w	r3, r3, #3
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	220f      	movs	r2, #15
 80034de:	fa02 f303 	lsl.w	r3, r2, r3
 80034e2:	43db      	mvns	r3, r3
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	4013      	ands	r3, r2
 80034e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a52      	ldr	r2, [pc, #328]	@ (8003638 <HAL_GPIO_Init+0x314>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d02b      	beq.n	800354a <HAL_GPIO_Init+0x226>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a51      	ldr	r2, [pc, #324]	@ (800363c <HAL_GPIO_Init+0x318>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d025      	beq.n	8003546 <HAL_GPIO_Init+0x222>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a50      	ldr	r2, [pc, #320]	@ (8003640 <HAL_GPIO_Init+0x31c>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d01f      	beq.n	8003542 <HAL_GPIO_Init+0x21e>
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	4a4f      	ldr	r2, [pc, #316]	@ (8003644 <HAL_GPIO_Init+0x320>)
 8003506:	4293      	cmp	r3, r2
 8003508:	d019      	beq.n	800353e <HAL_GPIO_Init+0x21a>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	4a4e      	ldr	r2, [pc, #312]	@ (8003648 <HAL_GPIO_Init+0x324>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d013      	beq.n	800353a <HAL_GPIO_Init+0x216>
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	4a4d      	ldr	r2, [pc, #308]	@ (800364c <HAL_GPIO_Init+0x328>)
 8003516:	4293      	cmp	r3, r2
 8003518:	d00d      	beq.n	8003536 <HAL_GPIO_Init+0x212>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	4a4c      	ldr	r2, [pc, #304]	@ (8003650 <HAL_GPIO_Init+0x32c>)
 800351e:	4293      	cmp	r3, r2
 8003520:	d007      	beq.n	8003532 <HAL_GPIO_Init+0x20e>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	4a4b      	ldr	r2, [pc, #300]	@ (8003654 <HAL_GPIO_Init+0x330>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d101      	bne.n	800352e <HAL_GPIO_Init+0x20a>
 800352a:	2307      	movs	r3, #7
 800352c:	e00e      	b.n	800354c <HAL_GPIO_Init+0x228>
 800352e:	2308      	movs	r3, #8
 8003530:	e00c      	b.n	800354c <HAL_GPIO_Init+0x228>
 8003532:	2306      	movs	r3, #6
 8003534:	e00a      	b.n	800354c <HAL_GPIO_Init+0x228>
 8003536:	2305      	movs	r3, #5
 8003538:	e008      	b.n	800354c <HAL_GPIO_Init+0x228>
 800353a:	2304      	movs	r3, #4
 800353c:	e006      	b.n	800354c <HAL_GPIO_Init+0x228>
 800353e:	2303      	movs	r3, #3
 8003540:	e004      	b.n	800354c <HAL_GPIO_Init+0x228>
 8003542:	2302      	movs	r3, #2
 8003544:	e002      	b.n	800354c <HAL_GPIO_Init+0x228>
 8003546:	2301      	movs	r3, #1
 8003548:	e000      	b.n	800354c <HAL_GPIO_Init+0x228>
 800354a:	2300      	movs	r3, #0
 800354c:	69fa      	ldr	r2, [r7, #28]
 800354e:	f002 0203 	and.w	r2, r2, #3
 8003552:	0092      	lsls	r2, r2, #2
 8003554:	4093      	lsls	r3, r2
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	4313      	orrs	r3, r2
 800355a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800355c:	4935      	ldr	r1, [pc, #212]	@ (8003634 <HAL_GPIO_Init+0x310>)
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	089b      	lsrs	r3, r3, #2
 8003562:	3302      	adds	r3, #2
 8003564:	69ba      	ldr	r2, [r7, #24]
 8003566:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800356a:	4b3b      	ldr	r3, [pc, #236]	@ (8003658 <HAL_GPIO_Init+0x334>)
 800356c:	689b      	ldr	r3, [r3, #8]
 800356e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003570:	693b      	ldr	r3, [r7, #16]
 8003572:	43db      	mvns	r3, r3
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	4013      	ands	r3, r2
 8003578:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003582:	2b00      	cmp	r3, #0
 8003584:	d003      	beq.n	800358e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003586:	69ba      	ldr	r2, [r7, #24]
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	4313      	orrs	r3, r2
 800358c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800358e:	4a32      	ldr	r2, [pc, #200]	@ (8003658 <HAL_GPIO_Init+0x334>)
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003594:	4b30      	ldr	r3, [pc, #192]	@ (8003658 <HAL_GPIO_Init+0x334>)
 8003596:	68db      	ldr	r3, [r3, #12]
 8003598:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	43db      	mvns	r3, r3
 800359e:	69ba      	ldr	r2, [r7, #24]
 80035a0:	4013      	ands	r3, r2
 80035a2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d003      	beq.n	80035b8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80035b0:	69ba      	ldr	r2, [r7, #24]
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	4313      	orrs	r3, r2
 80035b6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035b8:	4a27      	ldr	r2, [pc, #156]	@ (8003658 <HAL_GPIO_Init+0x334>)
 80035ba:	69bb      	ldr	r3, [r7, #24]
 80035bc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035be:	4b26      	ldr	r3, [pc, #152]	@ (8003658 <HAL_GPIO_Init+0x334>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	43db      	mvns	r3, r3
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	4013      	ands	r3, r2
 80035cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d003      	beq.n	80035e2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80035da:	69ba      	ldr	r2, [r7, #24]
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	4313      	orrs	r3, r2
 80035e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035e2:	4a1d      	ldr	r2, [pc, #116]	@ (8003658 <HAL_GPIO_Init+0x334>)
 80035e4:	69bb      	ldr	r3, [r7, #24]
 80035e6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035e8:	4b1b      	ldr	r3, [pc, #108]	@ (8003658 <HAL_GPIO_Init+0x334>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	43db      	mvns	r3, r3
 80035f2:	69ba      	ldr	r2, [r7, #24]
 80035f4:	4013      	ands	r3, r2
 80035f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d003      	beq.n	800360c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	4313      	orrs	r3, r2
 800360a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800360c:	4a12      	ldr	r2, [pc, #72]	@ (8003658 <HAL_GPIO_Init+0x334>)
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	3301      	adds	r3, #1
 8003616:	61fb      	str	r3, [r7, #28]
 8003618:	69fb      	ldr	r3, [r7, #28]
 800361a:	2b0f      	cmp	r3, #15
 800361c:	f67f ae90 	bls.w	8003340 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003620:	bf00      	nop
 8003622:	bf00      	nop
 8003624:	3724      	adds	r7, #36	@ 0x24
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	40023800 	.word	0x40023800
 8003634:	40013800 	.word	0x40013800
 8003638:	40020000 	.word	0x40020000
 800363c:	40020400 	.word	0x40020400
 8003640:	40020800 	.word	0x40020800
 8003644:	40020c00 	.word	0x40020c00
 8003648:	40021000 	.word	0x40021000
 800364c:	40021400 	.word	0x40021400
 8003650:	40021800 	.word	0x40021800
 8003654:	40021c00 	.word	0x40021c00
 8003658:	40013c00 	.word	0x40013c00

0800365c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800365c:	b480      	push	{r7}
 800365e:	b083      	sub	sp, #12
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	460b      	mov	r3, r1
 8003666:	807b      	strh	r3, [r7, #2]
 8003668:	4613      	mov	r3, r2
 800366a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800366c:	787b      	ldrb	r3, [r7, #1]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d003      	beq.n	800367a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003672:	887a      	ldrh	r2, [r7, #2]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003678:	e003      	b.n	8003682 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800367a:	887b      	ldrh	r3, [r7, #2]
 800367c:	041a      	lsls	r2, r3, #16
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	619a      	str	r2, [r3, #24]
}
 8003682:	bf00      	nop
 8003684:	370c      	adds	r7, #12
 8003686:	46bd      	mov	sp, r7
 8003688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368c:	4770      	bx	lr
	...

08003690 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	4603      	mov	r3, r0
 8003698:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800369a:	4b08      	ldr	r3, [pc, #32]	@ (80036bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800369c:	695a      	ldr	r2, [r3, #20]
 800369e:	88fb      	ldrh	r3, [r7, #6]
 80036a0:	4013      	ands	r3, r2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d006      	beq.n	80036b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80036a6:	4a05      	ldr	r2, [pc, #20]	@ (80036bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80036a8:	88fb      	ldrh	r3, [r7, #6]
 80036aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80036ac:	88fb      	ldrh	r3, [r7, #6]
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7fe fed2 	bl	8002458 <HAL_GPIO_EXTI_Callback>
  }
}
 80036b4:	bf00      	nop
 80036b6:	3708      	adds	r7, #8
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	40013c00 	.word	0x40013c00

080036c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d101      	bne.n	80036d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036ce:	2301      	movs	r3, #1
 80036d0:	e12b      	b.n	800392a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d106      	bne.n	80036ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f7fe ffea 	bl	80026c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2224      	movs	r2, #36	@ 0x24
 80036f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	681a      	ldr	r2, [r3, #0]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f022 0201 	bic.w	r2, r2, #1
 8003702:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003712:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	681a      	ldr	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003722:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003724:	f001 fc60 	bl	8004fe8 <HAL_RCC_GetPCLK1Freq>
 8003728:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	4a81      	ldr	r2, [pc, #516]	@ (8003934 <HAL_I2C_Init+0x274>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d807      	bhi.n	8003744 <HAL_I2C_Init+0x84>
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	4a80      	ldr	r2, [pc, #512]	@ (8003938 <HAL_I2C_Init+0x278>)
 8003738:	4293      	cmp	r3, r2
 800373a:	bf94      	ite	ls
 800373c:	2301      	movls	r3, #1
 800373e:	2300      	movhi	r3, #0
 8003740:	b2db      	uxtb	r3, r3
 8003742:	e006      	b.n	8003752 <HAL_I2C_Init+0x92>
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	4a7d      	ldr	r2, [pc, #500]	@ (800393c <HAL_I2C_Init+0x27c>)
 8003748:	4293      	cmp	r3, r2
 800374a:	bf94      	ite	ls
 800374c:	2301      	movls	r3, #1
 800374e:	2300      	movhi	r3, #0
 8003750:	b2db      	uxtb	r3, r3
 8003752:	2b00      	cmp	r3, #0
 8003754:	d001      	beq.n	800375a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e0e7      	b.n	800392a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	4a78      	ldr	r2, [pc, #480]	@ (8003940 <HAL_I2C_Init+0x280>)
 800375e:	fba2 2303 	umull	r2, r3, r2, r3
 8003762:	0c9b      	lsrs	r3, r3, #18
 8003764:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	68ba      	ldr	r2, [r7, #8]
 8003776:	430a      	orrs	r2, r1
 8003778:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	6a1b      	ldr	r3, [r3, #32]
 8003780:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	4a6a      	ldr	r2, [pc, #424]	@ (8003934 <HAL_I2C_Init+0x274>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d802      	bhi.n	8003794 <HAL_I2C_Init+0xd4>
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	3301      	adds	r3, #1
 8003792:	e009      	b.n	80037a8 <HAL_I2C_Init+0xe8>
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800379a:	fb02 f303 	mul.w	r3, r2, r3
 800379e:	4a69      	ldr	r2, [pc, #420]	@ (8003944 <HAL_I2C_Init+0x284>)
 80037a0:	fba2 2303 	umull	r2, r3, r2, r3
 80037a4:	099b      	lsrs	r3, r3, #6
 80037a6:	3301      	adds	r3, #1
 80037a8:	687a      	ldr	r2, [r7, #4]
 80037aa:	6812      	ldr	r2, [r2, #0]
 80037ac:	430b      	orrs	r3, r1
 80037ae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	69db      	ldr	r3, [r3, #28]
 80037b6:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80037ba:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	495c      	ldr	r1, [pc, #368]	@ (8003934 <HAL_I2C_Init+0x274>)
 80037c4:	428b      	cmp	r3, r1
 80037c6:	d819      	bhi.n	80037fc <HAL_I2C_Init+0x13c>
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	1e59      	subs	r1, r3, #1
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	685b      	ldr	r3, [r3, #4]
 80037d0:	005b      	lsls	r3, r3, #1
 80037d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80037d6:	1c59      	adds	r1, r3, #1
 80037d8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80037dc:	400b      	ands	r3, r1
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00a      	beq.n	80037f8 <HAL_I2C_Init+0x138>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	1e59      	subs	r1, r3, #1
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	005b      	lsls	r3, r3, #1
 80037ec:	fbb1 f3f3 	udiv	r3, r1, r3
 80037f0:	3301      	adds	r3, #1
 80037f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037f6:	e051      	b.n	800389c <HAL_I2C_Init+0x1dc>
 80037f8:	2304      	movs	r3, #4
 80037fa:	e04f      	b.n	800389c <HAL_I2C_Init+0x1dc>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d111      	bne.n	8003828 <HAL_I2C_Init+0x168>
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	1e58      	subs	r0, r3, #1
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6859      	ldr	r1, [r3, #4]
 800380c:	460b      	mov	r3, r1
 800380e:	005b      	lsls	r3, r3, #1
 8003810:	440b      	add	r3, r1
 8003812:	fbb0 f3f3 	udiv	r3, r0, r3
 8003816:	3301      	adds	r3, #1
 8003818:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800381c:	2b00      	cmp	r3, #0
 800381e:	bf0c      	ite	eq
 8003820:	2301      	moveq	r3, #1
 8003822:	2300      	movne	r3, #0
 8003824:	b2db      	uxtb	r3, r3
 8003826:	e012      	b.n	800384e <HAL_I2C_Init+0x18e>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	1e58      	subs	r0, r3, #1
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6859      	ldr	r1, [r3, #4]
 8003830:	460b      	mov	r3, r1
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	440b      	add	r3, r1
 8003836:	0099      	lsls	r1, r3, #2
 8003838:	440b      	add	r3, r1
 800383a:	fbb0 f3f3 	udiv	r3, r0, r3
 800383e:	3301      	adds	r3, #1
 8003840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003844:	2b00      	cmp	r3, #0
 8003846:	bf0c      	ite	eq
 8003848:	2301      	moveq	r3, #1
 800384a:	2300      	movne	r3, #0
 800384c:	b2db      	uxtb	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d001      	beq.n	8003856 <HAL_I2C_Init+0x196>
 8003852:	2301      	movs	r3, #1
 8003854:	e022      	b.n	800389c <HAL_I2C_Init+0x1dc>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	2b00      	cmp	r3, #0
 800385c:	d10e      	bne.n	800387c <HAL_I2C_Init+0x1bc>
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	1e58      	subs	r0, r3, #1
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6859      	ldr	r1, [r3, #4]
 8003866:	460b      	mov	r3, r1
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	440b      	add	r3, r1
 800386c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003870:	3301      	adds	r3, #1
 8003872:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003876:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800387a:	e00f      	b.n	800389c <HAL_I2C_Init+0x1dc>
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	1e58      	subs	r0, r3, #1
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6859      	ldr	r1, [r3, #4]
 8003884:	460b      	mov	r3, r1
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	440b      	add	r3, r1
 800388a:	0099      	lsls	r1, r3, #2
 800388c:	440b      	add	r3, r1
 800388e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003892:	3301      	adds	r3, #1
 8003894:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003898:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800389c:	6879      	ldr	r1, [r7, #4]
 800389e:	6809      	ldr	r1, [r1, #0]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	69da      	ldr	r2, [r3, #28]
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a1b      	ldr	r3, [r3, #32]
 80038b6:	431a      	orrs	r2, r3
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	430a      	orrs	r2, r1
 80038be:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80038ca:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80038ce:	687a      	ldr	r2, [r7, #4]
 80038d0:	6911      	ldr	r1, [r2, #16]
 80038d2:	687a      	ldr	r2, [r7, #4]
 80038d4:	68d2      	ldr	r2, [r2, #12]
 80038d6:	4311      	orrs	r1, r2
 80038d8:	687a      	ldr	r2, [r7, #4]
 80038da:	6812      	ldr	r2, [r2, #0]
 80038dc:	430b      	orrs	r3, r1
 80038de:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	695a      	ldr	r2, [r3, #20]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	699b      	ldr	r3, [r3, #24]
 80038f2:	431a      	orrs	r2, r3
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	430a      	orrs	r2, r1
 80038fa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681a      	ldr	r2, [r3, #0]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f042 0201 	orr.w	r2, r2, #1
 800390a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2200      	movs	r2, #0
 8003910:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2220      	movs	r2, #32
 8003916:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2200      	movs	r2, #0
 8003924:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	000186a0 	.word	0x000186a0
 8003938:	001e847f 	.word	0x001e847f
 800393c:	003d08ff 	.word	0x003d08ff
 8003940:	431bde83 	.word	0x431bde83
 8003944:	10624dd3 	.word	0x10624dd3

08003948 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b088      	sub	sp, #32
 800394c:	af02      	add	r7, sp, #8
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	4608      	mov	r0, r1
 8003952:	4611      	mov	r1, r2
 8003954:	461a      	mov	r2, r3
 8003956:	4603      	mov	r3, r0
 8003958:	817b      	strh	r3, [r7, #10]
 800395a:	460b      	mov	r3, r1
 800395c:	813b      	strh	r3, [r7, #8]
 800395e:	4613      	mov	r3, r2
 8003960:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003962:	f7ff f93b 	bl	8002bdc <HAL_GetTick>
 8003966:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800396e:	b2db      	uxtb	r3, r3
 8003970:	2b20      	cmp	r3, #32
 8003972:	f040 80d9 	bne.w	8003b28 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	2319      	movs	r3, #25
 800397c:	2201      	movs	r2, #1
 800397e:	496d      	ldr	r1, [pc, #436]	@ (8003b34 <HAL_I2C_Mem_Write+0x1ec>)
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f000 fc8b 	bl	800429c <I2C_WaitOnFlagUntilTimeout>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800398c:	2302      	movs	r3, #2
 800398e:	e0cc      	b.n	8003b2a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003996:	2b01      	cmp	r3, #1
 8003998:	d101      	bne.n	800399e <HAL_I2C_Mem_Write+0x56>
 800399a:	2302      	movs	r3, #2
 800399c:	e0c5      	b.n	8003b2a <HAL_I2C_Mem_Write+0x1e2>
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2201      	movs	r2, #1
 80039a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f003 0301 	and.w	r3, r3, #1
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d007      	beq.n	80039c4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	681a      	ldr	r2, [r3, #0]
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f042 0201 	orr.w	r2, r2, #1
 80039c2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	681a      	ldr	r2, [r3, #0]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039d2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	2221      	movs	r2, #33	@ 0x21
 80039d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	2240      	movs	r2, #64	@ 0x40
 80039e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	2200      	movs	r2, #0
 80039e8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6a3a      	ldr	r2, [r7, #32]
 80039ee:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80039f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	4a4d      	ldr	r2, [pc, #308]	@ (8003b38 <HAL_I2C_Mem_Write+0x1f0>)
 8003a04:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a06:	88f8      	ldrh	r0, [r7, #6]
 8003a08:	893a      	ldrh	r2, [r7, #8]
 8003a0a:	8979      	ldrh	r1, [r7, #10]
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	9301      	str	r3, [sp, #4]
 8003a10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a12:	9300      	str	r3, [sp, #0]
 8003a14:	4603      	mov	r3, r0
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f000 fac2 	bl	8003fa0 <I2C_RequestMemoryWrite>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d052      	beq.n	8003ac8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e081      	b.n	8003b2a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a26:	697a      	ldr	r2, [r7, #20]
 8003a28:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 fd50 	bl	80044d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00d      	beq.n	8003a52 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a3a:	2b04      	cmp	r3, #4
 8003a3c:	d107      	bne.n	8003a4e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681a      	ldr	r2, [r3, #0]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a4c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e06b      	b.n	8003b2a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a56:	781a      	ldrb	r2, [r3, #0]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a62:	1c5a      	adds	r2, r3, #1
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a78:	b29b      	uxth	r3, r3
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	695b      	ldr	r3, [r3, #20]
 8003a88:	f003 0304 	and.w	r3, r3, #4
 8003a8c:	2b04      	cmp	r3, #4
 8003a8e:	d11b      	bne.n	8003ac8 <HAL_I2C_Mem_Write+0x180>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d017      	beq.n	8003ac8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a9c:	781a      	ldrb	r2, [r3, #0]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa8:	1c5a      	adds	r2, r3, #1
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003abe:	b29b      	uxth	r3, r3
 8003ac0:	3b01      	subs	r3, #1
 8003ac2:	b29a      	uxth	r2, r3
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d1aa      	bne.n	8003a26 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ad4:	68f8      	ldr	r0, [r7, #12]
 8003ad6:	f000 fd43 	bl	8004560 <I2C_WaitOnBTFFlagUntilTimeout>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00d      	beq.n	8003afc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae4:	2b04      	cmp	r3, #4
 8003ae6:	d107      	bne.n	8003af8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003af6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e016      	b.n	8003b2a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	2220      	movs	r2, #32
 8003b10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2200      	movs	r2, #0
 8003b18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003b24:	2300      	movs	r3, #0
 8003b26:	e000      	b.n	8003b2a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003b28:	2302      	movs	r3, #2
  }
}
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	3718      	adds	r7, #24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	bd80      	pop	{r7, pc}
 8003b32:	bf00      	nop
 8003b34:	00100002 	.word	0x00100002
 8003b38:	ffff0000 	.word	0xffff0000

08003b3c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b08c      	sub	sp, #48	@ 0x30
 8003b40:	af02      	add	r7, sp, #8
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	4608      	mov	r0, r1
 8003b46:	4611      	mov	r1, r2
 8003b48:	461a      	mov	r2, r3
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	817b      	strh	r3, [r7, #10]
 8003b4e:	460b      	mov	r3, r1
 8003b50:	813b      	strh	r3, [r7, #8]
 8003b52:	4613      	mov	r3, r2
 8003b54:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b56:	f7ff f841 	bl	8002bdc <HAL_GetTick>
 8003b5a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	2b20      	cmp	r3, #32
 8003b66:	f040 8214 	bne.w	8003f92 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b6c:	9300      	str	r3, [sp, #0]
 8003b6e:	2319      	movs	r3, #25
 8003b70:	2201      	movs	r2, #1
 8003b72:	497b      	ldr	r1, [pc, #492]	@ (8003d60 <HAL_I2C_Mem_Read+0x224>)
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f000 fb91 	bl	800429c <I2C_WaitOnFlagUntilTimeout>
 8003b7a:	4603      	mov	r3, r0
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d001      	beq.n	8003b84 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003b80:	2302      	movs	r3, #2
 8003b82:	e207      	b.n	8003f94 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d101      	bne.n	8003b92 <HAL_I2C_Mem_Read+0x56>
 8003b8e:	2302      	movs	r3, #2
 8003b90:	e200      	b.n	8003f94 <HAL_I2C_Mem_Read+0x458>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2201      	movs	r2, #1
 8003b96:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0301 	and.w	r3, r3, #1
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d007      	beq.n	8003bb8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f042 0201 	orr.w	r2, r2, #1
 8003bb6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	681a      	ldr	r2, [r3, #0]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bc6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2222      	movs	r2, #34	@ 0x22
 8003bcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2240      	movs	r2, #64	@ 0x40
 8003bd4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003be2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003be8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bee:	b29a      	uxth	r2, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	4a5b      	ldr	r2, [pc, #364]	@ (8003d64 <HAL_I2C_Mem_Read+0x228>)
 8003bf8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003bfa:	88f8      	ldrh	r0, [r7, #6]
 8003bfc:	893a      	ldrh	r2, [r7, #8]
 8003bfe:	8979      	ldrh	r1, [r7, #10]
 8003c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c02:	9301      	str	r3, [sp, #4]
 8003c04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c06:	9300      	str	r3, [sp, #0]
 8003c08:	4603      	mov	r3, r0
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f000 fa5e 	bl	80040cc <I2C_RequestMemoryRead>
 8003c10:	4603      	mov	r3, r0
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d001      	beq.n	8003c1a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e1bc      	b.n	8003f94 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d113      	bne.n	8003c4a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c22:	2300      	movs	r3, #0
 8003c24:	623b      	str	r3, [r7, #32]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	695b      	ldr	r3, [r3, #20]
 8003c2c:	623b      	str	r3, [r7, #32]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	623b      	str	r3, [r7, #32]
 8003c36:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c46:	601a      	str	r2, [r3, #0]
 8003c48:	e190      	b.n	8003f6c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c4e:	2b01      	cmp	r3, #1
 8003c50:	d11b      	bne.n	8003c8a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c60:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c62:	2300      	movs	r3, #0
 8003c64:	61fb      	str	r3, [r7, #28]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	695b      	ldr	r3, [r3, #20]
 8003c6c:	61fb      	str	r3, [r7, #28]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	699b      	ldr	r3, [r3, #24]
 8003c74:	61fb      	str	r3, [r7, #28]
 8003c76:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	e170      	b.n	8003f6c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c8e:	2b02      	cmp	r3, #2
 8003c90:	d11b      	bne.n	8003cca <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ca0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cb0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	61bb      	str	r3, [r7, #24]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	695b      	ldr	r3, [r3, #20]
 8003cbc:	61bb      	str	r3, [r7, #24]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	699b      	ldr	r3, [r3, #24]
 8003cc4:	61bb      	str	r3, [r7, #24]
 8003cc6:	69bb      	ldr	r3, [r7, #24]
 8003cc8:	e150      	b.n	8003f6c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cca:	2300      	movs	r3, #0
 8003ccc:	617b      	str	r3, [r7, #20]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	695b      	ldr	r3, [r3, #20]
 8003cd4:	617b      	str	r3, [r7, #20]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	699b      	ldr	r3, [r3, #24]
 8003cdc:	617b      	str	r3, [r7, #20]
 8003cde:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003ce0:	e144      	b.n	8003f6c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ce6:	2b03      	cmp	r3, #3
 8003ce8:	f200 80f1 	bhi.w	8003ece <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d123      	bne.n	8003d3c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cf6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f000 fc79 	bl	80045f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003cfe:	4603      	mov	r3, r0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d001      	beq.n	8003d08 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e145      	b.n	8003f94 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	691a      	ldr	r2, [r3, #16]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d12:	b2d2      	uxtb	r2, r2
 8003d14:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d1a:	1c5a      	adds	r2, r3, #1
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d24:	3b01      	subs	r3, #1
 8003d26:	b29a      	uxth	r2, r3
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d30:	b29b      	uxth	r3, r3
 8003d32:	3b01      	subs	r3, #1
 8003d34:	b29a      	uxth	r2, r3
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003d3a:	e117      	b.n	8003f6c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d40:	2b02      	cmp	r3, #2
 8003d42:	d14e      	bne.n	8003de2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d46:	9300      	str	r3, [sp, #0]
 8003d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	4906      	ldr	r1, [pc, #24]	@ (8003d68 <HAL_I2C_Mem_Read+0x22c>)
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f000 faa4 	bl	800429c <I2C_WaitOnFlagUntilTimeout>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d008      	beq.n	8003d6c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e11a      	b.n	8003f94 <HAL_I2C_Mem_Read+0x458>
 8003d5e:	bf00      	nop
 8003d60:	00100002 	.word	0x00100002
 8003d64:	ffff0000 	.word	0xffff0000
 8003d68:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	691a      	ldr	r2, [r3, #16]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d86:	b2d2      	uxtb	r2, r2
 8003d88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8e:	1c5a      	adds	r2, r3, #1
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	3b01      	subs	r3, #1
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	691a      	ldr	r2, [r3, #16]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db8:	b2d2      	uxtb	r2, r2
 8003dba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc0:	1c5a      	adds	r2, r3, #1
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	b29a      	uxth	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dd6:	b29b      	uxth	r3, r3
 8003dd8:	3b01      	subs	r3, #1
 8003dda:	b29a      	uxth	r2, r3
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003de0:	e0c4      	b.n	8003f6c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003de2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de4:	9300      	str	r3, [sp, #0]
 8003de6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003de8:	2200      	movs	r2, #0
 8003dea:	496c      	ldr	r1, [pc, #432]	@ (8003f9c <HAL_I2C_Mem_Read+0x460>)
 8003dec:	68f8      	ldr	r0, [r7, #12]
 8003dee:	f000 fa55 	bl	800429c <I2C_WaitOnFlagUntilTimeout>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d001      	beq.n	8003dfc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e0cb      	b.n	8003f94 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e0a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	691a      	ldr	r2, [r3, #16]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e16:	b2d2      	uxtb	r2, r2
 8003e18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e1e:	1c5a      	adds	r2, r3, #1
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e28:	3b01      	subs	r3, #1
 8003e2a:	b29a      	uxth	r2, r3
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	3b01      	subs	r3, #1
 8003e38:	b29a      	uxth	r2, r3
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e44:	2200      	movs	r2, #0
 8003e46:	4955      	ldr	r1, [pc, #340]	@ (8003f9c <HAL_I2C_Mem_Read+0x460>)
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f000 fa27 	bl	800429c <I2C_WaitOnFlagUntilTimeout>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d001      	beq.n	8003e58 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e09d      	b.n	8003f94 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e66:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	691a      	ldr	r2, [r3, #16]
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e72:	b2d2      	uxtb	r2, r2
 8003e74:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7a:	1c5a      	adds	r2, r3, #1
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e84:	3b01      	subs	r3, #1
 8003e86:	b29a      	uxth	r2, r3
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e90:	b29b      	uxth	r3, r3
 8003e92:	3b01      	subs	r3, #1
 8003e94:	b29a      	uxth	r2, r3
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	691a      	ldr	r2, [r3, #16]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea4:	b2d2      	uxtb	r2, r2
 8003ea6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eac:	1c5a      	adds	r2, r3, #1
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eb6:	3b01      	subs	r3, #1
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	3b01      	subs	r3, #1
 8003ec6:	b29a      	uxth	r2, r3
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ecc:	e04e      	b.n	8003f6c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ece:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ed0:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f000 fb8c 	bl	80045f0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d001      	beq.n	8003ee2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e058      	b.n	8003f94 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	691a      	ldr	r2, [r3, #16]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eec:	b2d2      	uxtb	r2, r2
 8003eee:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef4:	1c5a      	adds	r2, r3, #1
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003efe:	3b01      	subs	r3, #1
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f0a:	b29b      	uxth	r3, r3
 8003f0c:	3b01      	subs	r3, #1
 8003f0e:	b29a      	uxth	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	f003 0304 	and.w	r3, r3, #4
 8003f1e:	2b04      	cmp	r3, #4
 8003f20:	d124      	bne.n	8003f6c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f26:	2b03      	cmp	r3, #3
 8003f28:	d107      	bne.n	8003f3a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f38:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	691a      	ldr	r2, [r3, #16]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f44:	b2d2      	uxtb	r2, r2
 8003f46:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4c:	1c5a      	adds	r2, r3, #1
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f56:	3b01      	subs	r3, #1
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	3b01      	subs	r3, #1
 8003f66:	b29a      	uxth	r2, r3
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	f47f aeb6 	bne.w	8003ce2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2220      	movs	r2, #32
 8003f7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	e000      	b.n	8003f94 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003f92:	2302      	movs	r3, #2
  }
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3728      	adds	r7, #40	@ 0x28
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	00010004 	.word	0x00010004

08003fa0 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b088      	sub	sp, #32
 8003fa4:	af02      	add	r7, sp, #8
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	4608      	mov	r0, r1
 8003faa:	4611      	mov	r1, r2
 8003fac:	461a      	mov	r2, r3
 8003fae:	4603      	mov	r3, r0
 8003fb0:	817b      	strh	r3, [r7, #10]
 8003fb2:	460b      	mov	r3, r1
 8003fb4:	813b      	strh	r3, [r7, #8]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	681a      	ldr	r2, [r3, #0]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fc8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003fca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fcc:	9300      	str	r3, [sp, #0]
 8003fce:	6a3b      	ldr	r3, [r7, #32]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f000 f960 	bl	800429c <I2C_WaitOnFlagUntilTimeout>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d00d      	beq.n	8003ffe <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ff0:	d103      	bne.n	8003ffa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ff8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003ffa:	2303      	movs	r3, #3
 8003ffc:	e05f      	b.n	80040be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ffe:	897b      	ldrh	r3, [r7, #10]
 8004000:	b2db      	uxtb	r3, r3
 8004002:	461a      	mov	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800400c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800400e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004010:	6a3a      	ldr	r2, [r7, #32]
 8004012:	492d      	ldr	r1, [pc, #180]	@ (80040c8 <I2C_RequestMemoryWrite+0x128>)
 8004014:	68f8      	ldr	r0, [r7, #12]
 8004016:	f000 f9bb 	bl	8004390 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800401a:	4603      	mov	r3, r0
 800401c:	2b00      	cmp	r3, #0
 800401e:	d001      	beq.n	8004024 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e04c      	b.n	80040be <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004024:	2300      	movs	r3, #0
 8004026:	617b      	str	r3, [r7, #20]
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	617b      	str	r3, [r7, #20]
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	699b      	ldr	r3, [r3, #24]
 8004036:	617b      	str	r3, [r7, #20]
 8004038:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800403a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800403c:	6a39      	ldr	r1, [r7, #32]
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 fa46 	bl	80044d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d00d      	beq.n	8004066 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800404e:	2b04      	cmp	r3, #4
 8004050:	d107      	bne.n	8004062 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681a      	ldr	r2, [r3, #0]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004060:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004062:	2301      	movs	r3, #1
 8004064:	e02b      	b.n	80040be <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004066:	88fb      	ldrh	r3, [r7, #6]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d105      	bne.n	8004078 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800406c:	893b      	ldrh	r3, [r7, #8]
 800406e:	b2da      	uxtb	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	611a      	str	r2, [r3, #16]
 8004076:	e021      	b.n	80040bc <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004078:	893b      	ldrh	r3, [r7, #8]
 800407a:	0a1b      	lsrs	r3, r3, #8
 800407c:	b29b      	uxth	r3, r3
 800407e:	b2da      	uxtb	r2, r3
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004086:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004088:	6a39      	ldr	r1, [r7, #32]
 800408a:	68f8      	ldr	r0, [r7, #12]
 800408c:	f000 fa20 	bl	80044d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00d      	beq.n	80040b2 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800409a:	2b04      	cmp	r3, #4
 800409c:	d107      	bne.n	80040ae <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681a      	ldr	r2, [r3, #0]
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040ac:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80040ae:	2301      	movs	r3, #1
 80040b0:	e005      	b.n	80040be <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80040b2:	893b      	ldrh	r3, [r7, #8]
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3718      	adds	r7, #24
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd80      	pop	{r7, pc}
 80040c6:	bf00      	nop
 80040c8:	00010002 	.word	0x00010002

080040cc <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b088      	sub	sp, #32
 80040d0:	af02      	add	r7, sp, #8
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	4608      	mov	r0, r1
 80040d6:	4611      	mov	r1, r2
 80040d8:	461a      	mov	r2, r3
 80040da:	4603      	mov	r3, r0
 80040dc:	817b      	strh	r3, [r7, #10]
 80040de:	460b      	mov	r3, r1
 80040e0:	813b      	strh	r3, [r7, #8]
 80040e2:	4613      	mov	r3, r2
 80040e4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80040f4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	681a      	ldr	r2, [r3, #0]
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004104:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004108:	9300      	str	r3, [sp, #0]
 800410a:	6a3b      	ldr	r3, [r7, #32]
 800410c:	2200      	movs	r2, #0
 800410e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f000 f8c2 	bl	800429c <I2C_WaitOnFlagUntilTimeout>
 8004118:	4603      	mov	r3, r0
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00d      	beq.n	800413a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004128:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800412c:	d103      	bne.n	8004136 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004134:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e0aa      	b.n	8004290 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800413a:	897b      	ldrh	r3, [r7, #10]
 800413c:	b2db      	uxtb	r3, r3
 800413e:	461a      	mov	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004148:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800414a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414c:	6a3a      	ldr	r2, [r7, #32]
 800414e:	4952      	ldr	r1, [pc, #328]	@ (8004298 <I2C_RequestMemoryRead+0x1cc>)
 8004150:	68f8      	ldr	r0, [r7, #12]
 8004152:	f000 f91d 	bl	8004390 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004156:	4603      	mov	r3, r0
 8004158:	2b00      	cmp	r3, #0
 800415a:	d001      	beq.n	8004160 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e097      	b.n	8004290 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004160:	2300      	movs	r3, #0
 8004162:	617b      	str	r3, [r7, #20]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	695b      	ldr	r3, [r3, #20]
 800416a:	617b      	str	r3, [r7, #20]
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	617b      	str	r3, [r7, #20]
 8004174:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004176:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004178:	6a39      	ldr	r1, [r7, #32]
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f000 f9a8 	bl	80044d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d00d      	beq.n	80041a2 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800418a:	2b04      	cmp	r3, #4
 800418c:	d107      	bne.n	800419e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800419c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800419e:	2301      	movs	r3, #1
 80041a0:	e076      	b.n	8004290 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80041a2:	88fb      	ldrh	r3, [r7, #6]
 80041a4:	2b01      	cmp	r3, #1
 80041a6:	d105      	bne.n	80041b4 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041a8:	893b      	ldrh	r3, [r7, #8]
 80041aa:	b2da      	uxtb	r2, r3
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	611a      	str	r2, [r3, #16]
 80041b2:	e021      	b.n	80041f8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80041b4:	893b      	ldrh	r3, [r7, #8]
 80041b6:	0a1b      	lsrs	r3, r3, #8
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	b2da      	uxtb	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041c4:	6a39      	ldr	r1, [r7, #32]
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f000 f982 	bl	80044d0 <I2C_WaitOnTXEFlagUntilTimeout>
 80041cc:	4603      	mov	r3, r0
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d00d      	beq.n	80041ee <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d6:	2b04      	cmp	r3, #4
 80041d8:	d107      	bne.n	80041ea <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041e8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e050      	b.n	8004290 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80041ee:	893b      	ldrh	r3, [r7, #8]
 80041f0:	b2da      	uxtb	r2, r3
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041fa:	6a39      	ldr	r1, [r7, #32]
 80041fc:	68f8      	ldr	r0, [r7, #12]
 80041fe:	f000 f967 	bl	80044d0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00d      	beq.n	8004224 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800420c:	2b04      	cmp	r3, #4
 800420e:	d107      	bne.n	8004220 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800421e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004220:	2301      	movs	r3, #1
 8004222:	e035      	b.n	8004290 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004232:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	6a3b      	ldr	r3, [r7, #32]
 800423a:	2200      	movs	r2, #0
 800423c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004240:	68f8      	ldr	r0, [r7, #12]
 8004242:	f000 f82b 	bl	800429c <I2C_WaitOnFlagUntilTimeout>
 8004246:	4603      	mov	r3, r0
 8004248:	2b00      	cmp	r3, #0
 800424a:	d00d      	beq.n	8004268 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004256:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800425a:	d103      	bne.n	8004264 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004262:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004264:	2303      	movs	r3, #3
 8004266:	e013      	b.n	8004290 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004268:	897b      	ldrh	r3, [r7, #10]
 800426a:	b2db      	uxtb	r3, r3
 800426c:	f043 0301 	orr.w	r3, r3, #1
 8004270:	b2da      	uxtb	r2, r3
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004278:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427a:	6a3a      	ldr	r2, [r7, #32]
 800427c:	4906      	ldr	r1, [pc, #24]	@ (8004298 <I2C_RequestMemoryRead+0x1cc>)
 800427e:	68f8      	ldr	r0, [r7, #12]
 8004280:	f000 f886 	bl	8004390 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004284:	4603      	mov	r3, r0
 8004286:	2b00      	cmp	r3, #0
 8004288:	d001      	beq.n	800428e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e000      	b.n	8004290 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3718      	adds	r7, #24
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	00010002 	.word	0x00010002

0800429c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b084      	sub	sp, #16
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	60f8      	str	r0, [r7, #12]
 80042a4:	60b9      	str	r1, [r7, #8]
 80042a6:	603b      	str	r3, [r7, #0]
 80042a8:	4613      	mov	r3, r2
 80042aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042ac:	e048      	b.n	8004340 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042b4:	d044      	beq.n	8004340 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042b6:	f7fe fc91 	bl	8002bdc <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	683a      	ldr	r2, [r7, #0]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d302      	bcc.n	80042cc <I2C_WaitOnFlagUntilTimeout+0x30>
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d139      	bne.n	8004340 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	0c1b      	lsrs	r3, r3, #16
 80042d0:	b2db      	uxtb	r3, r3
 80042d2:	2b01      	cmp	r3, #1
 80042d4:	d10d      	bne.n	80042f2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	43da      	mvns	r2, r3
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	4013      	ands	r3, r2
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	bf0c      	ite	eq
 80042e8:	2301      	moveq	r3, #1
 80042ea:	2300      	movne	r3, #0
 80042ec:	b2db      	uxtb	r3, r3
 80042ee:	461a      	mov	r2, r3
 80042f0:	e00c      	b.n	800430c <I2C_WaitOnFlagUntilTimeout+0x70>
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	43da      	mvns	r2, r3
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	4013      	ands	r3, r2
 80042fe:	b29b      	uxth	r3, r3
 8004300:	2b00      	cmp	r3, #0
 8004302:	bf0c      	ite	eq
 8004304:	2301      	moveq	r3, #1
 8004306:	2300      	movne	r3, #0
 8004308:	b2db      	uxtb	r3, r3
 800430a:	461a      	mov	r2, r3
 800430c:	79fb      	ldrb	r3, [r7, #7]
 800430e:	429a      	cmp	r2, r3
 8004310:	d116      	bne.n	8004340 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2220      	movs	r2, #32
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800432c:	f043 0220 	orr.w	r2, r3, #32
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	2200      	movs	r2, #0
 8004338:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	e023      	b.n	8004388 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	0c1b      	lsrs	r3, r3, #16
 8004344:	b2db      	uxtb	r3, r3
 8004346:	2b01      	cmp	r3, #1
 8004348:	d10d      	bne.n	8004366 <I2C_WaitOnFlagUntilTimeout+0xca>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	695b      	ldr	r3, [r3, #20]
 8004350:	43da      	mvns	r2, r3
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	4013      	ands	r3, r2
 8004356:	b29b      	uxth	r3, r3
 8004358:	2b00      	cmp	r3, #0
 800435a:	bf0c      	ite	eq
 800435c:	2301      	moveq	r3, #1
 800435e:	2300      	movne	r3, #0
 8004360:	b2db      	uxtb	r3, r3
 8004362:	461a      	mov	r2, r3
 8004364:	e00c      	b.n	8004380 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	43da      	mvns	r2, r3
 800436e:	68bb      	ldr	r3, [r7, #8]
 8004370:	4013      	ands	r3, r2
 8004372:	b29b      	uxth	r3, r3
 8004374:	2b00      	cmp	r3, #0
 8004376:	bf0c      	ite	eq
 8004378:	2301      	moveq	r3, #1
 800437a:	2300      	movne	r3, #0
 800437c:	b2db      	uxtb	r3, r3
 800437e:	461a      	mov	r2, r3
 8004380:	79fb      	ldrb	r3, [r7, #7]
 8004382:	429a      	cmp	r2, r3
 8004384:	d093      	beq.n	80042ae <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004386:	2300      	movs	r3, #0
}
 8004388:	4618      	mov	r0, r3
 800438a:	3710      	adds	r7, #16
 800438c:	46bd      	mov	sp, r7
 800438e:	bd80      	pop	{r7, pc}

08004390 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b084      	sub	sp, #16
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	607a      	str	r2, [r7, #4]
 800439c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800439e:	e071      	b.n	8004484 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043aa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80043ae:	d123      	bne.n	80043f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	681a      	ldr	r2, [r3, #0]
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043be:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80043c8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2200      	movs	r2, #0
 80043ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2220      	movs	r2, #32
 80043d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2200      	movs	r2, #0
 80043dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043e4:	f043 0204 	orr.w	r2, r3, #4
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e067      	b.n	80044c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043fe:	d041      	beq.n	8004484 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004400:	f7fe fbec 	bl	8002bdc <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	687a      	ldr	r2, [r7, #4]
 800440c:	429a      	cmp	r2, r3
 800440e:	d302      	bcc.n	8004416 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d136      	bne.n	8004484 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	0c1b      	lsrs	r3, r3, #16
 800441a:	b2db      	uxtb	r3, r3
 800441c:	2b01      	cmp	r3, #1
 800441e:	d10c      	bne.n	800443a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	695b      	ldr	r3, [r3, #20]
 8004426:	43da      	mvns	r2, r3
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	4013      	ands	r3, r2
 800442c:	b29b      	uxth	r3, r3
 800442e:	2b00      	cmp	r3, #0
 8004430:	bf14      	ite	ne
 8004432:	2301      	movne	r3, #1
 8004434:	2300      	moveq	r3, #0
 8004436:	b2db      	uxtb	r3, r3
 8004438:	e00b      	b.n	8004452 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	43da      	mvns	r2, r3
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	4013      	ands	r3, r2
 8004446:	b29b      	uxth	r3, r3
 8004448:	2b00      	cmp	r3, #0
 800444a:	bf14      	ite	ne
 800444c:	2301      	movne	r3, #1
 800444e:	2300      	moveq	r3, #0
 8004450:	b2db      	uxtb	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	d016      	beq.n	8004484 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2220      	movs	r2, #32
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004470:	f043 0220 	orr.w	r2, r3, #32
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e021      	b.n	80044c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	0c1b      	lsrs	r3, r3, #16
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2b01      	cmp	r3, #1
 800448c:	d10c      	bne.n	80044a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	43da      	mvns	r2, r3
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	4013      	ands	r3, r2
 800449a:	b29b      	uxth	r3, r3
 800449c:	2b00      	cmp	r3, #0
 800449e:	bf14      	ite	ne
 80044a0:	2301      	movne	r3, #1
 80044a2:	2300      	moveq	r3, #0
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	e00b      	b.n	80044c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	699b      	ldr	r3, [r3, #24]
 80044ae:	43da      	mvns	r2, r3
 80044b0:	68bb      	ldr	r3, [r7, #8]
 80044b2:	4013      	ands	r3, r2
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	bf14      	ite	ne
 80044ba:	2301      	movne	r3, #1
 80044bc:	2300      	moveq	r3, #0
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f47f af6d 	bne.w	80043a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3710      	adds	r7, #16
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044dc:	e034      	b.n	8004548 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80044de:	68f8      	ldr	r0, [r7, #12]
 80044e0:	f000 f8e3 	bl	80046aa <I2C_IsAcknowledgeFailed>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e034      	b.n	8004558 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f4:	d028      	beq.n	8004548 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044f6:	f7fe fb71 	bl	8002bdc <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	68ba      	ldr	r2, [r7, #8]
 8004502:	429a      	cmp	r2, r3
 8004504:	d302      	bcc.n	800450c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d11d      	bne.n	8004548 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004516:	2b80      	cmp	r3, #128	@ 0x80
 8004518:	d016      	beq.n	8004548 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2220      	movs	r2, #32
 8004524:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004534:	f043 0220 	orr.w	r2, r3, #32
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2200      	movs	r2, #0
 8004540:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e007      	b.n	8004558 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	695b      	ldr	r3, [r3, #20]
 800454e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004552:	2b80      	cmp	r3, #128	@ 0x80
 8004554:	d1c3      	bne.n	80044de <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3710      	adds	r7, #16
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}

08004560 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b084      	sub	sp, #16
 8004564:	af00      	add	r7, sp, #0
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800456c:	e034      	b.n	80045d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800456e:	68f8      	ldr	r0, [r7, #12]
 8004570:	f000 f89b 	bl	80046aa <I2C_IsAcknowledgeFailed>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d001      	beq.n	800457e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800457a:	2301      	movs	r3, #1
 800457c:	e034      	b.n	80045e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800457e:	68bb      	ldr	r3, [r7, #8]
 8004580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004584:	d028      	beq.n	80045d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004586:	f7fe fb29 	bl	8002bdc <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	68ba      	ldr	r2, [r7, #8]
 8004592:	429a      	cmp	r2, r3
 8004594:	d302      	bcc.n	800459c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d11d      	bne.n	80045d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	f003 0304 	and.w	r3, r3, #4
 80045a6:	2b04      	cmp	r3, #4
 80045a8:	d016      	beq.n	80045d8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2200      	movs	r2, #0
 80045ae:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	2220      	movs	r2, #32
 80045b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045c4:	f043 0220 	orr.w	r2, r3, #32
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	2200      	movs	r2, #0
 80045d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80045d4:	2301      	movs	r3, #1
 80045d6:	e007      	b.n	80045e8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	f003 0304 	and.w	r3, r3, #4
 80045e2:	2b04      	cmp	r3, #4
 80045e4:	d1c3      	bne.n	800456e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3710      	adds	r7, #16
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}

080045f0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80045fc:	e049      	b.n	8004692 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	695b      	ldr	r3, [r3, #20]
 8004604:	f003 0310 	and.w	r3, r3, #16
 8004608:	2b10      	cmp	r3, #16
 800460a:	d119      	bne.n	8004640 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f06f 0210 	mvn.w	r2, #16
 8004614:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2200      	movs	r2, #0
 800461a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2220      	movs	r2, #32
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e030      	b.n	80046a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004640:	f7fe facc 	bl	8002bdc <HAL_GetTick>
 8004644:	4602      	mov	r2, r0
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	1ad3      	subs	r3, r2, r3
 800464a:	68ba      	ldr	r2, [r7, #8]
 800464c:	429a      	cmp	r2, r3
 800464e:	d302      	bcc.n	8004656 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d11d      	bne.n	8004692 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	695b      	ldr	r3, [r3, #20]
 800465c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004660:	2b40      	cmp	r3, #64	@ 0x40
 8004662:	d016      	beq.n	8004692 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2200      	movs	r2, #0
 8004668:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2220      	movs	r2, #32
 800466e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800467e:	f043 0220 	orr.w	r2, r3, #32
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2200      	movs	r2, #0
 800468a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800468e:	2301      	movs	r3, #1
 8004690:	e007      	b.n	80046a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800469c:	2b40      	cmp	r3, #64	@ 0x40
 800469e:	d1ae      	bne.n	80045fe <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046a0:	2300      	movs	r3, #0
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	3710      	adds	r7, #16
 80046a6:	46bd      	mov	sp, r7
 80046a8:	bd80      	pop	{r7, pc}

080046aa <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80046aa:	b480      	push	{r7}
 80046ac:	b083      	sub	sp, #12
 80046ae:	af00      	add	r7, sp, #0
 80046b0:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80046bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80046c0:	d11b      	bne.n	80046fa <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80046ca:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2200      	movs	r2, #0
 80046d0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2220      	movs	r2, #32
 80046d6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046e6:	f043 0204 	orr.w	r2, r3, #4
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2200      	movs	r2, #0
 80046f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e000      	b.n	80046fc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80046fa:	2300      	movs	r3, #0
}
 80046fc:	4618      	mov	r0, r3
 80046fe:	370c      	adds	r7, #12
 8004700:	46bd      	mov	sp, r7
 8004702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004706:	4770      	bx	lr

08004708 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b086      	sub	sp, #24
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d101      	bne.n	800471a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	e267      	b.n	8004bea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	d075      	beq.n	8004812 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004726:	4b88      	ldr	r3, [pc, #544]	@ (8004948 <HAL_RCC_OscConfig+0x240>)
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	f003 030c 	and.w	r3, r3, #12
 800472e:	2b04      	cmp	r3, #4
 8004730:	d00c      	beq.n	800474c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004732:	4b85      	ldr	r3, [pc, #532]	@ (8004948 <HAL_RCC_OscConfig+0x240>)
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800473a:	2b08      	cmp	r3, #8
 800473c:	d112      	bne.n	8004764 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800473e:	4b82      	ldr	r3, [pc, #520]	@ (8004948 <HAL_RCC_OscConfig+0x240>)
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004746:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800474a:	d10b      	bne.n	8004764 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800474c:	4b7e      	ldr	r3, [pc, #504]	@ (8004948 <HAL_RCC_OscConfig+0x240>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d05b      	beq.n	8004810 <HAL_RCC_OscConfig+0x108>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d157      	bne.n	8004810 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	e242      	b.n	8004bea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	685b      	ldr	r3, [r3, #4]
 8004768:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800476c:	d106      	bne.n	800477c <HAL_RCC_OscConfig+0x74>
 800476e:	4b76      	ldr	r3, [pc, #472]	@ (8004948 <HAL_RCC_OscConfig+0x240>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a75      	ldr	r2, [pc, #468]	@ (8004948 <HAL_RCC_OscConfig+0x240>)
 8004774:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004778:	6013      	str	r3, [r2, #0]
 800477a:	e01d      	b.n	80047b8 <HAL_RCC_OscConfig+0xb0>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004784:	d10c      	bne.n	80047a0 <HAL_RCC_OscConfig+0x98>
 8004786:	4b70      	ldr	r3, [pc, #448]	@ (8004948 <HAL_RCC_OscConfig+0x240>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a6f      	ldr	r2, [pc, #444]	@ (8004948 <HAL_RCC_OscConfig+0x240>)
 800478c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004790:	6013      	str	r3, [r2, #0]
 8004792:	4b6d      	ldr	r3, [pc, #436]	@ (8004948 <HAL_RCC_OscConfig+0x240>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	4a6c      	ldr	r2, [pc, #432]	@ (8004948 <HAL_RCC_OscConfig+0x240>)
 8004798:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800479c:	6013      	str	r3, [r2, #0]
 800479e:	e00b      	b.n	80047b8 <HAL_RCC_OscConfig+0xb0>
 80047a0:	4b69      	ldr	r3, [pc, #420]	@ (8004948 <HAL_RCC_OscConfig+0x240>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a68      	ldr	r2, [pc, #416]	@ (8004948 <HAL_RCC_OscConfig+0x240>)
 80047a6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047aa:	6013      	str	r3, [r2, #0]
 80047ac:	4b66      	ldr	r3, [pc, #408]	@ (8004948 <HAL_RCC_OscConfig+0x240>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	4a65      	ldr	r2, [pc, #404]	@ (8004948 <HAL_RCC_OscConfig+0x240>)
 80047b2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80047b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d013      	beq.n	80047e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c0:	f7fe fa0c 	bl	8002bdc <HAL_GetTick>
 80047c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047c6:	e008      	b.n	80047da <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047c8:	f7fe fa08 	bl	8002bdc <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2b64      	cmp	r3, #100	@ 0x64
 80047d4:	d901      	bls.n	80047da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e207      	b.n	8004bea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80047da:	4b5b      	ldr	r3, [pc, #364]	@ (8004948 <HAL_RCC_OscConfig+0x240>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d0f0      	beq.n	80047c8 <HAL_RCC_OscConfig+0xc0>
 80047e6:	e014      	b.n	8004812 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047e8:	f7fe f9f8 	bl	8002bdc <HAL_GetTick>
 80047ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047ee:	e008      	b.n	8004802 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80047f0:	f7fe f9f4 	bl	8002bdc <HAL_GetTick>
 80047f4:	4602      	mov	r2, r0
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	1ad3      	subs	r3, r2, r3
 80047fa:	2b64      	cmp	r3, #100	@ 0x64
 80047fc:	d901      	bls.n	8004802 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e1f3      	b.n	8004bea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004802:	4b51      	ldr	r3, [pc, #324]	@ (8004948 <HAL_RCC_OscConfig+0x240>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800480a:	2b00      	cmp	r3, #0
 800480c:	d1f0      	bne.n	80047f0 <HAL_RCC_OscConfig+0xe8>
 800480e:	e000      	b.n	8004812 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004810:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d063      	beq.n	80048e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800481e:	4b4a      	ldr	r3, [pc, #296]	@ (8004948 <HAL_RCC_OscConfig+0x240>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f003 030c 	and.w	r3, r3, #12
 8004826:	2b00      	cmp	r3, #0
 8004828:	d00b      	beq.n	8004842 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800482a:	4b47      	ldr	r3, [pc, #284]	@ (8004948 <HAL_RCC_OscConfig+0x240>)
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004832:	2b08      	cmp	r3, #8
 8004834:	d11c      	bne.n	8004870 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004836:	4b44      	ldr	r3, [pc, #272]	@ (8004948 <HAL_RCC_OscConfig+0x240>)
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800483e:	2b00      	cmp	r3, #0
 8004840:	d116      	bne.n	8004870 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004842:	4b41      	ldr	r3, [pc, #260]	@ (8004948 <HAL_RCC_OscConfig+0x240>)
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0302 	and.w	r3, r3, #2
 800484a:	2b00      	cmp	r3, #0
 800484c:	d005      	beq.n	800485a <HAL_RCC_OscConfig+0x152>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	2b01      	cmp	r3, #1
 8004854:	d001      	beq.n	800485a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e1c7      	b.n	8004bea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800485a:	4b3b      	ldr	r3, [pc, #236]	@ (8004948 <HAL_RCC_OscConfig+0x240>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	691b      	ldr	r3, [r3, #16]
 8004866:	00db      	lsls	r3, r3, #3
 8004868:	4937      	ldr	r1, [pc, #220]	@ (8004948 <HAL_RCC_OscConfig+0x240>)
 800486a:	4313      	orrs	r3, r2
 800486c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800486e:	e03a      	b.n	80048e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d020      	beq.n	80048ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004878:	4b34      	ldr	r3, [pc, #208]	@ (800494c <HAL_RCC_OscConfig+0x244>)
 800487a:	2201      	movs	r2, #1
 800487c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800487e:	f7fe f9ad 	bl	8002bdc <HAL_GetTick>
 8004882:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004884:	e008      	b.n	8004898 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004886:	f7fe f9a9 	bl	8002bdc <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	2b02      	cmp	r3, #2
 8004892:	d901      	bls.n	8004898 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004894:	2303      	movs	r3, #3
 8004896:	e1a8      	b.n	8004bea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004898:	4b2b      	ldr	r3, [pc, #172]	@ (8004948 <HAL_RCC_OscConfig+0x240>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f003 0302 	and.w	r3, r3, #2
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d0f0      	beq.n	8004886 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048a4:	4b28      	ldr	r3, [pc, #160]	@ (8004948 <HAL_RCC_OscConfig+0x240>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	691b      	ldr	r3, [r3, #16]
 80048b0:	00db      	lsls	r3, r3, #3
 80048b2:	4925      	ldr	r1, [pc, #148]	@ (8004948 <HAL_RCC_OscConfig+0x240>)
 80048b4:	4313      	orrs	r3, r2
 80048b6:	600b      	str	r3, [r1, #0]
 80048b8:	e015      	b.n	80048e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80048ba:	4b24      	ldr	r3, [pc, #144]	@ (800494c <HAL_RCC_OscConfig+0x244>)
 80048bc:	2200      	movs	r2, #0
 80048be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c0:	f7fe f98c 	bl	8002bdc <HAL_GetTick>
 80048c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048c6:	e008      	b.n	80048da <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80048c8:	f7fe f988 	bl	8002bdc <HAL_GetTick>
 80048cc:	4602      	mov	r2, r0
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	1ad3      	subs	r3, r2, r3
 80048d2:	2b02      	cmp	r3, #2
 80048d4:	d901      	bls.n	80048da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80048d6:	2303      	movs	r3, #3
 80048d8:	e187      	b.n	8004bea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80048da:	4b1b      	ldr	r3, [pc, #108]	@ (8004948 <HAL_RCC_OscConfig+0x240>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0302 	and.w	r3, r3, #2
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1f0      	bne.n	80048c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 0308 	and.w	r3, r3, #8
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d036      	beq.n	8004960 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	695b      	ldr	r3, [r3, #20]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d016      	beq.n	8004928 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048fa:	4b15      	ldr	r3, [pc, #84]	@ (8004950 <HAL_RCC_OscConfig+0x248>)
 80048fc:	2201      	movs	r2, #1
 80048fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004900:	f7fe f96c 	bl	8002bdc <HAL_GetTick>
 8004904:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004906:	e008      	b.n	800491a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004908:	f7fe f968 	bl	8002bdc <HAL_GetTick>
 800490c:	4602      	mov	r2, r0
 800490e:	693b      	ldr	r3, [r7, #16]
 8004910:	1ad3      	subs	r3, r2, r3
 8004912:	2b02      	cmp	r3, #2
 8004914:	d901      	bls.n	800491a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004916:	2303      	movs	r3, #3
 8004918:	e167      	b.n	8004bea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800491a:	4b0b      	ldr	r3, [pc, #44]	@ (8004948 <HAL_RCC_OscConfig+0x240>)
 800491c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800491e:	f003 0302 	and.w	r3, r3, #2
 8004922:	2b00      	cmp	r3, #0
 8004924:	d0f0      	beq.n	8004908 <HAL_RCC_OscConfig+0x200>
 8004926:	e01b      	b.n	8004960 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004928:	4b09      	ldr	r3, [pc, #36]	@ (8004950 <HAL_RCC_OscConfig+0x248>)
 800492a:	2200      	movs	r2, #0
 800492c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800492e:	f7fe f955 	bl	8002bdc <HAL_GetTick>
 8004932:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004934:	e00e      	b.n	8004954 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004936:	f7fe f951 	bl	8002bdc <HAL_GetTick>
 800493a:	4602      	mov	r2, r0
 800493c:	693b      	ldr	r3, [r7, #16]
 800493e:	1ad3      	subs	r3, r2, r3
 8004940:	2b02      	cmp	r3, #2
 8004942:	d907      	bls.n	8004954 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004944:	2303      	movs	r3, #3
 8004946:	e150      	b.n	8004bea <HAL_RCC_OscConfig+0x4e2>
 8004948:	40023800 	.word	0x40023800
 800494c:	42470000 	.word	0x42470000
 8004950:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004954:	4b88      	ldr	r3, [pc, #544]	@ (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004956:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004958:	f003 0302 	and.w	r3, r3, #2
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1ea      	bne.n	8004936 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f003 0304 	and.w	r3, r3, #4
 8004968:	2b00      	cmp	r3, #0
 800496a:	f000 8097 	beq.w	8004a9c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800496e:	2300      	movs	r3, #0
 8004970:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004972:	4b81      	ldr	r3, [pc, #516]	@ (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004976:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10f      	bne.n	800499e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800497e:	2300      	movs	r3, #0
 8004980:	60bb      	str	r3, [r7, #8]
 8004982:	4b7d      	ldr	r3, [pc, #500]	@ (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004986:	4a7c      	ldr	r2, [pc, #496]	@ (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004988:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800498c:	6413      	str	r3, [r2, #64]	@ 0x40
 800498e:	4b7a      	ldr	r3, [pc, #488]	@ (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004990:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004992:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004996:	60bb      	str	r3, [r7, #8]
 8004998:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800499a:	2301      	movs	r3, #1
 800499c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800499e:	4b77      	ldr	r3, [pc, #476]	@ (8004b7c <HAL_RCC_OscConfig+0x474>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d118      	bne.n	80049dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049aa:	4b74      	ldr	r3, [pc, #464]	@ (8004b7c <HAL_RCC_OscConfig+0x474>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a73      	ldr	r2, [pc, #460]	@ (8004b7c <HAL_RCC_OscConfig+0x474>)
 80049b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80049b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049b6:	f7fe f911 	bl	8002bdc <HAL_GetTick>
 80049ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049bc:	e008      	b.n	80049d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049be:	f7fe f90d 	bl	8002bdc <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d901      	bls.n	80049d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e10c      	b.n	8004bea <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049d0:	4b6a      	ldr	r3, [pc, #424]	@ (8004b7c <HAL_RCC_OscConfig+0x474>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d0f0      	beq.n	80049be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	2b01      	cmp	r3, #1
 80049e2:	d106      	bne.n	80049f2 <HAL_RCC_OscConfig+0x2ea>
 80049e4:	4b64      	ldr	r3, [pc, #400]	@ (8004b78 <HAL_RCC_OscConfig+0x470>)
 80049e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049e8:	4a63      	ldr	r2, [pc, #396]	@ (8004b78 <HAL_RCC_OscConfig+0x470>)
 80049ea:	f043 0301 	orr.w	r3, r3, #1
 80049ee:	6713      	str	r3, [r2, #112]	@ 0x70
 80049f0:	e01c      	b.n	8004a2c <HAL_RCC_OscConfig+0x324>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	2b05      	cmp	r3, #5
 80049f8:	d10c      	bne.n	8004a14 <HAL_RCC_OscConfig+0x30c>
 80049fa:	4b5f      	ldr	r3, [pc, #380]	@ (8004b78 <HAL_RCC_OscConfig+0x470>)
 80049fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049fe:	4a5e      	ldr	r2, [pc, #376]	@ (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004a00:	f043 0304 	orr.w	r3, r3, #4
 8004a04:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a06:	4b5c      	ldr	r3, [pc, #368]	@ (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004a08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a0a:	4a5b      	ldr	r2, [pc, #364]	@ (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004a0c:	f043 0301 	orr.w	r3, r3, #1
 8004a10:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a12:	e00b      	b.n	8004a2c <HAL_RCC_OscConfig+0x324>
 8004a14:	4b58      	ldr	r3, [pc, #352]	@ (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004a16:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a18:	4a57      	ldr	r2, [pc, #348]	@ (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004a1a:	f023 0301 	bic.w	r3, r3, #1
 8004a1e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004a20:	4b55      	ldr	r3, [pc, #340]	@ (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004a22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a24:	4a54      	ldr	r2, [pc, #336]	@ (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004a26:	f023 0304 	bic.w	r3, r3, #4
 8004a2a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d015      	beq.n	8004a60 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a34:	f7fe f8d2 	bl	8002bdc <HAL_GetTick>
 8004a38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a3a:	e00a      	b.n	8004a52 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a3c:	f7fe f8ce 	bl	8002bdc <HAL_GetTick>
 8004a40:	4602      	mov	r2, r0
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	1ad3      	subs	r3, r2, r3
 8004a46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d901      	bls.n	8004a52 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a4e:	2303      	movs	r3, #3
 8004a50:	e0cb      	b.n	8004bea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a52:	4b49      	ldr	r3, [pc, #292]	@ (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004a54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a56:	f003 0302 	and.w	r3, r3, #2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d0ee      	beq.n	8004a3c <HAL_RCC_OscConfig+0x334>
 8004a5e:	e014      	b.n	8004a8a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a60:	f7fe f8bc 	bl	8002bdc <HAL_GetTick>
 8004a64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a66:	e00a      	b.n	8004a7e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a68:	f7fe f8b8 	bl	8002bdc <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	693b      	ldr	r3, [r7, #16]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e0b5      	b.n	8004bea <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a7e:	4b3e      	ldr	r3, [pc, #248]	@ (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004a80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a82:	f003 0302 	and.w	r3, r3, #2
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d1ee      	bne.n	8004a68 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a8a:	7dfb      	ldrb	r3, [r7, #23]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d105      	bne.n	8004a9c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a90:	4b39      	ldr	r3, [pc, #228]	@ (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004a92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a94:	4a38      	ldr	r2, [pc, #224]	@ (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004a96:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a9a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	699b      	ldr	r3, [r3, #24]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f000 80a1 	beq.w	8004be8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004aa6:	4b34      	ldr	r3, [pc, #208]	@ (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f003 030c 	and.w	r3, r3, #12
 8004aae:	2b08      	cmp	r3, #8
 8004ab0:	d05c      	beq.n	8004b6c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	2b02      	cmp	r3, #2
 8004ab8:	d141      	bne.n	8004b3e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004aba:	4b31      	ldr	r3, [pc, #196]	@ (8004b80 <HAL_RCC_OscConfig+0x478>)
 8004abc:	2200      	movs	r2, #0
 8004abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ac0:	f7fe f88c 	bl	8002bdc <HAL_GetTick>
 8004ac4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ac6:	e008      	b.n	8004ada <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ac8:	f7fe f888 	bl	8002bdc <HAL_GetTick>
 8004acc:	4602      	mov	r2, r0
 8004ace:	693b      	ldr	r3, [r7, #16]
 8004ad0:	1ad3      	subs	r3, r2, r3
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e087      	b.n	8004bea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ada:	4b27      	ldr	r3, [pc, #156]	@ (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d1f0      	bne.n	8004ac8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	69da      	ldr	r2, [r3, #28]
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a1b      	ldr	r3, [r3, #32]
 8004aee:	431a      	orrs	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004af4:	019b      	lsls	r3, r3, #6
 8004af6:	431a      	orrs	r2, r3
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004afc:	085b      	lsrs	r3, r3, #1
 8004afe:	3b01      	subs	r3, #1
 8004b00:	041b      	lsls	r3, r3, #16
 8004b02:	431a      	orrs	r2, r3
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b08:	061b      	lsls	r3, r3, #24
 8004b0a:	491b      	ldr	r1, [pc, #108]	@ (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b10:	4b1b      	ldr	r3, [pc, #108]	@ (8004b80 <HAL_RCC_OscConfig+0x478>)
 8004b12:	2201      	movs	r2, #1
 8004b14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b16:	f7fe f861 	bl	8002bdc <HAL_GetTick>
 8004b1a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b1c:	e008      	b.n	8004b30 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b1e:	f7fe f85d 	bl	8002bdc <HAL_GetTick>
 8004b22:	4602      	mov	r2, r0
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	1ad3      	subs	r3, r2, r3
 8004b28:	2b02      	cmp	r3, #2
 8004b2a:	d901      	bls.n	8004b30 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e05c      	b.n	8004bea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b30:	4b11      	ldr	r3, [pc, #68]	@ (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d0f0      	beq.n	8004b1e <HAL_RCC_OscConfig+0x416>
 8004b3c:	e054      	b.n	8004be8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b3e:	4b10      	ldr	r3, [pc, #64]	@ (8004b80 <HAL_RCC_OscConfig+0x478>)
 8004b40:	2200      	movs	r2, #0
 8004b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b44:	f7fe f84a 	bl	8002bdc <HAL_GetTick>
 8004b48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b4a:	e008      	b.n	8004b5e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004b4c:	f7fe f846 	bl	8002bdc <HAL_GetTick>
 8004b50:	4602      	mov	r2, r0
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	1ad3      	subs	r3, r2, r3
 8004b56:	2b02      	cmp	r3, #2
 8004b58:	d901      	bls.n	8004b5e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b5a:	2303      	movs	r3, #3
 8004b5c:	e045      	b.n	8004bea <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b5e:	4b06      	ldr	r3, [pc, #24]	@ (8004b78 <HAL_RCC_OscConfig+0x470>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1f0      	bne.n	8004b4c <HAL_RCC_OscConfig+0x444>
 8004b6a:	e03d      	b.n	8004be8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	699b      	ldr	r3, [r3, #24]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d107      	bne.n	8004b84 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e038      	b.n	8004bea <HAL_RCC_OscConfig+0x4e2>
 8004b78:	40023800 	.word	0x40023800
 8004b7c:	40007000 	.word	0x40007000
 8004b80:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b84:	4b1b      	ldr	r3, [pc, #108]	@ (8004bf4 <HAL_RCC_OscConfig+0x4ec>)
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	2b01      	cmp	r3, #1
 8004b90:	d028      	beq.n	8004be4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d121      	bne.n	8004be4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004baa:	429a      	cmp	r2, r3
 8004bac:	d11a      	bne.n	8004be4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bae:	68fa      	ldr	r2, [r7, #12]
 8004bb0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004bba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d111      	bne.n	8004be4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bca:	085b      	lsrs	r3, r3, #1
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d107      	bne.n	8004be4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bde:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d001      	beq.n	8004be8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	e000      	b.n	8004bea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3718      	adds	r7, #24
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	40023800 	.word	0x40023800

08004bf8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b084      	sub	sp, #16
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d101      	bne.n	8004c0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c08:	2301      	movs	r3, #1
 8004c0a:	e0cc      	b.n	8004da6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004c0c:	4b68      	ldr	r3, [pc, #416]	@ (8004db0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f003 0307 	and.w	r3, r3, #7
 8004c14:	683a      	ldr	r2, [r7, #0]
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d90c      	bls.n	8004c34 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c1a:	4b65      	ldr	r3, [pc, #404]	@ (8004db0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c1c:	683a      	ldr	r2, [r7, #0]
 8004c1e:	b2d2      	uxtb	r2, r2
 8004c20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c22:	4b63      	ldr	r3, [pc, #396]	@ (8004db0 <HAL_RCC_ClockConfig+0x1b8>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 0307 	and.w	r3, r3, #7
 8004c2a:	683a      	ldr	r2, [r7, #0]
 8004c2c:	429a      	cmp	r2, r3
 8004c2e:	d001      	beq.n	8004c34 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c30:	2301      	movs	r3, #1
 8004c32:	e0b8      	b.n	8004da6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0302 	and.w	r3, r3, #2
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d020      	beq.n	8004c82 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f003 0304 	and.w	r3, r3, #4
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d005      	beq.n	8004c58 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c4c:	4b59      	ldr	r3, [pc, #356]	@ (8004db4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	4a58      	ldr	r2, [pc, #352]	@ (8004db4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c52:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004c56:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f003 0308 	and.w	r3, r3, #8
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d005      	beq.n	8004c70 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c64:	4b53      	ldr	r3, [pc, #332]	@ (8004db4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	4a52      	ldr	r2, [pc, #328]	@ (8004db4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c6a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004c6e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c70:	4b50      	ldr	r3, [pc, #320]	@ (8004db4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c72:	689b      	ldr	r3, [r3, #8]
 8004c74:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	689b      	ldr	r3, [r3, #8]
 8004c7c:	494d      	ldr	r1, [pc, #308]	@ (8004db4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c7e:	4313      	orrs	r3, r2
 8004c80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f003 0301 	and.w	r3, r3, #1
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d044      	beq.n	8004d18 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	685b      	ldr	r3, [r3, #4]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	d107      	bne.n	8004ca6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c96:	4b47      	ldr	r3, [pc, #284]	@ (8004db4 <HAL_RCC_ClockConfig+0x1bc>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d119      	bne.n	8004cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	e07f      	b.n	8004da6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	2b02      	cmp	r3, #2
 8004cac:	d003      	beq.n	8004cb6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cb2:	2b03      	cmp	r3, #3
 8004cb4:	d107      	bne.n	8004cc6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cb6:	4b3f      	ldr	r3, [pc, #252]	@ (8004db4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d109      	bne.n	8004cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	e06f      	b.n	8004da6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cc6:	4b3b      	ldr	r3, [pc, #236]	@ (8004db4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f003 0302 	and.w	r3, r3, #2
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d101      	bne.n	8004cd6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e067      	b.n	8004da6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004cd6:	4b37      	ldr	r3, [pc, #220]	@ (8004db4 <HAL_RCC_ClockConfig+0x1bc>)
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f023 0203 	bic.w	r2, r3, #3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	685b      	ldr	r3, [r3, #4]
 8004ce2:	4934      	ldr	r1, [pc, #208]	@ (8004db4 <HAL_RCC_ClockConfig+0x1bc>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ce8:	f7fd ff78 	bl	8002bdc <HAL_GetTick>
 8004cec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cee:	e00a      	b.n	8004d06 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004cf0:	f7fd ff74 	bl	8002bdc <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d901      	bls.n	8004d06 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e04f      	b.n	8004da6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d06:	4b2b      	ldr	r3, [pc, #172]	@ (8004db4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f003 020c 	and.w	r2, r3, #12
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	009b      	lsls	r3, r3, #2
 8004d14:	429a      	cmp	r2, r3
 8004d16:	d1eb      	bne.n	8004cf0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004d18:	4b25      	ldr	r3, [pc, #148]	@ (8004db0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0307 	and.w	r3, r3, #7
 8004d20:	683a      	ldr	r2, [r7, #0]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d20c      	bcs.n	8004d40 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d26:	4b22      	ldr	r3, [pc, #136]	@ (8004db0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d28:	683a      	ldr	r2, [r7, #0]
 8004d2a:	b2d2      	uxtb	r2, r2
 8004d2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d2e:	4b20      	ldr	r3, [pc, #128]	@ (8004db0 <HAL_RCC_ClockConfig+0x1b8>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0307 	and.w	r3, r3, #7
 8004d36:	683a      	ldr	r2, [r7, #0]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d001      	beq.n	8004d40 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	e032      	b.n	8004da6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f003 0304 	and.w	r3, r3, #4
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d008      	beq.n	8004d5e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d4c:	4b19      	ldr	r3, [pc, #100]	@ (8004db4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	68db      	ldr	r3, [r3, #12]
 8004d58:	4916      	ldr	r1, [pc, #88]	@ (8004db4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0308 	and.w	r3, r3, #8
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d009      	beq.n	8004d7e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d6a:	4b12      	ldr	r3, [pc, #72]	@ (8004db4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	691b      	ldr	r3, [r3, #16]
 8004d76:	00db      	lsls	r3, r3, #3
 8004d78:	490e      	ldr	r1, [pc, #56]	@ (8004db4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d7e:	f000 f821 	bl	8004dc4 <HAL_RCC_GetSysClockFreq>
 8004d82:	4602      	mov	r2, r0
 8004d84:	4b0b      	ldr	r3, [pc, #44]	@ (8004db4 <HAL_RCC_ClockConfig+0x1bc>)
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	091b      	lsrs	r3, r3, #4
 8004d8a:	f003 030f 	and.w	r3, r3, #15
 8004d8e:	490a      	ldr	r1, [pc, #40]	@ (8004db8 <HAL_RCC_ClockConfig+0x1c0>)
 8004d90:	5ccb      	ldrb	r3, [r1, r3]
 8004d92:	fa22 f303 	lsr.w	r3, r2, r3
 8004d96:	4a09      	ldr	r2, [pc, #36]	@ (8004dbc <HAL_RCC_ClockConfig+0x1c4>)
 8004d98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004d9a:	4b09      	ldr	r3, [pc, #36]	@ (8004dc0 <HAL_RCC_ClockConfig+0x1c8>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4618      	mov	r0, r3
 8004da0:	f7fd fed8 	bl	8002b54 <HAL_InitTick>

  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3710      	adds	r7, #16
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	40023c00 	.word	0x40023c00
 8004db4:	40023800 	.word	0x40023800
 8004db8:	080080e8 	.word	0x080080e8
 8004dbc:	20000028 	.word	0x20000028
 8004dc0:	2000002c 	.word	0x2000002c

08004dc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004dc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dc8:	b094      	sub	sp, #80	@ 0x50
 8004dca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ddc:	4b79      	ldr	r3, [pc, #484]	@ (8004fc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	f003 030c 	and.w	r3, r3, #12
 8004de4:	2b08      	cmp	r3, #8
 8004de6:	d00d      	beq.n	8004e04 <HAL_RCC_GetSysClockFreq+0x40>
 8004de8:	2b08      	cmp	r3, #8
 8004dea:	f200 80e1 	bhi.w	8004fb0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d002      	beq.n	8004df8 <HAL_RCC_GetSysClockFreq+0x34>
 8004df2:	2b04      	cmp	r3, #4
 8004df4:	d003      	beq.n	8004dfe <HAL_RCC_GetSysClockFreq+0x3a>
 8004df6:	e0db      	b.n	8004fb0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004df8:	4b73      	ldr	r3, [pc, #460]	@ (8004fc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004dfa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004dfc:	e0db      	b.n	8004fb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004dfe:	4b73      	ldr	r3, [pc, #460]	@ (8004fcc <HAL_RCC_GetSysClockFreq+0x208>)
 8004e00:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004e02:	e0d8      	b.n	8004fb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004e04:	4b6f      	ldr	r3, [pc, #444]	@ (8004fc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004e0c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004e0e:	4b6d      	ldr	r3, [pc, #436]	@ (8004fc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d063      	beq.n	8004ee2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e1a:	4b6a      	ldr	r3, [pc, #424]	@ (8004fc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	099b      	lsrs	r3, r3, #6
 8004e20:	2200      	movs	r2, #0
 8004e22:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004e24:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004e26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e2e:	2300      	movs	r3, #0
 8004e30:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e32:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004e36:	4622      	mov	r2, r4
 8004e38:	462b      	mov	r3, r5
 8004e3a:	f04f 0000 	mov.w	r0, #0
 8004e3e:	f04f 0100 	mov.w	r1, #0
 8004e42:	0159      	lsls	r1, r3, #5
 8004e44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e48:	0150      	lsls	r0, r2, #5
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	4621      	mov	r1, r4
 8004e50:	1a51      	subs	r1, r2, r1
 8004e52:	6139      	str	r1, [r7, #16]
 8004e54:	4629      	mov	r1, r5
 8004e56:	eb63 0301 	sbc.w	r3, r3, r1
 8004e5a:	617b      	str	r3, [r7, #20]
 8004e5c:	f04f 0200 	mov.w	r2, #0
 8004e60:	f04f 0300 	mov.w	r3, #0
 8004e64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e68:	4659      	mov	r1, fp
 8004e6a:	018b      	lsls	r3, r1, #6
 8004e6c:	4651      	mov	r1, sl
 8004e6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e72:	4651      	mov	r1, sl
 8004e74:	018a      	lsls	r2, r1, #6
 8004e76:	4651      	mov	r1, sl
 8004e78:	ebb2 0801 	subs.w	r8, r2, r1
 8004e7c:	4659      	mov	r1, fp
 8004e7e:	eb63 0901 	sbc.w	r9, r3, r1
 8004e82:	f04f 0200 	mov.w	r2, #0
 8004e86:	f04f 0300 	mov.w	r3, #0
 8004e8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e96:	4690      	mov	r8, r2
 8004e98:	4699      	mov	r9, r3
 8004e9a:	4623      	mov	r3, r4
 8004e9c:	eb18 0303 	adds.w	r3, r8, r3
 8004ea0:	60bb      	str	r3, [r7, #8]
 8004ea2:	462b      	mov	r3, r5
 8004ea4:	eb49 0303 	adc.w	r3, r9, r3
 8004ea8:	60fb      	str	r3, [r7, #12]
 8004eaa:	f04f 0200 	mov.w	r2, #0
 8004eae:	f04f 0300 	mov.w	r3, #0
 8004eb2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004eb6:	4629      	mov	r1, r5
 8004eb8:	024b      	lsls	r3, r1, #9
 8004eba:	4621      	mov	r1, r4
 8004ebc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004ec0:	4621      	mov	r1, r4
 8004ec2:	024a      	lsls	r2, r1, #9
 8004ec4:	4610      	mov	r0, r2
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004eca:	2200      	movs	r2, #0
 8004ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ece:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ed0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004ed4:	f7fb f9d4 	bl	8000280 <__aeabi_uldivmod>
 8004ed8:	4602      	mov	r2, r0
 8004eda:	460b      	mov	r3, r1
 8004edc:	4613      	mov	r3, r2
 8004ede:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ee0:	e058      	b.n	8004f94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ee2:	4b38      	ldr	r3, [pc, #224]	@ (8004fc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	099b      	lsrs	r3, r3, #6
 8004ee8:	2200      	movs	r2, #0
 8004eea:	4618      	mov	r0, r3
 8004eec:	4611      	mov	r1, r2
 8004eee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004ef2:	623b      	str	r3, [r7, #32]
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ef8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004efc:	4642      	mov	r2, r8
 8004efe:	464b      	mov	r3, r9
 8004f00:	f04f 0000 	mov.w	r0, #0
 8004f04:	f04f 0100 	mov.w	r1, #0
 8004f08:	0159      	lsls	r1, r3, #5
 8004f0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f0e:	0150      	lsls	r0, r2, #5
 8004f10:	4602      	mov	r2, r0
 8004f12:	460b      	mov	r3, r1
 8004f14:	4641      	mov	r1, r8
 8004f16:	ebb2 0a01 	subs.w	sl, r2, r1
 8004f1a:	4649      	mov	r1, r9
 8004f1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004f20:	f04f 0200 	mov.w	r2, #0
 8004f24:	f04f 0300 	mov.w	r3, #0
 8004f28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004f2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004f30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004f34:	ebb2 040a 	subs.w	r4, r2, sl
 8004f38:	eb63 050b 	sbc.w	r5, r3, fp
 8004f3c:	f04f 0200 	mov.w	r2, #0
 8004f40:	f04f 0300 	mov.w	r3, #0
 8004f44:	00eb      	lsls	r3, r5, #3
 8004f46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f4a:	00e2      	lsls	r2, r4, #3
 8004f4c:	4614      	mov	r4, r2
 8004f4e:	461d      	mov	r5, r3
 8004f50:	4643      	mov	r3, r8
 8004f52:	18e3      	adds	r3, r4, r3
 8004f54:	603b      	str	r3, [r7, #0]
 8004f56:	464b      	mov	r3, r9
 8004f58:	eb45 0303 	adc.w	r3, r5, r3
 8004f5c:	607b      	str	r3, [r7, #4]
 8004f5e:	f04f 0200 	mov.w	r2, #0
 8004f62:	f04f 0300 	mov.w	r3, #0
 8004f66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f6a:	4629      	mov	r1, r5
 8004f6c:	028b      	lsls	r3, r1, #10
 8004f6e:	4621      	mov	r1, r4
 8004f70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f74:	4621      	mov	r1, r4
 8004f76:	028a      	lsls	r2, r1, #10
 8004f78:	4610      	mov	r0, r2
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f7e:	2200      	movs	r2, #0
 8004f80:	61bb      	str	r3, [r7, #24]
 8004f82:	61fa      	str	r2, [r7, #28]
 8004f84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f88:	f7fb f97a 	bl	8000280 <__aeabi_uldivmod>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	460b      	mov	r3, r1
 8004f90:	4613      	mov	r3, r2
 8004f92:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004f94:	4b0b      	ldr	r3, [pc, #44]	@ (8004fc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	0c1b      	lsrs	r3, r3, #16
 8004f9a:	f003 0303 	and.w	r3, r3, #3
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	005b      	lsls	r3, r3, #1
 8004fa2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004fa4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004fa6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004fae:	e002      	b.n	8004fb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004fb0:	4b05      	ldr	r3, [pc, #20]	@ (8004fc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8004fb2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004fb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004fb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004fb8:	4618      	mov	r0, r3
 8004fba:	3750      	adds	r7, #80	@ 0x50
 8004fbc:	46bd      	mov	sp, r7
 8004fbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004fc2:	bf00      	nop
 8004fc4:	40023800 	.word	0x40023800
 8004fc8:	00f42400 	.word	0x00f42400
 8004fcc:	007a1200 	.word	0x007a1200

08004fd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004fd4:	4b03      	ldr	r3, [pc, #12]	@ (8004fe4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
}
 8004fd8:	4618      	mov	r0, r3
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	20000028 	.word	0x20000028

08004fe8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004fec:	f7ff fff0 	bl	8004fd0 <HAL_RCC_GetHCLKFreq>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	4b05      	ldr	r3, [pc, #20]	@ (8005008 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	0a9b      	lsrs	r3, r3, #10
 8004ff8:	f003 0307 	and.w	r3, r3, #7
 8004ffc:	4903      	ldr	r1, [pc, #12]	@ (800500c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ffe:	5ccb      	ldrb	r3, [r1, r3]
 8005000:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005004:	4618      	mov	r0, r3
 8005006:	bd80      	pop	{r7, pc}
 8005008:	40023800 	.word	0x40023800
 800500c:	080080f8 	.word	0x080080f8

08005010 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005010:	b580      	push	{r7, lr}
 8005012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005014:	f7ff ffdc 	bl	8004fd0 <HAL_RCC_GetHCLKFreq>
 8005018:	4602      	mov	r2, r0
 800501a:	4b05      	ldr	r3, [pc, #20]	@ (8005030 <HAL_RCC_GetPCLK2Freq+0x20>)
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	0b5b      	lsrs	r3, r3, #13
 8005020:	f003 0307 	and.w	r3, r3, #7
 8005024:	4903      	ldr	r1, [pc, #12]	@ (8005034 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005026:	5ccb      	ldrb	r3, [r1, r3]
 8005028:	fa22 f303 	lsr.w	r3, r2, r3
}
 800502c:	4618      	mov	r0, r3
 800502e:	bd80      	pop	{r7, pc}
 8005030:	40023800 	.word	0x40023800
 8005034:	080080f8 	.word	0x080080f8

08005038 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005038:	b580      	push	{r7, lr}
 800503a:	b082      	sub	sp, #8
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d101      	bne.n	800504a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e07b      	b.n	8005142 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800504e:	2b00      	cmp	r3, #0
 8005050:	d108      	bne.n	8005064 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800505a:	d009      	beq.n	8005070 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2200      	movs	r2, #0
 8005060:	61da      	str	r2, [r3, #28]
 8005062:	e005      	b.n	8005070 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	2200      	movs	r2, #0
 8005068:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	2200      	movs	r2, #0
 800506e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	2200      	movs	r2, #0
 8005074:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800507c:	b2db      	uxtb	r3, r3
 800507e:	2b00      	cmp	r3, #0
 8005080:	d106      	bne.n	8005090 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f7fd fb60 	bl	8002750 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2202      	movs	r2, #2
 8005094:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80050a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80050b8:	431a      	orrs	r2, r3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	68db      	ldr	r3, [r3, #12]
 80050be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050c2:	431a      	orrs	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	691b      	ldr	r3, [r3, #16]
 80050c8:	f003 0302 	and.w	r3, r3, #2
 80050cc:	431a      	orrs	r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	f003 0301 	and.w	r3, r3, #1
 80050d6:	431a      	orrs	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	699b      	ldr	r3, [r3, #24]
 80050dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80050e0:	431a      	orrs	r2, r3
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	69db      	ldr	r3, [r3, #28]
 80050e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80050ea:	431a      	orrs	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a1b      	ldr	r3, [r3, #32]
 80050f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050f4:	ea42 0103 	orr.w	r1, r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050fc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	430a      	orrs	r2, r1
 8005106:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	0c1b      	lsrs	r3, r3, #16
 800510e:	f003 0104 	and.w	r1, r3, #4
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005116:	f003 0210 	and.w	r2, r3, #16
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	430a      	orrs	r2, r1
 8005120:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	69da      	ldr	r2, [r3, #28]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005130:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3708      	adds	r7, #8
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}

0800514a <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800514a:	b580      	push	{r7, lr}
 800514c:	b084      	sub	sp, #16
 800514e:	af00      	add	r7, sp, #0
 8005150:	60f8      	str	r0, [r7, #12]
 8005152:	60b9      	str	r1, [r7, #8]
 8005154:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d101      	bne.n	8005160 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800515c:	2301      	movs	r3, #1
 800515e:	e038      	b.n	80051d2 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8005166:	b2db      	uxtb	r3, r3
 8005168:	2b00      	cmp	r3, #0
 800516a:	d106      	bne.n	800517a <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2200      	movs	r2, #0
 8005170:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005174:	68f8      	ldr	r0, [r7, #12]
 8005176:	f7fd fbe7 	bl	8002948 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	3308      	adds	r3, #8
 8005182:	4619      	mov	r1, r3
 8005184:	4610      	mov	r0, r2
 8005186:	f000 ff7d 	bl	8006084 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6818      	ldr	r0, [r3, #0]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	461a      	mov	r2, r3
 8005194:	68b9      	ldr	r1, [r7, #8]
 8005196:	f000 ffdf 	bl	8006158 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	6858      	ldr	r0, [r3, #4]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	689a      	ldr	r2, [r3, #8]
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80051a6:	6879      	ldr	r1, [r7, #4]
 80051a8:	f001 f80c 	bl	80061c4 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	6892      	ldr	r2, [r2, #8]
 80051b4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	6892      	ldr	r2, [r2, #8]
 80051c0:	f041 0101 	orr.w	r1, r1, #1
 80051c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3710      	adds	r7, #16
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}

080051da <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80051da:	b580      	push	{r7, lr}
 80051dc:	b082      	sub	sp, #8
 80051de:	af00      	add	r7, sp, #0
 80051e0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d101      	bne.n	80051ec <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80051e8:	2301      	movs	r3, #1
 80051ea:	e041      	b.n	8005270 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d106      	bne.n	8005206 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2200      	movs	r2, #0
 80051fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f7fd faed 	bl	80027e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2202      	movs	r2, #2
 800520a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	3304      	adds	r3, #4
 8005216:	4619      	mov	r1, r3
 8005218:	4610      	mov	r0, r2
 800521a:	f000 f965 	bl	80054e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2201      	movs	r2, #1
 8005222:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2201      	movs	r2, #1
 800522a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2201      	movs	r2, #1
 8005232:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2201      	movs	r2, #1
 800523a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2201      	movs	r2, #1
 8005242:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2201      	movs	r2, #1
 8005252:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2201      	movs	r2, #1
 800525a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2201      	movs	r2, #1
 8005262:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2201      	movs	r2, #1
 800526a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	3708      	adds	r7, #8
 8005274:	46bd      	mov	sp, r7
 8005276:	bd80      	pop	{r7, pc}

08005278 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005278:	b480      	push	{r7}
 800527a:	b085      	sub	sp, #20
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005286:	b2db      	uxtb	r3, r3
 8005288:	2b01      	cmp	r3, #1
 800528a:	d001      	beq.n	8005290 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e04e      	b.n	800532e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2202      	movs	r2, #2
 8005294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	68da      	ldr	r2, [r3, #12]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f042 0201 	orr.w	r2, r2, #1
 80052a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a23      	ldr	r2, [pc, #140]	@ (800533c <HAL_TIM_Base_Start_IT+0xc4>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d022      	beq.n	80052f8 <HAL_TIM_Base_Start_IT+0x80>
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052ba:	d01d      	beq.n	80052f8 <HAL_TIM_Base_Start_IT+0x80>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4a1f      	ldr	r2, [pc, #124]	@ (8005340 <HAL_TIM_Base_Start_IT+0xc8>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d018      	beq.n	80052f8 <HAL_TIM_Base_Start_IT+0x80>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a1e      	ldr	r2, [pc, #120]	@ (8005344 <HAL_TIM_Base_Start_IT+0xcc>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d013      	beq.n	80052f8 <HAL_TIM_Base_Start_IT+0x80>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	4a1c      	ldr	r2, [pc, #112]	@ (8005348 <HAL_TIM_Base_Start_IT+0xd0>)
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d00e      	beq.n	80052f8 <HAL_TIM_Base_Start_IT+0x80>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a1b      	ldr	r2, [pc, #108]	@ (800534c <HAL_TIM_Base_Start_IT+0xd4>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d009      	beq.n	80052f8 <HAL_TIM_Base_Start_IT+0x80>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4a19      	ldr	r2, [pc, #100]	@ (8005350 <HAL_TIM_Base_Start_IT+0xd8>)
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d004      	beq.n	80052f8 <HAL_TIM_Base_Start_IT+0x80>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	4a18      	ldr	r2, [pc, #96]	@ (8005354 <HAL_TIM_Base_Start_IT+0xdc>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d111      	bne.n	800531c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	689b      	ldr	r3, [r3, #8]
 80052fe:	f003 0307 	and.w	r3, r3, #7
 8005302:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	2b06      	cmp	r3, #6
 8005308:	d010      	beq.n	800532c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f042 0201 	orr.w	r2, r2, #1
 8005318:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800531a:	e007      	b.n	800532c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f042 0201 	orr.w	r2, r2, #1
 800532a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800532c:	2300      	movs	r3, #0
}
 800532e:	4618      	mov	r0, r3
 8005330:	3714      	adds	r7, #20
 8005332:	46bd      	mov	sp, r7
 8005334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005338:	4770      	bx	lr
 800533a:	bf00      	nop
 800533c:	40010000 	.word	0x40010000
 8005340:	40000400 	.word	0x40000400
 8005344:	40000800 	.word	0x40000800
 8005348:	40000c00 	.word	0x40000c00
 800534c:	40010400 	.word	0x40010400
 8005350:	40014000 	.word	0x40014000
 8005354:	40001800 	.word	0x40001800

08005358 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
 8005360:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005362:	2300      	movs	r3, #0
 8005364:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800536c:	2b01      	cmp	r3, #1
 800536e:	d101      	bne.n	8005374 <HAL_TIM_ConfigClockSource+0x1c>
 8005370:	2302      	movs	r3, #2
 8005372:	e0b4      	b.n	80054de <HAL_TIM_ConfigClockSource+0x186>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	2201      	movs	r2, #1
 8005378:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2202      	movs	r2, #2
 8005380:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800538c:	68bb      	ldr	r3, [r7, #8]
 800538e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005392:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005394:	68bb      	ldr	r3, [r7, #8]
 8005396:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800539a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68ba      	ldr	r2, [r7, #8]
 80053a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053ac:	d03e      	beq.n	800542c <HAL_TIM_ConfigClockSource+0xd4>
 80053ae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80053b2:	f200 8087 	bhi.w	80054c4 <HAL_TIM_ConfigClockSource+0x16c>
 80053b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053ba:	f000 8086 	beq.w	80054ca <HAL_TIM_ConfigClockSource+0x172>
 80053be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053c2:	d87f      	bhi.n	80054c4 <HAL_TIM_ConfigClockSource+0x16c>
 80053c4:	2b70      	cmp	r3, #112	@ 0x70
 80053c6:	d01a      	beq.n	80053fe <HAL_TIM_ConfigClockSource+0xa6>
 80053c8:	2b70      	cmp	r3, #112	@ 0x70
 80053ca:	d87b      	bhi.n	80054c4 <HAL_TIM_ConfigClockSource+0x16c>
 80053cc:	2b60      	cmp	r3, #96	@ 0x60
 80053ce:	d050      	beq.n	8005472 <HAL_TIM_ConfigClockSource+0x11a>
 80053d0:	2b60      	cmp	r3, #96	@ 0x60
 80053d2:	d877      	bhi.n	80054c4 <HAL_TIM_ConfigClockSource+0x16c>
 80053d4:	2b50      	cmp	r3, #80	@ 0x50
 80053d6:	d03c      	beq.n	8005452 <HAL_TIM_ConfigClockSource+0xfa>
 80053d8:	2b50      	cmp	r3, #80	@ 0x50
 80053da:	d873      	bhi.n	80054c4 <HAL_TIM_ConfigClockSource+0x16c>
 80053dc:	2b40      	cmp	r3, #64	@ 0x40
 80053de:	d058      	beq.n	8005492 <HAL_TIM_ConfigClockSource+0x13a>
 80053e0:	2b40      	cmp	r3, #64	@ 0x40
 80053e2:	d86f      	bhi.n	80054c4 <HAL_TIM_ConfigClockSource+0x16c>
 80053e4:	2b30      	cmp	r3, #48	@ 0x30
 80053e6:	d064      	beq.n	80054b2 <HAL_TIM_ConfigClockSource+0x15a>
 80053e8:	2b30      	cmp	r3, #48	@ 0x30
 80053ea:	d86b      	bhi.n	80054c4 <HAL_TIM_ConfigClockSource+0x16c>
 80053ec:	2b20      	cmp	r3, #32
 80053ee:	d060      	beq.n	80054b2 <HAL_TIM_ConfigClockSource+0x15a>
 80053f0:	2b20      	cmp	r3, #32
 80053f2:	d867      	bhi.n	80054c4 <HAL_TIM_ConfigClockSource+0x16c>
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d05c      	beq.n	80054b2 <HAL_TIM_ConfigClockSource+0x15a>
 80053f8:	2b10      	cmp	r3, #16
 80053fa:	d05a      	beq.n	80054b2 <HAL_TIM_ConfigClockSource+0x15a>
 80053fc:	e062      	b.n	80054c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800540e:	f000 f991 	bl	8005734 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005420:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	68ba      	ldr	r2, [r7, #8]
 8005428:	609a      	str	r2, [r3, #8]
      break;
 800542a:	e04f      	b.n	80054cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005438:	683b      	ldr	r3, [r7, #0]
 800543a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800543c:	f000 f97a 	bl	8005734 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	689a      	ldr	r2, [r3, #8]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800544e:	609a      	str	r2, [r3, #8]
      break;
 8005450:	e03c      	b.n	80054cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800545a:	683b      	ldr	r3, [r7, #0]
 800545c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800545e:	461a      	mov	r2, r3
 8005460:	f000 f8ee 	bl	8005640 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2150      	movs	r1, #80	@ 0x50
 800546a:	4618      	mov	r0, r3
 800546c:	f000 f947 	bl	80056fe <TIM_ITRx_SetConfig>
      break;
 8005470:	e02c      	b.n	80054cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800547e:	461a      	mov	r2, r3
 8005480:	f000 f90d 	bl	800569e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	2160      	movs	r1, #96	@ 0x60
 800548a:	4618      	mov	r0, r3
 800548c:	f000 f937 	bl	80056fe <TIM_ITRx_SetConfig>
      break;
 8005490:	e01c      	b.n	80054cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005496:	683b      	ldr	r3, [r7, #0]
 8005498:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800549e:	461a      	mov	r2, r3
 80054a0:	f000 f8ce 	bl	8005640 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	2140      	movs	r1, #64	@ 0x40
 80054aa:	4618      	mov	r0, r3
 80054ac:	f000 f927 	bl	80056fe <TIM_ITRx_SetConfig>
      break;
 80054b0:	e00c      	b.n	80054cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	4619      	mov	r1, r3
 80054bc:	4610      	mov	r0, r2
 80054be:	f000 f91e 	bl	80056fe <TIM_ITRx_SetConfig>
      break;
 80054c2:	e003      	b.n	80054cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80054c4:	2301      	movs	r3, #1
 80054c6:	73fb      	strb	r3, [r7, #15]
      break;
 80054c8:	e000      	b.n	80054cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80054ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80054dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
	...

080054e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b085      	sub	sp, #20
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
 80054f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	4a46      	ldr	r2, [pc, #280]	@ (8005614 <TIM_Base_SetConfig+0x12c>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d013      	beq.n	8005528 <TIM_Base_SetConfig+0x40>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005506:	d00f      	beq.n	8005528 <TIM_Base_SetConfig+0x40>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	4a43      	ldr	r2, [pc, #268]	@ (8005618 <TIM_Base_SetConfig+0x130>)
 800550c:	4293      	cmp	r3, r2
 800550e:	d00b      	beq.n	8005528 <TIM_Base_SetConfig+0x40>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	4a42      	ldr	r2, [pc, #264]	@ (800561c <TIM_Base_SetConfig+0x134>)
 8005514:	4293      	cmp	r3, r2
 8005516:	d007      	beq.n	8005528 <TIM_Base_SetConfig+0x40>
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	4a41      	ldr	r2, [pc, #260]	@ (8005620 <TIM_Base_SetConfig+0x138>)
 800551c:	4293      	cmp	r3, r2
 800551e:	d003      	beq.n	8005528 <TIM_Base_SetConfig+0x40>
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	4a40      	ldr	r2, [pc, #256]	@ (8005624 <TIM_Base_SetConfig+0x13c>)
 8005524:	4293      	cmp	r3, r2
 8005526:	d108      	bne.n	800553a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800552e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	4313      	orrs	r3, r2
 8005538:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	4a35      	ldr	r2, [pc, #212]	@ (8005614 <TIM_Base_SetConfig+0x12c>)
 800553e:	4293      	cmp	r3, r2
 8005540:	d02b      	beq.n	800559a <TIM_Base_SetConfig+0xb2>
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005548:	d027      	beq.n	800559a <TIM_Base_SetConfig+0xb2>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	4a32      	ldr	r2, [pc, #200]	@ (8005618 <TIM_Base_SetConfig+0x130>)
 800554e:	4293      	cmp	r3, r2
 8005550:	d023      	beq.n	800559a <TIM_Base_SetConfig+0xb2>
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4a31      	ldr	r2, [pc, #196]	@ (800561c <TIM_Base_SetConfig+0x134>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d01f      	beq.n	800559a <TIM_Base_SetConfig+0xb2>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a30      	ldr	r2, [pc, #192]	@ (8005620 <TIM_Base_SetConfig+0x138>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d01b      	beq.n	800559a <TIM_Base_SetConfig+0xb2>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a2f      	ldr	r2, [pc, #188]	@ (8005624 <TIM_Base_SetConfig+0x13c>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d017      	beq.n	800559a <TIM_Base_SetConfig+0xb2>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a2e      	ldr	r2, [pc, #184]	@ (8005628 <TIM_Base_SetConfig+0x140>)
 800556e:	4293      	cmp	r3, r2
 8005570:	d013      	beq.n	800559a <TIM_Base_SetConfig+0xb2>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4a2d      	ldr	r2, [pc, #180]	@ (800562c <TIM_Base_SetConfig+0x144>)
 8005576:	4293      	cmp	r3, r2
 8005578:	d00f      	beq.n	800559a <TIM_Base_SetConfig+0xb2>
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	4a2c      	ldr	r2, [pc, #176]	@ (8005630 <TIM_Base_SetConfig+0x148>)
 800557e:	4293      	cmp	r3, r2
 8005580:	d00b      	beq.n	800559a <TIM_Base_SetConfig+0xb2>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	4a2b      	ldr	r2, [pc, #172]	@ (8005634 <TIM_Base_SetConfig+0x14c>)
 8005586:	4293      	cmp	r3, r2
 8005588:	d007      	beq.n	800559a <TIM_Base_SetConfig+0xb2>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	4a2a      	ldr	r2, [pc, #168]	@ (8005638 <TIM_Base_SetConfig+0x150>)
 800558e:	4293      	cmp	r3, r2
 8005590:	d003      	beq.n	800559a <TIM_Base_SetConfig+0xb2>
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	4a29      	ldr	r2, [pc, #164]	@ (800563c <TIM_Base_SetConfig+0x154>)
 8005596:	4293      	cmp	r3, r2
 8005598:	d108      	bne.n	80055ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80055a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	68db      	ldr	r3, [r3, #12]
 80055a6:	68fa      	ldr	r2, [r7, #12]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	695b      	ldr	r3, [r3, #20]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	68fa      	ldr	r2, [r7, #12]
 80055be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	689a      	ldr	r2, [r3, #8]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	4a10      	ldr	r2, [pc, #64]	@ (8005614 <TIM_Base_SetConfig+0x12c>)
 80055d4:	4293      	cmp	r3, r2
 80055d6:	d003      	beq.n	80055e0 <TIM_Base_SetConfig+0xf8>
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a12      	ldr	r2, [pc, #72]	@ (8005624 <TIM_Base_SetConfig+0x13c>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d103      	bne.n	80055e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80055e0:	683b      	ldr	r3, [r7, #0]
 80055e2:	691a      	ldr	r2, [r3, #16]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2201      	movs	r2, #1
 80055ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	f003 0301 	and.w	r3, r3, #1
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d105      	bne.n	8005606 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	691b      	ldr	r3, [r3, #16]
 80055fe:	f023 0201 	bic.w	r2, r3, #1
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	611a      	str	r2, [r3, #16]
  }
}
 8005606:	bf00      	nop
 8005608:	3714      	adds	r7, #20
 800560a:	46bd      	mov	sp, r7
 800560c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005610:	4770      	bx	lr
 8005612:	bf00      	nop
 8005614:	40010000 	.word	0x40010000
 8005618:	40000400 	.word	0x40000400
 800561c:	40000800 	.word	0x40000800
 8005620:	40000c00 	.word	0x40000c00
 8005624:	40010400 	.word	0x40010400
 8005628:	40014000 	.word	0x40014000
 800562c:	40014400 	.word	0x40014400
 8005630:	40014800 	.word	0x40014800
 8005634:	40001800 	.word	0x40001800
 8005638:	40001c00 	.word	0x40001c00
 800563c:	40002000 	.word	0x40002000

08005640 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005640:	b480      	push	{r7}
 8005642:	b087      	sub	sp, #28
 8005644:	af00      	add	r7, sp, #0
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	60b9      	str	r1, [r7, #8]
 800564a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6a1b      	ldr	r3, [r3, #32]
 8005650:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6a1b      	ldr	r3, [r3, #32]
 8005656:	f023 0201 	bic.w	r2, r3, #1
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	699b      	ldr	r3, [r3, #24]
 8005662:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800566a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	011b      	lsls	r3, r3, #4
 8005670:	693a      	ldr	r2, [r7, #16]
 8005672:	4313      	orrs	r3, r2
 8005674:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	f023 030a 	bic.w	r3, r3, #10
 800567c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800567e:	697a      	ldr	r2, [r7, #20]
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	4313      	orrs	r3, r2
 8005684:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	693a      	ldr	r2, [r7, #16]
 800568a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	621a      	str	r2, [r3, #32]
}
 8005692:	bf00      	nop
 8005694:	371c      	adds	r7, #28
 8005696:	46bd      	mov	sp, r7
 8005698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569c:	4770      	bx	lr

0800569e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800569e:	b480      	push	{r7}
 80056a0:	b087      	sub	sp, #28
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	60f8      	str	r0, [r7, #12]
 80056a6:	60b9      	str	r1, [r7, #8]
 80056a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	6a1b      	ldr	r3, [r3, #32]
 80056ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6a1b      	ldr	r3, [r3, #32]
 80056b4:	f023 0210 	bic.w	r2, r3, #16
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80056c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	031b      	lsls	r3, r3, #12
 80056ce:	693a      	ldr	r2, [r7, #16]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056d4:	697b      	ldr	r3, [r7, #20]
 80056d6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80056da:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056dc:	68bb      	ldr	r3, [r7, #8]
 80056de:	011b      	lsls	r3, r3, #4
 80056e0:	697a      	ldr	r2, [r7, #20]
 80056e2:	4313      	orrs	r3, r2
 80056e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	693a      	ldr	r2, [r7, #16]
 80056ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	621a      	str	r2, [r3, #32]
}
 80056f2:	bf00      	nop
 80056f4:	371c      	adds	r7, #28
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr

080056fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056fe:	b480      	push	{r7}
 8005700:	b085      	sub	sp, #20
 8005702:	af00      	add	r7, sp, #0
 8005704:	6078      	str	r0, [r7, #4]
 8005706:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005714:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005716:	683a      	ldr	r2, [r7, #0]
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	4313      	orrs	r3, r2
 800571c:	f043 0307 	orr.w	r3, r3, #7
 8005720:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	609a      	str	r2, [r3, #8]
}
 8005728:	bf00      	nop
 800572a:	3714      	adds	r7, #20
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005734:	b480      	push	{r7}
 8005736:	b087      	sub	sp, #28
 8005738:	af00      	add	r7, sp, #0
 800573a:	60f8      	str	r0, [r7, #12]
 800573c:	60b9      	str	r1, [r7, #8]
 800573e:	607a      	str	r2, [r7, #4]
 8005740:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005748:	697b      	ldr	r3, [r7, #20]
 800574a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800574e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	021a      	lsls	r2, r3, #8
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	431a      	orrs	r2, r3
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	4313      	orrs	r3, r2
 800575c:	697a      	ldr	r2, [r7, #20]
 800575e:	4313      	orrs	r3, r2
 8005760:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	697a      	ldr	r2, [r7, #20]
 8005766:	609a      	str	r2, [r3, #8]
}
 8005768:	bf00      	nop
 800576a:	371c      	adds	r7, #28
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005774:	b480      	push	{r7}
 8005776:	b085      	sub	sp, #20
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005784:	2b01      	cmp	r3, #1
 8005786:	d101      	bne.n	800578c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005788:	2302      	movs	r3, #2
 800578a:	e05a      	b.n	8005842 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2202      	movs	r2, #2
 8005798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	689b      	ldr	r3, [r3, #8]
 80057aa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057b2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68fa      	ldr	r2, [r7, #12]
 80057c4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a21      	ldr	r2, [pc, #132]	@ (8005850 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80057cc:	4293      	cmp	r3, r2
 80057ce:	d022      	beq.n	8005816 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057d8:	d01d      	beq.n	8005816 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	4a1d      	ldr	r2, [pc, #116]	@ (8005854 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80057e0:	4293      	cmp	r3, r2
 80057e2:	d018      	beq.n	8005816 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a1b      	ldr	r2, [pc, #108]	@ (8005858 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d013      	beq.n	8005816 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4a1a      	ldr	r2, [pc, #104]	@ (800585c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d00e      	beq.n	8005816 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a18      	ldr	r2, [pc, #96]	@ (8005860 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d009      	beq.n	8005816 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a17      	ldr	r2, [pc, #92]	@ (8005864 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d004      	beq.n	8005816 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a15      	ldr	r2, [pc, #84]	@ (8005868 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d10c      	bne.n	8005830 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800581c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	68ba      	ldr	r2, [r7, #8]
 8005824:	4313      	orrs	r3, r2
 8005826:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	68ba      	ldr	r2, [r7, #8]
 800582e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2201      	movs	r2, #1
 8005834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2200      	movs	r2, #0
 800583c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005840:	2300      	movs	r3, #0
}
 8005842:	4618      	mov	r0, r3
 8005844:	3714      	adds	r7, #20
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	40010000 	.word	0x40010000
 8005854:	40000400 	.word	0x40000400
 8005858:	40000800 	.word	0x40000800
 800585c:	40000c00 	.word	0x40000c00
 8005860:	40010400 	.word	0x40010400
 8005864:	40014000 	.word	0x40014000
 8005868:	40001800 	.word	0x40001800

0800586c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d101      	bne.n	800587e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e042      	b.n	8005904 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005884:	b2db      	uxtb	r3, r3
 8005886:	2b00      	cmp	r3, #0
 8005888:	d106      	bne.n	8005898 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	2200      	movs	r2, #0
 800588e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	f7fc ffc4 	bl	8002820 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2224      	movs	r2, #36	@ 0x24
 800589c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	68da      	ldr	r2, [r3, #12]
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80058ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f000 f973 	bl	8005b9c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	691a      	ldr	r2, [r3, #16]
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80058c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	695a      	ldr	r2, [r3, #20]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80058d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68da      	ldr	r2, [r3, #12]
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80058e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2200      	movs	r2, #0
 80058ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2220      	movs	r2, #32
 80058f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2220      	movs	r2, #32
 80058f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2200      	movs	r2, #0
 8005900:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005902:	2300      	movs	r3, #0
}
 8005904:	4618      	mov	r0, r3
 8005906:	3708      	adds	r7, #8
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b08a      	sub	sp, #40	@ 0x28
 8005910:	af02      	add	r7, sp, #8
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	603b      	str	r3, [r7, #0]
 8005918:	4613      	mov	r3, r2
 800591a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800591c:	2300      	movs	r3, #0
 800591e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005926:	b2db      	uxtb	r3, r3
 8005928:	2b20      	cmp	r3, #32
 800592a:	d175      	bne.n	8005a18 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d002      	beq.n	8005938 <HAL_UART_Transmit+0x2c>
 8005932:	88fb      	ldrh	r3, [r7, #6]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d101      	bne.n	800593c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e06e      	b.n	8005a1a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2200      	movs	r2, #0
 8005940:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2221      	movs	r2, #33	@ 0x21
 8005946:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800594a:	f7fd f947 	bl	8002bdc <HAL_GetTick>
 800594e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	88fa      	ldrh	r2, [r7, #6]
 8005954:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	88fa      	ldrh	r2, [r7, #6]
 800595a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005964:	d108      	bne.n	8005978 <HAL_UART_Transmit+0x6c>
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	691b      	ldr	r3, [r3, #16]
 800596a:	2b00      	cmp	r3, #0
 800596c:	d104      	bne.n	8005978 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800596e:	2300      	movs	r3, #0
 8005970:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	61bb      	str	r3, [r7, #24]
 8005976:	e003      	b.n	8005980 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800597c:	2300      	movs	r3, #0
 800597e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005980:	e02e      	b.n	80059e0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	9300      	str	r3, [sp, #0]
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	2200      	movs	r2, #0
 800598a:	2180      	movs	r1, #128	@ 0x80
 800598c:	68f8      	ldr	r0, [r7, #12]
 800598e:	f000 f848 	bl	8005a22 <UART_WaitOnFlagUntilTimeout>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d005      	beq.n	80059a4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	2220      	movs	r2, #32
 800599c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80059a0:	2303      	movs	r3, #3
 80059a2:	e03a      	b.n	8005a1a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d10b      	bne.n	80059c2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059aa:	69bb      	ldr	r3, [r7, #24]
 80059ac:	881b      	ldrh	r3, [r3, #0]
 80059ae:	461a      	mov	r2, r3
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059b8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80059ba:	69bb      	ldr	r3, [r7, #24]
 80059bc:	3302      	adds	r3, #2
 80059be:	61bb      	str	r3, [r7, #24]
 80059c0:	e007      	b.n	80059d2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80059c2:	69fb      	ldr	r3, [r7, #28]
 80059c4:	781a      	ldrb	r2, [r3, #0]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	3301      	adds	r3, #1
 80059d0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80059d6:	b29b      	uxth	r3, r3
 80059d8:	3b01      	subs	r3, #1
 80059da:	b29a      	uxth	r2, r3
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80059e4:	b29b      	uxth	r3, r3
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d1cb      	bne.n	8005982 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	9300      	str	r3, [sp, #0]
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	2200      	movs	r2, #0
 80059f2:	2140      	movs	r1, #64	@ 0x40
 80059f4:	68f8      	ldr	r0, [r7, #12]
 80059f6:	f000 f814 	bl	8005a22 <UART_WaitOnFlagUntilTimeout>
 80059fa:	4603      	mov	r3, r0
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d005      	beq.n	8005a0c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	2220      	movs	r2, #32
 8005a04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	e006      	b.n	8005a1a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2220      	movs	r2, #32
 8005a10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005a14:	2300      	movs	r3, #0
 8005a16:	e000      	b.n	8005a1a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005a18:	2302      	movs	r3, #2
  }
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	3720      	adds	r7, #32
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	bd80      	pop	{r7, pc}

08005a22 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a22:	b580      	push	{r7, lr}
 8005a24:	b086      	sub	sp, #24
 8005a26:	af00      	add	r7, sp, #0
 8005a28:	60f8      	str	r0, [r7, #12]
 8005a2a:	60b9      	str	r1, [r7, #8]
 8005a2c:	603b      	str	r3, [r7, #0]
 8005a2e:	4613      	mov	r3, r2
 8005a30:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a32:	e03b      	b.n	8005aac <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a34:	6a3b      	ldr	r3, [r7, #32]
 8005a36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a3a:	d037      	beq.n	8005aac <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a3c:	f7fd f8ce 	bl	8002bdc <HAL_GetTick>
 8005a40:	4602      	mov	r2, r0
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	1ad3      	subs	r3, r2, r3
 8005a46:	6a3a      	ldr	r2, [r7, #32]
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d302      	bcc.n	8005a52 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a4c:	6a3b      	ldr	r3, [r7, #32]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d101      	bne.n	8005a56 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e03a      	b.n	8005acc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	68db      	ldr	r3, [r3, #12]
 8005a5c:	f003 0304 	and.w	r3, r3, #4
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d023      	beq.n	8005aac <UART_WaitOnFlagUntilTimeout+0x8a>
 8005a64:	68bb      	ldr	r3, [r7, #8]
 8005a66:	2b80      	cmp	r3, #128	@ 0x80
 8005a68:	d020      	beq.n	8005aac <UART_WaitOnFlagUntilTimeout+0x8a>
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	2b40      	cmp	r3, #64	@ 0x40
 8005a6e:	d01d      	beq.n	8005aac <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0308 	and.w	r3, r3, #8
 8005a7a:	2b08      	cmp	r3, #8
 8005a7c:	d116      	bne.n	8005aac <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005a7e:	2300      	movs	r3, #0
 8005a80:	617b      	str	r3, [r7, #20]
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	617b      	str	r3, [r7, #20]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	685b      	ldr	r3, [r3, #4]
 8005a90:	617b      	str	r3, [r7, #20]
 8005a92:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f000 f81d 	bl	8005ad4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	2208      	movs	r2, #8
 8005a9e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e00f      	b.n	8005acc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	68bb      	ldr	r3, [r7, #8]
 8005ab4:	4013      	ands	r3, r2
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	429a      	cmp	r2, r3
 8005aba:	bf0c      	ite	eq
 8005abc:	2301      	moveq	r3, #1
 8005abe:	2300      	movne	r3, #0
 8005ac0:	b2db      	uxtb	r3, r3
 8005ac2:	461a      	mov	r2, r3
 8005ac4:	79fb      	ldrb	r3, [r7, #7]
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d0b4      	beq.n	8005a34 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3718      	adds	r7, #24
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b095      	sub	sp, #84	@ 0x54
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	330c      	adds	r3, #12
 8005ae2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ae6:	e853 3f00 	ldrex	r3, [r3]
 8005aea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005aec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005af2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	330c      	adds	r3, #12
 8005afa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005afc:	643a      	str	r2, [r7, #64]	@ 0x40
 8005afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b00:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b02:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b04:	e841 2300 	strex	r3, r2, [r1]
 8005b08:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d1e5      	bne.n	8005adc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	3314      	adds	r3, #20
 8005b16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b18:	6a3b      	ldr	r3, [r7, #32]
 8005b1a:	e853 3f00 	ldrex	r3, [r3]
 8005b1e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	f023 0301 	bic.w	r3, r3, #1
 8005b26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	3314      	adds	r3, #20
 8005b2e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b30:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b32:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b34:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b38:	e841 2300 	strex	r3, r2, [r1]
 8005b3c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1e5      	bne.n	8005b10 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d119      	bne.n	8005b80 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	330c      	adds	r3, #12
 8005b52:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	e853 3f00 	ldrex	r3, [r3]
 8005b5a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	f023 0310 	bic.w	r3, r3, #16
 8005b62:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	330c      	adds	r3, #12
 8005b6a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b6c:	61ba      	str	r2, [r7, #24]
 8005b6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b70:	6979      	ldr	r1, [r7, #20]
 8005b72:	69ba      	ldr	r2, [r7, #24]
 8005b74:	e841 2300 	strex	r3, r2, [r1]
 8005b78:	613b      	str	r3, [r7, #16]
   return(result);
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d1e5      	bne.n	8005b4c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2220      	movs	r2, #32
 8005b84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005b8e:	bf00      	nop
 8005b90:	3754      	adds	r7, #84	@ 0x54
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
	...

08005b9c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b9c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ba0:	b0c0      	sub	sp, #256	@ 0x100
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ba8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	691b      	ldr	r3, [r3, #16]
 8005bb0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bb8:	68d9      	ldr	r1, [r3, #12]
 8005bba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bbe:	681a      	ldr	r2, [r3, #0]
 8005bc0:	ea40 0301 	orr.w	r3, r0, r1
 8005bc4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005bc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bca:	689a      	ldr	r2, [r3, #8]
 8005bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	431a      	orrs	r2, r3
 8005bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005be0:	69db      	ldr	r3, [r3, #28]
 8005be2:	4313      	orrs	r3, r2
 8005be4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005bf4:	f021 010c 	bic.w	r1, r1, #12
 8005bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005c02:	430b      	orrs	r3, r1
 8005c04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	695b      	ldr	r3, [r3, #20]
 8005c0e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c16:	6999      	ldr	r1, [r3, #24]
 8005c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	ea40 0301 	orr.w	r3, r0, r1
 8005c22:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005c24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	4b8f      	ldr	r3, [pc, #572]	@ (8005e68 <UART_SetConfig+0x2cc>)
 8005c2c:	429a      	cmp	r2, r3
 8005c2e:	d005      	beq.n	8005c3c <UART_SetConfig+0xa0>
 8005c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c34:	681a      	ldr	r2, [r3, #0]
 8005c36:	4b8d      	ldr	r3, [pc, #564]	@ (8005e6c <UART_SetConfig+0x2d0>)
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d104      	bne.n	8005c46 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005c3c:	f7ff f9e8 	bl	8005010 <HAL_RCC_GetPCLK2Freq>
 8005c40:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005c44:	e003      	b.n	8005c4e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005c46:	f7ff f9cf 	bl	8004fe8 <HAL_RCC_GetPCLK1Freq>
 8005c4a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c52:	69db      	ldr	r3, [r3, #28]
 8005c54:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c58:	f040 810c 	bne.w	8005e74 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005c5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c60:	2200      	movs	r2, #0
 8005c62:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005c66:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005c6a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005c6e:	4622      	mov	r2, r4
 8005c70:	462b      	mov	r3, r5
 8005c72:	1891      	adds	r1, r2, r2
 8005c74:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005c76:	415b      	adcs	r3, r3
 8005c78:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c7a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005c7e:	4621      	mov	r1, r4
 8005c80:	eb12 0801 	adds.w	r8, r2, r1
 8005c84:	4629      	mov	r1, r5
 8005c86:	eb43 0901 	adc.w	r9, r3, r1
 8005c8a:	f04f 0200 	mov.w	r2, #0
 8005c8e:	f04f 0300 	mov.w	r3, #0
 8005c92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c9e:	4690      	mov	r8, r2
 8005ca0:	4699      	mov	r9, r3
 8005ca2:	4623      	mov	r3, r4
 8005ca4:	eb18 0303 	adds.w	r3, r8, r3
 8005ca8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005cac:	462b      	mov	r3, r5
 8005cae:	eb49 0303 	adc.w	r3, r9, r3
 8005cb2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005cc2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005cc6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005cca:	460b      	mov	r3, r1
 8005ccc:	18db      	adds	r3, r3, r3
 8005cce:	653b      	str	r3, [r7, #80]	@ 0x50
 8005cd0:	4613      	mov	r3, r2
 8005cd2:	eb42 0303 	adc.w	r3, r2, r3
 8005cd6:	657b      	str	r3, [r7, #84]	@ 0x54
 8005cd8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005cdc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005ce0:	f7fa face 	bl	8000280 <__aeabi_uldivmod>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	460b      	mov	r3, r1
 8005ce8:	4b61      	ldr	r3, [pc, #388]	@ (8005e70 <UART_SetConfig+0x2d4>)
 8005cea:	fba3 2302 	umull	r2, r3, r3, r2
 8005cee:	095b      	lsrs	r3, r3, #5
 8005cf0:	011c      	lsls	r4, r3, #4
 8005cf2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005cfc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005d00:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005d04:	4642      	mov	r2, r8
 8005d06:	464b      	mov	r3, r9
 8005d08:	1891      	adds	r1, r2, r2
 8005d0a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005d0c:	415b      	adcs	r3, r3
 8005d0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005d10:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005d14:	4641      	mov	r1, r8
 8005d16:	eb12 0a01 	adds.w	sl, r2, r1
 8005d1a:	4649      	mov	r1, r9
 8005d1c:	eb43 0b01 	adc.w	fp, r3, r1
 8005d20:	f04f 0200 	mov.w	r2, #0
 8005d24:	f04f 0300 	mov.w	r3, #0
 8005d28:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005d2c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005d30:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005d34:	4692      	mov	sl, r2
 8005d36:	469b      	mov	fp, r3
 8005d38:	4643      	mov	r3, r8
 8005d3a:	eb1a 0303 	adds.w	r3, sl, r3
 8005d3e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005d42:	464b      	mov	r3, r9
 8005d44:	eb4b 0303 	adc.w	r3, fp, r3
 8005d48:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	2200      	movs	r2, #0
 8005d54:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005d58:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005d5c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005d60:	460b      	mov	r3, r1
 8005d62:	18db      	adds	r3, r3, r3
 8005d64:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d66:	4613      	mov	r3, r2
 8005d68:	eb42 0303 	adc.w	r3, r2, r3
 8005d6c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d6e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005d72:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005d76:	f7fa fa83 	bl	8000280 <__aeabi_uldivmod>
 8005d7a:	4602      	mov	r2, r0
 8005d7c:	460b      	mov	r3, r1
 8005d7e:	4611      	mov	r1, r2
 8005d80:	4b3b      	ldr	r3, [pc, #236]	@ (8005e70 <UART_SetConfig+0x2d4>)
 8005d82:	fba3 2301 	umull	r2, r3, r3, r1
 8005d86:	095b      	lsrs	r3, r3, #5
 8005d88:	2264      	movs	r2, #100	@ 0x64
 8005d8a:	fb02 f303 	mul.w	r3, r2, r3
 8005d8e:	1acb      	subs	r3, r1, r3
 8005d90:	00db      	lsls	r3, r3, #3
 8005d92:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005d96:	4b36      	ldr	r3, [pc, #216]	@ (8005e70 <UART_SetConfig+0x2d4>)
 8005d98:	fba3 2302 	umull	r2, r3, r3, r2
 8005d9c:	095b      	lsrs	r3, r3, #5
 8005d9e:	005b      	lsls	r3, r3, #1
 8005da0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005da4:	441c      	add	r4, r3
 8005da6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005daa:	2200      	movs	r2, #0
 8005dac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005db0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005db4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005db8:	4642      	mov	r2, r8
 8005dba:	464b      	mov	r3, r9
 8005dbc:	1891      	adds	r1, r2, r2
 8005dbe:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005dc0:	415b      	adcs	r3, r3
 8005dc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005dc4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005dc8:	4641      	mov	r1, r8
 8005dca:	1851      	adds	r1, r2, r1
 8005dcc:	6339      	str	r1, [r7, #48]	@ 0x30
 8005dce:	4649      	mov	r1, r9
 8005dd0:	414b      	adcs	r3, r1
 8005dd2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005dd4:	f04f 0200 	mov.w	r2, #0
 8005dd8:	f04f 0300 	mov.w	r3, #0
 8005ddc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005de0:	4659      	mov	r1, fp
 8005de2:	00cb      	lsls	r3, r1, #3
 8005de4:	4651      	mov	r1, sl
 8005de6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005dea:	4651      	mov	r1, sl
 8005dec:	00ca      	lsls	r2, r1, #3
 8005dee:	4610      	mov	r0, r2
 8005df0:	4619      	mov	r1, r3
 8005df2:	4603      	mov	r3, r0
 8005df4:	4642      	mov	r2, r8
 8005df6:	189b      	adds	r3, r3, r2
 8005df8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005dfc:	464b      	mov	r3, r9
 8005dfe:	460a      	mov	r2, r1
 8005e00:	eb42 0303 	adc.w	r3, r2, r3
 8005e04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005e14:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005e18:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	18db      	adds	r3, r3, r3
 8005e20:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005e22:	4613      	mov	r3, r2
 8005e24:	eb42 0303 	adc.w	r3, r2, r3
 8005e28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005e2a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005e2e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005e32:	f7fa fa25 	bl	8000280 <__aeabi_uldivmod>
 8005e36:	4602      	mov	r2, r0
 8005e38:	460b      	mov	r3, r1
 8005e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8005e70 <UART_SetConfig+0x2d4>)
 8005e3c:	fba3 1302 	umull	r1, r3, r3, r2
 8005e40:	095b      	lsrs	r3, r3, #5
 8005e42:	2164      	movs	r1, #100	@ 0x64
 8005e44:	fb01 f303 	mul.w	r3, r1, r3
 8005e48:	1ad3      	subs	r3, r2, r3
 8005e4a:	00db      	lsls	r3, r3, #3
 8005e4c:	3332      	adds	r3, #50	@ 0x32
 8005e4e:	4a08      	ldr	r2, [pc, #32]	@ (8005e70 <UART_SetConfig+0x2d4>)
 8005e50:	fba2 2303 	umull	r2, r3, r2, r3
 8005e54:	095b      	lsrs	r3, r3, #5
 8005e56:	f003 0207 	and.w	r2, r3, #7
 8005e5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	4422      	add	r2, r4
 8005e62:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e64:	e106      	b.n	8006074 <UART_SetConfig+0x4d8>
 8005e66:	bf00      	nop
 8005e68:	40011000 	.word	0x40011000
 8005e6c:	40011400 	.word	0x40011400
 8005e70:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005e7e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005e82:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005e86:	4642      	mov	r2, r8
 8005e88:	464b      	mov	r3, r9
 8005e8a:	1891      	adds	r1, r2, r2
 8005e8c:	6239      	str	r1, [r7, #32]
 8005e8e:	415b      	adcs	r3, r3
 8005e90:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e92:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e96:	4641      	mov	r1, r8
 8005e98:	1854      	adds	r4, r2, r1
 8005e9a:	4649      	mov	r1, r9
 8005e9c:	eb43 0501 	adc.w	r5, r3, r1
 8005ea0:	f04f 0200 	mov.w	r2, #0
 8005ea4:	f04f 0300 	mov.w	r3, #0
 8005ea8:	00eb      	lsls	r3, r5, #3
 8005eaa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005eae:	00e2      	lsls	r2, r4, #3
 8005eb0:	4614      	mov	r4, r2
 8005eb2:	461d      	mov	r5, r3
 8005eb4:	4643      	mov	r3, r8
 8005eb6:	18e3      	adds	r3, r4, r3
 8005eb8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005ebc:	464b      	mov	r3, r9
 8005ebe:	eb45 0303 	adc.w	r3, r5, r3
 8005ec2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005ec6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eca:	685b      	ldr	r3, [r3, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005ed2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005ed6:	f04f 0200 	mov.w	r2, #0
 8005eda:	f04f 0300 	mov.w	r3, #0
 8005ede:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005ee2:	4629      	mov	r1, r5
 8005ee4:	008b      	lsls	r3, r1, #2
 8005ee6:	4621      	mov	r1, r4
 8005ee8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005eec:	4621      	mov	r1, r4
 8005eee:	008a      	lsls	r2, r1, #2
 8005ef0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005ef4:	f7fa f9c4 	bl	8000280 <__aeabi_uldivmod>
 8005ef8:	4602      	mov	r2, r0
 8005efa:	460b      	mov	r3, r1
 8005efc:	4b60      	ldr	r3, [pc, #384]	@ (8006080 <UART_SetConfig+0x4e4>)
 8005efe:	fba3 2302 	umull	r2, r3, r3, r2
 8005f02:	095b      	lsrs	r3, r3, #5
 8005f04:	011c      	lsls	r4, r3, #4
 8005f06:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005f10:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005f14:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005f18:	4642      	mov	r2, r8
 8005f1a:	464b      	mov	r3, r9
 8005f1c:	1891      	adds	r1, r2, r2
 8005f1e:	61b9      	str	r1, [r7, #24]
 8005f20:	415b      	adcs	r3, r3
 8005f22:	61fb      	str	r3, [r7, #28]
 8005f24:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005f28:	4641      	mov	r1, r8
 8005f2a:	1851      	adds	r1, r2, r1
 8005f2c:	6139      	str	r1, [r7, #16]
 8005f2e:	4649      	mov	r1, r9
 8005f30:	414b      	adcs	r3, r1
 8005f32:	617b      	str	r3, [r7, #20]
 8005f34:	f04f 0200 	mov.w	r2, #0
 8005f38:	f04f 0300 	mov.w	r3, #0
 8005f3c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005f40:	4659      	mov	r1, fp
 8005f42:	00cb      	lsls	r3, r1, #3
 8005f44:	4651      	mov	r1, sl
 8005f46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f4a:	4651      	mov	r1, sl
 8005f4c:	00ca      	lsls	r2, r1, #3
 8005f4e:	4610      	mov	r0, r2
 8005f50:	4619      	mov	r1, r3
 8005f52:	4603      	mov	r3, r0
 8005f54:	4642      	mov	r2, r8
 8005f56:	189b      	adds	r3, r3, r2
 8005f58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005f5c:	464b      	mov	r3, r9
 8005f5e:	460a      	mov	r2, r1
 8005f60:	eb42 0303 	adc.w	r3, r2, r3
 8005f64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f6c:	685b      	ldr	r3, [r3, #4]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005f72:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005f74:	f04f 0200 	mov.w	r2, #0
 8005f78:	f04f 0300 	mov.w	r3, #0
 8005f7c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005f80:	4649      	mov	r1, r9
 8005f82:	008b      	lsls	r3, r1, #2
 8005f84:	4641      	mov	r1, r8
 8005f86:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f8a:	4641      	mov	r1, r8
 8005f8c:	008a      	lsls	r2, r1, #2
 8005f8e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005f92:	f7fa f975 	bl	8000280 <__aeabi_uldivmod>
 8005f96:	4602      	mov	r2, r0
 8005f98:	460b      	mov	r3, r1
 8005f9a:	4611      	mov	r1, r2
 8005f9c:	4b38      	ldr	r3, [pc, #224]	@ (8006080 <UART_SetConfig+0x4e4>)
 8005f9e:	fba3 2301 	umull	r2, r3, r3, r1
 8005fa2:	095b      	lsrs	r3, r3, #5
 8005fa4:	2264      	movs	r2, #100	@ 0x64
 8005fa6:	fb02 f303 	mul.w	r3, r2, r3
 8005faa:	1acb      	subs	r3, r1, r3
 8005fac:	011b      	lsls	r3, r3, #4
 8005fae:	3332      	adds	r3, #50	@ 0x32
 8005fb0:	4a33      	ldr	r2, [pc, #204]	@ (8006080 <UART_SetConfig+0x4e4>)
 8005fb2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fb6:	095b      	lsrs	r3, r3, #5
 8005fb8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005fbc:	441c      	add	r4, r3
 8005fbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	673b      	str	r3, [r7, #112]	@ 0x70
 8005fc6:	677a      	str	r2, [r7, #116]	@ 0x74
 8005fc8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005fcc:	4642      	mov	r2, r8
 8005fce:	464b      	mov	r3, r9
 8005fd0:	1891      	adds	r1, r2, r2
 8005fd2:	60b9      	str	r1, [r7, #8]
 8005fd4:	415b      	adcs	r3, r3
 8005fd6:	60fb      	str	r3, [r7, #12]
 8005fd8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005fdc:	4641      	mov	r1, r8
 8005fde:	1851      	adds	r1, r2, r1
 8005fe0:	6039      	str	r1, [r7, #0]
 8005fe2:	4649      	mov	r1, r9
 8005fe4:	414b      	adcs	r3, r1
 8005fe6:	607b      	str	r3, [r7, #4]
 8005fe8:	f04f 0200 	mov.w	r2, #0
 8005fec:	f04f 0300 	mov.w	r3, #0
 8005ff0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005ff4:	4659      	mov	r1, fp
 8005ff6:	00cb      	lsls	r3, r1, #3
 8005ff8:	4651      	mov	r1, sl
 8005ffa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ffe:	4651      	mov	r1, sl
 8006000:	00ca      	lsls	r2, r1, #3
 8006002:	4610      	mov	r0, r2
 8006004:	4619      	mov	r1, r3
 8006006:	4603      	mov	r3, r0
 8006008:	4642      	mov	r2, r8
 800600a:	189b      	adds	r3, r3, r2
 800600c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800600e:	464b      	mov	r3, r9
 8006010:	460a      	mov	r2, r1
 8006012:	eb42 0303 	adc.w	r3, r2, r3
 8006016:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	2200      	movs	r2, #0
 8006020:	663b      	str	r3, [r7, #96]	@ 0x60
 8006022:	667a      	str	r2, [r7, #100]	@ 0x64
 8006024:	f04f 0200 	mov.w	r2, #0
 8006028:	f04f 0300 	mov.w	r3, #0
 800602c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006030:	4649      	mov	r1, r9
 8006032:	008b      	lsls	r3, r1, #2
 8006034:	4641      	mov	r1, r8
 8006036:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800603a:	4641      	mov	r1, r8
 800603c:	008a      	lsls	r2, r1, #2
 800603e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006042:	f7fa f91d 	bl	8000280 <__aeabi_uldivmod>
 8006046:	4602      	mov	r2, r0
 8006048:	460b      	mov	r3, r1
 800604a:	4b0d      	ldr	r3, [pc, #52]	@ (8006080 <UART_SetConfig+0x4e4>)
 800604c:	fba3 1302 	umull	r1, r3, r3, r2
 8006050:	095b      	lsrs	r3, r3, #5
 8006052:	2164      	movs	r1, #100	@ 0x64
 8006054:	fb01 f303 	mul.w	r3, r1, r3
 8006058:	1ad3      	subs	r3, r2, r3
 800605a:	011b      	lsls	r3, r3, #4
 800605c:	3332      	adds	r3, #50	@ 0x32
 800605e:	4a08      	ldr	r2, [pc, #32]	@ (8006080 <UART_SetConfig+0x4e4>)
 8006060:	fba2 2303 	umull	r2, r3, r2, r3
 8006064:	095b      	lsrs	r3, r3, #5
 8006066:	f003 020f 	and.w	r2, r3, #15
 800606a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4422      	add	r2, r4
 8006072:	609a      	str	r2, [r3, #8]
}
 8006074:	bf00      	nop
 8006076:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800607a:	46bd      	mov	sp, r7
 800607c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006080:	51eb851f 	.word	0x51eb851f

08006084 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8006084:	b480      	push	{r7}
 8006086:	b087      	sub	sp, #28
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
 800608c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800608e:	683b      	ldr	r3, [r7, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006098:	683a      	ldr	r2, [r7, #0]
 800609a:	6812      	ldr	r2, [r2, #0]
 800609c:	f023 0101 	bic.w	r1, r3, #1
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	2b08      	cmp	r3, #8
 80060ac:	d102      	bne.n	80060b4 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 80060ae:	2340      	movs	r3, #64	@ 0x40
 80060b0:	617b      	str	r3, [r7, #20]
 80060b2:	e001      	b.n	80060b8 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 80060b4:	2300      	movs	r3, #0
 80060b6:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 80060c4:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 80060c6:	683b      	ldr	r3, [r7, #0]
 80060c8:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 80060ca:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 80060d0:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 80060d6:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80060dc:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80060e2:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 80060e8:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 80060ee:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 80060f4:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 80060fa:	4313      	orrs	r3, r2
 80060fc:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	699b      	ldr	r3, [r3, #24]
 8006102:	693a      	ldr	r2, [r7, #16]
 8006104:	4313      	orrs	r3, r2
 8006106:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800610c:	693a      	ldr	r2, [r7, #16]
 800610e:	4313      	orrs	r3, r2
 8006110:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8006112:	4b10      	ldr	r3, [pc, #64]	@ (8006154 <FSMC_NORSRAM_Init+0xd0>)
 8006114:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800611c:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8006124:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8006126:	683b      	ldr	r3, [r7, #0]
 8006128:	681a      	ldr	r2, [r3, #0]
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	43db      	mvns	r3, r3
 8006134:	ea02 0103 	and.w	r1, r2, r3
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	681a      	ldr	r2, [r3, #0]
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	4319      	orrs	r1, r3
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8006146:	2300      	movs	r3, #0
}
 8006148:	4618      	mov	r0, r3
 800614a:	371c      	adds	r7, #28
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr
 8006154:	0008fb7f 	.word	0x0008fb7f

08006158 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006158:	b480      	push	{r7}
 800615a:	b085      	sub	sp, #20
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	1c5a      	adds	r2, r3, #1
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800616e:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8006172:	68bb      	ldr	r3, [r7, #8]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	68bb      	ldr	r3, [r7, #8]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	011b      	lsls	r3, r3, #4
 800617c:	431a      	orrs	r2, r3
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	021b      	lsls	r3, r3, #8
 8006184:	431a      	orrs	r2, r3
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	68db      	ldr	r3, [r3, #12]
 800618a:	041b      	lsls	r3, r3, #16
 800618c:	431a      	orrs	r2, r3
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	691b      	ldr	r3, [r3, #16]
 8006192:	3b01      	subs	r3, #1
 8006194:	051b      	lsls	r3, r3, #20
 8006196:	431a      	orrs	r2, r3
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	695b      	ldr	r3, [r3, #20]
 800619c:	3b02      	subs	r3, #2
 800619e:	061b      	lsls	r3, r3, #24
 80061a0:	431a      	orrs	r2, r3
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	4313      	orrs	r3, r2
 80061a8:	687a      	ldr	r2, [r7, #4]
 80061aa:	3201      	adds	r2, #1
 80061ac:	4319      	orrs	r1, r3
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3714      	adds	r7, #20
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr
	...

080061c4 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	60f8      	str	r0, [r7, #12]
 80061cc:	60b9      	str	r1, [r7, #8]
 80061ce:	607a      	str	r2, [r7, #4]
 80061d0:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 80061d2:	683b      	ldr	r3, [r7, #0]
 80061d4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80061d8:	d11d      	bne.n	8006216 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80061e2:	4b13      	ldr	r3, [pc, #76]	@ (8006230 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 80061e4:	4013      	ands	r3, r2
 80061e6:	68ba      	ldr	r2, [r7, #8]
 80061e8:	6811      	ldr	r1, [r2, #0]
 80061ea:	68ba      	ldr	r2, [r7, #8]
 80061ec:	6852      	ldr	r2, [r2, #4]
 80061ee:	0112      	lsls	r2, r2, #4
 80061f0:	4311      	orrs	r1, r2
 80061f2:	68ba      	ldr	r2, [r7, #8]
 80061f4:	6892      	ldr	r2, [r2, #8]
 80061f6:	0212      	lsls	r2, r2, #8
 80061f8:	4311      	orrs	r1, r2
 80061fa:	68ba      	ldr	r2, [r7, #8]
 80061fc:	6992      	ldr	r2, [r2, #24]
 80061fe:	4311      	orrs	r1, r2
 8006200:	68ba      	ldr	r2, [r7, #8]
 8006202:	68d2      	ldr	r2, [r2, #12]
 8006204:	0412      	lsls	r2, r2, #16
 8006206:	430a      	orrs	r2, r1
 8006208:	ea43 0102 	orr.w	r1, r3, r2
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	687a      	ldr	r2, [r7, #4]
 8006210:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006214:	e005      	b.n	8006222 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	687a      	ldr	r2, [r7, #4]
 800621a:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800621e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8006222:	2300      	movs	r3, #0
}
 8006224:	4618      	mov	r0, r3
 8006226:	3714      	adds	r7, #20
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr
 8006230:	cff00000 	.word	0xcff00000

08006234 <sbrk_aligned>:
 8006234:	b570      	push	{r4, r5, r6, lr}
 8006236:	4e0f      	ldr	r6, [pc, #60]	@ (8006274 <sbrk_aligned+0x40>)
 8006238:	460c      	mov	r4, r1
 800623a:	6831      	ldr	r1, [r6, #0]
 800623c:	4605      	mov	r5, r0
 800623e:	b911      	cbnz	r1, 8006246 <sbrk_aligned+0x12>
 8006240:	f000 f91e 	bl	8006480 <_sbrk_r>
 8006244:	6030      	str	r0, [r6, #0]
 8006246:	4621      	mov	r1, r4
 8006248:	4628      	mov	r0, r5
 800624a:	f000 f919 	bl	8006480 <_sbrk_r>
 800624e:	1c43      	adds	r3, r0, #1
 8006250:	d103      	bne.n	800625a <sbrk_aligned+0x26>
 8006252:	f04f 34ff 	mov.w	r4, #4294967295
 8006256:	4620      	mov	r0, r4
 8006258:	bd70      	pop	{r4, r5, r6, pc}
 800625a:	1cc4      	adds	r4, r0, #3
 800625c:	f024 0403 	bic.w	r4, r4, #3
 8006260:	42a0      	cmp	r0, r4
 8006262:	d0f8      	beq.n	8006256 <sbrk_aligned+0x22>
 8006264:	1a21      	subs	r1, r4, r0
 8006266:	4628      	mov	r0, r5
 8006268:	f000 f90a 	bl	8006480 <_sbrk_r>
 800626c:	3001      	adds	r0, #1
 800626e:	d1f2      	bne.n	8006256 <sbrk_aligned+0x22>
 8006270:	e7ef      	b.n	8006252 <sbrk_aligned+0x1e>
 8006272:	bf00      	nop
 8006274:	2000084c 	.word	0x2000084c

08006278 <_malloc_r>:
 8006278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800627c:	1ccd      	adds	r5, r1, #3
 800627e:	f025 0503 	bic.w	r5, r5, #3
 8006282:	3508      	adds	r5, #8
 8006284:	2d0c      	cmp	r5, #12
 8006286:	bf38      	it	cc
 8006288:	250c      	movcc	r5, #12
 800628a:	2d00      	cmp	r5, #0
 800628c:	4606      	mov	r6, r0
 800628e:	db01      	blt.n	8006294 <_malloc_r+0x1c>
 8006290:	42a9      	cmp	r1, r5
 8006292:	d904      	bls.n	800629e <_malloc_r+0x26>
 8006294:	230c      	movs	r3, #12
 8006296:	6033      	str	r3, [r6, #0]
 8006298:	2000      	movs	r0, #0
 800629a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800629e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006374 <_malloc_r+0xfc>
 80062a2:	f000 f869 	bl	8006378 <__malloc_lock>
 80062a6:	f8d8 3000 	ldr.w	r3, [r8]
 80062aa:	461c      	mov	r4, r3
 80062ac:	bb44      	cbnz	r4, 8006300 <_malloc_r+0x88>
 80062ae:	4629      	mov	r1, r5
 80062b0:	4630      	mov	r0, r6
 80062b2:	f7ff ffbf 	bl	8006234 <sbrk_aligned>
 80062b6:	1c43      	adds	r3, r0, #1
 80062b8:	4604      	mov	r4, r0
 80062ba:	d158      	bne.n	800636e <_malloc_r+0xf6>
 80062bc:	f8d8 4000 	ldr.w	r4, [r8]
 80062c0:	4627      	mov	r7, r4
 80062c2:	2f00      	cmp	r7, #0
 80062c4:	d143      	bne.n	800634e <_malloc_r+0xd6>
 80062c6:	2c00      	cmp	r4, #0
 80062c8:	d04b      	beq.n	8006362 <_malloc_r+0xea>
 80062ca:	6823      	ldr	r3, [r4, #0]
 80062cc:	4639      	mov	r1, r7
 80062ce:	4630      	mov	r0, r6
 80062d0:	eb04 0903 	add.w	r9, r4, r3
 80062d4:	f000 f8d4 	bl	8006480 <_sbrk_r>
 80062d8:	4581      	cmp	r9, r0
 80062da:	d142      	bne.n	8006362 <_malloc_r+0xea>
 80062dc:	6821      	ldr	r1, [r4, #0]
 80062de:	1a6d      	subs	r5, r5, r1
 80062e0:	4629      	mov	r1, r5
 80062e2:	4630      	mov	r0, r6
 80062e4:	f7ff ffa6 	bl	8006234 <sbrk_aligned>
 80062e8:	3001      	adds	r0, #1
 80062ea:	d03a      	beq.n	8006362 <_malloc_r+0xea>
 80062ec:	6823      	ldr	r3, [r4, #0]
 80062ee:	442b      	add	r3, r5
 80062f0:	6023      	str	r3, [r4, #0]
 80062f2:	f8d8 3000 	ldr.w	r3, [r8]
 80062f6:	685a      	ldr	r2, [r3, #4]
 80062f8:	bb62      	cbnz	r2, 8006354 <_malloc_r+0xdc>
 80062fa:	f8c8 7000 	str.w	r7, [r8]
 80062fe:	e00f      	b.n	8006320 <_malloc_r+0xa8>
 8006300:	6822      	ldr	r2, [r4, #0]
 8006302:	1b52      	subs	r2, r2, r5
 8006304:	d420      	bmi.n	8006348 <_malloc_r+0xd0>
 8006306:	2a0b      	cmp	r2, #11
 8006308:	d917      	bls.n	800633a <_malloc_r+0xc2>
 800630a:	1961      	adds	r1, r4, r5
 800630c:	42a3      	cmp	r3, r4
 800630e:	6025      	str	r5, [r4, #0]
 8006310:	bf18      	it	ne
 8006312:	6059      	strne	r1, [r3, #4]
 8006314:	6863      	ldr	r3, [r4, #4]
 8006316:	bf08      	it	eq
 8006318:	f8c8 1000 	streq.w	r1, [r8]
 800631c:	5162      	str	r2, [r4, r5]
 800631e:	604b      	str	r3, [r1, #4]
 8006320:	4630      	mov	r0, r6
 8006322:	f000 f82f 	bl	8006384 <__malloc_unlock>
 8006326:	f104 000b 	add.w	r0, r4, #11
 800632a:	1d23      	adds	r3, r4, #4
 800632c:	f020 0007 	bic.w	r0, r0, #7
 8006330:	1ac2      	subs	r2, r0, r3
 8006332:	bf1c      	itt	ne
 8006334:	1a1b      	subne	r3, r3, r0
 8006336:	50a3      	strne	r3, [r4, r2]
 8006338:	e7af      	b.n	800629a <_malloc_r+0x22>
 800633a:	6862      	ldr	r2, [r4, #4]
 800633c:	42a3      	cmp	r3, r4
 800633e:	bf0c      	ite	eq
 8006340:	f8c8 2000 	streq.w	r2, [r8]
 8006344:	605a      	strne	r2, [r3, #4]
 8006346:	e7eb      	b.n	8006320 <_malloc_r+0xa8>
 8006348:	4623      	mov	r3, r4
 800634a:	6864      	ldr	r4, [r4, #4]
 800634c:	e7ae      	b.n	80062ac <_malloc_r+0x34>
 800634e:	463c      	mov	r4, r7
 8006350:	687f      	ldr	r7, [r7, #4]
 8006352:	e7b6      	b.n	80062c2 <_malloc_r+0x4a>
 8006354:	461a      	mov	r2, r3
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	42a3      	cmp	r3, r4
 800635a:	d1fb      	bne.n	8006354 <_malloc_r+0xdc>
 800635c:	2300      	movs	r3, #0
 800635e:	6053      	str	r3, [r2, #4]
 8006360:	e7de      	b.n	8006320 <_malloc_r+0xa8>
 8006362:	230c      	movs	r3, #12
 8006364:	6033      	str	r3, [r6, #0]
 8006366:	4630      	mov	r0, r6
 8006368:	f000 f80c 	bl	8006384 <__malloc_unlock>
 800636c:	e794      	b.n	8006298 <_malloc_r+0x20>
 800636e:	6005      	str	r5, [r0, #0]
 8006370:	e7d6      	b.n	8006320 <_malloc_r+0xa8>
 8006372:	bf00      	nop
 8006374:	20000850 	.word	0x20000850

08006378 <__malloc_lock>:
 8006378:	4801      	ldr	r0, [pc, #4]	@ (8006380 <__malloc_lock+0x8>)
 800637a:	f000 b8bb 	b.w	80064f4 <__retarget_lock_acquire_recursive>
 800637e:	bf00      	nop
 8006380:	20000990 	.word	0x20000990

08006384 <__malloc_unlock>:
 8006384:	4801      	ldr	r0, [pc, #4]	@ (800638c <__malloc_unlock+0x8>)
 8006386:	f000 b8b6 	b.w	80064f6 <__retarget_lock_release_recursive>
 800638a:	bf00      	nop
 800638c:	20000990 	.word	0x20000990

08006390 <_realloc_r>:
 8006390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006394:	4607      	mov	r7, r0
 8006396:	4614      	mov	r4, r2
 8006398:	460d      	mov	r5, r1
 800639a:	b921      	cbnz	r1, 80063a6 <_realloc_r+0x16>
 800639c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063a0:	4611      	mov	r1, r2
 80063a2:	f7ff bf69 	b.w	8006278 <_malloc_r>
 80063a6:	b92a      	cbnz	r2, 80063b4 <_realloc_r+0x24>
 80063a8:	f000 f8ba 	bl	8006520 <_free_r>
 80063ac:	4625      	mov	r5, r4
 80063ae:	4628      	mov	r0, r5
 80063b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80063b4:	f000 f8fe 	bl	80065b4 <_malloc_usable_size_r>
 80063b8:	4284      	cmp	r4, r0
 80063ba:	4606      	mov	r6, r0
 80063bc:	d802      	bhi.n	80063c4 <_realloc_r+0x34>
 80063be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80063c2:	d8f4      	bhi.n	80063ae <_realloc_r+0x1e>
 80063c4:	4621      	mov	r1, r4
 80063c6:	4638      	mov	r0, r7
 80063c8:	f7ff ff56 	bl	8006278 <_malloc_r>
 80063cc:	4680      	mov	r8, r0
 80063ce:	b908      	cbnz	r0, 80063d4 <_realloc_r+0x44>
 80063d0:	4645      	mov	r5, r8
 80063d2:	e7ec      	b.n	80063ae <_realloc_r+0x1e>
 80063d4:	42b4      	cmp	r4, r6
 80063d6:	4622      	mov	r2, r4
 80063d8:	4629      	mov	r1, r5
 80063da:	bf28      	it	cs
 80063dc:	4632      	movcs	r2, r6
 80063de:	f000 f88b 	bl	80064f8 <memcpy>
 80063e2:	4629      	mov	r1, r5
 80063e4:	4638      	mov	r0, r7
 80063e6:	f000 f89b 	bl	8006520 <_free_r>
 80063ea:	e7f1      	b.n	80063d0 <_realloc_r+0x40>

080063ec <siprintf>:
 80063ec:	b40e      	push	{r1, r2, r3}
 80063ee:	b510      	push	{r4, lr}
 80063f0:	b09d      	sub	sp, #116	@ 0x74
 80063f2:	ab1f      	add	r3, sp, #124	@ 0x7c
 80063f4:	9002      	str	r0, [sp, #8]
 80063f6:	9006      	str	r0, [sp, #24]
 80063f8:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80063fc:	480a      	ldr	r0, [pc, #40]	@ (8006428 <siprintf+0x3c>)
 80063fe:	9107      	str	r1, [sp, #28]
 8006400:	9104      	str	r1, [sp, #16]
 8006402:	490a      	ldr	r1, [pc, #40]	@ (800642c <siprintf+0x40>)
 8006404:	f853 2b04 	ldr.w	r2, [r3], #4
 8006408:	9105      	str	r1, [sp, #20]
 800640a:	2400      	movs	r4, #0
 800640c:	a902      	add	r1, sp, #8
 800640e:	6800      	ldr	r0, [r0, #0]
 8006410:	9301      	str	r3, [sp, #4]
 8006412:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006414:	f000 f932 	bl	800667c <_svfiprintf_r>
 8006418:	9b02      	ldr	r3, [sp, #8]
 800641a:	701c      	strb	r4, [r3, #0]
 800641c:	b01d      	add	sp, #116	@ 0x74
 800641e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006422:	b003      	add	sp, #12
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	20000034 	.word	0x20000034
 800642c:	ffff0208 	.word	0xffff0208

08006430 <_vsiprintf_r>:
 8006430:	b510      	push	{r4, lr}
 8006432:	b09a      	sub	sp, #104	@ 0x68
 8006434:	2400      	movs	r4, #0
 8006436:	9100      	str	r1, [sp, #0]
 8006438:	9104      	str	r1, [sp, #16]
 800643a:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800643e:	9105      	str	r1, [sp, #20]
 8006440:	9102      	str	r1, [sp, #8]
 8006442:	4905      	ldr	r1, [pc, #20]	@ (8006458 <_vsiprintf_r+0x28>)
 8006444:	9103      	str	r1, [sp, #12]
 8006446:	4669      	mov	r1, sp
 8006448:	9419      	str	r4, [sp, #100]	@ 0x64
 800644a:	f000 f917 	bl	800667c <_svfiprintf_r>
 800644e:	9b00      	ldr	r3, [sp, #0]
 8006450:	701c      	strb	r4, [r3, #0]
 8006452:	b01a      	add	sp, #104	@ 0x68
 8006454:	bd10      	pop	{r4, pc}
 8006456:	bf00      	nop
 8006458:	ffff0208 	.word	0xffff0208

0800645c <vsiprintf>:
 800645c:	4613      	mov	r3, r2
 800645e:	460a      	mov	r2, r1
 8006460:	4601      	mov	r1, r0
 8006462:	4802      	ldr	r0, [pc, #8]	@ (800646c <vsiprintf+0x10>)
 8006464:	6800      	ldr	r0, [r0, #0]
 8006466:	f7ff bfe3 	b.w	8006430 <_vsiprintf_r>
 800646a:	bf00      	nop
 800646c:	20000034 	.word	0x20000034

08006470 <memset>:
 8006470:	4402      	add	r2, r0
 8006472:	4603      	mov	r3, r0
 8006474:	4293      	cmp	r3, r2
 8006476:	d100      	bne.n	800647a <memset+0xa>
 8006478:	4770      	bx	lr
 800647a:	f803 1b01 	strb.w	r1, [r3], #1
 800647e:	e7f9      	b.n	8006474 <memset+0x4>

08006480 <_sbrk_r>:
 8006480:	b538      	push	{r3, r4, r5, lr}
 8006482:	4d06      	ldr	r5, [pc, #24]	@ (800649c <_sbrk_r+0x1c>)
 8006484:	2300      	movs	r3, #0
 8006486:	4604      	mov	r4, r0
 8006488:	4608      	mov	r0, r1
 800648a:	602b      	str	r3, [r5, #0]
 800648c:	f7fc faa0 	bl	80029d0 <_sbrk>
 8006490:	1c43      	adds	r3, r0, #1
 8006492:	d102      	bne.n	800649a <_sbrk_r+0x1a>
 8006494:	682b      	ldr	r3, [r5, #0]
 8006496:	b103      	cbz	r3, 800649a <_sbrk_r+0x1a>
 8006498:	6023      	str	r3, [r4, #0]
 800649a:	bd38      	pop	{r3, r4, r5, pc}
 800649c:	2000098c 	.word	0x2000098c

080064a0 <__errno>:
 80064a0:	4b01      	ldr	r3, [pc, #4]	@ (80064a8 <__errno+0x8>)
 80064a2:	6818      	ldr	r0, [r3, #0]
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop
 80064a8:	20000034 	.word	0x20000034

080064ac <__libc_init_array>:
 80064ac:	b570      	push	{r4, r5, r6, lr}
 80064ae:	4d0d      	ldr	r5, [pc, #52]	@ (80064e4 <__libc_init_array+0x38>)
 80064b0:	4c0d      	ldr	r4, [pc, #52]	@ (80064e8 <__libc_init_array+0x3c>)
 80064b2:	1b64      	subs	r4, r4, r5
 80064b4:	10a4      	asrs	r4, r4, #2
 80064b6:	2600      	movs	r6, #0
 80064b8:	42a6      	cmp	r6, r4
 80064ba:	d109      	bne.n	80064d0 <__libc_init_array+0x24>
 80064bc:	4d0b      	ldr	r5, [pc, #44]	@ (80064ec <__libc_init_array+0x40>)
 80064be:	4c0c      	ldr	r4, [pc, #48]	@ (80064f0 <__libc_init_array+0x44>)
 80064c0:	f000 fc9e 	bl	8006e00 <_init>
 80064c4:	1b64      	subs	r4, r4, r5
 80064c6:	10a4      	asrs	r4, r4, #2
 80064c8:	2600      	movs	r6, #0
 80064ca:	42a6      	cmp	r6, r4
 80064cc:	d105      	bne.n	80064da <__libc_init_array+0x2e>
 80064ce:	bd70      	pop	{r4, r5, r6, pc}
 80064d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80064d4:	4798      	blx	r3
 80064d6:	3601      	adds	r6, #1
 80064d8:	e7ee      	b.n	80064b8 <__libc_init_array+0xc>
 80064da:	f855 3b04 	ldr.w	r3, [r5], #4
 80064de:	4798      	blx	r3
 80064e0:	3601      	adds	r6, #1
 80064e2:	e7f2      	b.n	80064ca <__libc_init_array+0x1e>
 80064e4:	0800813c 	.word	0x0800813c
 80064e8:	0800813c 	.word	0x0800813c
 80064ec:	0800813c 	.word	0x0800813c
 80064f0:	08008140 	.word	0x08008140

080064f4 <__retarget_lock_acquire_recursive>:
 80064f4:	4770      	bx	lr

080064f6 <__retarget_lock_release_recursive>:
 80064f6:	4770      	bx	lr

080064f8 <memcpy>:
 80064f8:	440a      	add	r2, r1
 80064fa:	4291      	cmp	r1, r2
 80064fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006500:	d100      	bne.n	8006504 <memcpy+0xc>
 8006502:	4770      	bx	lr
 8006504:	b510      	push	{r4, lr}
 8006506:	f811 4b01 	ldrb.w	r4, [r1], #1
 800650a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800650e:	4291      	cmp	r1, r2
 8006510:	d1f9      	bne.n	8006506 <memcpy+0xe>
 8006512:	bd10      	pop	{r4, pc}

08006514 <nanf>:
 8006514:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800651c <nanf+0x8>
 8006518:	4770      	bx	lr
 800651a:	bf00      	nop
 800651c:	7fc00000 	.word	0x7fc00000

08006520 <_free_r>:
 8006520:	b538      	push	{r3, r4, r5, lr}
 8006522:	4605      	mov	r5, r0
 8006524:	2900      	cmp	r1, #0
 8006526:	d041      	beq.n	80065ac <_free_r+0x8c>
 8006528:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800652c:	1f0c      	subs	r4, r1, #4
 800652e:	2b00      	cmp	r3, #0
 8006530:	bfb8      	it	lt
 8006532:	18e4      	addlt	r4, r4, r3
 8006534:	f7ff ff20 	bl	8006378 <__malloc_lock>
 8006538:	4a1d      	ldr	r2, [pc, #116]	@ (80065b0 <_free_r+0x90>)
 800653a:	6813      	ldr	r3, [r2, #0]
 800653c:	b933      	cbnz	r3, 800654c <_free_r+0x2c>
 800653e:	6063      	str	r3, [r4, #4]
 8006540:	6014      	str	r4, [r2, #0]
 8006542:	4628      	mov	r0, r5
 8006544:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006548:	f7ff bf1c 	b.w	8006384 <__malloc_unlock>
 800654c:	42a3      	cmp	r3, r4
 800654e:	d908      	bls.n	8006562 <_free_r+0x42>
 8006550:	6820      	ldr	r0, [r4, #0]
 8006552:	1821      	adds	r1, r4, r0
 8006554:	428b      	cmp	r3, r1
 8006556:	bf01      	itttt	eq
 8006558:	6819      	ldreq	r1, [r3, #0]
 800655a:	685b      	ldreq	r3, [r3, #4]
 800655c:	1809      	addeq	r1, r1, r0
 800655e:	6021      	streq	r1, [r4, #0]
 8006560:	e7ed      	b.n	800653e <_free_r+0x1e>
 8006562:	461a      	mov	r2, r3
 8006564:	685b      	ldr	r3, [r3, #4]
 8006566:	b10b      	cbz	r3, 800656c <_free_r+0x4c>
 8006568:	42a3      	cmp	r3, r4
 800656a:	d9fa      	bls.n	8006562 <_free_r+0x42>
 800656c:	6811      	ldr	r1, [r2, #0]
 800656e:	1850      	adds	r0, r2, r1
 8006570:	42a0      	cmp	r0, r4
 8006572:	d10b      	bne.n	800658c <_free_r+0x6c>
 8006574:	6820      	ldr	r0, [r4, #0]
 8006576:	4401      	add	r1, r0
 8006578:	1850      	adds	r0, r2, r1
 800657a:	4283      	cmp	r3, r0
 800657c:	6011      	str	r1, [r2, #0]
 800657e:	d1e0      	bne.n	8006542 <_free_r+0x22>
 8006580:	6818      	ldr	r0, [r3, #0]
 8006582:	685b      	ldr	r3, [r3, #4]
 8006584:	6053      	str	r3, [r2, #4]
 8006586:	4408      	add	r0, r1
 8006588:	6010      	str	r0, [r2, #0]
 800658a:	e7da      	b.n	8006542 <_free_r+0x22>
 800658c:	d902      	bls.n	8006594 <_free_r+0x74>
 800658e:	230c      	movs	r3, #12
 8006590:	602b      	str	r3, [r5, #0]
 8006592:	e7d6      	b.n	8006542 <_free_r+0x22>
 8006594:	6820      	ldr	r0, [r4, #0]
 8006596:	1821      	adds	r1, r4, r0
 8006598:	428b      	cmp	r3, r1
 800659a:	bf04      	itt	eq
 800659c:	6819      	ldreq	r1, [r3, #0]
 800659e:	685b      	ldreq	r3, [r3, #4]
 80065a0:	6063      	str	r3, [r4, #4]
 80065a2:	bf04      	itt	eq
 80065a4:	1809      	addeq	r1, r1, r0
 80065a6:	6021      	streq	r1, [r4, #0]
 80065a8:	6054      	str	r4, [r2, #4]
 80065aa:	e7ca      	b.n	8006542 <_free_r+0x22>
 80065ac:	bd38      	pop	{r3, r4, r5, pc}
 80065ae:	bf00      	nop
 80065b0:	20000850 	.word	0x20000850

080065b4 <_malloc_usable_size_r>:
 80065b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065b8:	1f18      	subs	r0, r3, #4
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	bfbc      	itt	lt
 80065be:	580b      	ldrlt	r3, [r1, r0]
 80065c0:	18c0      	addlt	r0, r0, r3
 80065c2:	4770      	bx	lr

080065c4 <__ssputs_r>:
 80065c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065c8:	688e      	ldr	r6, [r1, #8]
 80065ca:	461f      	mov	r7, r3
 80065cc:	42be      	cmp	r6, r7
 80065ce:	680b      	ldr	r3, [r1, #0]
 80065d0:	4682      	mov	sl, r0
 80065d2:	460c      	mov	r4, r1
 80065d4:	4690      	mov	r8, r2
 80065d6:	d82d      	bhi.n	8006634 <__ssputs_r+0x70>
 80065d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80065dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80065e0:	d026      	beq.n	8006630 <__ssputs_r+0x6c>
 80065e2:	6965      	ldr	r5, [r4, #20]
 80065e4:	6909      	ldr	r1, [r1, #16]
 80065e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80065ea:	eba3 0901 	sub.w	r9, r3, r1
 80065ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80065f2:	1c7b      	adds	r3, r7, #1
 80065f4:	444b      	add	r3, r9
 80065f6:	106d      	asrs	r5, r5, #1
 80065f8:	429d      	cmp	r5, r3
 80065fa:	bf38      	it	cc
 80065fc:	461d      	movcc	r5, r3
 80065fe:	0553      	lsls	r3, r2, #21
 8006600:	d527      	bpl.n	8006652 <__ssputs_r+0x8e>
 8006602:	4629      	mov	r1, r5
 8006604:	f7ff fe38 	bl	8006278 <_malloc_r>
 8006608:	4606      	mov	r6, r0
 800660a:	b360      	cbz	r0, 8006666 <__ssputs_r+0xa2>
 800660c:	6921      	ldr	r1, [r4, #16]
 800660e:	464a      	mov	r2, r9
 8006610:	f7ff ff72 	bl	80064f8 <memcpy>
 8006614:	89a3      	ldrh	r3, [r4, #12]
 8006616:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800661a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800661e:	81a3      	strh	r3, [r4, #12]
 8006620:	6126      	str	r6, [r4, #16]
 8006622:	6165      	str	r5, [r4, #20]
 8006624:	444e      	add	r6, r9
 8006626:	eba5 0509 	sub.w	r5, r5, r9
 800662a:	6026      	str	r6, [r4, #0]
 800662c:	60a5      	str	r5, [r4, #8]
 800662e:	463e      	mov	r6, r7
 8006630:	42be      	cmp	r6, r7
 8006632:	d900      	bls.n	8006636 <__ssputs_r+0x72>
 8006634:	463e      	mov	r6, r7
 8006636:	6820      	ldr	r0, [r4, #0]
 8006638:	4632      	mov	r2, r6
 800663a:	4641      	mov	r1, r8
 800663c:	f000 faa6 	bl	8006b8c <memmove>
 8006640:	68a3      	ldr	r3, [r4, #8]
 8006642:	1b9b      	subs	r3, r3, r6
 8006644:	60a3      	str	r3, [r4, #8]
 8006646:	6823      	ldr	r3, [r4, #0]
 8006648:	4433      	add	r3, r6
 800664a:	6023      	str	r3, [r4, #0]
 800664c:	2000      	movs	r0, #0
 800664e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006652:	462a      	mov	r2, r5
 8006654:	f7ff fe9c 	bl	8006390 <_realloc_r>
 8006658:	4606      	mov	r6, r0
 800665a:	2800      	cmp	r0, #0
 800665c:	d1e0      	bne.n	8006620 <__ssputs_r+0x5c>
 800665e:	6921      	ldr	r1, [r4, #16]
 8006660:	4650      	mov	r0, sl
 8006662:	f7ff ff5d 	bl	8006520 <_free_r>
 8006666:	230c      	movs	r3, #12
 8006668:	f8ca 3000 	str.w	r3, [sl]
 800666c:	89a3      	ldrh	r3, [r4, #12]
 800666e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006672:	81a3      	strh	r3, [r4, #12]
 8006674:	f04f 30ff 	mov.w	r0, #4294967295
 8006678:	e7e9      	b.n	800664e <__ssputs_r+0x8a>
	...

0800667c <_svfiprintf_r>:
 800667c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006680:	4698      	mov	r8, r3
 8006682:	898b      	ldrh	r3, [r1, #12]
 8006684:	061b      	lsls	r3, r3, #24
 8006686:	b09d      	sub	sp, #116	@ 0x74
 8006688:	4607      	mov	r7, r0
 800668a:	460d      	mov	r5, r1
 800668c:	4614      	mov	r4, r2
 800668e:	d510      	bpl.n	80066b2 <_svfiprintf_r+0x36>
 8006690:	690b      	ldr	r3, [r1, #16]
 8006692:	b973      	cbnz	r3, 80066b2 <_svfiprintf_r+0x36>
 8006694:	2140      	movs	r1, #64	@ 0x40
 8006696:	f7ff fdef 	bl	8006278 <_malloc_r>
 800669a:	6028      	str	r0, [r5, #0]
 800669c:	6128      	str	r0, [r5, #16]
 800669e:	b930      	cbnz	r0, 80066ae <_svfiprintf_r+0x32>
 80066a0:	230c      	movs	r3, #12
 80066a2:	603b      	str	r3, [r7, #0]
 80066a4:	f04f 30ff 	mov.w	r0, #4294967295
 80066a8:	b01d      	add	sp, #116	@ 0x74
 80066aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066ae:	2340      	movs	r3, #64	@ 0x40
 80066b0:	616b      	str	r3, [r5, #20]
 80066b2:	2300      	movs	r3, #0
 80066b4:	9309      	str	r3, [sp, #36]	@ 0x24
 80066b6:	2320      	movs	r3, #32
 80066b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80066bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80066c0:	2330      	movs	r3, #48	@ 0x30
 80066c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006860 <_svfiprintf_r+0x1e4>
 80066c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80066ca:	f04f 0901 	mov.w	r9, #1
 80066ce:	4623      	mov	r3, r4
 80066d0:	469a      	mov	sl, r3
 80066d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066d6:	b10a      	cbz	r2, 80066dc <_svfiprintf_r+0x60>
 80066d8:	2a25      	cmp	r2, #37	@ 0x25
 80066da:	d1f9      	bne.n	80066d0 <_svfiprintf_r+0x54>
 80066dc:	ebba 0b04 	subs.w	fp, sl, r4
 80066e0:	d00b      	beq.n	80066fa <_svfiprintf_r+0x7e>
 80066e2:	465b      	mov	r3, fp
 80066e4:	4622      	mov	r2, r4
 80066e6:	4629      	mov	r1, r5
 80066e8:	4638      	mov	r0, r7
 80066ea:	f7ff ff6b 	bl	80065c4 <__ssputs_r>
 80066ee:	3001      	adds	r0, #1
 80066f0:	f000 80a7 	beq.w	8006842 <_svfiprintf_r+0x1c6>
 80066f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80066f6:	445a      	add	r2, fp
 80066f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80066fa:	f89a 3000 	ldrb.w	r3, [sl]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	f000 809f 	beq.w	8006842 <_svfiprintf_r+0x1c6>
 8006704:	2300      	movs	r3, #0
 8006706:	f04f 32ff 	mov.w	r2, #4294967295
 800670a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800670e:	f10a 0a01 	add.w	sl, sl, #1
 8006712:	9304      	str	r3, [sp, #16]
 8006714:	9307      	str	r3, [sp, #28]
 8006716:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800671a:	931a      	str	r3, [sp, #104]	@ 0x68
 800671c:	4654      	mov	r4, sl
 800671e:	2205      	movs	r2, #5
 8006720:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006724:	484e      	ldr	r0, [pc, #312]	@ (8006860 <_svfiprintf_r+0x1e4>)
 8006726:	f7f9 fd5b 	bl	80001e0 <memchr>
 800672a:	9a04      	ldr	r2, [sp, #16]
 800672c:	b9d8      	cbnz	r0, 8006766 <_svfiprintf_r+0xea>
 800672e:	06d0      	lsls	r0, r2, #27
 8006730:	bf44      	itt	mi
 8006732:	2320      	movmi	r3, #32
 8006734:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006738:	0711      	lsls	r1, r2, #28
 800673a:	bf44      	itt	mi
 800673c:	232b      	movmi	r3, #43	@ 0x2b
 800673e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006742:	f89a 3000 	ldrb.w	r3, [sl]
 8006746:	2b2a      	cmp	r3, #42	@ 0x2a
 8006748:	d015      	beq.n	8006776 <_svfiprintf_r+0xfa>
 800674a:	9a07      	ldr	r2, [sp, #28]
 800674c:	4654      	mov	r4, sl
 800674e:	2000      	movs	r0, #0
 8006750:	f04f 0c0a 	mov.w	ip, #10
 8006754:	4621      	mov	r1, r4
 8006756:	f811 3b01 	ldrb.w	r3, [r1], #1
 800675a:	3b30      	subs	r3, #48	@ 0x30
 800675c:	2b09      	cmp	r3, #9
 800675e:	d94b      	bls.n	80067f8 <_svfiprintf_r+0x17c>
 8006760:	b1b0      	cbz	r0, 8006790 <_svfiprintf_r+0x114>
 8006762:	9207      	str	r2, [sp, #28]
 8006764:	e014      	b.n	8006790 <_svfiprintf_r+0x114>
 8006766:	eba0 0308 	sub.w	r3, r0, r8
 800676a:	fa09 f303 	lsl.w	r3, r9, r3
 800676e:	4313      	orrs	r3, r2
 8006770:	9304      	str	r3, [sp, #16]
 8006772:	46a2      	mov	sl, r4
 8006774:	e7d2      	b.n	800671c <_svfiprintf_r+0xa0>
 8006776:	9b03      	ldr	r3, [sp, #12]
 8006778:	1d19      	adds	r1, r3, #4
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	9103      	str	r1, [sp, #12]
 800677e:	2b00      	cmp	r3, #0
 8006780:	bfbb      	ittet	lt
 8006782:	425b      	neglt	r3, r3
 8006784:	f042 0202 	orrlt.w	r2, r2, #2
 8006788:	9307      	strge	r3, [sp, #28]
 800678a:	9307      	strlt	r3, [sp, #28]
 800678c:	bfb8      	it	lt
 800678e:	9204      	strlt	r2, [sp, #16]
 8006790:	7823      	ldrb	r3, [r4, #0]
 8006792:	2b2e      	cmp	r3, #46	@ 0x2e
 8006794:	d10a      	bne.n	80067ac <_svfiprintf_r+0x130>
 8006796:	7863      	ldrb	r3, [r4, #1]
 8006798:	2b2a      	cmp	r3, #42	@ 0x2a
 800679a:	d132      	bne.n	8006802 <_svfiprintf_r+0x186>
 800679c:	9b03      	ldr	r3, [sp, #12]
 800679e:	1d1a      	adds	r2, r3, #4
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	9203      	str	r2, [sp, #12]
 80067a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80067a8:	3402      	adds	r4, #2
 80067aa:	9305      	str	r3, [sp, #20]
 80067ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006870 <_svfiprintf_r+0x1f4>
 80067b0:	7821      	ldrb	r1, [r4, #0]
 80067b2:	2203      	movs	r2, #3
 80067b4:	4650      	mov	r0, sl
 80067b6:	f7f9 fd13 	bl	80001e0 <memchr>
 80067ba:	b138      	cbz	r0, 80067cc <_svfiprintf_r+0x150>
 80067bc:	9b04      	ldr	r3, [sp, #16]
 80067be:	eba0 000a 	sub.w	r0, r0, sl
 80067c2:	2240      	movs	r2, #64	@ 0x40
 80067c4:	4082      	lsls	r2, r0
 80067c6:	4313      	orrs	r3, r2
 80067c8:	3401      	adds	r4, #1
 80067ca:	9304      	str	r3, [sp, #16]
 80067cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067d0:	4824      	ldr	r0, [pc, #144]	@ (8006864 <_svfiprintf_r+0x1e8>)
 80067d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80067d6:	2206      	movs	r2, #6
 80067d8:	f7f9 fd02 	bl	80001e0 <memchr>
 80067dc:	2800      	cmp	r0, #0
 80067de:	d036      	beq.n	800684e <_svfiprintf_r+0x1d2>
 80067e0:	4b21      	ldr	r3, [pc, #132]	@ (8006868 <_svfiprintf_r+0x1ec>)
 80067e2:	bb1b      	cbnz	r3, 800682c <_svfiprintf_r+0x1b0>
 80067e4:	9b03      	ldr	r3, [sp, #12]
 80067e6:	3307      	adds	r3, #7
 80067e8:	f023 0307 	bic.w	r3, r3, #7
 80067ec:	3308      	adds	r3, #8
 80067ee:	9303      	str	r3, [sp, #12]
 80067f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067f2:	4433      	add	r3, r6
 80067f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80067f6:	e76a      	b.n	80066ce <_svfiprintf_r+0x52>
 80067f8:	fb0c 3202 	mla	r2, ip, r2, r3
 80067fc:	460c      	mov	r4, r1
 80067fe:	2001      	movs	r0, #1
 8006800:	e7a8      	b.n	8006754 <_svfiprintf_r+0xd8>
 8006802:	2300      	movs	r3, #0
 8006804:	3401      	adds	r4, #1
 8006806:	9305      	str	r3, [sp, #20]
 8006808:	4619      	mov	r1, r3
 800680a:	f04f 0c0a 	mov.w	ip, #10
 800680e:	4620      	mov	r0, r4
 8006810:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006814:	3a30      	subs	r2, #48	@ 0x30
 8006816:	2a09      	cmp	r2, #9
 8006818:	d903      	bls.n	8006822 <_svfiprintf_r+0x1a6>
 800681a:	2b00      	cmp	r3, #0
 800681c:	d0c6      	beq.n	80067ac <_svfiprintf_r+0x130>
 800681e:	9105      	str	r1, [sp, #20]
 8006820:	e7c4      	b.n	80067ac <_svfiprintf_r+0x130>
 8006822:	fb0c 2101 	mla	r1, ip, r1, r2
 8006826:	4604      	mov	r4, r0
 8006828:	2301      	movs	r3, #1
 800682a:	e7f0      	b.n	800680e <_svfiprintf_r+0x192>
 800682c:	ab03      	add	r3, sp, #12
 800682e:	9300      	str	r3, [sp, #0]
 8006830:	462a      	mov	r2, r5
 8006832:	4b0e      	ldr	r3, [pc, #56]	@ (800686c <_svfiprintf_r+0x1f0>)
 8006834:	a904      	add	r1, sp, #16
 8006836:	4638      	mov	r0, r7
 8006838:	f3af 8000 	nop.w
 800683c:	1c42      	adds	r2, r0, #1
 800683e:	4606      	mov	r6, r0
 8006840:	d1d6      	bne.n	80067f0 <_svfiprintf_r+0x174>
 8006842:	89ab      	ldrh	r3, [r5, #12]
 8006844:	065b      	lsls	r3, r3, #25
 8006846:	f53f af2d 	bmi.w	80066a4 <_svfiprintf_r+0x28>
 800684a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800684c:	e72c      	b.n	80066a8 <_svfiprintf_r+0x2c>
 800684e:	ab03      	add	r3, sp, #12
 8006850:	9300      	str	r3, [sp, #0]
 8006852:	462a      	mov	r2, r5
 8006854:	4b05      	ldr	r3, [pc, #20]	@ (800686c <_svfiprintf_r+0x1f0>)
 8006856:	a904      	add	r1, sp, #16
 8006858:	4638      	mov	r0, r7
 800685a:	f000 f879 	bl	8006950 <_printf_i>
 800685e:	e7ed      	b.n	800683c <_svfiprintf_r+0x1c0>
 8006860:	08008100 	.word	0x08008100
 8006864:	0800810a 	.word	0x0800810a
 8006868:	00000000 	.word	0x00000000
 800686c:	080065c5 	.word	0x080065c5
 8006870:	08008106 	.word	0x08008106

08006874 <_printf_common>:
 8006874:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006878:	4616      	mov	r6, r2
 800687a:	4698      	mov	r8, r3
 800687c:	688a      	ldr	r2, [r1, #8]
 800687e:	690b      	ldr	r3, [r1, #16]
 8006880:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006884:	4293      	cmp	r3, r2
 8006886:	bfb8      	it	lt
 8006888:	4613      	movlt	r3, r2
 800688a:	6033      	str	r3, [r6, #0]
 800688c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006890:	4607      	mov	r7, r0
 8006892:	460c      	mov	r4, r1
 8006894:	b10a      	cbz	r2, 800689a <_printf_common+0x26>
 8006896:	3301      	adds	r3, #1
 8006898:	6033      	str	r3, [r6, #0]
 800689a:	6823      	ldr	r3, [r4, #0]
 800689c:	0699      	lsls	r1, r3, #26
 800689e:	bf42      	ittt	mi
 80068a0:	6833      	ldrmi	r3, [r6, #0]
 80068a2:	3302      	addmi	r3, #2
 80068a4:	6033      	strmi	r3, [r6, #0]
 80068a6:	6825      	ldr	r5, [r4, #0]
 80068a8:	f015 0506 	ands.w	r5, r5, #6
 80068ac:	d106      	bne.n	80068bc <_printf_common+0x48>
 80068ae:	f104 0a19 	add.w	sl, r4, #25
 80068b2:	68e3      	ldr	r3, [r4, #12]
 80068b4:	6832      	ldr	r2, [r6, #0]
 80068b6:	1a9b      	subs	r3, r3, r2
 80068b8:	42ab      	cmp	r3, r5
 80068ba:	dc26      	bgt.n	800690a <_printf_common+0x96>
 80068bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80068c0:	6822      	ldr	r2, [r4, #0]
 80068c2:	3b00      	subs	r3, #0
 80068c4:	bf18      	it	ne
 80068c6:	2301      	movne	r3, #1
 80068c8:	0692      	lsls	r2, r2, #26
 80068ca:	d42b      	bmi.n	8006924 <_printf_common+0xb0>
 80068cc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80068d0:	4641      	mov	r1, r8
 80068d2:	4638      	mov	r0, r7
 80068d4:	47c8      	blx	r9
 80068d6:	3001      	adds	r0, #1
 80068d8:	d01e      	beq.n	8006918 <_printf_common+0xa4>
 80068da:	6823      	ldr	r3, [r4, #0]
 80068dc:	6922      	ldr	r2, [r4, #16]
 80068de:	f003 0306 	and.w	r3, r3, #6
 80068e2:	2b04      	cmp	r3, #4
 80068e4:	bf02      	ittt	eq
 80068e6:	68e5      	ldreq	r5, [r4, #12]
 80068e8:	6833      	ldreq	r3, [r6, #0]
 80068ea:	1aed      	subeq	r5, r5, r3
 80068ec:	68a3      	ldr	r3, [r4, #8]
 80068ee:	bf0c      	ite	eq
 80068f0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80068f4:	2500      	movne	r5, #0
 80068f6:	4293      	cmp	r3, r2
 80068f8:	bfc4      	itt	gt
 80068fa:	1a9b      	subgt	r3, r3, r2
 80068fc:	18ed      	addgt	r5, r5, r3
 80068fe:	2600      	movs	r6, #0
 8006900:	341a      	adds	r4, #26
 8006902:	42b5      	cmp	r5, r6
 8006904:	d11a      	bne.n	800693c <_printf_common+0xc8>
 8006906:	2000      	movs	r0, #0
 8006908:	e008      	b.n	800691c <_printf_common+0xa8>
 800690a:	2301      	movs	r3, #1
 800690c:	4652      	mov	r2, sl
 800690e:	4641      	mov	r1, r8
 8006910:	4638      	mov	r0, r7
 8006912:	47c8      	blx	r9
 8006914:	3001      	adds	r0, #1
 8006916:	d103      	bne.n	8006920 <_printf_common+0xac>
 8006918:	f04f 30ff 	mov.w	r0, #4294967295
 800691c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006920:	3501      	adds	r5, #1
 8006922:	e7c6      	b.n	80068b2 <_printf_common+0x3e>
 8006924:	18e1      	adds	r1, r4, r3
 8006926:	1c5a      	adds	r2, r3, #1
 8006928:	2030      	movs	r0, #48	@ 0x30
 800692a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800692e:	4422      	add	r2, r4
 8006930:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006934:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006938:	3302      	adds	r3, #2
 800693a:	e7c7      	b.n	80068cc <_printf_common+0x58>
 800693c:	2301      	movs	r3, #1
 800693e:	4622      	mov	r2, r4
 8006940:	4641      	mov	r1, r8
 8006942:	4638      	mov	r0, r7
 8006944:	47c8      	blx	r9
 8006946:	3001      	adds	r0, #1
 8006948:	d0e6      	beq.n	8006918 <_printf_common+0xa4>
 800694a:	3601      	adds	r6, #1
 800694c:	e7d9      	b.n	8006902 <_printf_common+0x8e>
	...

08006950 <_printf_i>:
 8006950:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006954:	7e0f      	ldrb	r7, [r1, #24]
 8006956:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006958:	2f78      	cmp	r7, #120	@ 0x78
 800695a:	4691      	mov	r9, r2
 800695c:	4680      	mov	r8, r0
 800695e:	460c      	mov	r4, r1
 8006960:	469a      	mov	sl, r3
 8006962:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006966:	d807      	bhi.n	8006978 <_printf_i+0x28>
 8006968:	2f62      	cmp	r7, #98	@ 0x62
 800696a:	d80a      	bhi.n	8006982 <_printf_i+0x32>
 800696c:	2f00      	cmp	r7, #0
 800696e:	f000 80d1 	beq.w	8006b14 <_printf_i+0x1c4>
 8006972:	2f58      	cmp	r7, #88	@ 0x58
 8006974:	f000 80b8 	beq.w	8006ae8 <_printf_i+0x198>
 8006978:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800697c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006980:	e03a      	b.n	80069f8 <_printf_i+0xa8>
 8006982:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006986:	2b15      	cmp	r3, #21
 8006988:	d8f6      	bhi.n	8006978 <_printf_i+0x28>
 800698a:	a101      	add	r1, pc, #4	@ (adr r1, 8006990 <_printf_i+0x40>)
 800698c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006990:	080069e9 	.word	0x080069e9
 8006994:	080069fd 	.word	0x080069fd
 8006998:	08006979 	.word	0x08006979
 800699c:	08006979 	.word	0x08006979
 80069a0:	08006979 	.word	0x08006979
 80069a4:	08006979 	.word	0x08006979
 80069a8:	080069fd 	.word	0x080069fd
 80069ac:	08006979 	.word	0x08006979
 80069b0:	08006979 	.word	0x08006979
 80069b4:	08006979 	.word	0x08006979
 80069b8:	08006979 	.word	0x08006979
 80069bc:	08006afb 	.word	0x08006afb
 80069c0:	08006a27 	.word	0x08006a27
 80069c4:	08006ab5 	.word	0x08006ab5
 80069c8:	08006979 	.word	0x08006979
 80069cc:	08006979 	.word	0x08006979
 80069d0:	08006b1d 	.word	0x08006b1d
 80069d4:	08006979 	.word	0x08006979
 80069d8:	08006a27 	.word	0x08006a27
 80069dc:	08006979 	.word	0x08006979
 80069e0:	08006979 	.word	0x08006979
 80069e4:	08006abd 	.word	0x08006abd
 80069e8:	6833      	ldr	r3, [r6, #0]
 80069ea:	1d1a      	adds	r2, r3, #4
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	6032      	str	r2, [r6, #0]
 80069f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80069f4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80069f8:	2301      	movs	r3, #1
 80069fa:	e09c      	b.n	8006b36 <_printf_i+0x1e6>
 80069fc:	6833      	ldr	r3, [r6, #0]
 80069fe:	6820      	ldr	r0, [r4, #0]
 8006a00:	1d19      	adds	r1, r3, #4
 8006a02:	6031      	str	r1, [r6, #0]
 8006a04:	0606      	lsls	r6, r0, #24
 8006a06:	d501      	bpl.n	8006a0c <_printf_i+0xbc>
 8006a08:	681d      	ldr	r5, [r3, #0]
 8006a0a:	e003      	b.n	8006a14 <_printf_i+0xc4>
 8006a0c:	0645      	lsls	r5, r0, #25
 8006a0e:	d5fb      	bpl.n	8006a08 <_printf_i+0xb8>
 8006a10:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006a14:	2d00      	cmp	r5, #0
 8006a16:	da03      	bge.n	8006a20 <_printf_i+0xd0>
 8006a18:	232d      	movs	r3, #45	@ 0x2d
 8006a1a:	426d      	negs	r5, r5
 8006a1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a20:	4858      	ldr	r0, [pc, #352]	@ (8006b84 <_printf_i+0x234>)
 8006a22:	230a      	movs	r3, #10
 8006a24:	e011      	b.n	8006a4a <_printf_i+0xfa>
 8006a26:	6821      	ldr	r1, [r4, #0]
 8006a28:	6833      	ldr	r3, [r6, #0]
 8006a2a:	0608      	lsls	r0, r1, #24
 8006a2c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006a30:	d402      	bmi.n	8006a38 <_printf_i+0xe8>
 8006a32:	0649      	lsls	r1, r1, #25
 8006a34:	bf48      	it	mi
 8006a36:	b2ad      	uxthmi	r5, r5
 8006a38:	2f6f      	cmp	r7, #111	@ 0x6f
 8006a3a:	4852      	ldr	r0, [pc, #328]	@ (8006b84 <_printf_i+0x234>)
 8006a3c:	6033      	str	r3, [r6, #0]
 8006a3e:	bf14      	ite	ne
 8006a40:	230a      	movne	r3, #10
 8006a42:	2308      	moveq	r3, #8
 8006a44:	2100      	movs	r1, #0
 8006a46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006a4a:	6866      	ldr	r6, [r4, #4]
 8006a4c:	60a6      	str	r6, [r4, #8]
 8006a4e:	2e00      	cmp	r6, #0
 8006a50:	db05      	blt.n	8006a5e <_printf_i+0x10e>
 8006a52:	6821      	ldr	r1, [r4, #0]
 8006a54:	432e      	orrs	r6, r5
 8006a56:	f021 0104 	bic.w	r1, r1, #4
 8006a5a:	6021      	str	r1, [r4, #0]
 8006a5c:	d04b      	beq.n	8006af6 <_printf_i+0x1a6>
 8006a5e:	4616      	mov	r6, r2
 8006a60:	fbb5 f1f3 	udiv	r1, r5, r3
 8006a64:	fb03 5711 	mls	r7, r3, r1, r5
 8006a68:	5dc7      	ldrb	r7, [r0, r7]
 8006a6a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a6e:	462f      	mov	r7, r5
 8006a70:	42bb      	cmp	r3, r7
 8006a72:	460d      	mov	r5, r1
 8006a74:	d9f4      	bls.n	8006a60 <_printf_i+0x110>
 8006a76:	2b08      	cmp	r3, #8
 8006a78:	d10b      	bne.n	8006a92 <_printf_i+0x142>
 8006a7a:	6823      	ldr	r3, [r4, #0]
 8006a7c:	07df      	lsls	r7, r3, #31
 8006a7e:	d508      	bpl.n	8006a92 <_printf_i+0x142>
 8006a80:	6923      	ldr	r3, [r4, #16]
 8006a82:	6861      	ldr	r1, [r4, #4]
 8006a84:	4299      	cmp	r1, r3
 8006a86:	bfde      	ittt	le
 8006a88:	2330      	movle	r3, #48	@ 0x30
 8006a8a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a8e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006a92:	1b92      	subs	r2, r2, r6
 8006a94:	6122      	str	r2, [r4, #16]
 8006a96:	f8cd a000 	str.w	sl, [sp]
 8006a9a:	464b      	mov	r3, r9
 8006a9c:	aa03      	add	r2, sp, #12
 8006a9e:	4621      	mov	r1, r4
 8006aa0:	4640      	mov	r0, r8
 8006aa2:	f7ff fee7 	bl	8006874 <_printf_common>
 8006aa6:	3001      	adds	r0, #1
 8006aa8:	d14a      	bne.n	8006b40 <_printf_i+0x1f0>
 8006aaa:	f04f 30ff 	mov.w	r0, #4294967295
 8006aae:	b004      	add	sp, #16
 8006ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ab4:	6823      	ldr	r3, [r4, #0]
 8006ab6:	f043 0320 	orr.w	r3, r3, #32
 8006aba:	6023      	str	r3, [r4, #0]
 8006abc:	4832      	ldr	r0, [pc, #200]	@ (8006b88 <_printf_i+0x238>)
 8006abe:	2778      	movs	r7, #120	@ 0x78
 8006ac0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006ac4:	6823      	ldr	r3, [r4, #0]
 8006ac6:	6831      	ldr	r1, [r6, #0]
 8006ac8:	061f      	lsls	r7, r3, #24
 8006aca:	f851 5b04 	ldr.w	r5, [r1], #4
 8006ace:	d402      	bmi.n	8006ad6 <_printf_i+0x186>
 8006ad0:	065f      	lsls	r7, r3, #25
 8006ad2:	bf48      	it	mi
 8006ad4:	b2ad      	uxthmi	r5, r5
 8006ad6:	6031      	str	r1, [r6, #0]
 8006ad8:	07d9      	lsls	r1, r3, #31
 8006ada:	bf44      	itt	mi
 8006adc:	f043 0320 	orrmi.w	r3, r3, #32
 8006ae0:	6023      	strmi	r3, [r4, #0]
 8006ae2:	b11d      	cbz	r5, 8006aec <_printf_i+0x19c>
 8006ae4:	2310      	movs	r3, #16
 8006ae6:	e7ad      	b.n	8006a44 <_printf_i+0xf4>
 8006ae8:	4826      	ldr	r0, [pc, #152]	@ (8006b84 <_printf_i+0x234>)
 8006aea:	e7e9      	b.n	8006ac0 <_printf_i+0x170>
 8006aec:	6823      	ldr	r3, [r4, #0]
 8006aee:	f023 0320 	bic.w	r3, r3, #32
 8006af2:	6023      	str	r3, [r4, #0]
 8006af4:	e7f6      	b.n	8006ae4 <_printf_i+0x194>
 8006af6:	4616      	mov	r6, r2
 8006af8:	e7bd      	b.n	8006a76 <_printf_i+0x126>
 8006afa:	6833      	ldr	r3, [r6, #0]
 8006afc:	6825      	ldr	r5, [r4, #0]
 8006afe:	6961      	ldr	r1, [r4, #20]
 8006b00:	1d18      	adds	r0, r3, #4
 8006b02:	6030      	str	r0, [r6, #0]
 8006b04:	062e      	lsls	r6, r5, #24
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	d501      	bpl.n	8006b0e <_printf_i+0x1be>
 8006b0a:	6019      	str	r1, [r3, #0]
 8006b0c:	e002      	b.n	8006b14 <_printf_i+0x1c4>
 8006b0e:	0668      	lsls	r0, r5, #25
 8006b10:	d5fb      	bpl.n	8006b0a <_printf_i+0x1ba>
 8006b12:	8019      	strh	r1, [r3, #0]
 8006b14:	2300      	movs	r3, #0
 8006b16:	6123      	str	r3, [r4, #16]
 8006b18:	4616      	mov	r6, r2
 8006b1a:	e7bc      	b.n	8006a96 <_printf_i+0x146>
 8006b1c:	6833      	ldr	r3, [r6, #0]
 8006b1e:	1d1a      	adds	r2, r3, #4
 8006b20:	6032      	str	r2, [r6, #0]
 8006b22:	681e      	ldr	r6, [r3, #0]
 8006b24:	6862      	ldr	r2, [r4, #4]
 8006b26:	2100      	movs	r1, #0
 8006b28:	4630      	mov	r0, r6
 8006b2a:	f7f9 fb59 	bl	80001e0 <memchr>
 8006b2e:	b108      	cbz	r0, 8006b34 <_printf_i+0x1e4>
 8006b30:	1b80      	subs	r0, r0, r6
 8006b32:	6060      	str	r0, [r4, #4]
 8006b34:	6863      	ldr	r3, [r4, #4]
 8006b36:	6123      	str	r3, [r4, #16]
 8006b38:	2300      	movs	r3, #0
 8006b3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006b3e:	e7aa      	b.n	8006a96 <_printf_i+0x146>
 8006b40:	6923      	ldr	r3, [r4, #16]
 8006b42:	4632      	mov	r2, r6
 8006b44:	4649      	mov	r1, r9
 8006b46:	4640      	mov	r0, r8
 8006b48:	47d0      	blx	sl
 8006b4a:	3001      	adds	r0, #1
 8006b4c:	d0ad      	beq.n	8006aaa <_printf_i+0x15a>
 8006b4e:	6823      	ldr	r3, [r4, #0]
 8006b50:	079b      	lsls	r3, r3, #30
 8006b52:	d413      	bmi.n	8006b7c <_printf_i+0x22c>
 8006b54:	68e0      	ldr	r0, [r4, #12]
 8006b56:	9b03      	ldr	r3, [sp, #12]
 8006b58:	4298      	cmp	r0, r3
 8006b5a:	bfb8      	it	lt
 8006b5c:	4618      	movlt	r0, r3
 8006b5e:	e7a6      	b.n	8006aae <_printf_i+0x15e>
 8006b60:	2301      	movs	r3, #1
 8006b62:	4632      	mov	r2, r6
 8006b64:	4649      	mov	r1, r9
 8006b66:	4640      	mov	r0, r8
 8006b68:	47d0      	blx	sl
 8006b6a:	3001      	adds	r0, #1
 8006b6c:	d09d      	beq.n	8006aaa <_printf_i+0x15a>
 8006b6e:	3501      	adds	r5, #1
 8006b70:	68e3      	ldr	r3, [r4, #12]
 8006b72:	9903      	ldr	r1, [sp, #12]
 8006b74:	1a5b      	subs	r3, r3, r1
 8006b76:	42ab      	cmp	r3, r5
 8006b78:	dcf2      	bgt.n	8006b60 <_printf_i+0x210>
 8006b7a:	e7eb      	b.n	8006b54 <_printf_i+0x204>
 8006b7c:	2500      	movs	r5, #0
 8006b7e:	f104 0619 	add.w	r6, r4, #25
 8006b82:	e7f5      	b.n	8006b70 <_printf_i+0x220>
 8006b84:	08008111 	.word	0x08008111
 8006b88:	08008122 	.word	0x08008122

08006b8c <memmove>:
 8006b8c:	4288      	cmp	r0, r1
 8006b8e:	b510      	push	{r4, lr}
 8006b90:	eb01 0402 	add.w	r4, r1, r2
 8006b94:	d902      	bls.n	8006b9c <memmove+0x10>
 8006b96:	4284      	cmp	r4, r0
 8006b98:	4623      	mov	r3, r4
 8006b9a:	d807      	bhi.n	8006bac <memmove+0x20>
 8006b9c:	1e43      	subs	r3, r0, #1
 8006b9e:	42a1      	cmp	r1, r4
 8006ba0:	d008      	beq.n	8006bb4 <memmove+0x28>
 8006ba2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ba6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006baa:	e7f8      	b.n	8006b9e <memmove+0x12>
 8006bac:	4402      	add	r2, r0
 8006bae:	4601      	mov	r1, r0
 8006bb0:	428a      	cmp	r2, r1
 8006bb2:	d100      	bne.n	8006bb6 <memmove+0x2a>
 8006bb4:	bd10      	pop	{r4, pc}
 8006bb6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006bba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006bbe:	e7f7      	b.n	8006bb0 <memmove+0x24>

08006bc0 <logf>:
 8006bc0:	b508      	push	{r3, lr}
 8006bc2:	ed2d 8b02 	vpush	{d8}
 8006bc6:	eeb0 8a40 	vmov.f32	s16, s0
 8006bca:	f000 f827 	bl	8006c1c <__ieee754_logf>
 8006bce:	eeb4 8a48 	vcmp.f32	s16, s16
 8006bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bd6:	d60f      	bvs.n	8006bf8 <logf+0x38>
 8006bd8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006bdc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006be0:	dc0a      	bgt.n	8006bf8 <logf+0x38>
 8006be2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8006be6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bea:	d108      	bne.n	8006bfe <logf+0x3e>
 8006bec:	f7ff fc58 	bl	80064a0 <__errno>
 8006bf0:	2322      	movs	r3, #34	@ 0x22
 8006bf2:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8006c14 <logf+0x54>
 8006bf6:	6003      	str	r3, [r0, #0]
 8006bf8:	ecbd 8b02 	vpop	{d8}
 8006bfc:	bd08      	pop	{r3, pc}
 8006bfe:	f7ff fc4f 	bl	80064a0 <__errno>
 8006c02:	ecbd 8b02 	vpop	{d8}
 8006c06:	2321      	movs	r3, #33	@ 0x21
 8006c08:	6003      	str	r3, [r0, #0]
 8006c0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006c0e:	4802      	ldr	r0, [pc, #8]	@ (8006c18 <logf+0x58>)
 8006c10:	f7ff bc80 	b.w	8006514 <nanf>
 8006c14:	ff800000 	.word	0xff800000
 8006c18:	08008105 	.word	0x08008105

08006c1c <__ieee754_logf>:
 8006c1c:	ee10 3a10 	vmov	r3, s0
 8006c20:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8006c24:	d106      	bne.n	8006c34 <__ieee754_logf+0x18>
 8006c26:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8006dc0 <__ieee754_logf+0x1a4>
 8006c2a:	eddf 7a66 	vldr	s15, [pc, #408]	@ 8006dc4 <__ieee754_logf+0x1a8>
 8006c2e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8006c32:	4770      	bx	lr
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	461a      	mov	r2, r3
 8006c38:	da02      	bge.n	8006c40 <__ieee754_logf+0x24>
 8006c3a:	ee30 7a40 	vsub.f32	s14, s0, s0
 8006c3e:	e7f4      	b.n	8006c2a <__ieee754_logf+0xe>
 8006c40:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8006c44:	db02      	blt.n	8006c4c <__ieee754_logf+0x30>
 8006c46:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006c4a:	4770      	bx	lr
 8006c4c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006c50:	bfb8      	it	lt
 8006c52:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 8006dc8 <__ieee754_logf+0x1ac>
 8006c56:	485d      	ldr	r0, [pc, #372]	@ (8006dcc <__ieee754_logf+0x1b0>)
 8006c58:	bfbe      	ittt	lt
 8006c5a:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8006c5e:	f06f 0118 	mvnlt.w	r1, #24
 8006c62:	ee17 2a90 	vmovlt	r2, s15
 8006c66:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8006c6a:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8006c6e:	4410      	add	r0, r2
 8006c70:	bfa8      	it	ge
 8006c72:	2100      	movge	r1, #0
 8006c74:	3b7f      	subs	r3, #127	@ 0x7f
 8006c76:	440b      	add	r3, r1
 8006c78:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 8006c7c:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 8006c80:	4311      	orrs	r1, r2
 8006c82:	ee00 1a10 	vmov	s0, r1
 8006c86:	4952      	ldr	r1, [pc, #328]	@ (8006dd0 <__ieee754_logf+0x1b4>)
 8006c88:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 8006c8c:	f102 000f 	add.w	r0, r2, #15
 8006c90:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8006c94:	4001      	ands	r1, r0
 8006c96:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006c9a:	bb89      	cbnz	r1, 8006d00 <__ieee754_logf+0xe4>
 8006c9c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006ca0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ca4:	d10f      	bne.n	8006cc6 <__ieee754_logf+0xaa>
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	f000 8087 	beq.w	8006dba <__ieee754_logf+0x19e>
 8006cac:	ee07 3a90 	vmov	s15, r3
 8006cb0:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 8006dd4 <__ieee754_logf+0x1b8>
 8006cb4:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8006dd8 <__ieee754_logf+0x1bc>
 8006cb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006cbc:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006cc0:	eea7 0a87 	vfma.f32	s0, s15, s14
 8006cc4:	4770      	bx	lr
 8006cc6:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8006ddc <__ieee754_logf+0x1c0>
 8006cca:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8006cce:	eee0 7a66 	vfms.f32	s15, s0, s13
 8006cd2:	ee20 7a00 	vmul.f32	s14, s0, s0
 8006cd6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006cda:	b913      	cbnz	r3, 8006ce2 <__ieee754_logf+0xc6>
 8006cdc:	ee30 0a47 	vsub.f32	s0, s0, s14
 8006ce0:	4770      	bx	lr
 8006ce2:	ee07 3a90 	vmov	s15, r3
 8006ce6:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8006dd4 <__ieee754_logf+0x1b8>
 8006cea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006cee:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8006cf2:	ee37 0a40 	vsub.f32	s0, s14, s0
 8006cf6:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8006dd8 <__ieee754_logf+0x1bc>
 8006cfa:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8006cfe:	4770      	bx	lr
 8006d00:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8006d04:	ee70 7a27 	vadd.f32	s15, s0, s15
 8006d08:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8006de0 <__ieee754_logf+0x1c4>
 8006d0c:	eddf 4a35 	vldr	s9, [pc, #212]	@ 8006de4 <__ieee754_logf+0x1c8>
 8006d10:	4935      	ldr	r1, [pc, #212]	@ (8006de8 <__ieee754_logf+0x1cc>)
 8006d12:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8006d16:	4411      	add	r1, r2
 8006d18:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 8006d1c:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 8006d20:	430a      	orrs	r2, r1
 8006d22:	2a00      	cmp	r2, #0
 8006d24:	ee07 3a90 	vmov	s15, r3
 8006d28:	ee26 5a06 	vmul.f32	s10, s12, s12
 8006d2c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006d30:	ee25 7a05 	vmul.f32	s14, s10, s10
 8006d34:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 8006dec <__ieee754_logf+0x1d0>
 8006d38:	eee7 7a25 	vfma.f32	s15, s14, s11
 8006d3c:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8006df0 <__ieee754_logf+0x1d4>
 8006d40:	eee7 5a87 	vfma.f32	s11, s15, s14
 8006d44:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 8006df4 <__ieee754_logf+0x1d8>
 8006d48:	eee7 7a24 	vfma.f32	s15, s14, s9
 8006d4c:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 8006df8 <__ieee754_logf+0x1dc>
 8006d50:	eee7 4a87 	vfma.f32	s9, s15, s14
 8006d54:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8006dfc <__ieee754_logf+0x1e0>
 8006d58:	eee4 7a87 	vfma.f32	s15, s9, s14
 8006d5c:	ee67 7a85 	vmul.f32	s15, s15, s10
 8006d60:	eee5 7a87 	vfma.f32	s15, s11, s14
 8006d64:	dd1a      	ble.n	8006d9c <__ieee754_logf+0x180>
 8006d66:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006d6a:	ee20 7a07 	vmul.f32	s14, s0, s14
 8006d6e:	ee27 7a00 	vmul.f32	s14, s14, s0
 8006d72:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006d76:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006d7a:	b913      	cbnz	r3, 8006d82 <__ieee754_logf+0x166>
 8006d7c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006d80:	e7ac      	b.n	8006cdc <__ieee754_logf+0xc0>
 8006d82:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8006dd4 <__ieee754_logf+0x1b8>
 8006d86:	eee6 7a86 	vfma.f32	s15, s13, s12
 8006d8a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006d8e:	ee37 0a40 	vsub.f32	s0, s14, s0
 8006d92:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8006dd8 <__ieee754_logf+0x1bc>
 8006d96:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8006d9a:	4770      	bx	lr
 8006d9c:	ee70 7a67 	vsub.f32	s15, s0, s15
 8006da0:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006da4:	b913      	cbnz	r3, 8006dac <__ieee754_logf+0x190>
 8006da6:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006daa:	4770      	bx	lr
 8006dac:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8006dd4 <__ieee754_logf+0x1b8>
 8006db0:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8006db4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8006db8:	e7eb      	b.n	8006d92 <__ieee754_logf+0x176>
 8006dba:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8006dc4 <__ieee754_logf+0x1a8>
 8006dbe:	4770      	bx	lr
 8006dc0:	cc000000 	.word	0xcc000000
 8006dc4:	00000000 	.word	0x00000000
 8006dc8:	4c000000 	.word	0x4c000000
 8006dcc:	004afb20 	.word	0x004afb20
 8006dd0:	007ffff0 	.word	0x007ffff0
 8006dd4:	3717f7d1 	.word	0x3717f7d1
 8006dd8:	3f317180 	.word	0x3f317180
 8006ddc:	3eaaaaab 	.word	0x3eaaaaab
 8006de0:	3e1cd04f 	.word	0x3e1cd04f
 8006de4:	3e178897 	.word	0x3e178897
 8006de8:	ffcf5c30 	.word	0xffcf5c30
 8006dec:	3e638e29 	.word	0x3e638e29
 8006df0:	3ecccccd 	.word	0x3ecccccd
 8006df4:	3e3a3325 	.word	0x3e3a3325
 8006df8:	3e924925 	.word	0x3e924925
 8006dfc:	3f2aaaab 	.word	0x3f2aaaab

08006e00 <_init>:
 8006e00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e02:	bf00      	nop
 8006e04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e06:	bc08      	pop	{r3}
 8006e08:	469e      	mov	lr, r3
 8006e0a:	4770      	bx	lr

08006e0c <_fini>:
 8006e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e0e:	bf00      	nop
 8006e10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e12:	bc08      	pop	{r3}
 8006e14:	469e      	mov	lr, r3
 8006e16:	4770      	bx	lr
