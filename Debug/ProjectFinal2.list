
ProjectFinal2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006304  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000132c  08006494  08006494  00007494  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077c0  080077c0  00009084  2**0
                  CONTENTS
  4 .ARM          00000008  080077c0  080077c0  000087c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077c8  080077c8  00009084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077c8  080077c8  000087c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080077cc  080077cc  000087cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  080077d0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009084  2**0
                  CONTENTS
 10 .bss          00000478  20000084  20000084  00009084  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200004fc  200004fc  00009084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015b22  00000000  00000000  000090b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002da3  00000000  00000000  0001ebd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001508  00000000  00000000  00021980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000106b  00000000  00000000  00022e88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000035a1  00000000  00000000  00023ef3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000191f5  00000000  00000000  00027494  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d646c  00000000  00000000  00040689  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00116af5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005ffc  00000000  00000000  00116b38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0011cb34  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800647c 	.word	0x0800647c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	0800647c 	.word	0x0800647c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b96a 	b.w	8000da8 <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	460c      	mov	r4, r1
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d14e      	bne.n	8000b96 <__udivmoddi4+0xaa>
 8000af8:	4694      	mov	ip, r2
 8000afa:	458c      	cmp	ip, r1
 8000afc:	4686      	mov	lr, r0
 8000afe:	fab2 f282 	clz	r2, r2
 8000b02:	d962      	bls.n	8000bca <__udivmoddi4+0xde>
 8000b04:	b14a      	cbz	r2, 8000b1a <__udivmoddi4+0x2e>
 8000b06:	f1c2 0320 	rsb	r3, r2, #32
 8000b0a:	4091      	lsls	r1, r2
 8000b0c:	fa20 f303 	lsr.w	r3, r0, r3
 8000b10:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b14:	4319      	orrs	r1, r3
 8000b16:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b1e:	fa1f f68c 	uxth.w	r6, ip
 8000b22:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b26:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b2a:	fb07 1114 	mls	r1, r7, r4, r1
 8000b2e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b32:	fb04 f106 	mul.w	r1, r4, r6
 8000b36:	4299      	cmp	r1, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x64>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b42:	f080 8112 	bcs.w	8000d6a <__udivmoddi4+0x27e>
 8000b46:	4299      	cmp	r1, r3
 8000b48:	f240 810f 	bls.w	8000d6a <__udivmoddi4+0x27e>
 8000b4c:	3c02      	subs	r4, #2
 8000b4e:	4463      	add	r3, ip
 8000b50:	1a59      	subs	r1, r3, r1
 8000b52:	fa1f f38e 	uxth.w	r3, lr
 8000b56:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b5a:	fb07 1110 	mls	r1, r7, r0, r1
 8000b5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b62:	fb00 f606 	mul.w	r6, r0, r6
 8000b66:	429e      	cmp	r6, r3
 8000b68:	d90a      	bls.n	8000b80 <__udivmoddi4+0x94>
 8000b6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b6e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b72:	f080 80fc 	bcs.w	8000d6e <__udivmoddi4+0x282>
 8000b76:	429e      	cmp	r6, r3
 8000b78:	f240 80f9 	bls.w	8000d6e <__udivmoddi4+0x282>
 8000b7c:	4463      	add	r3, ip
 8000b7e:	3802      	subs	r0, #2
 8000b80:	1b9b      	subs	r3, r3, r6
 8000b82:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b86:	2100      	movs	r1, #0
 8000b88:	b11d      	cbz	r5, 8000b92 <__udivmoddi4+0xa6>
 8000b8a:	40d3      	lsrs	r3, r2
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	e9c5 3200 	strd	r3, r2, [r5]
 8000b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b96:	428b      	cmp	r3, r1
 8000b98:	d905      	bls.n	8000ba6 <__udivmoddi4+0xba>
 8000b9a:	b10d      	cbz	r5, 8000ba0 <__udivmoddi4+0xb4>
 8000b9c:	e9c5 0100 	strd	r0, r1, [r5]
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	4608      	mov	r0, r1
 8000ba4:	e7f5      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000ba6:	fab3 f183 	clz	r1, r3
 8000baa:	2900      	cmp	r1, #0
 8000bac:	d146      	bne.n	8000c3c <__udivmoddi4+0x150>
 8000bae:	42a3      	cmp	r3, r4
 8000bb0:	d302      	bcc.n	8000bb8 <__udivmoddi4+0xcc>
 8000bb2:	4290      	cmp	r0, r2
 8000bb4:	f0c0 80f0 	bcc.w	8000d98 <__udivmoddi4+0x2ac>
 8000bb8:	1a86      	subs	r6, r0, r2
 8000bba:	eb64 0303 	sbc.w	r3, r4, r3
 8000bbe:	2001      	movs	r0, #1
 8000bc0:	2d00      	cmp	r5, #0
 8000bc2:	d0e6      	beq.n	8000b92 <__udivmoddi4+0xa6>
 8000bc4:	e9c5 6300 	strd	r6, r3, [r5]
 8000bc8:	e7e3      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000bca:	2a00      	cmp	r2, #0
 8000bcc:	f040 8090 	bne.w	8000cf0 <__udivmoddi4+0x204>
 8000bd0:	eba1 040c 	sub.w	r4, r1, ip
 8000bd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bd8:	fa1f f78c 	uxth.w	r7, ip
 8000bdc:	2101      	movs	r1, #1
 8000bde:	fbb4 f6f8 	udiv	r6, r4, r8
 8000be2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000be6:	fb08 4416 	mls	r4, r8, r6, r4
 8000bea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bee:	fb07 f006 	mul.w	r0, r7, r6
 8000bf2:	4298      	cmp	r0, r3
 8000bf4:	d908      	bls.n	8000c08 <__udivmoddi4+0x11c>
 8000bf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000bfa:	f106 34ff 	add.w	r4, r6, #4294967295
 8000bfe:	d202      	bcs.n	8000c06 <__udivmoddi4+0x11a>
 8000c00:	4298      	cmp	r0, r3
 8000c02:	f200 80cd 	bhi.w	8000da0 <__udivmoddi4+0x2b4>
 8000c06:	4626      	mov	r6, r4
 8000c08:	1a1c      	subs	r4, r3, r0
 8000c0a:	fa1f f38e 	uxth.w	r3, lr
 8000c0e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000c12:	fb08 4410 	mls	r4, r8, r0, r4
 8000c16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c1a:	fb00 f707 	mul.w	r7, r0, r7
 8000c1e:	429f      	cmp	r7, r3
 8000c20:	d908      	bls.n	8000c34 <__udivmoddi4+0x148>
 8000c22:	eb1c 0303 	adds.w	r3, ip, r3
 8000c26:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c2a:	d202      	bcs.n	8000c32 <__udivmoddi4+0x146>
 8000c2c:	429f      	cmp	r7, r3
 8000c2e:	f200 80b0 	bhi.w	8000d92 <__udivmoddi4+0x2a6>
 8000c32:	4620      	mov	r0, r4
 8000c34:	1bdb      	subs	r3, r3, r7
 8000c36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c3a:	e7a5      	b.n	8000b88 <__udivmoddi4+0x9c>
 8000c3c:	f1c1 0620 	rsb	r6, r1, #32
 8000c40:	408b      	lsls	r3, r1
 8000c42:	fa22 f706 	lsr.w	r7, r2, r6
 8000c46:	431f      	orrs	r7, r3
 8000c48:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c4c:	fa04 f301 	lsl.w	r3, r4, r1
 8000c50:	ea43 030c 	orr.w	r3, r3, ip
 8000c54:	40f4      	lsrs	r4, r6
 8000c56:	fa00 f801 	lsl.w	r8, r0, r1
 8000c5a:	0c38      	lsrs	r0, r7, #16
 8000c5c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c60:	fbb4 fef0 	udiv	lr, r4, r0
 8000c64:	fa1f fc87 	uxth.w	ip, r7
 8000c68:	fb00 441e 	mls	r4, r0, lr, r4
 8000c6c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c70:	fb0e f90c 	mul.w	r9, lr, ip
 8000c74:	45a1      	cmp	r9, r4
 8000c76:	fa02 f201 	lsl.w	r2, r2, r1
 8000c7a:	d90a      	bls.n	8000c92 <__udivmoddi4+0x1a6>
 8000c7c:	193c      	adds	r4, r7, r4
 8000c7e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c82:	f080 8084 	bcs.w	8000d8e <__udivmoddi4+0x2a2>
 8000c86:	45a1      	cmp	r9, r4
 8000c88:	f240 8081 	bls.w	8000d8e <__udivmoddi4+0x2a2>
 8000c8c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c90:	443c      	add	r4, r7
 8000c92:	eba4 0409 	sub.w	r4, r4, r9
 8000c96:	fa1f f983 	uxth.w	r9, r3
 8000c9a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c9e:	fb00 4413 	mls	r4, r0, r3, r4
 8000ca2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ca6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000caa:	45a4      	cmp	ip, r4
 8000cac:	d907      	bls.n	8000cbe <__udivmoddi4+0x1d2>
 8000cae:	193c      	adds	r4, r7, r4
 8000cb0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000cb4:	d267      	bcs.n	8000d86 <__udivmoddi4+0x29a>
 8000cb6:	45a4      	cmp	ip, r4
 8000cb8:	d965      	bls.n	8000d86 <__udivmoddi4+0x29a>
 8000cba:	3b02      	subs	r3, #2
 8000cbc:	443c      	add	r4, r7
 8000cbe:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000cc2:	fba0 9302 	umull	r9, r3, r0, r2
 8000cc6:	eba4 040c 	sub.w	r4, r4, ip
 8000cca:	429c      	cmp	r4, r3
 8000ccc:	46ce      	mov	lr, r9
 8000cce:	469c      	mov	ip, r3
 8000cd0:	d351      	bcc.n	8000d76 <__udivmoddi4+0x28a>
 8000cd2:	d04e      	beq.n	8000d72 <__udivmoddi4+0x286>
 8000cd4:	b155      	cbz	r5, 8000cec <__udivmoddi4+0x200>
 8000cd6:	ebb8 030e 	subs.w	r3, r8, lr
 8000cda:	eb64 040c 	sbc.w	r4, r4, ip
 8000cde:	fa04 f606 	lsl.w	r6, r4, r6
 8000ce2:	40cb      	lsrs	r3, r1
 8000ce4:	431e      	orrs	r6, r3
 8000ce6:	40cc      	lsrs	r4, r1
 8000ce8:	e9c5 6400 	strd	r6, r4, [r5]
 8000cec:	2100      	movs	r1, #0
 8000cee:	e750      	b.n	8000b92 <__udivmoddi4+0xa6>
 8000cf0:	f1c2 0320 	rsb	r3, r2, #32
 8000cf4:	fa20 f103 	lsr.w	r1, r0, r3
 8000cf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfc:	fa24 f303 	lsr.w	r3, r4, r3
 8000d00:	4094      	lsls	r4, r2
 8000d02:	430c      	orrs	r4, r1
 8000d04:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d08:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d0c:	fa1f f78c 	uxth.w	r7, ip
 8000d10:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d14:	fb08 3110 	mls	r1, r8, r0, r3
 8000d18:	0c23      	lsrs	r3, r4, #16
 8000d1a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d1e:	fb00 f107 	mul.w	r1, r0, r7
 8000d22:	4299      	cmp	r1, r3
 8000d24:	d908      	bls.n	8000d38 <__udivmoddi4+0x24c>
 8000d26:	eb1c 0303 	adds.w	r3, ip, r3
 8000d2a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d2e:	d22c      	bcs.n	8000d8a <__udivmoddi4+0x29e>
 8000d30:	4299      	cmp	r1, r3
 8000d32:	d92a      	bls.n	8000d8a <__udivmoddi4+0x29e>
 8000d34:	3802      	subs	r0, #2
 8000d36:	4463      	add	r3, ip
 8000d38:	1a5b      	subs	r3, r3, r1
 8000d3a:	b2a4      	uxth	r4, r4
 8000d3c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d40:	fb08 3311 	mls	r3, r8, r1, r3
 8000d44:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d48:	fb01 f307 	mul.w	r3, r1, r7
 8000d4c:	42a3      	cmp	r3, r4
 8000d4e:	d908      	bls.n	8000d62 <__udivmoddi4+0x276>
 8000d50:	eb1c 0404 	adds.w	r4, ip, r4
 8000d54:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d58:	d213      	bcs.n	8000d82 <__udivmoddi4+0x296>
 8000d5a:	42a3      	cmp	r3, r4
 8000d5c:	d911      	bls.n	8000d82 <__udivmoddi4+0x296>
 8000d5e:	3902      	subs	r1, #2
 8000d60:	4464      	add	r4, ip
 8000d62:	1ae4      	subs	r4, r4, r3
 8000d64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d68:	e739      	b.n	8000bde <__udivmoddi4+0xf2>
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	e6f0      	b.n	8000b50 <__udivmoddi4+0x64>
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e706      	b.n	8000b80 <__udivmoddi4+0x94>
 8000d72:	45c8      	cmp	r8, r9
 8000d74:	d2ae      	bcs.n	8000cd4 <__udivmoddi4+0x1e8>
 8000d76:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d7a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d7e:	3801      	subs	r0, #1
 8000d80:	e7a8      	b.n	8000cd4 <__udivmoddi4+0x1e8>
 8000d82:	4631      	mov	r1, r6
 8000d84:	e7ed      	b.n	8000d62 <__udivmoddi4+0x276>
 8000d86:	4603      	mov	r3, r0
 8000d88:	e799      	b.n	8000cbe <__udivmoddi4+0x1d2>
 8000d8a:	4630      	mov	r0, r6
 8000d8c:	e7d4      	b.n	8000d38 <__udivmoddi4+0x24c>
 8000d8e:	46d6      	mov	lr, sl
 8000d90:	e77f      	b.n	8000c92 <__udivmoddi4+0x1a6>
 8000d92:	4463      	add	r3, ip
 8000d94:	3802      	subs	r0, #2
 8000d96:	e74d      	b.n	8000c34 <__udivmoddi4+0x148>
 8000d98:	4606      	mov	r6, r0
 8000d9a:	4623      	mov	r3, r4
 8000d9c:	4608      	mov	r0, r1
 8000d9e:	e70f      	b.n	8000bc0 <__udivmoddi4+0xd4>
 8000da0:	3e02      	subs	r6, #2
 8000da2:	4463      	add	r3, ip
 8000da4:	e730      	b.n	8000c08 <__udivmoddi4+0x11c>
 8000da6:	bf00      	nop

08000da8 <__aeabi_idiv0>:
 8000da8:	4770      	bx	lr
 8000daa:	bf00      	nop

08000dac <setCalibrationMatrix>:
#include "calibrate.h"

int setCalibrationMatrix( POINT_T * displayPtr,
						  POINT_T * screenPtr,
                          MATRIX * matrixPtr)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b087      	sub	sp, #28
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]

    int  retValue = OK ;
 8000db8:	2300      	movs	r3, #0
 8000dba:	617b      	str	r3, [r7, #20]



    matrixPtr->Divider = ((screenPtr[0].x - screenPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) -
 8000dbc:	68bb      	ldr	r3, [r7, #8]
 8000dbe:	681a      	ldr	r2, [r3, #0]
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	3310      	adds	r3, #16
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	1ad3      	subs	r3, r2, r3
 8000dc8:	68ba      	ldr	r2, [r7, #8]
 8000dca:	3208      	adds	r2, #8
 8000dcc:	6851      	ldr	r1, [r2, #4]
 8000dce:	68ba      	ldr	r2, [r7, #8]
 8000dd0:	3210      	adds	r2, #16
 8000dd2:	6852      	ldr	r2, [r2, #4]
 8000dd4:	1a8a      	subs	r2, r1, r2
 8000dd6:	fb03 f202 	mul.w	r2, r3, r2
                         ((screenPtr[1].x - screenPtr[2].x) * (screenPtr[0].y - screenPtr[2].y)) ;
 8000dda:	68bb      	ldr	r3, [r7, #8]
 8000ddc:	3308      	adds	r3, #8
 8000dde:	6819      	ldr	r1, [r3, #0]
 8000de0:	68bb      	ldr	r3, [r7, #8]
 8000de2:	3310      	adds	r3, #16
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	1acb      	subs	r3, r1, r3
 8000de8:	68b9      	ldr	r1, [r7, #8]
 8000dea:	6848      	ldr	r0, [r1, #4]
 8000dec:	68b9      	ldr	r1, [r7, #8]
 8000dee:	3110      	adds	r1, #16
 8000df0:	6849      	ldr	r1, [r1, #4]
 8000df2:	1a41      	subs	r1, r0, r1
 8000df4:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->Divider = ((screenPtr[0].x - screenPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) -
 8000df8:	1ad2      	subs	r2, r2, r3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	619a      	str	r2, [r3, #24]

    if( matrixPtr->Divider == 0 )
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	699b      	ldr	r3, [r3, #24]
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d103      	bne.n	8000e0e <setCalibrationMatrix+0x62>
    {
        retValue = NOT_OK ;
 8000e06:	f04f 33ff 	mov.w	r3, #4294967295
 8000e0a:	617b      	str	r3, [r7, #20]
 8000e0c:	e105      	b.n	800101a <setCalibrationMatrix+0x26e>
    }
    else
    {
        matrixPtr->An = ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) -
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	681a      	ldr	r2, [r3, #0]
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	3310      	adds	r3, #16
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	1ad3      	subs	r3, r2, r3
 8000e1a:	68ba      	ldr	r2, [r7, #8]
 8000e1c:	3208      	adds	r2, #8
 8000e1e:	6851      	ldr	r1, [r2, #4]
 8000e20:	68ba      	ldr	r2, [r7, #8]
 8000e22:	3210      	adds	r2, #16
 8000e24:	6852      	ldr	r2, [r2, #4]
 8000e26:	1a8a      	subs	r2, r1, r2
 8000e28:	fb03 f202 	mul.w	r2, r3, r2
                        ((displayPtr[1].x - displayPtr[2].x) * (screenPtr[0].y - screenPtr[2].y)) ;
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	3308      	adds	r3, #8
 8000e30:	6819      	ldr	r1, [r3, #0]
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	3310      	adds	r3, #16
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	1acb      	subs	r3, r1, r3
 8000e3a:	68b9      	ldr	r1, [r7, #8]
 8000e3c:	6848      	ldr	r0, [r1, #4]
 8000e3e:	68b9      	ldr	r1, [r7, #8]
 8000e40:	3110      	adds	r1, #16
 8000e42:	6849      	ldr	r1, [r1, #4]
 8000e44:	1a41      	subs	r1, r0, r1
 8000e46:	fb01 f303 	mul.w	r3, r1, r3
        matrixPtr->An = ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) -
 8000e4a:	1ad2      	subs	r2, r2, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	601a      	str	r2, [r3, #0]

        matrixPtr->Bn = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].x - displayPtr[2].x)) -
 8000e50:	68bb      	ldr	r3, [r7, #8]
 8000e52:	681a      	ldr	r2, [r3, #0]
 8000e54:	68bb      	ldr	r3, [r7, #8]
 8000e56:	3310      	adds	r3, #16
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	1ad3      	subs	r3, r2, r3
 8000e5c:	68fa      	ldr	r2, [r7, #12]
 8000e5e:	3208      	adds	r2, #8
 8000e60:	6811      	ldr	r1, [r2, #0]
 8000e62:	68fa      	ldr	r2, [r7, #12]
 8000e64:	3210      	adds	r2, #16
 8000e66:	6812      	ldr	r2, [r2, #0]
 8000e68:	1a8a      	subs	r2, r1, r2
 8000e6a:	fb03 f202 	mul.w	r2, r3, r2
                        ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].x - screenPtr[2].x)) ;
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	6819      	ldr	r1, [r3, #0]
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	3310      	adds	r3, #16
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	1acb      	subs	r3, r1, r3
 8000e7a:	68b9      	ldr	r1, [r7, #8]
 8000e7c:	3108      	adds	r1, #8
 8000e7e:	6808      	ldr	r0, [r1, #0]
 8000e80:	68b9      	ldr	r1, [r7, #8]
 8000e82:	3110      	adds	r1, #16
 8000e84:	6809      	ldr	r1, [r1, #0]
 8000e86:	1a41      	subs	r1, r0, r1
 8000e88:	fb01 f303 	mul.w	r3, r1, r3
        matrixPtr->Bn = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].x - displayPtr[2].x)) -
 8000e8c:	1ad2      	subs	r2, r2, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	605a      	str	r2, [r3, #4]

        matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
 8000e92:	68bb      	ldr	r3, [r7, #8]
 8000e94:	3310      	adds	r3, #16
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	68fa      	ldr	r2, [r7, #12]
 8000e9a:	3208      	adds	r2, #8
 8000e9c:	6812      	ldr	r2, [r2, #0]
 8000e9e:	fb03 f202 	mul.w	r2, r3, r2
 8000ea2:	68bb      	ldr	r3, [r7, #8]
 8000ea4:	3308      	adds	r3, #8
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	68f9      	ldr	r1, [r7, #12]
 8000eaa:	3110      	adds	r1, #16
 8000eac:	6809      	ldr	r1, [r1, #0]
 8000eae:	fb01 f303 	mul.w	r3, r1, r3
 8000eb2:	1ad3      	subs	r3, r2, r3
 8000eb4:	68ba      	ldr	r2, [r7, #8]
 8000eb6:	6852      	ldr	r2, [r2, #4]
 8000eb8:	fb03 f202 	mul.w	r2, r3, r2
                        (screenPtr[0].x * displayPtr[2].x - screenPtr[2].x * displayPtr[0].x) * screenPtr[1].y +
 8000ebc:	68bb      	ldr	r3, [r7, #8]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	68f9      	ldr	r1, [r7, #12]
 8000ec2:	3110      	adds	r1, #16
 8000ec4:	6809      	ldr	r1, [r1, #0]
 8000ec6:	fb03 f101 	mul.w	r1, r3, r1
 8000eca:	68bb      	ldr	r3, [r7, #8]
 8000ecc:	3310      	adds	r3, #16
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	68f8      	ldr	r0, [r7, #12]
 8000ed2:	6800      	ldr	r0, [r0, #0]
 8000ed4:	fb00 f303 	mul.w	r3, r0, r3
 8000ed8:	1acb      	subs	r3, r1, r3
 8000eda:	68b9      	ldr	r1, [r7, #8]
 8000edc:	3108      	adds	r1, #8
 8000ede:	6849      	ldr	r1, [r1, #4]
 8000ee0:	fb01 f303 	mul.w	r3, r1, r3
        matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
 8000ee4:	441a      	add	r2, r3
                        (screenPtr[1].x * displayPtr[0].x - screenPtr[0].x * displayPtr[1].x) * screenPtr[2].y ;
 8000ee6:	68bb      	ldr	r3, [r7, #8]
 8000ee8:	3308      	adds	r3, #8
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	68f9      	ldr	r1, [r7, #12]
 8000eee:	6809      	ldr	r1, [r1, #0]
 8000ef0:	fb03 f101 	mul.w	r1, r3, r1
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	68f8      	ldr	r0, [r7, #12]
 8000efa:	3008      	adds	r0, #8
 8000efc:	6800      	ldr	r0, [r0, #0]
 8000efe:	fb00 f303 	mul.w	r3, r0, r3
 8000f02:	1acb      	subs	r3, r1, r3
 8000f04:	68b9      	ldr	r1, [r7, #8]
 8000f06:	3110      	adds	r1, #16
 8000f08:	6849      	ldr	r1, [r1, #4]
 8000f0a:	fb01 f303 	mul.w	r3, r1, r3
                        (screenPtr[0].x * displayPtr[2].x - screenPtr[2].x * displayPtr[0].x) * screenPtr[1].y +
 8000f0e:	441a      	add	r2, r3
        matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	609a      	str	r2, [r3, #8]

        matrixPtr->Dn = ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].y - screenPtr[2].y)) -
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	685a      	ldr	r2, [r3, #4]
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	3310      	adds	r3, #16
 8000f1c:	685b      	ldr	r3, [r3, #4]
 8000f1e:	1ad3      	subs	r3, r2, r3
 8000f20:	68ba      	ldr	r2, [r7, #8]
 8000f22:	3208      	adds	r2, #8
 8000f24:	6851      	ldr	r1, [r2, #4]
 8000f26:	68ba      	ldr	r2, [r7, #8]
 8000f28:	3210      	adds	r2, #16
 8000f2a:	6852      	ldr	r2, [r2, #4]
 8000f2c:	1a8a      	subs	r2, r1, r2
 8000f2e:	fb03 f202 	mul.w	r2, r3, r2
                        ((displayPtr[1].y - displayPtr[2].y) * (screenPtr[0].y - screenPtr[2].y)) ;
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	3308      	adds	r3, #8
 8000f36:	6859      	ldr	r1, [r3, #4]
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	3310      	adds	r3, #16
 8000f3c:	685b      	ldr	r3, [r3, #4]
 8000f3e:	1acb      	subs	r3, r1, r3
 8000f40:	68b9      	ldr	r1, [r7, #8]
 8000f42:	6848      	ldr	r0, [r1, #4]
 8000f44:	68b9      	ldr	r1, [r7, #8]
 8000f46:	3110      	adds	r1, #16
 8000f48:	6849      	ldr	r1, [r1, #4]
 8000f4a:	1a41      	subs	r1, r0, r1
 8000f4c:	fb01 f303 	mul.w	r3, r1, r3
        matrixPtr->Dn = ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].y - screenPtr[2].y)) -
 8000f50:	1ad2      	subs	r2, r2, r3
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	60da      	str	r2, [r3, #12]

        matrixPtr->En = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].y - displayPtr[2].y)) -
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	681a      	ldr	r2, [r3, #0]
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	3310      	adds	r3, #16
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	3208      	adds	r2, #8
 8000f66:	6851      	ldr	r1, [r2, #4]
 8000f68:	68fa      	ldr	r2, [r7, #12]
 8000f6a:	3210      	adds	r2, #16
 8000f6c:	6852      	ldr	r2, [r2, #4]
 8000f6e:	1a8a      	subs	r2, r1, r2
 8000f70:	fb03 f202 	mul.w	r2, r3, r2
                        ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].x - screenPtr[2].x)) ;
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	6859      	ldr	r1, [r3, #4]
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	3310      	adds	r3, #16
 8000f7c:	685b      	ldr	r3, [r3, #4]
 8000f7e:	1acb      	subs	r3, r1, r3
 8000f80:	68b9      	ldr	r1, [r7, #8]
 8000f82:	3108      	adds	r1, #8
 8000f84:	6808      	ldr	r0, [r1, #0]
 8000f86:	68b9      	ldr	r1, [r7, #8]
 8000f88:	3110      	adds	r1, #16
 8000f8a:	6809      	ldr	r1, [r1, #0]
 8000f8c:	1a41      	subs	r1, r0, r1
 8000f8e:	fb01 f303 	mul.w	r3, r1, r3
        matrixPtr->En = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].y - displayPtr[2].y)) -
 8000f92:	1ad2      	subs	r2, r2, r3
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	611a      	str	r2, [r3, #16]

        matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	3310      	adds	r3, #16
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	68fa      	ldr	r2, [r7, #12]
 8000fa0:	3208      	adds	r2, #8
 8000fa2:	6852      	ldr	r2, [r2, #4]
 8000fa4:	fb03 f202 	mul.w	r2, r3, r2
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	3308      	adds	r3, #8
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	68f9      	ldr	r1, [r7, #12]
 8000fb0:	3110      	adds	r1, #16
 8000fb2:	6849      	ldr	r1, [r1, #4]
 8000fb4:	fb01 f303 	mul.w	r3, r1, r3
 8000fb8:	1ad3      	subs	r3, r2, r3
 8000fba:	68ba      	ldr	r2, [r7, #8]
 8000fbc:	6852      	ldr	r2, [r2, #4]
 8000fbe:	fb03 f202 	mul.w	r2, r3, r2
                        (screenPtr[0].x * displayPtr[2].y - screenPtr[2].x * displayPtr[0].y) * screenPtr[1].y +
 8000fc2:	68bb      	ldr	r3, [r7, #8]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	68f9      	ldr	r1, [r7, #12]
 8000fc8:	3110      	adds	r1, #16
 8000fca:	6849      	ldr	r1, [r1, #4]
 8000fcc:	fb03 f101 	mul.w	r1, r3, r1
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	3310      	adds	r3, #16
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	68f8      	ldr	r0, [r7, #12]
 8000fd8:	6840      	ldr	r0, [r0, #4]
 8000fda:	fb00 f303 	mul.w	r3, r0, r3
 8000fde:	1acb      	subs	r3, r1, r3
 8000fe0:	68b9      	ldr	r1, [r7, #8]
 8000fe2:	3108      	adds	r1, #8
 8000fe4:	6849      	ldr	r1, [r1, #4]
 8000fe6:	fb01 f303 	mul.w	r3, r1, r3
        matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
 8000fea:	441a      	add	r2, r3
                        (screenPtr[1].x * displayPtr[0].y - screenPtr[0].x * displayPtr[1].y) * screenPtr[2].y ;
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	3308      	adds	r3, #8
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	68f9      	ldr	r1, [r7, #12]
 8000ff4:	6849      	ldr	r1, [r1, #4]
 8000ff6:	fb03 f101 	mul.w	r1, r3, r1
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	68f8      	ldr	r0, [r7, #12]
 8001000:	3008      	adds	r0, #8
 8001002:	6840      	ldr	r0, [r0, #4]
 8001004:	fb00 f303 	mul.w	r3, r0, r3
 8001008:	1acb      	subs	r3, r1, r3
 800100a:	68b9      	ldr	r1, [r7, #8]
 800100c:	3110      	adds	r1, #16
 800100e:	6849      	ldr	r1, [r1, #4]
 8001010:	fb01 f303 	mul.w	r3, r1, r3
                        (screenPtr[0].x * displayPtr[2].y - screenPtr[2].x * displayPtr[0].y) * screenPtr[1].y +
 8001014:	441a      	add	r2, r3
        matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	615a      	str	r2, [r3, #20]
    }

    return( retValue ) ;
 800101a:	697b      	ldr	r3, [r7, #20]

} /* end of setCalibrationMatrix() */
 800101c:	4618      	mov	r0, r3
 800101e:	371c      	adds	r7, #28
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <lcdInit>:
                                bool colorOrder,
                                bool horizontalRefreshOrder);


void lcdInit(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af02      	add	r7, sp, #8
  lcdPortraitConfig = lcdBuildMemoryAccessControlConfig(
 800102e:	2300      	movs	r3, #0
 8001030:	9301      	str	r3, [sp, #4]
 8001032:	2301      	movs	r3, #1
 8001034:	9300      	str	r3, [sp, #0]
 8001036:	2300      	movs	r3, #0
 8001038:	2200      	movs	r2, #0
 800103a:	2101      	movs	r1, #1
 800103c:	2000      	movs	r0, #0
 800103e:	f000 fc0b 	bl	8001858 <lcdBuildMemoryAccessControlConfig>
 8001042:	4603      	mov	r3, r0
 8001044:	461a      	mov	r2, r3
 8001046:	4bae      	ldr	r3, [pc, #696]	@ (8001300 <lcdInit+0x2d8>)
 8001048:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlNormalOrder,		// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeConfig = lcdBuildMemoryAccessControlConfig(
 800104a:	2300      	movs	r3, #0
 800104c:	9301      	str	r3, [sp, #4]
 800104e:	2301      	movs	r3, #1
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	2300      	movs	r3, #0
 8001054:	2201      	movs	r2, #1
 8001056:	2100      	movs	r1, #0
 8001058:	2000      	movs	r0, #0
 800105a:	f000 fbfd 	bl	8001858 <lcdBuildMemoryAccessControlConfig>
 800105e:	4603      	mov	r3, r0
 8001060:	461a      	mov	r2, r3
 8001062:	4ba8      	ldr	r3, [pc, #672]	@ (8001304 <lcdInit+0x2dc>)
 8001064:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdPortraitMirrorConfig = lcdBuildMemoryAccessControlConfig(
 8001066:	2300      	movs	r3, #0
 8001068:	9301      	str	r3, [sp, #4]
 800106a:	2301      	movs	r3, #1
 800106c:	9300      	str	r3, [sp, #0]
 800106e:	2300      	movs	r3, #0
 8001070:	2200      	movs	r2, #0
 8001072:	2100      	movs	r1, #0
 8001074:	2001      	movs	r0, #1
 8001076:	f000 fbef 	bl	8001858 <lcdBuildMemoryAccessControlConfig>
 800107a:	4603      	mov	r3, r0
 800107c:	461a      	mov	r2, r3
 800107e:	4ba2      	ldr	r3, [pc, #648]	@ (8001308 <lcdInit+0x2e0>)
 8001080:	701a      	strb	r2, [r3, #0]
		                                            MemoryAccessControlNormalOrder,		// rowColumnExchange
		                                            MemoryAccessControlNormalOrder,		// verticalRefreshOrder
		                                            MemoryAccessControlColorOrderBGR,	// colorOrder
		                                            MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeMirrorConfig = lcdBuildMemoryAccessControlConfig(
 8001082:	2300      	movs	r3, #0
 8001084:	9301      	str	r3, [sp, #4]
 8001086:	2301      	movs	r3, #1
 8001088:	9300      	str	r3, [sp, #0]
 800108a:	2300      	movs	r3, #0
 800108c:	2201      	movs	r2, #1
 800108e:	2101      	movs	r1, #1
 8001090:	2001      	movs	r0, #1
 8001092:	f000 fbe1 	bl	8001858 <lcdBuildMemoryAccessControlConfig>
 8001096:	4603      	mov	r3, r0
 8001098:	461a      	mov	r2, r3
 800109a:	4b9c      	ldr	r3, [pc, #624]	@ (800130c <lcdInit+0x2e4>)
 800109c:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdReset();
 800109e:	f000 fbb1 	bl	8001804 <lcdReset>

  lcdWriteCommand(ILI9341_DISPLAYOFF);
 80010a2:	2028      	movs	r0, #40	@ 0x28
 80010a4:	f000 fbb8 	bl	8001818 <lcdWriteCommand>

  lcdWriteCommand(0xCF);
 80010a8:	20cf      	movs	r0, #207	@ 0xcf
 80010aa:	f000 fbb5 	bl	8001818 <lcdWriteCommand>
  lcdWriteData(0x00);
 80010ae:	2000      	movs	r0, #0
 80010b0:	f000 fbc2 	bl	8001838 <lcdWriteData>
  lcdWriteData(0x83);
 80010b4:	2083      	movs	r0, #131	@ 0x83
 80010b6:	f000 fbbf 	bl	8001838 <lcdWriteData>
  lcdWriteData(0x30);
 80010ba:	2030      	movs	r0, #48	@ 0x30
 80010bc:	f000 fbbc 	bl	8001838 <lcdWriteData>

  lcdWriteCommand(0xED);
 80010c0:	20ed      	movs	r0, #237	@ 0xed
 80010c2:	f000 fba9 	bl	8001818 <lcdWriteCommand>
  lcdWriteData(0x64);
 80010c6:	2064      	movs	r0, #100	@ 0x64
 80010c8:	f000 fbb6 	bl	8001838 <lcdWriteData>
  lcdWriteData(0x03);
 80010cc:	2003      	movs	r0, #3
 80010ce:	f000 fbb3 	bl	8001838 <lcdWriteData>
  lcdWriteData(0x12);
 80010d2:	2012      	movs	r0, #18
 80010d4:	f000 fbb0 	bl	8001838 <lcdWriteData>
  lcdWriteData(0x81);
 80010d8:	2081      	movs	r0, #129	@ 0x81
 80010da:	f000 fbad 	bl	8001838 <lcdWriteData>

  lcdWriteCommand(0xE8);
 80010de:	20e8      	movs	r0, #232	@ 0xe8
 80010e0:	f000 fb9a 	bl	8001818 <lcdWriteCommand>
  lcdWriteData(0x85);
 80010e4:	2085      	movs	r0, #133	@ 0x85
 80010e6:	f000 fba7 	bl	8001838 <lcdWriteData>
  lcdWriteData(0x01);
 80010ea:	2001      	movs	r0, #1
 80010ec:	f000 fba4 	bl	8001838 <lcdWriteData>
  lcdWriteData(0x79);
 80010f0:	2079      	movs	r0, #121	@ 0x79
 80010f2:	f000 fba1 	bl	8001838 <lcdWriteData>

  lcdWriteCommand(0xCB);
 80010f6:	20cb      	movs	r0, #203	@ 0xcb
 80010f8:	f000 fb8e 	bl	8001818 <lcdWriteCommand>
  lcdWriteData(0x39);
 80010fc:	2039      	movs	r0, #57	@ 0x39
 80010fe:	f000 fb9b 	bl	8001838 <lcdWriteData>
  lcdWriteData(0x2C);
 8001102:	202c      	movs	r0, #44	@ 0x2c
 8001104:	f000 fb98 	bl	8001838 <lcdWriteData>
  lcdWriteData(0x00);
 8001108:	2000      	movs	r0, #0
 800110a:	f000 fb95 	bl	8001838 <lcdWriteData>
  lcdWriteData(0x34);
 800110e:	2034      	movs	r0, #52	@ 0x34
 8001110:	f000 fb92 	bl	8001838 <lcdWriteData>
  lcdWriteData(0x02);
 8001114:	2002      	movs	r0, #2
 8001116:	f000 fb8f 	bl	8001838 <lcdWriteData>

  lcdWriteCommand(0xF7);
 800111a:	20f7      	movs	r0, #247	@ 0xf7
 800111c:	f000 fb7c 	bl	8001818 <lcdWriteCommand>
  lcdWriteData(0x20);
 8001120:	2020      	movs	r0, #32
 8001122:	f000 fb89 	bl	8001838 <lcdWriteData>

  lcdWriteCommand(0xEA);
 8001126:	20ea      	movs	r0, #234	@ 0xea
 8001128:	f000 fb76 	bl	8001818 <lcdWriteCommand>
  lcdWriteData(0x00);
 800112c:	2000      	movs	r0, #0
 800112e:	f000 fb83 	bl	8001838 <lcdWriteData>
  lcdWriteData(0x00);
 8001132:	2000      	movs	r0, #0
 8001134:	f000 fb80 	bl	8001838 <lcdWriteData>

  lcdWriteCommand(ILI9341_POWERCONTROL1);
 8001138:	20c0      	movs	r0, #192	@ 0xc0
 800113a:	f000 fb6d 	bl	8001818 <lcdWriteCommand>
  lcdWriteData(0x26);
 800113e:	2026      	movs	r0, #38	@ 0x26
 8001140:	f000 fb7a 	bl	8001838 <lcdWriteData>

  lcdWriteCommand(ILI9341_POWERCONTROL2);
 8001144:	20c1      	movs	r0, #193	@ 0xc1
 8001146:	f000 fb67 	bl	8001818 <lcdWriteCommand>
  lcdWriteData(0x11);
 800114a:	2011      	movs	r0, #17
 800114c:	f000 fb74 	bl	8001838 <lcdWriteData>

  lcdWriteCommand(ILI9341_VCOMCONTROL1);
 8001150:	20c5      	movs	r0, #197	@ 0xc5
 8001152:	f000 fb61 	bl	8001818 <lcdWriteCommand>
  lcdWriteData(0x35);
 8001156:	2035      	movs	r0, #53	@ 0x35
 8001158:	f000 fb6e 	bl	8001838 <lcdWriteData>
  lcdWriteData(0x3E);
 800115c:	203e      	movs	r0, #62	@ 0x3e
 800115e:	f000 fb6b 	bl	8001838 <lcdWriteData>

  lcdWriteCommand(ILI9341_VCOMCONTROL2);
 8001162:	20c7      	movs	r0, #199	@ 0xc7
 8001164:	f000 fb58 	bl	8001818 <lcdWriteCommand>
  lcdWriteData(0xBE);
 8001168:	20be      	movs	r0, #190	@ 0xbe
 800116a:	f000 fb65 	bl	8001838 <lcdWriteData>

  lcdWriteCommand(ILI9341_MEMCONTROL);
 800116e:	2036      	movs	r0, #54	@ 0x36
 8001170:	f000 fb52 	bl	8001818 <lcdWriteCommand>
  lcdWriteData(lcdPortraitConfig);
 8001174:	4b62      	ldr	r3, [pc, #392]	@ (8001300 <lcdInit+0x2d8>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	4618      	mov	r0, r3
 800117a:	f000 fb5d 	bl	8001838 <lcdWriteData>

  lcdWriteCommand(ILI9341_PIXELFORMAT);
 800117e:	203a      	movs	r0, #58	@ 0x3a
 8001180:	f000 fb4a 	bl	8001818 <lcdWriteCommand>
  lcdWriteData(0x55);
 8001184:	2055      	movs	r0, #85	@ 0x55
 8001186:	f000 fb57 	bl	8001838 <lcdWriteData>

  lcdWriteCommand(ILI9341_FRAMECONTROLNORMAL);
 800118a:	20b1      	movs	r0, #177	@ 0xb1
 800118c:	f000 fb44 	bl	8001818 <lcdWriteCommand>
  lcdWriteData(0x00);
 8001190:	2000      	movs	r0, #0
 8001192:	f000 fb51 	bl	8001838 <lcdWriteData>
  lcdWriteData(0x1B);
 8001196:	201b      	movs	r0, #27
 8001198:	f000 fb4e 	bl	8001838 <lcdWriteData>

  lcdWriteCommand(0xF2);
 800119c:	20f2      	movs	r0, #242	@ 0xf2
 800119e:	f000 fb3b 	bl	8001818 <lcdWriteCommand>
  lcdWriteData(0x08);
 80011a2:	2008      	movs	r0, #8
 80011a4:	f000 fb48 	bl	8001838 <lcdWriteData>

  lcdWriteCommand(ILI9341_GAMMASET);
 80011a8:	2026      	movs	r0, #38	@ 0x26
 80011aa:	f000 fb35 	bl	8001818 <lcdWriteCommand>
  lcdWriteData(0x01);
 80011ae:	2001      	movs	r0, #1
 80011b0:	f000 fb42 	bl	8001838 <lcdWriteData>

  lcdWriteCommand(ILI9341_POSITIVEGAMMCORR);
 80011b4:	20e0      	movs	r0, #224	@ 0xe0
 80011b6:	f000 fb2f 	bl	8001818 <lcdWriteCommand>
  lcdWriteData(0x1F);
 80011ba:	201f      	movs	r0, #31
 80011bc:	f000 fb3c 	bl	8001838 <lcdWriteData>
  lcdWriteData(0x1A);
 80011c0:	201a      	movs	r0, #26
 80011c2:	f000 fb39 	bl	8001838 <lcdWriteData>
  lcdWriteData(0x18);
 80011c6:	2018      	movs	r0, #24
 80011c8:	f000 fb36 	bl	8001838 <lcdWriteData>
  lcdWriteData(0x0A);
 80011cc:	200a      	movs	r0, #10
 80011ce:	f000 fb33 	bl	8001838 <lcdWriteData>
  lcdWriteData(0x0F);
 80011d2:	200f      	movs	r0, #15
 80011d4:	f000 fb30 	bl	8001838 <lcdWriteData>
  lcdWriteData(0x06);
 80011d8:	2006      	movs	r0, #6
 80011da:	f000 fb2d 	bl	8001838 <lcdWriteData>
  lcdWriteData(0x45);
 80011de:	2045      	movs	r0, #69	@ 0x45
 80011e0:	f000 fb2a 	bl	8001838 <lcdWriteData>
  lcdWriteData(0x87);
 80011e4:	2087      	movs	r0, #135	@ 0x87
 80011e6:	f000 fb27 	bl	8001838 <lcdWriteData>
  lcdWriteData(0x32);
 80011ea:	2032      	movs	r0, #50	@ 0x32
 80011ec:	f000 fb24 	bl	8001838 <lcdWriteData>
  lcdWriteData(0x0A);
 80011f0:	200a      	movs	r0, #10
 80011f2:	f000 fb21 	bl	8001838 <lcdWriteData>
  lcdWriteData(0x07);
 80011f6:	2007      	movs	r0, #7
 80011f8:	f000 fb1e 	bl	8001838 <lcdWriteData>
  lcdWriteData(0x02);
 80011fc:	2002      	movs	r0, #2
 80011fe:	f000 fb1b 	bl	8001838 <lcdWriteData>
  lcdWriteData(0x07);
 8001202:	2007      	movs	r0, #7
 8001204:	f000 fb18 	bl	8001838 <lcdWriteData>
  lcdWriteData(0x05);
 8001208:	2005      	movs	r0, #5
 800120a:	f000 fb15 	bl	8001838 <lcdWriteData>
  lcdWriteData(0x00);
 800120e:	2000      	movs	r0, #0
 8001210:	f000 fb12 	bl	8001838 <lcdWriteData>

  lcdWriteCommand(ILI9341_NEGATIVEGAMMCORR);
 8001214:	20e1      	movs	r0, #225	@ 0xe1
 8001216:	f000 faff 	bl	8001818 <lcdWriteCommand>
  lcdWriteData(0x00);
 800121a:	2000      	movs	r0, #0
 800121c:	f000 fb0c 	bl	8001838 <lcdWriteData>
  lcdWriteData(0x25);
 8001220:	2025      	movs	r0, #37	@ 0x25
 8001222:	f000 fb09 	bl	8001838 <lcdWriteData>
  lcdWriteData(0x27);
 8001226:	2027      	movs	r0, #39	@ 0x27
 8001228:	f000 fb06 	bl	8001838 <lcdWriteData>
  lcdWriteData(0x05);
 800122c:	2005      	movs	r0, #5
 800122e:	f000 fb03 	bl	8001838 <lcdWriteData>
  lcdWriteData(0x10);
 8001232:	2010      	movs	r0, #16
 8001234:	f000 fb00 	bl	8001838 <lcdWriteData>
  lcdWriteData(0x09);
 8001238:	2009      	movs	r0, #9
 800123a:	f000 fafd 	bl	8001838 <lcdWriteData>
  lcdWriteData(0x3A);
 800123e:	203a      	movs	r0, #58	@ 0x3a
 8001240:	f000 fafa 	bl	8001838 <lcdWriteData>
  lcdWriteData(0x78);
 8001244:	2078      	movs	r0, #120	@ 0x78
 8001246:	f000 faf7 	bl	8001838 <lcdWriteData>
  lcdWriteData(0x4D);
 800124a:	204d      	movs	r0, #77	@ 0x4d
 800124c:	f000 faf4 	bl	8001838 <lcdWriteData>
  lcdWriteData(0x05);
 8001250:	2005      	movs	r0, #5
 8001252:	f000 faf1 	bl	8001838 <lcdWriteData>
  lcdWriteData(0x18);
 8001256:	2018      	movs	r0, #24
 8001258:	f000 faee 	bl	8001838 <lcdWriteData>
  lcdWriteData(0x0D);
 800125c:	200d      	movs	r0, #13
 800125e:	f000 faeb 	bl	8001838 <lcdWriteData>
  lcdWriteData(0x38);
 8001262:	2038      	movs	r0, #56	@ 0x38
 8001264:	f000 fae8 	bl	8001838 <lcdWriteData>
  lcdWriteData(0x3A);
 8001268:	203a      	movs	r0, #58	@ 0x3a
 800126a:	f000 fae5 	bl	8001838 <lcdWriteData>
  lcdWriteData(0x1F);
 800126e:	201f      	movs	r0, #31
 8001270:	f000 fae2 	bl	8001838 <lcdWriteData>

  lcdWriteCommand(ILI9341_COLADDRSET);
 8001274:	202a      	movs	r0, #42	@ 0x2a
 8001276:	f000 facf 	bl	8001818 <lcdWriteCommand>
  lcdWriteData(0x00);
 800127a:	2000      	movs	r0, #0
 800127c:	f000 fadc 	bl	8001838 <lcdWriteData>
  lcdWriteData(0x00);
 8001280:	2000      	movs	r0, #0
 8001282:	f000 fad9 	bl	8001838 <lcdWriteData>
  lcdWriteData(0x00);
 8001286:	2000      	movs	r0, #0
 8001288:	f000 fad6 	bl	8001838 <lcdWriteData>
  lcdWriteData(0xEF);
 800128c:	20ef      	movs	r0, #239	@ 0xef
 800128e:	f000 fad3 	bl	8001838 <lcdWriteData>

  lcdWriteCommand(ILI9341_PAGEADDRSET);
 8001292:	202b      	movs	r0, #43	@ 0x2b
 8001294:	f000 fac0 	bl	8001818 <lcdWriteCommand>
  lcdWriteData(0x00);
 8001298:	2000      	movs	r0, #0
 800129a:	f000 facd 	bl	8001838 <lcdWriteData>
  lcdWriteData(0x00);
 800129e:	2000      	movs	r0, #0
 80012a0:	f000 faca 	bl	8001838 <lcdWriteData>
  lcdWriteData(0x01);
 80012a4:	2001      	movs	r0, #1
 80012a6:	f000 fac7 	bl	8001838 <lcdWriteData>
  lcdWriteData(0x3F);
 80012aa:	203f      	movs	r0, #63	@ 0x3f
 80012ac:	f000 fac4 	bl	8001838 <lcdWriteData>

  lcdWriteCommand(ILI9341_ENTRYMODE);
 80012b0:	20b7      	movs	r0, #183	@ 0xb7
 80012b2:	f000 fab1 	bl	8001818 <lcdWriteCommand>
  lcdWriteData(0x07);
 80012b6:	2007      	movs	r0, #7
 80012b8:	f000 fabe 	bl	8001838 <lcdWriteData>

  lcdWriteCommand(ILI9341_DISPLAYFUNC);
 80012bc:	20b6      	movs	r0, #182	@ 0xb6
 80012be:	f000 faab 	bl	8001818 <lcdWriteCommand>
  lcdWriteData(0x0A);
 80012c2:	200a      	movs	r0, #10
 80012c4:	f000 fab8 	bl	8001838 <lcdWriteData>
  lcdWriteData(0x82);
 80012c8:	2082      	movs	r0, #130	@ 0x82
 80012ca:	f000 fab5 	bl	8001838 <lcdWriteData>
  lcdWriteData(0x27);
 80012ce:	2027      	movs	r0, #39	@ 0x27
 80012d0:	f000 fab2 	bl	8001838 <lcdWriteData>
  lcdWriteData(0x00);
 80012d4:	2000      	movs	r0, #0
 80012d6:	f000 faaf 	bl	8001838 <lcdWriteData>

  lcdWriteCommand(ILI9341_SLEEPOUT);
 80012da:	2011      	movs	r0, #17
 80012dc:	f000 fa9c 	bl	8001818 <lcdWriteCommand>
  HAL_Delay(100);
 80012e0:	2064      	movs	r0, #100	@ 0x64
 80012e2:	f001 fb77 	bl	80029d4 <HAL_Delay>
  lcdWriteCommand(ILI9341_DISPLAYON);
 80012e6:	2029      	movs	r0, #41	@ 0x29
 80012e8:	f000 fa96 	bl	8001818 <lcdWriteCommand>
  HAL_Delay(100);
 80012ec:	2064      	movs	r0, #100	@ 0x64
 80012ee:	f001 fb71 	bl	80029d4 <HAL_Delay>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 80012f2:	202c      	movs	r0, #44	@ 0x2c
 80012f4:	f000 fa90 	bl	8001818 <lcdWriteCommand>
}
 80012f8:	bf00      	nop
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	200000a4 	.word	0x200000a4
 8001304:	200000a5 	.word	0x200000a5
 8001308:	200000a6 	.word	0x200000a6
 800130c:	200000a7 	.word	0x200000a7

08001310 <lcdFillRGB>:
		}
	}
}

void lcdFillRGB(uint16_t color)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b084      	sub	sp, #16
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	80fb      	strh	r3, [r7, #6]
  lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 800131a:	4b11      	ldr	r3, [pc, #68]	@ (8001360 <lcdFillRGB+0x50>)
 800131c:	881b      	ldrh	r3, [r3, #0]
 800131e:	3b01      	subs	r3, #1
 8001320:	b29a      	uxth	r2, r3
 8001322:	4b0f      	ldr	r3, [pc, #60]	@ (8001360 <lcdFillRGB+0x50>)
 8001324:	885b      	ldrh	r3, [r3, #2]
 8001326:	3b01      	subs	r3, #1
 8001328:	b29b      	uxth	r3, r3
 800132a:	2100      	movs	r1, #0
 800132c:	2000      	movs	r0, #0
 800132e:	f000 fa1d 	bl	800176c <lcdSetWindow>
  int dimensions = lcdProperties.width * lcdProperties.height;
 8001332:	4b0b      	ldr	r3, [pc, #44]	@ (8001360 <lcdFillRGB+0x50>)
 8001334:	881b      	ldrh	r3, [r3, #0]
 8001336:	461a      	mov	r2, r3
 8001338:	4b09      	ldr	r3, [pc, #36]	@ (8001360 <lcdFillRGB+0x50>)
 800133a:	885b      	ldrh	r3, [r3, #2]
 800133c:	fb02 f303 	mul.w	r3, r2, r3
 8001340:	60fb      	str	r3, [r7, #12]
  while(dimensions--)
 8001342:	e003      	b.n	800134c <lcdFillRGB+0x3c>
  {
    lcdWriteData(color);
 8001344:	88fb      	ldrh	r3, [r7, #6]
 8001346:	4618      	mov	r0, r3
 8001348:	f000 fa76 	bl	8001838 <lcdWriteData>
  while(dimensions--)
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	1e5a      	subs	r2, r3, #1
 8001350:	60fa      	str	r2, [r7, #12]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d1f6      	bne.n	8001344 <lcdFillRGB+0x34>
  }
}
 8001356:	bf00      	nop
 8001358:	bf00      	nop
 800135a:	3710      	adds	r7, #16
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	20000010 	.word	0x20000010

08001364 <lcdDrawPixel>:
 * \param color    Color
 *
 * \return void
 */
void lcdDrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	80fb      	strh	r3, [r7, #6]
 800136e:	460b      	mov	r3, r1
 8001370:	80bb      	strh	r3, [r7, #4]
 8001372:	4613      	mov	r3, r2
 8001374:	807b      	strh	r3, [r7, #2]
    // Clip
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 8001376:	4b0c      	ldr	r3, [pc, #48]	@ (80013a8 <lcdDrawPixel+0x44>)
 8001378:	881b      	ldrh	r3, [r3, #0]
 800137a:	88fa      	ldrh	r2, [r7, #6]
 800137c:	429a      	cmp	r2, r3
 800137e:	d20f      	bcs.n	80013a0 <lcdDrawPixel+0x3c>
 8001380:	4b09      	ldr	r3, [pc, #36]	@ (80013a8 <lcdDrawPixel+0x44>)
 8001382:	885b      	ldrh	r3, [r3, #2]
 8001384:	88ba      	ldrh	r2, [r7, #4]
 8001386:	429a      	cmp	r2, r3
 8001388:	d20a      	bcs.n	80013a0 <lcdDrawPixel+0x3c>
        return;

    lcdSetWindow(x, y, x, y);
 800138a:	88bb      	ldrh	r3, [r7, #4]
 800138c:	88fa      	ldrh	r2, [r7, #6]
 800138e:	88b9      	ldrh	r1, [r7, #4]
 8001390:	88f8      	ldrh	r0, [r7, #6]
 8001392:	f000 f9eb 	bl	800176c <lcdSetWindow>
    lcdWriteData(color);
 8001396:	887b      	ldrh	r3, [r7, #2]
 8001398:	4618      	mov	r0, r3
 800139a:	f000 fa4d 	bl	8001838 <lcdWriteData>
 800139e:	e000      	b.n	80013a2 <lcdDrawPixel+0x3e>
        return;
 80013a0:	bf00      	nop
}
 80013a2:	3708      	adds	r7, #8
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bd80      	pop	{r7, pc}
 80013a8:	20000010 	.word	0x20000010

080013ac <lcdDrawChar>:
 * \param size		Character Size
 *
 * \return void
 */
void lcdDrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg)
{
 80013ac:	b590      	push	{r4, r7, lr}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	4604      	mov	r4, r0
 80013b4:	4608      	mov	r0, r1
 80013b6:	4611      	mov	r1, r2
 80013b8:	461a      	mov	r2, r3
 80013ba:	4623      	mov	r3, r4
 80013bc:	80fb      	strh	r3, [r7, #6]
 80013be:	4603      	mov	r3, r0
 80013c0:	80bb      	strh	r3, [r7, #4]
 80013c2:	460b      	mov	r3, r1
 80013c4:	70fb      	strb	r3, [r7, #3]
 80013c6:	4613      	mov	r3, r2
 80013c8:	803b      	strh	r3, [r7, #0]
	if ((x >= lcdProperties.width) || 			// Clip right
 80013ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ce:	4a4a      	ldr	r2, [pc, #296]	@ (80014f8 <lcdDrawChar+0x14c>)
 80013d0:	8812      	ldrh	r2, [r2, #0]
 80013d2:	4293      	cmp	r3, r2
 80013d4:	f280 808c 	bge.w	80014f0 <lcdDrawChar+0x144>
			(y >= lcdProperties.height) || 		// Clip bottom
 80013d8:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013dc:	4a46      	ldr	r2, [pc, #280]	@ (80014f8 <lcdDrawChar+0x14c>)
 80013de:	8852      	ldrh	r2, [r2, #2]
	if ((x >= lcdProperties.width) || 			// Clip right
 80013e0:	4293      	cmp	r3, r2
 80013e2:	f280 8085 	bge.w	80014f0 <lcdDrawChar+0x144>
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 80013e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ea:	4a44      	ldr	r2, [pc, #272]	@ (80014fc <lcdDrawChar+0x150>)
 80013ec:	6892      	ldr	r2, [r2, #8]
 80013ee:	8892      	ldrh	r2, [r2, #4]
 80013f0:	4413      	add	r3, r2
			(y >= lcdProperties.height) || 		// Clip bottom
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	db7c      	blt.n	80014f0 <lcdDrawChar+0x144>
			((y + lcdFont.pFont->Height) < 0))  // Clip top
 80013f6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80013fa:	4a40      	ldr	r2, [pc, #256]	@ (80014fc <lcdDrawChar+0x150>)
 80013fc:	6892      	ldr	r2, [r2, #8]
 80013fe:	88d2      	ldrh	r2, [r2, #6]
 8001400:	4413      	add	r3, r2
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 8001402:	2b00      	cmp	r3, #0
 8001404:	db74      	blt.n	80014f0 <lcdDrawChar+0x144>
		return;

	uint8_t fontCoeff = lcdFont.pFont->Height / 8;
 8001406:	4b3d      	ldr	r3, [pc, #244]	@ (80014fc <lcdDrawChar+0x150>)
 8001408:	689b      	ldr	r3, [r3, #8]
 800140a:	88db      	ldrh	r3, [r3, #6]
 800140c:	08db      	lsrs	r3, r3, #3
 800140e:	b29b      	uxth	r3, r3
 8001410:	72bb      	strb	r3, [r7, #10]
	uint8_t xP = 0;
 8001412:	2300      	movs	r3, #0
 8001414:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 8001416:	2300      	movs	r3, #0
 8001418:	73bb      	strb	r3, [r7, #14]
 800141a:	e061      	b.n	80014e0 <lcdDrawChar+0x134>
	{
		uint8_t line;

		for(uint8_t k = 0; k < fontCoeff; k++)
 800141c:	2300      	movs	r3, #0
 800141e:	733b      	strb	r3, [r7, #12]
 8001420:	e055      	b.n	80014ce <lcdDrawChar+0x122>
		{
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * fontCoeff) + (i * fontCoeff) + k];
 8001422:	4b36      	ldr	r3, [pc, #216]	@ (80014fc <lcdDrawChar+0x150>)
 8001424:	689b      	ldr	r3, [r3, #8]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	78fa      	ldrb	r2, [r7, #3]
 800142a:	3a20      	subs	r2, #32
 800142c:	4933      	ldr	r1, [pc, #204]	@ (80014fc <lcdDrawChar+0x150>)
 800142e:	6889      	ldr	r1, [r1, #8]
 8001430:	88c9      	ldrh	r1, [r1, #6]
 8001432:	fb01 f202 	mul.w	r2, r1, r2
 8001436:	7ab9      	ldrb	r1, [r7, #10]
 8001438:	fb02 f101 	mul.w	r1, r2, r1
 800143c:	7bba      	ldrb	r2, [r7, #14]
 800143e:	7ab8      	ldrb	r0, [r7, #10]
 8001440:	fb00 f202 	mul.w	r2, r0, r2
 8001444:	4411      	add	r1, r2
 8001446:	7b3a      	ldrb	r2, [r7, #12]
 8001448:	440a      	add	r2, r1
 800144a:	4413      	add	r3, r2
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	737b      	strb	r3, [r7, #13]

			for(uint8_t j = 0; j < 8; j++)
 8001450:	2300      	movs	r3, #0
 8001452:	72fb      	strb	r3, [r7, #11]
 8001454:	e032      	b.n	80014bc <lcdDrawChar+0x110>
			{
				if((line & 0x80) == 0x80)
 8001456:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800145a:	2b00      	cmp	r3, #0
 800145c:	da12      	bge.n	8001484 <lcdDrawChar+0xd8>
				{
					lcdDrawPixel(x + j + xP, y + i, color);
 800145e:	7afb      	ldrb	r3, [r7, #11]
 8001460:	b29a      	uxth	r2, r3
 8001462:	88fb      	ldrh	r3, [r7, #6]
 8001464:	4413      	add	r3, r2
 8001466:	b29a      	uxth	r2, r3
 8001468:	7bfb      	ldrb	r3, [r7, #15]
 800146a:	b29b      	uxth	r3, r3
 800146c:	4413      	add	r3, r2
 800146e:	b298      	uxth	r0, r3
 8001470:	7bbb      	ldrb	r3, [r7, #14]
 8001472:	b29a      	uxth	r2, r3
 8001474:	88bb      	ldrh	r3, [r7, #4]
 8001476:	4413      	add	r3, r2
 8001478:	b29b      	uxth	r3, r3
 800147a:	883a      	ldrh	r2, [r7, #0]
 800147c:	4619      	mov	r1, r3
 800147e:	f7ff ff71 	bl	8001364 <lcdDrawPixel>
 8001482:	e015      	b.n	80014b0 <lcdDrawChar+0x104>
				}
				else if (bg != color)
 8001484:	8c3a      	ldrh	r2, [r7, #32]
 8001486:	883b      	ldrh	r3, [r7, #0]
 8001488:	429a      	cmp	r2, r3
 800148a:	d011      	beq.n	80014b0 <lcdDrawChar+0x104>
				{
					lcdDrawPixel(x + j + xP, y + i, bg);
 800148c:	7afb      	ldrb	r3, [r7, #11]
 800148e:	b29a      	uxth	r2, r3
 8001490:	88fb      	ldrh	r3, [r7, #6]
 8001492:	4413      	add	r3, r2
 8001494:	b29a      	uxth	r2, r3
 8001496:	7bfb      	ldrb	r3, [r7, #15]
 8001498:	b29b      	uxth	r3, r3
 800149a:	4413      	add	r3, r2
 800149c:	b298      	uxth	r0, r3
 800149e:	7bbb      	ldrb	r3, [r7, #14]
 80014a0:	b29a      	uxth	r2, r3
 80014a2:	88bb      	ldrh	r3, [r7, #4]
 80014a4:	4413      	add	r3, r2
 80014a6:	b29b      	uxth	r3, r3
 80014a8:	8c3a      	ldrh	r2, [r7, #32]
 80014aa:	4619      	mov	r1, r3
 80014ac:	f7ff ff5a 	bl	8001364 <lcdDrawPixel>
				}
				line <<= 1;
 80014b0:	7b7b      	ldrb	r3, [r7, #13]
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	737b      	strb	r3, [r7, #13]
			for(uint8_t j = 0; j < 8; j++)
 80014b6:	7afb      	ldrb	r3, [r7, #11]
 80014b8:	3301      	adds	r3, #1
 80014ba:	72fb      	strb	r3, [r7, #11]
 80014bc:	7afb      	ldrb	r3, [r7, #11]
 80014be:	2b07      	cmp	r3, #7
 80014c0:	d9c9      	bls.n	8001456 <lcdDrawChar+0xaa>
			}

			xP += 8;
 80014c2:	7bfb      	ldrb	r3, [r7, #15]
 80014c4:	3308      	adds	r3, #8
 80014c6:	73fb      	strb	r3, [r7, #15]
		for(uint8_t k = 0; k < fontCoeff; k++)
 80014c8:	7b3b      	ldrb	r3, [r7, #12]
 80014ca:	3301      	adds	r3, #1
 80014cc:	733b      	strb	r3, [r7, #12]
 80014ce:	7b3a      	ldrb	r2, [r7, #12]
 80014d0:	7abb      	ldrb	r3, [r7, #10]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	d3a5      	bcc.n	8001422 <lcdDrawChar+0x76>
		}

		xP = 0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 80014da:	7bbb      	ldrb	r3, [r7, #14]
 80014dc:	3301      	adds	r3, #1
 80014de:	73bb      	strb	r3, [r7, #14]
 80014e0:	7bbb      	ldrb	r3, [r7, #14]
 80014e2:	b29a      	uxth	r2, r3
 80014e4:	4b05      	ldr	r3, [pc, #20]	@ (80014fc <lcdDrawChar+0x150>)
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	88db      	ldrh	r3, [r3, #6]
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d396      	bcc.n	800141c <lcdDrawChar+0x70>
 80014ee:	e000      	b.n	80014f2 <lcdDrawChar+0x146>
		return;
 80014f0:	bf00      	nop
	}
}
 80014f2:	3714      	adds	r7, #20
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd90      	pop	{r4, r7, pc}
 80014f8:	20000010 	.word	0x20000010
 80014fc:	20000018 	.word	0x20000018

08001500 <lcdPrintf>:
 * \param
 *
 * \return void
 */
void lcdPrintf(const char *fmt, ...)
{
 8001500:	b40f      	push	{r0, r1, r2, r3}
 8001502:	b590      	push	{r4, r7, lr}
 8001504:	b085      	sub	sp, #20
 8001506:	af02      	add	r7, sp, #8
	static char buf[256];
	char *p;
	va_list lst;

	va_start(lst, fmt);
 8001508:	f107 031c 	add.w	r3, r7, #28
 800150c:	603b      	str	r3, [r7, #0]
	vsprintf(buf, fmt, lst);
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	69b9      	ldr	r1, [r7, #24]
 8001512:	483d      	ldr	r0, [pc, #244]	@ (8001608 <lcdPrintf+0x108>)
 8001514:	f004 fc04 	bl	8005d20 <vsiprintf>
	va_end(lst);

	p = buf;
 8001518:	4b3b      	ldr	r3, [pc, #236]	@ (8001608 <lcdPrintf+0x108>)
 800151a:	607b      	str	r3, [r7, #4]
	while (*p)
 800151c:	e067      	b.n	80015ee <lcdPrintf+0xee>
	{
		if (*p == '\n')
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b0a      	cmp	r3, #10
 8001524:	d10c      	bne.n	8001540 <lcdPrintf+0x40>
		{
			cursorXY.y += lcdFont.pFont->Height;
 8001526:	4b39      	ldr	r3, [pc, #228]	@ (800160c <lcdPrintf+0x10c>)
 8001528:	885a      	ldrh	r2, [r3, #2]
 800152a:	4b39      	ldr	r3, [pc, #228]	@ (8001610 <lcdPrintf+0x110>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	88db      	ldrh	r3, [r3, #6]
 8001530:	4413      	add	r3, r2
 8001532:	b29a      	uxth	r2, r3
 8001534:	4b35      	ldr	r3, [pc, #212]	@ (800160c <lcdPrintf+0x10c>)
 8001536:	805a      	strh	r2, [r3, #2]
			cursorXY.x = 0;
 8001538:	4b34      	ldr	r3, [pc, #208]	@ (800160c <lcdPrintf+0x10c>)
 800153a:	2200      	movs	r2, #0
 800153c:	801a      	strh	r2, [r3, #0]
 800153e:	e04a      	b.n	80015d6 <lcdPrintf+0xd6>
		}
		else if (*p == '\r')
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	781b      	ldrb	r3, [r3, #0]
 8001544:	2b0d      	cmp	r3, #13
 8001546:	d046      	beq.n	80015d6 <lcdPrintf+0xd6>
		{
			// skip em
		}
		else if (*p == '\t')
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b09      	cmp	r3, #9
 800154e:	d10b      	bne.n	8001568 <lcdPrintf+0x68>
		{
			cursorXY.x += lcdFont.pFont->Width * 4;
 8001550:	4b2e      	ldr	r3, [pc, #184]	@ (800160c <lcdPrintf+0x10c>)
 8001552:	881a      	ldrh	r2, [r3, #0]
 8001554:	4b2e      	ldr	r3, [pc, #184]	@ (8001610 <lcdPrintf+0x110>)
 8001556:	689b      	ldr	r3, [r3, #8]
 8001558:	889b      	ldrh	r3, [r3, #4]
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	b29b      	uxth	r3, r3
 800155e:	4413      	add	r3, r2
 8001560:	b29a      	uxth	r2, r3
 8001562:	4b2a      	ldr	r3, [pc, #168]	@ (800160c <lcdPrintf+0x10c>)
 8001564:	801a      	strh	r2, [r3, #0]
 8001566:	e036      	b.n	80015d6 <lcdPrintf+0xd6>
		}
		else
		{
			lcdDrawChar(cursorXY.x, cursorXY.y, *p, lcdFont.TextColor, lcdFont.BackColor);
 8001568:	4b28      	ldr	r3, [pc, #160]	@ (800160c <lcdPrintf+0x10c>)
 800156a:	881b      	ldrh	r3, [r3, #0]
 800156c:	b218      	sxth	r0, r3
 800156e:	4b27      	ldr	r3, [pc, #156]	@ (800160c <lcdPrintf+0x10c>)
 8001570:	885b      	ldrh	r3, [r3, #2]
 8001572:	b219      	sxth	r1, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	781a      	ldrb	r2, [r3, #0]
 8001578:	4b25      	ldr	r3, [pc, #148]	@ (8001610 <lcdPrintf+0x110>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	b29c      	uxth	r4, r3
 800157e:	4b24      	ldr	r3, [pc, #144]	@ (8001610 <lcdPrintf+0x110>)
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	b29b      	uxth	r3, r3
 8001584:	9300      	str	r3, [sp, #0]
 8001586:	4623      	mov	r3, r4
 8001588:	f7ff ff10 	bl	80013ac <lcdDrawChar>
			cursorXY.x += lcdFont.pFont->Width;
 800158c:	4b1f      	ldr	r3, [pc, #124]	@ (800160c <lcdPrintf+0x10c>)
 800158e:	881a      	ldrh	r2, [r3, #0]
 8001590:	4b1f      	ldr	r3, [pc, #124]	@ (8001610 <lcdPrintf+0x110>)
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	889b      	ldrh	r3, [r3, #4]
 8001596:	4413      	add	r3, r2
 8001598:	b29a      	uxth	r2, r3
 800159a:	4b1c      	ldr	r3, [pc, #112]	@ (800160c <lcdPrintf+0x10c>)
 800159c:	801a      	strh	r2, [r3, #0]
			if (lcdFont.TextWrap && (cursorXY.x > (lcdProperties.width - lcdFont.pFont->Width)))
 800159e:	4b1c      	ldr	r3, [pc, #112]	@ (8001610 <lcdPrintf+0x110>)
 80015a0:	7b1b      	ldrb	r3, [r3, #12]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d017      	beq.n	80015d6 <lcdPrintf+0xd6>
 80015a6:	4b19      	ldr	r3, [pc, #100]	@ (800160c <lcdPrintf+0x10c>)
 80015a8:	881b      	ldrh	r3, [r3, #0]
 80015aa:	461a      	mov	r2, r3
 80015ac:	4b19      	ldr	r3, [pc, #100]	@ (8001614 <lcdPrintf+0x114>)
 80015ae:	881b      	ldrh	r3, [r3, #0]
 80015b0:	4619      	mov	r1, r3
 80015b2:	4b17      	ldr	r3, [pc, #92]	@ (8001610 <lcdPrintf+0x110>)
 80015b4:	689b      	ldr	r3, [r3, #8]
 80015b6:	889b      	ldrh	r3, [r3, #4]
 80015b8:	1acb      	subs	r3, r1, r3
 80015ba:	429a      	cmp	r2, r3
 80015bc:	dd0b      	ble.n	80015d6 <lcdPrintf+0xd6>
			{
				cursorXY.y += lcdFont.pFont->Height;
 80015be:	4b13      	ldr	r3, [pc, #76]	@ (800160c <lcdPrintf+0x10c>)
 80015c0:	885a      	ldrh	r2, [r3, #2]
 80015c2:	4b13      	ldr	r3, [pc, #76]	@ (8001610 <lcdPrintf+0x110>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	88db      	ldrh	r3, [r3, #6]
 80015c8:	4413      	add	r3, r2
 80015ca:	b29a      	uxth	r2, r3
 80015cc:	4b0f      	ldr	r3, [pc, #60]	@ (800160c <lcdPrintf+0x10c>)
 80015ce:	805a      	strh	r2, [r3, #2]
				cursorXY.x = 0;
 80015d0:	4b0e      	ldr	r3, [pc, #56]	@ (800160c <lcdPrintf+0x10c>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	3301      	adds	r3, #1
 80015da:	607b      	str	r3, [r7, #4]

		if (cursorXY.y >= lcdProperties.height)
 80015dc:	4b0b      	ldr	r3, [pc, #44]	@ (800160c <lcdPrintf+0x10c>)
 80015de:	885a      	ldrh	r2, [r3, #2]
 80015e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001614 <lcdPrintf+0x114>)
 80015e2:	885b      	ldrh	r3, [r3, #2]
 80015e4:	429a      	cmp	r2, r3
 80015e6:	d302      	bcc.n	80015ee <lcdPrintf+0xee>
		{
			cursorXY.y = 0;
 80015e8:	4b08      	ldr	r3, [pc, #32]	@ (800160c <lcdPrintf+0x10c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	805a      	strh	r2, [r3, #2]
	while (*p)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	781b      	ldrb	r3, [r3, #0]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d193      	bne.n	800151e <lcdPrintf+0x1e>
		}
	}
}
 80015f6:	bf00      	nop
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001602:	b004      	add	sp, #16
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	200000a8 	.word	0x200000a8
 800160c:	200000a0 	.word	0x200000a0
 8001610:	20000018 	.word	0x20000018
 8001614:	20000010 	.word	0x20000010

08001618 <lcdSetTextFont>:
 * \param font pointer font
 *
 * \return void
 */
void lcdSetTextFont(sFONT* font)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	lcdFont.pFont = font;
 8001620:	4a04      	ldr	r2, [pc, #16]	@ (8001634 <lcdSetTextFont+0x1c>)
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6093      	str	r3, [r2, #8]
}
 8001626:	bf00      	nop
 8001628:	370c      	adds	r7, #12
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	20000018 	.word	0x20000018

08001638 <lcdSetTextColor>:
 * \param b		Background color
 *
 * \return void
 */
void lcdSetTextColor(uint16_t c, uint16_t b)
{
 8001638:	b480      	push	{r7}
 800163a:	b083      	sub	sp, #12
 800163c:	af00      	add	r7, sp, #0
 800163e:	4603      	mov	r3, r0
 8001640:	460a      	mov	r2, r1
 8001642:	80fb      	strh	r3, [r7, #6]
 8001644:	4613      	mov	r3, r2
 8001646:	80bb      	strh	r3, [r7, #4]
	lcdFont.TextColor = c;
 8001648:	88fb      	ldrh	r3, [r7, #6]
 800164a:	4a05      	ldr	r2, [pc, #20]	@ (8001660 <lcdSetTextColor+0x28>)
 800164c:	6013      	str	r3, [r2, #0]
	lcdFont.BackColor = b;
 800164e:	88bb      	ldrh	r3, [r7, #4]
 8001650:	4a03      	ldr	r2, [pc, #12]	@ (8001660 <lcdSetTextColor+0x28>)
 8001652:	6053      	str	r3, [r2, #4]
}
 8001654:	bf00      	nop
 8001656:	370c      	adds	r7, #12
 8001658:	46bd      	mov	sp, r7
 800165a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165e:	4770      	bx	lr
 8001660:	20000018 	.word	0x20000018

08001664 <lcdSetOrientation>:
{
	lcdFont.TextWrap = w;
}

void lcdSetOrientation(lcdOrientationTypeDef value)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	71fb      	strb	r3, [r7, #7]
	lcdProperties.orientation = value;
 800166e:	4a2d      	ldr	r2, [pc, #180]	@ (8001724 <lcdSetOrientation+0xc0>)
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	7113      	strb	r3, [r2, #4]
	lcdWriteCommand(ILI9341_MEMCONTROL);
 8001674:	2036      	movs	r0, #54	@ 0x36
 8001676:	f000 f8cf 	bl	8001818 <lcdWriteCommand>

	switch (lcdProperties.orientation)
 800167a:	4b2a      	ldr	r3, [pc, #168]	@ (8001724 <lcdSetOrientation+0xc0>)
 800167c:	791b      	ldrb	r3, [r3, #4]
 800167e:	2b03      	cmp	r3, #3
 8001680:	d83e      	bhi.n	8001700 <lcdSetOrientation+0x9c>
 8001682:	a201      	add	r2, pc, #4	@ (adr r2, 8001688 <lcdSetOrientation+0x24>)
 8001684:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001688:	08001699 	.word	0x08001699
 800168c:	080016cd 	.word	0x080016cd
 8001690:	080016b3 	.word	0x080016b3
 8001694:	080016e7 	.word	0x080016e7
	{
		case LCD_ORIENTATION_PORTRAIT:
			lcdWriteData(lcdPortraitConfig);
 8001698:	4b23      	ldr	r3, [pc, #140]	@ (8001728 <lcdSetOrientation+0xc4>)
 800169a:	781b      	ldrb	r3, [r3, #0]
 800169c:	4618      	mov	r0, r3
 800169e:	f000 f8cb 	bl	8001838 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 80016a2:	4b20      	ldr	r3, [pc, #128]	@ (8001724 <lcdSetOrientation+0xc0>)
 80016a4:	22f0      	movs	r2, #240	@ 0xf0
 80016a6:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_HEIGHT;
 80016a8:	4b1e      	ldr	r3, [pc, #120]	@ (8001724 <lcdSetOrientation+0xc0>)
 80016aa:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80016ae:	805a      	strh	r2, [r3, #2]
			break;
 80016b0:	e027      	b.n	8001702 <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_PORTRAIT_MIRROR:
			lcdWriteData(lcdPortraitMirrorConfig);
 80016b2:	4b1e      	ldr	r3, [pc, #120]	@ (800172c <lcdSetOrientation+0xc8>)
 80016b4:	781b      	ldrb	r3, [r3, #0]
 80016b6:	4618      	mov	r0, r3
 80016b8:	f000 f8be 	bl	8001838 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 80016bc:	4b19      	ldr	r3, [pc, #100]	@ (8001724 <lcdSetOrientation+0xc0>)
 80016be:	22f0      	movs	r2, #240	@ 0xf0
 80016c0:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_HEIGHT;
 80016c2:	4b18      	ldr	r3, [pc, #96]	@ (8001724 <lcdSetOrientation+0xc0>)
 80016c4:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80016c8:	805a      	strh	r2, [r3, #2]
			break;
 80016ca:	e01a      	b.n	8001702 <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_LANDSCAPE:
			lcdWriteData(lcdLandscapeConfig);
 80016cc:	4b18      	ldr	r3, [pc, #96]	@ (8001730 <lcdSetOrientation+0xcc>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	4618      	mov	r0, r3
 80016d2:	f000 f8b1 	bl	8001838 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 80016d6:	4b13      	ldr	r3, [pc, #76]	@ (8001724 <lcdSetOrientation+0xc0>)
 80016d8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80016dc:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 80016de:	4b11      	ldr	r3, [pc, #68]	@ (8001724 <lcdSetOrientation+0xc0>)
 80016e0:	22f0      	movs	r2, #240	@ 0xf0
 80016e2:	805a      	strh	r2, [r3, #2]
			break;
 80016e4:	e00d      	b.n	8001702 <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_LANDSCAPE_MIRROR:
			lcdWriteData(lcdLandscapeMirrorConfig);
 80016e6:	4b13      	ldr	r3, [pc, #76]	@ (8001734 <lcdSetOrientation+0xd0>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f000 f8a4 	bl	8001838 <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 80016f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001724 <lcdSetOrientation+0xc0>)
 80016f2:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 80016f6:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 80016f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001724 <lcdSetOrientation+0xc0>)
 80016fa:	22f0      	movs	r2, #240	@ 0xf0
 80016fc:	805a      	strh	r2, [r3, #2]
			break;
 80016fe:	e000      	b.n	8001702 <lcdSetOrientation+0x9e>
		default:
			break;
 8001700:	bf00      	nop
	}

	//lcdWriteCommand(ILI9341_MEMORYWRITE);
	lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 8001702:	4b08      	ldr	r3, [pc, #32]	@ (8001724 <lcdSetOrientation+0xc0>)
 8001704:	881b      	ldrh	r3, [r3, #0]
 8001706:	3b01      	subs	r3, #1
 8001708:	b29a      	uxth	r2, r3
 800170a:	4b06      	ldr	r3, [pc, #24]	@ (8001724 <lcdSetOrientation+0xc0>)
 800170c:	885b      	ldrh	r3, [r3, #2]
 800170e:	3b01      	subs	r3, #1
 8001710:	b29b      	uxth	r3, r3
 8001712:	2100      	movs	r1, #0
 8001714:	2000      	movs	r0, #0
 8001716:	f000 f829 	bl	800176c <lcdSetWindow>
}
 800171a:	bf00      	nop
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	20000010 	.word	0x20000010
 8001728:	200000a4 	.word	0x200000a4
 800172c:	200000a6 	.word	0x200000a6
 8001730:	200000a5 	.word	0x200000a5
 8001734:	200000a7 	.word	0x200000a7

08001738 <lcdSetCursor>:

void lcdSetCursor(unsigned short x, unsigned short y)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	4603      	mov	r3, r0
 8001740:	460a      	mov	r2, r1
 8001742:	80fb      	strh	r3, [r7, #6]
 8001744:	4613      	mov	r3, r2
 8001746:	80bb      	strh	r3, [r7, #4]
	cursorXY.x = x;
 8001748:	4a07      	ldr	r2, [pc, #28]	@ (8001768 <lcdSetCursor+0x30>)
 800174a:	88fb      	ldrh	r3, [r7, #6]
 800174c:	8013      	strh	r3, [r2, #0]
	cursorXY.y = y;
 800174e:	4a06      	ldr	r2, [pc, #24]	@ (8001768 <lcdSetCursor+0x30>)
 8001750:	88bb      	ldrh	r3, [r7, #4]
 8001752:	8053      	strh	r3, [r2, #2]
	lcdSetWindow(x, y, x, y);
 8001754:	88bb      	ldrh	r3, [r7, #4]
 8001756:	88fa      	ldrh	r2, [r7, #6]
 8001758:	88b9      	ldrh	r1, [r7, #4]
 800175a:	88f8      	ldrh	r0, [r7, #6]
 800175c:	f000 f806 	bl	800176c <lcdSetWindow>
}
 8001760:	bf00      	nop
 8001762:	3708      	adds	r7, #8
 8001764:	46bd      	mov	sp, r7
 8001766:	bd80      	pop	{r7, pc}
 8001768:	200000a0 	.word	0x200000a0

0800176c <lcdSetWindow>:
 * \param y1         Rigth bottom window y-coordinate
 *
 * \return void
 */
void lcdSetWindow(unsigned short x0, unsigned short y0, unsigned short x1, unsigned short y1)
{
 800176c:	b590      	push	{r4, r7, lr}
 800176e:	b083      	sub	sp, #12
 8001770:	af00      	add	r7, sp, #0
 8001772:	4604      	mov	r4, r0
 8001774:	4608      	mov	r0, r1
 8001776:	4611      	mov	r1, r2
 8001778:	461a      	mov	r2, r3
 800177a:	4623      	mov	r3, r4
 800177c:	80fb      	strh	r3, [r7, #6]
 800177e:	4603      	mov	r3, r0
 8001780:	80bb      	strh	r3, [r7, #4]
 8001782:	460b      	mov	r3, r1
 8001784:	807b      	strh	r3, [r7, #2]
 8001786:	4613      	mov	r3, r2
 8001788:	803b      	strh	r3, [r7, #0]
  lcdWriteCommand(ILI9341_COLADDRSET);
 800178a:	202a      	movs	r0, #42	@ 0x2a
 800178c:	f000 f844 	bl	8001818 <lcdWriteCommand>
  lcdWriteData((x0 >> 8) & 0xFF);
 8001790:	88fb      	ldrh	r3, [r7, #6]
 8001792:	0a1b      	lsrs	r3, r3, #8
 8001794:	b29b      	uxth	r3, r3
 8001796:	4618      	mov	r0, r3
 8001798:	f000 f84e 	bl	8001838 <lcdWriteData>
  lcdWriteData(x0 & 0xFF);
 800179c:	88fb      	ldrh	r3, [r7, #6]
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	b29b      	uxth	r3, r3
 80017a2:	4618      	mov	r0, r3
 80017a4:	f000 f848 	bl	8001838 <lcdWriteData>
  lcdWriteData((x1 >> 8) & 0xFF);
 80017a8:	887b      	ldrh	r3, [r7, #2]
 80017aa:	0a1b      	lsrs	r3, r3, #8
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	4618      	mov	r0, r3
 80017b0:	f000 f842 	bl	8001838 <lcdWriteData>
  lcdWriteData(x1 & 0xFF);
 80017b4:	887b      	ldrh	r3, [r7, #2]
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	b29b      	uxth	r3, r3
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 f83c 	bl	8001838 <lcdWriteData>
  lcdWriteCommand(ILI9341_PAGEADDRSET);
 80017c0:	202b      	movs	r0, #43	@ 0x2b
 80017c2:	f000 f829 	bl	8001818 <lcdWriteCommand>
  lcdWriteData((y0 >> 8) & 0xFF);
 80017c6:	88bb      	ldrh	r3, [r7, #4]
 80017c8:	0a1b      	lsrs	r3, r3, #8
 80017ca:	b29b      	uxth	r3, r3
 80017cc:	4618      	mov	r0, r3
 80017ce:	f000 f833 	bl	8001838 <lcdWriteData>
  lcdWriteData(y0 & 0xFF);
 80017d2:	88bb      	ldrh	r3, [r7, #4]
 80017d4:	b2db      	uxtb	r3, r3
 80017d6:	b29b      	uxth	r3, r3
 80017d8:	4618      	mov	r0, r3
 80017da:	f000 f82d 	bl	8001838 <lcdWriteData>
  lcdWriteData((y1 >> 8) & 0xFF);
 80017de:	883b      	ldrh	r3, [r7, #0]
 80017e0:	0a1b      	lsrs	r3, r3, #8
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	4618      	mov	r0, r3
 80017e6:	f000 f827 	bl	8001838 <lcdWriteData>
  lcdWriteData(y1 & 0xFF);
 80017ea:	883b      	ldrh	r3, [r7, #0]
 80017ec:	b2db      	uxtb	r3, r3
 80017ee:	b29b      	uxth	r3, r3
 80017f0:	4618      	mov	r0, r3
 80017f2:	f000 f821 	bl	8001838 <lcdWriteData>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 80017f6:	202c      	movs	r0, #44	@ 0x2c
 80017f8:	f000 f80e 	bl	8001818 <lcdWriteCommand>
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	bd90      	pop	{r4, r7, pc}

08001804 <lcdReset>:
  }
  while (i < dataLength);
}

static void lcdReset(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
	lcdWriteCommand(ILI9341_SOFTRESET);
 8001808:	2001      	movs	r0, #1
 800180a:	f000 f805 	bl	8001818 <lcdWriteCommand>
	HAL_Delay(50);
 800180e:	2032      	movs	r0, #50	@ 0x32
 8001810:	f001 f8e0 	bl	80029d4 <HAL_Delay>
}
 8001814:	bf00      	nop
 8001816:	bd80      	pop	{r7, pc}

08001818 <lcdWriteCommand>:

// Write an 8 bit command to the IC driver
static void lcdWriteCommand(unsigned char command)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	71fb      	strb	r3, [r7, #7]
	LCD_CmdWrite(command);
 8001822:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 8001826:	79fa      	ldrb	r2, [r7, #7]
 8001828:	b292      	uxth	r2, r2
 800182a:	801a      	strh	r2, [r3, #0]
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <lcdWriteData>:

// Write an 16 bit data word to the IC driver
static void lcdWriteData(unsigned short data)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	80fb      	strh	r3, [r7, #6]
	LCD_DataWrite(data);
 8001842:	4a04      	ldr	r2, [pc, #16]	@ (8001854 <lcdWriteData+0x1c>)
 8001844:	88fb      	ldrh	r3, [r7, #6]
 8001846:	8013      	strh	r3, [r2, #0]
}
 8001848:	bf00      	nop
 800184a:	370c      	adds	r7, #12
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	60080000 	.word	0x60080000

08001858 <lcdBuildMemoryAccessControlConfig>:
                        bool columnAddressOrder,
                        bool rowColumnExchange,
                        bool verticalRefreshOrder,
                        bool colorOrder,
                        bool horizontalRefreshOrder)
{
 8001858:	b490      	push	{r4, r7}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	4604      	mov	r4, r0
 8001860:	4608      	mov	r0, r1
 8001862:	4611      	mov	r1, r2
 8001864:	461a      	mov	r2, r3
 8001866:	4623      	mov	r3, r4
 8001868:	71fb      	strb	r3, [r7, #7]
 800186a:	4603      	mov	r3, r0
 800186c:	71bb      	strb	r3, [r7, #6]
 800186e:	460b      	mov	r3, r1
 8001870:	717b      	strb	r3, [r7, #5]
 8001872:	4613      	mov	r3, r2
 8001874:	713b      	strb	r3, [r7, #4]
  unsigned char value 				= 0;
 8001876:	2300      	movs	r3, #0
 8001878:	73fb      	strb	r3, [r7, #15]
  if(horizontalRefreshOrder) value 	|= ILI9341_MADCTL_MH;
 800187a:	7f3b      	ldrb	r3, [r7, #28]
 800187c:	2b00      	cmp	r3, #0
 800187e:	d003      	beq.n	8001888 <lcdBuildMemoryAccessControlConfig+0x30>
 8001880:	7bfb      	ldrb	r3, [r7, #15]
 8001882:	f043 0304 	orr.w	r3, r3, #4
 8001886:	73fb      	strb	r3, [r7, #15]
  if(colorOrder) value 				|= ILI9341_MADCTL_BGR;
 8001888:	7e3b      	ldrb	r3, [r7, #24]
 800188a:	2b00      	cmp	r3, #0
 800188c:	d003      	beq.n	8001896 <lcdBuildMemoryAccessControlConfig+0x3e>
 800188e:	7bfb      	ldrb	r3, [r7, #15]
 8001890:	f043 0308 	orr.w	r3, r3, #8
 8001894:	73fb      	strb	r3, [r7, #15]
  if(verticalRefreshOrder) value 	|= ILI9341_MADCTL_ML;
 8001896:	793b      	ldrb	r3, [r7, #4]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d003      	beq.n	80018a4 <lcdBuildMemoryAccessControlConfig+0x4c>
 800189c:	7bfb      	ldrb	r3, [r7, #15]
 800189e:	f043 0310 	orr.w	r3, r3, #16
 80018a2:	73fb      	strb	r3, [r7, #15]
  if(rowColumnExchange) value 		|= ILI9341_MADCTL_MV;
 80018a4:	797b      	ldrb	r3, [r7, #5]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d003      	beq.n	80018b2 <lcdBuildMemoryAccessControlConfig+0x5a>
 80018aa:	7bfb      	ldrb	r3, [r7, #15]
 80018ac:	f043 0320 	orr.w	r3, r3, #32
 80018b0:	73fb      	strb	r3, [r7, #15]
  if(columnAddressOrder) value 		|= ILI9341_MADCTL_MX;
 80018b2:	79bb      	ldrb	r3, [r7, #6]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d003      	beq.n	80018c0 <lcdBuildMemoryAccessControlConfig+0x68>
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
 80018ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80018be:	73fb      	strb	r3, [r7, #15]
  if(rowAddressOrder) value 		|= ILI9341_MADCTL_MY;
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d003      	beq.n	80018ce <lcdBuildMemoryAccessControlConfig+0x76>
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
 80018c8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80018cc:	73fb      	strb	r3, [r7, #15]
  return value;
 80018ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc90      	pop	{r4, r7}
 80018d8:	4770      	bx	lr
	...

080018dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b082      	sub	sp, #8
 80018e0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018e2:	f001 f805 	bl	80028f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018e6:	f000 f84b 	bl	8001980 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018ea:	f000 f98f 	bl	8001c0c <MX_GPIO_Init>
  MX_FSMC_Init();
 80018ee:	f000 fa2d 	bl	8001d4c <MX_FSMC_Init>
  MX_USART1_UART_Init();
 80018f2:	f000 f961 	bl	8001bb8 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 80018f6:	f000 f8db 	bl	8001ab0 <MX_SPI2_Init>
  MX_TIM2_Init();
 80018fa:	f000 f90f 	bl	8001b1c <MX_TIM2_Init>
  MX_I2C1_Init();
 80018fe:	f000 f8a9 	bl	8001a54 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  //-----------------------------

  LCD_BL_ON();
 8001902:	2201      	movs	r2, #1
 8001904:	2102      	movs	r1, #2
 8001906:	481a      	ldr	r0, [pc, #104]	@ (8001970 <main+0x94>)
 8001908:	f001 fb36 	bl	8002f78 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim2);
 800190c:	4819      	ldr	r0, [pc, #100]	@ (8001974 <main+0x98>)
 800190e:	f003 f917 	bl	8004b40 <HAL_TIM_Base_Start_IT>
  TouchCalibrate();
 8001912:	f000 ff95 	bl	8002840 <TouchCalibrate>

  lcdInit();
 8001916:	f7ff fb87 	bl	8001028 <lcdInit>
  int i = 2;
 800191a:	2302      	movs	r3, #2
 800191c:	607b      	str	r3, [r7, #4]

  lcdSetOrientation(i%4);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	425a      	negs	r2, r3
 8001922:	f003 0303 	and.w	r3, r3, #3
 8001926:	f002 0203 	and.w	r2, r2, #3
 800192a:	bf58      	it	pl
 800192c:	4253      	negpl	r3, r2
 800192e:	b2db      	uxtb	r3, r3
 8001930:	4618      	mov	r0, r3
 8001932:	f7ff fe97 	bl	8001664 <lcdSetOrientation>
  lcdFillRGB(COLOR_BLACK);
 8001936:	2000      	movs	r0, #0
 8001938:	f7ff fcea 	bl	8001310 <lcdFillRGB>
//	  lcdSetCursor(5, 5);
//      lcdPrintf("MAX30100 not found\n");
//      HAL_Delay(3000);
//  }

  MAX30100_Init(&hi2c1, &huart1);
 800193c:	490e      	ldr	r1, [pc, #56]	@ (8001978 <main+0x9c>)
 800193e:	480f      	ldr	r0, [pc, #60]	@ (800197c <main+0xa0>)
 8001940:	f000 fab0 	bl	8001ea4 <MAX30100_Init>
  MAX30100_SetSpO2SampleRate(MAX30100_SPO2SR_DEFAULT);
 8001944:	2001      	movs	r0, #1
 8001946:	f000 fbdf 	bl	8002108 <MAX30100_SetSpO2SampleRate>
  MAX30100_SetLEDPulseWidth(MAX30100_LEDPW_DEFAULT);
 800194a:	2003      	movs	r0, #3
 800194c:	f000 fbfd 	bl	800214a <MAX30100_SetLEDPulseWidth>
  MAX30100_SetLEDCurrent(MAX30100_LEDCURRENT_DEFAULT, MAX30100_LEDCURRENT_DEFAULT);
 8001950:	210f      	movs	r1, #15
 8001952:	200f      	movs	r0, #15
 8001954:	f000 fc1a 	bl	800218c <MAX30100_SetLEDCurrent>
  MAX30100_SetMode(MAX30100_SPO2_MODE);
 8001958:	2003      	movs	r0, #3
 800195a:	f000 fb89 	bl	8002070 <MAX30100_SetMode>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //RunProgram();
	  Max30100();
 800195e:	f000 fa79 	bl	8001e54 <Max30100>

	  HAL_Delay(2000);
 8001962:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001966:	f001 f835 	bl	80029d4 <HAL_Delay>
	  Max30100();
 800196a:	bf00      	nop
 800196c:	e7f7      	b.n	800195e <main+0x82>
 800196e:	bf00      	nop
 8001970:	40020400 	.word	0x40020400
 8001974:	20000254 	.word	0x20000254
 8001978:	2000029c 	.word	0x2000029c
 800197c:	200001a8 	.word	0x200001a8

08001980 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b094      	sub	sp, #80	@ 0x50
 8001984:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001986:	f107 0320 	add.w	r3, r7, #32
 800198a:	2230      	movs	r2, #48	@ 0x30
 800198c:	2100      	movs	r1, #0
 800198e:	4618      	mov	r0, r3
 8001990:	f004 f9d0 	bl	8005d34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001994:	f107 030c 	add.w	r3, r7, #12
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]
 80019a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019a4:	2300      	movs	r3, #0
 80019a6:	60bb      	str	r3, [r7, #8]
 80019a8:	4b28      	ldr	r3, [pc, #160]	@ (8001a4c <SystemClock_Config+0xcc>)
 80019aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ac:	4a27      	ldr	r2, [pc, #156]	@ (8001a4c <SystemClock_Config+0xcc>)
 80019ae:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019b2:	6413      	str	r3, [r2, #64]	@ 0x40
 80019b4:	4b25      	ldr	r3, [pc, #148]	@ (8001a4c <SystemClock_Config+0xcc>)
 80019b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019bc:	60bb      	str	r3, [r7, #8]
 80019be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019c0:	2300      	movs	r3, #0
 80019c2:	607b      	str	r3, [r7, #4]
 80019c4:	4b22      	ldr	r3, [pc, #136]	@ (8001a50 <SystemClock_Config+0xd0>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a21      	ldr	r2, [pc, #132]	@ (8001a50 <SystemClock_Config+0xd0>)
 80019ca:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019ce:	6013      	str	r3, [r2, #0]
 80019d0:	4b1f      	ldr	r3, [pc, #124]	@ (8001a50 <SystemClock_Config+0xd0>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019d8:	607b      	str	r3, [r7, #4]
 80019da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019dc:	2301      	movs	r3, #1
 80019de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80019e0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80019e4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019e6:	2302      	movs	r3, #2
 80019e8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019ea:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80019ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80019f0:	2304      	movs	r3, #4
 80019f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80019f4:	23a8      	movs	r3, #168	@ 0xa8
 80019f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019f8:	2302      	movs	r3, #2
 80019fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80019fc:	2304      	movs	r3, #4
 80019fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a00:	f107 0320 	add.w	r3, r7, #32
 8001a04:	4618      	mov	r0, r3
 8001a06:	f002 fae3 	bl	8003fd0 <HAL_RCC_OscConfig>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a10:	f000 fa42 	bl	8001e98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a14:	230f      	movs	r3, #15
 8001a16:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a20:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001a24:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a2a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a2c:	f107 030c 	add.w	r3, r7, #12
 8001a30:	2105      	movs	r1, #5
 8001a32:	4618      	mov	r0, r3
 8001a34:	f002 fd44 	bl	80044c0 <HAL_RCC_ClockConfig>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001a3e:	f000 fa2b 	bl	8001e98 <Error_Handler>
  }
}
 8001a42:	bf00      	nop
 8001a44:	3750      	adds	r7, #80	@ 0x50
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bd80      	pop	{r7, pc}
 8001a4a:	bf00      	nop
 8001a4c:	40023800 	.word	0x40023800
 8001a50:	40007000 	.word	0x40007000

08001a54 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001a58:	4b12      	ldr	r3, [pc, #72]	@ (8001aa4 <MX_I2C1_Init+0x50>)
 8001a5a:	4a13      	ldr	r2, [pc, #76]	@ (8001aa8 <MX_I2C1_Init+0x54>)
 8001a5c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001a5e:	4b11      	ldr	r3, [pc, #68]	@ (8001aa4 <MX_I2C1_Init+0x50>)
 8001a60:	4a12      	ldr	r2, [pc, #72]	@ (8001aac <MX_I2C1_Init+0x58>)
 8001a62:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a64:	4b0f      	ldr	r3, [pc, #60]	@ (8001aa4 <MX_I2C1_Init+0x50>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa4 <MX_I2C1_Init+0x50>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a70:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa4 <MX_I2C1_Init+0x50>)
 8001a72:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a76:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a78:	4b0a      	ldr	r3, [pc, #40]	@ (8001aa4 <MX_I2C1_Init+0x50>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001a7e:	4b09      	ldr	r3, [pc, #36]	@ (8001aa4 <MX_I2C1_Init+0x50>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a84:	4b07      	ldr	r3, [pc, #28]	@ (8001aa4 <MX_I2C1_Init+0x50>)
 8001a86:	2200      	movs	r2, #0
 8001a88:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a8a:	4b06      	ldr	r3, [pc, #24]	@ (8001aa4 <MX_I2C1_Init+0x50>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a90:	4804      	ldr	r0, [pc, #16]	@ (8001aa4 <MX_I2C1_Init+0x50>)
 8001a92:	f001 faa3 	bl	8002fdc <HAL_I2C_Init>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a9c:	f000 f9fc 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001aa0:	bf00      	nop
 8001aa2:	bd80      	pop	{r7, pc}
 8001aa4:	200001a8 	.word	0x200001a8
 8001aa8:	40005400 	.word	0x40005400
 8001aac:	00061a80 	.word	0x00061a80

08001ab0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001ab4:	4b17      	ldr	r3, [pc, #92]	@ (8001b14 <MX_SPI2_Init+0x64>)
 8001ab6:	4a18      	ldr	r2, [pc, #96]	@ (8001b18 <MX_SPI2_Init+0x68>)
 8001ab8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001aba:	4b16      	ldr	r3, [pc, #88]	@ (8001b14 <MX_SPI2_Init+0x64>)
 8001abc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001ac0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001ac2:	4b14      	ldr	r3, [pc, #80]	@ (8001b14 <MX_SPI2_Init+0x64>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ac8:	4b12      	ldr	r3, [pc, #72]	@ (8001b14 <MX_SPI2_Init+0x64>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ace:	4b11      	ldr	r3, [pc, #68]	@ (8001b14 <MX_SPI2_Init+0x64>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8001b14 <MX_SPI2_Init+0x64>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001ada:	4b0e      	ldr	r3, [pc, #56]	@ (8001b14 <MX_SPI2_Init+0x64>)
 8001adc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001ae0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001ae2:	4b0c      	ldr	r3, [pc, #48]	@ (8001b14 <MX_SPI2_Init+0x64>)
 8001ae4:	2228      	movs	r2, #40	@ 0x28
 8001ae6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ae8:	4b0a      	ldr	r3, [pc, #40]	@ (8001b14 <MX_SPI2_Init+0x64>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001aee:	4b09      	ldr	r3, [pc, #36]	@ (8001b14 <MX_SPI2_Init+0x64>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001af4:	4b07      	ldr	r3, [pc, #28]	@ (8001b14 <MX_SPI2_Init+0x64>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001afa:	4b06      	ldr	r3, [pc, #24]	@ (8001b14 <MX_SPI2_Init+0x64>)
 8001afc:	220a      	movs	r2, #10
 8001afe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001b00:	4804      	ldr	r0, [pc, #16]	@ (8001b14 <MX_SPI2_Init+0x64>)
 8001b02:	f002 fefd 	bl	8004900 <HAL_SPI_Init>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001b0c:	f000 f9c4 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001b10:	bf00      	nop
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	200001fc 	.word	0x200001fc
 8001b18:	40003800 	.word	0x40003800

08001b1c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b22:	f107 0308 	add.w	r3, r7, #8
 8001b26:	2200      	movs	r2, #0
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	605a      	str	r2, [r3, #4]
 8001b2c:	609a      	str	r2, [r3, #8]
 8001b2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b30:	463b      	mov	r3, r7
 8001b32:	2200      	movs	r2, #0
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b38:	4b1e      	ldr	r3, [pc, #120]	@ (8001bb4 <MX_TIM2_Init+0x98>)
 8001b3a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b3e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8499;
 8001b40:	4b1c      	ldr	r3, [pc, #112]	@ (8001bb4 <MX_TIM2_Init+0x98>)
 8001b42:	f242 1233 	movw	r2, #8499	@ 0x2133
 8001b46:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b48:	4b1a      	ldr	r3, [pc, #104]	@ (8001bb4 <MX_TIM2_Init+0x98>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8001b4e:	4b19      	ldr	r3, [pc, #100]	@ (8001bb4 <MX_TIM2_Init+0x98>)
 8001b50:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001b54:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b56:	4b17      	ldr	r3, [pc, #92]	@ (8001bb4 <MX_TIM2_Init+0x98>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b5c:	4b15      	ldr	r3, [pc, #84]	@ (8001bb4 <MX_TIM2_Init+0x98>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b62:	4814      	ldr	r0, [pc, #80]	@ (8001bb4 <MX_TIM2_Init+0x98>)
 8001b64:	f002 ff9d 	bl	8004aa2 <HAL_TIM_Base_Init>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001b6e:	f000 f993 	bl	8001e98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b76:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b78:	f107 0308 	add.w	r3, r7, #8
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	480d      	ldr	r0, [pc, #52]	@ (8001bb4 <MX_TIM2_Init+0x98>)
 8001b80:	f003 f84e 	bl	8004c20 <HAL_TIM_ConfigClockSource>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001b8a:	f000 f985 	bl	8001e98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b92:	2300      	movs	r3, #0
 8001b94:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b96:	463b      	mov	r3, r7
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4806      	ldr	r0, [pc, #24]	@ (8001bb4 <MX_TIM2_Init+0x98>)
 8001b9c:	f003 fa4e 	bl	800503c <HAL_TIMEx_MasterConfigSynchronization>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d001      	beq.n	8001baa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001ba6:	f000 f977 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001baa:	bf00      	nop
 8001bac:	3718      	adds	r7, #24
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	20000254 	.word	0x20000254

08001bb8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001bbc:	4b11      	ldr	r3, [pc, #68]	@ (8001c04 <MX_USART1_UART_Init+0x4c>)
 8001bbe:	4a12      	ldr	r2, [pc, #72]	@ (8001c08 <MX_USART1_UART_Init+0x50>)
 8001bc0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001bc2:	4b10      	ldr	r3, [pc, #64]	@ (8001c04 <MX_USART1_UART_Init+0x4c>)
 8001bc4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001bc8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001bca:	4b0e      	ldr	r3, [pc, #56]	@ (8001c04 <MX_USART1_UART_Init+0x4c>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	@ (8001c04 <MX_USART1_UART_Init+0x4c>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8001c04 <MX_USART1_UART_Init+0x4c>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001bdc:	4b09      	ldr	r3, [pc, #36]	@ (8001c04 <MX_USART1_UART_Init+0x4c>)
 8001bde:	220c      	movs	r2, #12
 8001be0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001be2:	4b08      	ldr	r3, [pc, #32]	@ (8001c04 <MX_USART1_UART_Init+0x4c>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001be8:	4b06      	ldr	r3, [pc, #24]	@ (8001c04 <MX_USART1_UART_Init+0x4c>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001bee:	4805      	ldr	r0, [pc, #20]	@ (8001c04 <MX_USART1_UART_Init+0x4c>)
 8001bf0:	f003 faa0 	bl	8005134 <HAL_UART_Init>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001bfa:	f000 f94d 	bl	8001e98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	2000029c 	.word	0x2000029c
 8001c08:	40011000 	.word	0x40011000

08001c0c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b08c      	sub	sp, #48	@ 0x30
 8001c10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c12:	f107 031c 	add.w	r3, r7, #28
 8001c16:	2200      	movs	r2, #0
 8001c18:	601a      	str	r2, [r3, #0]
 8001c1a:	605a      	str	r2, [r3, #4]
 8001c1c:	609a      	str	r2, [r3, #8]
 8001c1e:	60da      	str	r2, [r3, #12]
 8001c20:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c22:	2300      	movs	r3, #0
 8001c24:	61bb      	str	r3, [r7, #24]
 8001c26:	4b46      	ldr	r3, [pc, #280]	@ (8001d40 <MX_GPIO_Init+0x134>)
 8001c28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c2a:	4a45      	ldr	r2, [pc, #276]	@ (8001d40 <MX_GPIO_Init+0x134>)
 8001c2c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001c30:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c32:	4b43      	ldr	r3, [pc, #268]	@ (8001d40 <MX_GPIO_Init+0x134>)
 8001c34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c3a:	61bb      	str	r3, [r7, #24]
 8001c3c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	617b      	str	r3, [r7, #20]
 8001c42:	4b3f      	ldr	r3, [pc, #252]	@ (8001d40 <MX_GPIO_Init+0x134>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c46:	4a3e      	ldr	r2, [pc, #248]	@ (8001d40 <MX_GPIO_Init+0x134>)
 8001c48:	f043 0304 	orr.w	r3, r3, #4
 8001c4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c4e:	4b3c      	ldr	r3, [pc, #240]	@ (8001d40 <MX_GPIO_Init+0x134>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c52:	f003 0304 	and.w	r3, r3, #4
 8001c56:	617b      	str	r3, [r7, #20]
 8001c58:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	613b      	str	r3, [r7, #16]
 8001c5e:	4b38      	ldr	r3, [pc, #224]	@ (8001d40 <MX_GPIO_Init+0x134>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c62:	4a37      	ldr	r2, [pc, #220]	@ (8001d40 <MX_GPIO_Init+0x134>)
 8001c64:	f043 0302 	orr.w	r3, r3, #2
 8001c68:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c6a:	4b35      	ldr	r3, [pc, #212]	@ (8001d40 <MX_GPIO_Init+0x134>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	613b      	str	r3, [r7, #16]
 8001c74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	60fb      	str	r3, [r7, #12]
 8001c7a:	4b31      	ldr	r3, [pc, #196]	@ (8001d40 <MX_GPIO_Init+0x134>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7e:	4a30      	ldr	r2, [pc, #192]	@ (8001d40 <MX_GPIO_Init+0x134>)
 8001c80:	f043 0310 	orr.w	r3, r3, #16
 8001c84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c86:	4b2e      	ldr	r3, [pc, #184]	@ (8001d40 <MX_GPIO_Init+0x134>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8a:	f003 0310 	and.w	r3, r3, #16
 8001c8e:	60fb      	str	r3, [r7, #12]
 8001c90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c92:	2300      	movs	r3, #0
 8001c94:	60bb      	str	r3, [r7, #8]
 8001c96:	4b2a      	ldr	r3, [pc, #168]	@ (8001d40 <MX_GPIO_Init+0x134>)
 8001c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9a:	4a29      	ldr	r2, [pc, #164]	@ (8001d40 <MX_GPIO_Init+0x134>)
 8001c9c:	f043 0308 	orr.w	r3, r3, #8
 8001ca0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ca2:	4b27      	ldr	r3, [pc, #156]	@ (8001d40 <MX_GPIO_Init+0x134>)
 8001ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ca6:	f003 0308 	and.w	r3, r3, #8
 8001caa:	60bb      	str	r3, [r7, #8]
 8001cac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cae:	2300      	movs	r3, #0
 8001cb0:	607b      	str	r3, [r7, #4]
 8001cb2:	4b23      	ldr	r3, [pc, #140]	@ (8001d40 <MX_GPIO_Init+0x134>)
 8001cb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb6:	4a22      	ldr	r2, [pc, #136]	@ (8001d40 <MX_GPIO_Init+0x134>)
 8001cb8:	f043 0301 	orr.w	r3, r3, #1
 8001cbc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cbe:	4b20      	ldr	r3, [pc, #128]	@ (8001d40 <MX_GPIO_Init+0x134>)
 8001cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc2:	f003 0301 	and.w	r3, r3, #1
 8001cc6:	607b      	str	r3, [r7, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_BL_Pin|TOUCH_CS_Pin, GPIO_PIN_RESET);
 8001cca:	2200      	movs	r2, #0
 8001ccc:	f241 0102 	movw	r1, #4098	@ 0x1002
 8001cd0:	481c      	ldr	r0, [pc, #112]	@ (8001d44 <MX_GPIO_Init+0x138>)
 8001cd2:	f001 f951 	bl	8002f78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TC_PEN_Pin */
  GPIO_InitStruct.Pin = TC_PEN_Pin;
 8001cd6:	2320      	movs	r3, #32
 8001cd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cda:	2300      	movs	r3, #0
 8001cdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(TC_PEN_GPIO_Port, &GPIO_InitStruct);
 8001ce2:	f107 031c 	add.w	r3, r7, #28
 8001ce6:	4619      	mov	r1, r3
 8001ce8:	4817      	ldr	r0, [pc, #92]	@ (8001d48 <MX_GPIO_Init+0x13c>)
 8001cea:	f000 ffa9 	bl	8002c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001cf2:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001cf6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cfc:	f107 031c 	add.w	r3, r7, #28
 8001d00:	4619      	mov	r1, r3
 8001d02:	4810      	ldr	r0, [pc, #64]	@ (8001d44 <MX_GPIO_Init+0x138>)
 8001d04:	f000 ff9c 	bl	8002c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BL_Pin TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin|TOUCH_CS_Pin;
 8001d08:	f241 0302 	movw	r3, #4098	@ 0x1002
 8001d0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d16:	2300      	movs	r3, #0
 8001d18:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d1a:	f107 031c 	add.w	r3, r7, #28
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4808      	ldr	r0, [pc, #32]	@ (8001d44 <MX_GPIO_Init+0x138>)
 8001d22:	f000 ff8d 	bl	8002c40 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001d26:	2200      	movs	r2, #0
 8001d28:	2100      	movs	r1, #0
 8001d2a:	2006      	movs	r0, #6
 8001d2c:	f000 ff51 	bl	8002bd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001d30:	2006      	movs	r0, #6
 8001d32:	f000 ff6a 	bl	8002c0a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001d36:	bf00      	nop
 8001d38:	3730      	adds	r7, #48	@ 0x30
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	40023800 	.word	0x40023800
 8001d44:	40020400 	.word	0x40020400
 8001d48:	40020800 	.word	0x40020800

08001d4c <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b088      	sub	sp, #32
 8001d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8001d52:	1d3b      	adds	r3, r7, #4
 8001d54:	2200      	movs	r2, #0
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	605a      	str	r2, [r3, #4]
 8001d5a:	609a      	str	r2, [r3, #8]
 8001d5c:	60da      	str	r2, [r3, #12]
 8001d5e:	611a      	str	r2, [r3, #16]
 8001d60:	615a      	str	r2, [r3, #20]
 8001d62:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001d64:	4b27      	ldr	r3, [pc, #156]	@ (8001e04 <MX_FSMC_Init+0xb8>)
 8001d66:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8001d6a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8001d6c:	4b25      	ldr	r3, [pc, #148]	@ (8001e04 <MX_FSMC_Init+0xb8>)
 8001d6e:	4a26      	ldr	r2, [pc, #152]	@ (8001e08 <MX_FSMC_Init+0xbc>)
 8001d70:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8001d72:	4b24      	ldr	r3, [pc, #144]	@ (8001e04 <MX_FSMC_Init+0xb8>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8001d78:	4b22      	ldr	r3, [pc, #136]	@ (8001e04 <MX_FSMC_Init+0xb8>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 8001d7e:	4b21      	ldr	r3, [pc, #132]	@ (8001e04 <MX_FSMC_Init+0xb8>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001d84:	4b1f      	ldr	r3, [pc, #124]	@ (8001e04 <MX_FSMC_Init+0xb8>)
 8001d86:	2210      	movs	r2, #16
 8001d88:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8001d8a:	4b1e      	ldr	r3, [pc, #120]	@ (8001e04 <MX_FSMC_Init+0xb8>)
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8001d90:	4b1c      	ldr	r3, [pc, #112]	@ (8001e04 <MX_FSMC_Init+0xb8>)
 8001d92:	2200      	movs	r2, #0
 8001d94:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8001d96:	4b1b      	ldr	r3, [pc, #108]	@ (8001e04 <MX_FSMC_Init+0xb8>)
 8001d98:	2200      	movs	r2, #0
 8001d9a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8001d9c:	4b19      	ldr	r3, [pc, #100]	@ (8001e04 <MX_FSMC_Init+0xb8>)
 8001d9e:	2200      	movs	r2, #0
 8001da0:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 8001da2:	4b18      	ldr	r3, [pc, #96]	@ (8001e04 <MX_FSMC_Init+0xb8>)
 8001da4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001da8:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8001daa:	4b16      	ldr	r3, [pc, #88]	@ (8001e04 <MX_FSMC_Init+0xb8>)
 8001dac:	2200      	movs	r2, #0
 8001dae:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 8001db0:	4b14      	ldr	r3, [pc, #80]	@ (8001e04 <MX_FSMC_Init+0xb8>)
 8001db2:	2200      	movs	r2, #0
 8001db4:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001db6:	4b13      	ldr	r3, [pc, #76]	@ (8001e04 <MX_FSMC_Init+0xb8>)
 8001db8:	2200      	movs	r2, #0
 8001dba:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8001dbc:	4b11      	ldr	r3, [pc, #68]	@ (8001e04 <MX_FSMC_Init+0xb8>)
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 8001dc2:	4b10      	ldr	r3, [pc, #64]	@ (8001e04 <MX_FSMC_Init+0xb8>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 1;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001dcc:	230f      	movs	r3, #15
 8001dce:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 5;
 8001dd0:	2305      	movs	r3, #5
 8001dd2:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001dd8:	2310      	movs	r3, #16
 8001dda:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001ddc:	2311      	movs	r3, #17
 8001dde:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001de0:	2300      	movs	r3, #0
 8001de2:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001de4:	1d3b      	adds	r3, r7, #4
 8001de6:	2200      	movs	r2, #0
 8001de8:	4619      	mov	r1, r3
 8001dea:	4806      	ldr	r0, [pc, #24]	@ (8001e04 <MX_FSMC_Init+0xb8>)
 8001dec:	f002 fe11 	bl	8004a12 <HAL_SRAM_Init>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8001df6:	f000 f84f 	bl	8001e98 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8001dfa:	bf00      	nop
 8001dfc:	3720      	adds	r7, #32
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	200002e4 	.word	0x200002e4
 8001e08:	a0000104 	.word	0xa0000104

08001e0c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	4603      	mov	r3, r0
 8001e14:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0)
 8001e16:	88fb      	ldrh	r3, [r7, #6]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d112      	bne.n	8001e42 <HAL_GPIO_EXTI_Callback+0x36>
    {
        // Xử lý khi có ngắt từ PB0 tại đây
		  lcdSetTextColor(COLOR_CYAN, COLOR_BLACK);
 8001e1c:	2100      	movs	r1, #0
 8001e1e:	f240 70ff 	movw	r0, #2047	@ 0x7ff
 8001e22:	f7ff fc09 	bl	8001638 <lcdSetTextColor>
		  lcdSetTextFont(&Font16);
 8001e26:	4809      	ldr	r0, [pc, #36]	@ (8001e4c <HAL_GPIO_EXTI_Callback+0x40>)
 8001e28:	f7ff fbf6 	bl	8001618 <lcdSetTextFont>
		  lcdSetCursor(5, 5);
 8001e2c:	2105      	movs	r1, #5
 8001e2e:	2005      	movs	r0, #5
 8001e30:	f7ff fc82 	bl	8001738 <lcdSetCursor>
		  lcdPrintf("MAX30100 is ready.\r\n");
 8001e34:	4806      	ldr	r0, [pc, #24]	@ (8001e50 <HAL_GPIO_EXTI_Callback+0x44>)
 8001e36:	f7ff fb63 	bl	8001500 <lcdPrintf>
		  HAL_Delay(3000);
 8001e3a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001e3e:	f000 fdc9 	bl	80029d4 <HAL_Delay>
    }
}
 8001e42:	bf00      	nop
 8001e44:	3708      	adds	r7, #8
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20000008 	.word	0x20000008
 8001e50:	08006494 	.word	0x08006494

08001e54 <Max30100>:
  	  }
  	  Reload = false;
    }
}

void Max30100 (){
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
	  lcdSetTextColor(COLOR_CYAN, COLOR_BLACK);
 8001e58:	2100      	movs	r1, #0
 8001e5a:	f240 70ff 	movw	r0, #2047	@ 0x7ff
 8001e5e:	f7ff fbeb 	bl	8001638 <lcdSetTextColor>
	  lcdSetTextFont(&Font16);
 8001e62:	480a      	ldr	r0, [pc, #40]	@ (8001e8c <Max30100+0x38>)
 8001e64:	f7ff fbd8 	bl	8001618 <lcdSetTextFont>
	  lcdSetCursor(5, 5);
 8001e68:	2105      	movs	r1, #5
 8001e6a:	2005      	movs	r0, #5
 8001e6c:	f7ff fc64 	bl	8001738 <lcdSetCursor>
	  lcdPrintf("MAX30100 : %d\n" , i);
 8001e70:	4b07      	ldr	r3, [pc, #28]	@ (8001e90 <Max30100+0x3c>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4619      	mov	r1, r3
 8001e76:	4807      	ldr	r0, [pc, #28]	@ (8001e94 <Max30100+0x40>)
 8001e78:	f7ff fb42 	bl	8001500 <lcdPrintf>
	  i++;
 8001e7c:	4b04      	ldr	r3, [pc, #16]	@ (8001e90 <Max30100+0x3c>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	3301      	adds	r3, #1
 8001e82:	4a03      	ldr	r2, [pc, #12]	@ (8001e90 <Max30100+0x3c>)
 8001e84:	6013      	str	r3, [r2, #0]
}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	20000008 	.word	0x20000008
 8001e90:	20000334 	.word	0x20000334
 8001e94:	080066d4 	.word	0x080066d4

08001e98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e9c:	b672      	cpsid	i
}
 8001e9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ea0:	bf00      	nop
 8001ea2:	e7fd      	b.n	8001ea0 <Error_Handler+0x8>

08001ea4 <MAX30100_Init>:
uint8_t _max30100_red_current;
uint8_t _max30100_ir_current_prev;
uint8_t _max30100_red_current_prev;
float _max30100_temp;

void MAX30100_Init(I2C_HandleTypeDef *ui2c, UART_HandleTypeDef *uuart){
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
 8001eac:	6039      	str	r1, [r7, #0]
	_max30100_ui2c = ui2c;
 8001eae:	4a07      	ldr	r2, [pc, #28]	@ (8001ecc <MAX30100_Init+0x28>)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6013      	str	r3, [r2, #0]
	_max30100_uuart = uuart;
 8001eb4:	4a06      	ldr	r2, [pc, #24]	@ (8001ed0 <MAX30100_Init+0x2c>)
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	6013      	str	r3, [r2, #0]
	MAX30100_Stop();
 8001eba:	f000 fab5 	bl	8002428 <MAX30100_Stop>
	MAX30100_ClearFIFO();
 8001ebe:	f000 f987 	bl	80021d0 <MAX30100_ClearFIFO>
}
 8001ec2:	bf00      	nop
 8001ec4:	3708      	adds	r7, #8
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	20000338 	.word	0x20000338
 8001ed0:	2000033c 	.word	0x2000033c

08001ed4 <MAX30100_ReadReg>:

uint8_t MAX30100_ReadReg(uint8_t regAddr){
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b086      	sub	sp, #24
 8001ed8:	af02      	add	r7, sp, #8
 8001eda:	4603      	mov	r3, r0
 8001edc:	71fb      	strb	r3, [r7, #7]
	uint8_t reg = regAddr, result;
 8001ede:	79fb      	ldrb	r3, [r7, #7]
 8001ee0:	73fb      	strb	r3, [r7, #15]
	HAL_I2C_Master_Transmit(_max30100_ui2c, MAX30100_I2C_ADDR, &reg, 1, MAX30100_TIMEOUT);
 8001ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8001f18 <MAX30100_ReadReg+0x44>)
 8001ee4:	6818      	ldr	r0, [r3, #0]
 8001ee6:	f107 020f 	add.w	r2, r7, #15
 8001eea:	f04f 33ff 	mov.w	r3, #4294967295
 8001eee:	9300      	str	r3, [sp, #0]
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	21ae      	movs	r1, #174	@ 0xae
 8001ef4:	f001 f9b6 	bl	8003264 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_max30100_ui2c, MAX30100_I2C_ADDR, &result, 1, MAX30100_TIMEOUT);
 8001ef8:	4b07      	ldr	r3, [pc, #28]	@ (8001f18 <MAX30100_ReadReg+0x44>)
 8001efa:	6818      	ldr	r0, [r3, #0]
 8001efc:	f107 020e 	add.w	r2, r7, #14
 8001f00:	f04f 33ff 	mov.w	r3, #4294967295
 8001f04:	9300      	str	r3, [sp, #0]
 8001f06:	2301      	movs	r3, #1
 8001f08:	21ae      	movs	r1, #174	@ 0xae
 8001f0a:	f001 faa9 	bl	8003460 <HAL_I2C_Master_Receive>
	return result;
 8001f0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	20000338 	.word	0x20000338

08001f1c <MAX30100_WriteReg>:

void MAX30100_WriteReg(uint8_t regAddr, uint8_t byte){
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af02      	add	r7, sp, #8
 8001f22:	4603      	mov	r3, r0
 8001f24:	460a      	mov	r2, r1
 8001f26:	71fb      	strb	r3, [r7, #7]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	71bb      	strb	r3, [r7, #6]
	uint8_t reg[2] = { regAddr, byte };
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
 8001f2e:	733b      	strb	r3, [r7, #12]
 8001f30:	79bb      	ldrb	r3, [r7, #6]
 8001f32:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(_max30100_ui2c, MAX30100_I2C_ADDR, reg, 2, MAX30100_TIMEOUT);
 8001f34:	4b07      	ldr	r3, [pc, #28]	@ (8001f54 <MAX30100_WriteReg+0x38>)
 8001f36:	6818      	ldr	r0, [r3, #0]
 8001f38:	f107 020c 	add.w	r2, r7, #12
 8001f3c:	f04f 33ff 	mov.w	r3, #4294967295
 8001f40:	9300      	str	r3, [sp, #0]
 8001f42:	2302      	movs	r3, #2
 8001f44:	21ae      	movs	r1, #174	@ 0xae
 8001f46:	f001 f98d 	bl	8003264 <HAL_I2C_Master_Transmit>
}
 8001f4a:	bf00      	nop
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	bf00      	nop
 8001f54:	20000338 	.word	0x20000338

08001f58 <MAX30100_EnableInterrupt>:

void MAX30100_EnableInterrupt(uint8_t a_full, uint8_t tmp_rdy, uint8_t hr_rdy, uint8_t spo2){
 8001f58:	b590      	push	{r4, r7, lr}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4604      	mov	r4, r0
 8001f60:	4608      	mov	r0, r1
 8001f62:	4611      	mov	r1, r2
 8001f64:	461a      	mov	r2, r3
 8001f66:	4623      	mov	r3, r4
 8001f68:	71fb      	strb	r3, [r7, #7]
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	71bb      	strb	r3, [r7, #6]
 8001f6e:	460b      	mov	r3, r1
 8001f70:	717b      	strb	r3, [r7, #5]
 8001f72:	4613      	mov	r3, r2
 8001f74:	713b      	strb	r3, [r7, #4]
	uint8_t itReg = ((a_full & 0x01) << MAX30100_ENB_A_FULL) | ((tmp_rdy & 0x01) << MAX30100_ENB_TMP_RDY) | ((hr_rdy & 0x01) << MAX30100_ENB_HR_RDY) | ((spo2 & 0x01) << MAX30100_ENB_SPO2_RDY);
 8001f76:	79fb      	ldrb	r3, [r7, #7]
 8001f78:	01db      	lsls	r3, r3, #7
 8001f7a:	b25a      	sxtb	r2, r3
 8001f7c:	79bb      	ldrb	r3, [r7, #6]
 8001f7e:	019b      	lsls	r3, r3, #6
 8001f80:	b25b      	sxtb	r3, r3
 8001f82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f86:	b25b      	sxtb	r3, r3
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	b25a      	sxtb	r2, r3
 8001f8c:	797b      	ldrb	r3, [r7, #5]
 8001f8e:	015b      	lsls	r3, r3, #5
 8001f90:	b25b      	sxtb	r3, r3
 8001f92:	f003 0320 	and.w	r3, r3, #32
 8001f96:	b25b      	sxtb	r3, r3
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	b25a      	sxtb	r2, r3
 8001f9c:	793b      	ldrb	r3, [r7, #4]
 8001f9e:	011b      	lsls	r3, r3, #4
 8001fa0:	b25b      	sxtb	r3, r3
 8001fa2:	f003 0310 	and.w	r3, r3, #16
 8001fa6:	b25b      	sxtb	r3, r3
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	b25b      	sxtb	r3, r3
 8001fac:	73fb      	strb	r3, [r7, #15]
	MAX30100_WriteReg(MAX30100_INTERRUPT_ENB, itReg);
 8001fae:	7bfb      	ldrb	r3, [r7, #15]
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	2001      	movs	r0, #1
 8001fb4:	f7ff ffb2 	bl	8001f1c <MAX30100_WriteReg>
}
 8001fb8:	bf00      	nop
 8001fba:	3714      	adds	r7, #20
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bd90      	pop	{r4, r7, pc}

08001fc0 <MAX30100_InterruptHandler>:

void MAX30100_InterruptHandler(void){
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
	uint8_t itReg = MAX30100_ReadReg(MAX30100_INTERRUPT);
 8001fc6:	2000      	movs	r0, #0
 8001fc8:	f7ff ff84 	bl	8001ed4 <MAX30100_ReadReg>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	71fb      	strb	r3, [r7, #7]
	if((itReg >> MAX30100_A_FULL) & 0x01){
 8001fd0:	79fb      	ldrb	r3, [r7, #7]
 8001fd2:	09db      	lsrs	r3, r3, #7
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d01e      	beq.n	800201c <MAX30100_InterruptHandler+0x5c>
		MAX30100_ReadFIFO();
 8001fde:	f000 f907 	bl	80021f0 <MAX30100_ReadFIFO>
		if(_max30100_mode == MAX30100_HRONLY_MODE)
 8001fe2:	4b1e      	ldr	r3, [pc, #120]	@ (800205c <MAX30100_InterruptHandler+0x9c>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d107      	bne.n	8001ffa <MAX30100_InterruptHandler+0x3a>
			MAX30100_PlotIrToUART(_max30100_uuart, _max30100_ir_sample, 16);
 8001fea:	4b1d      	ldr	r3, [pc, #116]	@ (8002060 <MAX30100_InterruptHandler+0xa0>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2210      	movs	r2, #16
 8001ff0:	491c      	ldr	r1, [pc, #112]	@ (8002064 <MAX30100_InterruptHandler+0xa4>)
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f000 f9a8 	bl	8002348 <MAX30100_PlotIrToUART>
 8001ff8:	e00a      	b.n	8002010 <MAX30100_InterruptHandler+0x50>
		else if(_max30100_mode == MAX30100_SPO2_MODE)
 8001ffa:	4b18      	ldr	r3, [pc, #96]	@ (800205c <MAX30100_InterruptHandler+0x9c>)
 8001ffc:	781b      	ldrb	r3, [r3, #0]
 8001ffe:	2b03      	cmp	r3, #3
 8002000:	d106      	bne.n	8002010 <MAX30100_InterruptHandler+0x50>
			MAX30100_PlotBothToUART(_max30100_uuart, _max30100_red_sample, _max30100_ir_sample, 16);
 8002002:	4b17      	ldr	r3, [pc, #92]	@ (8002060 <MAX30100_InterruptHandler+0xa0>)
 8002004:	6818      	ldr	r0, [r3, #0]
 8002006:	2310      	movs	r3, #16
 8002008:	4a16      	ldr	r2, [pc, #88]	@ (8002064 <MAX30100_InterruptHandler+0xa4>)
 800200a:	4917      	ldr	r1, [pc, #92]	@ (8002068 <MAX30100_InterruptHandler+0xa8>)
 800200c:	f000 f9ce 	bl	80023ac <MAX30100_PlotBothToUART>
		MAX30100_SetMode(_max30100_mode);
 8002010:	4b12      	ldr	r3, [pc, #72]	@ (800205c <MAX30100_InterruptHandler+0x9c>)
 8002012:	781b      	ldrb	r3, [r3, #0]
 8002014:	4618      	mov	r0, r3
 8002016:	f000 f82b 	bl	8002070 <MAX30100_SetMode>
	}else if((itReg >> MAX30100_HR_RDY) & 0x01){

	}else if((itReg >> MAX30100_SPO2_RDY) & 0x01){

	}
}
 800201a:	e01a      	b.n	8002052 <MAX30100_InterruptHandler+0x92>
	}else if((itReg >> MAX30100_TMP_RDY) & 0x01){
 800201c:	79fb      	ldrb	r3, [r7, #7]
 800201e:	099b      	lsrs	r3, r3, #6
 8002020:	b2db      	uxtb	r3, r3
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00d      	beq.n	8002046 <MAX30100_InterruptHandler+0x86>
		_max30100_temp = MAX30100_ReadTemperature();
 800202a:	f000 f959 	bl	80022e0 <MAX30100_ReadTemperature>
 800202e:	eef0 7a40 	vmov.f32	s15, s0
 8002032:	4b0e      	ldr	r3, [pc, #56]	@ (800206c <MAX30100_InterruptHandler+0xac>)
 8002034:	edc3 7a00 	vstr	s15, [r3]
		MAX30100_EnableInterrupt(1, 0, 0, 0);
 8002038:	2300      	movs	r3, #0
 800203a:	2200      	movs	r2, #0
 800203c:	2100      	movs	r1, #0
 800203e:	2001      	movs	r0, #1
 8002040:	f7ff ff8a 	bl	8001f58 <MAX30100_EnableInterrupt>
}
 8002044:	e005      	b.n	8002052 <MAX30100_InterruptHandler+0x92>
	}else if((itReg >> MAX30100_HR_RDY) & 0x01){
 8002046:	79fb      	ldrb	r3, [r7, #7]
 8002048:	095b      	lsrs	r3, r3, #5
 800204a:	b2db      	uxtb	r3, r3
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	2b00      	cmp	r3, #0
}
 8002052:	bf00      	nop
 8002054:	3708      	adds	r7, #8
 8002056:	46bd      	mov	sp, r7
 8002058:	bd80      	pop	{r7, pc}
 800205a:	bf00      	nop
 800205c:	20000340 	.word	0x20000340
 8002060:	2000033c 	.word	0x2000033c
 8002064:	20000344 	.word	0x20000344
 8002068:	20000364 	.word	0x20000364
 800206c:	20000388 	.word	0x20000388

08002070 <MAX30100_SetMode>:

void MAX30100_SetMode(enum MAX30100_Mode mode){
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af00      	add	r7, sp, #0
 8002076:	4603      	mov	r3, r0
 8002078:	71fb      	strb	r3, [r7, #7]
	_max30100_mode = mode;
 800207a:	4a22      	ldr	r2, [pc, #136]	@ (8002104 <MAX30100_SetMode+0x94>)
 800207c:	79fb      	ldrb	r3, [r7, #7]
 800207e:	7013      	strb	r3, [r2, #0]
	uint8_t modeReg = (MAX30100_ReadReg(MAX30100_MODE_CONFIG) & ~(0x07)) | ((mode << MAX30100_MODE) & 0x07);
 8002080:	2006      	movs	r0, #6
 8002082:	f7ff ff27 	bl	8001ed4 <MAX30100_ReadReg>
 8002086:	4603      	mov	r3, r0
 8002088:	b25b      	sxtb	r3, r3
 800208a:	f023 0307 	bic.w	r3, r3, #7
 800208e:	b25a      	sxtb	r2, r3
 8002090:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002094:	f003 0307 	and.w	r3, r3, #7
 8002098:	b25b      	sxtb	r3, r3
 800209a:	4313      	orrs	r3, r2
 800209c:	b25b      	sxtb	r3, r3
 800209e:	73fb      	strb	r3, [r7, #15]
	if(mode == MAX30100_SPO2_MODE)
 80020a0:	79fb      	ldrb	r3, [r7, #7]
 80020a2:	2b03      	cmp	r3, #3
 80020a4:	d104      	bne.n	80020b0 <MAX30100_SetMode+0x40>
		modeReg |= 0x08;
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
 80020a8:	f043 0308 	orr.w	r3, r3, #8
 80020ac:	73fb      	strb	r3, [r7, #15]
 80020ae:	e003      	b.n	80020b8 <MAX30100_SetMode+0x48>
	else
		modeReg &= ~0x08;
 80020b0:	7bfb      	ldrb	r3, [r7, #15]
 80020b2:	f023 0308 	bic.w	r3, r3, #8
 80020b6:	73fb      	strb	r3, [r7, #15]
	MAX30100_WriteReg(MAX30100_MODE_CONFIG, modeReg);
 80020b8:	7bfb      	ldrb	r3, [r7, #15]
 80020ba:	4619      	mov	r1, r3
 80020bc:	2006      	movs	r0, #6
 80020be:	f7ff ff2d 	bl	8001f1c <MAX30100_WriteReg>
	if(_max30100_mode == MAX30100_SPO2_MODE)
 80020c2:	4b10      	ldr	r3, [pc, #64]	@ (8002104 <MAX30100_SetMode+0x94>)
 80020c4:	781b      	ldrb	r3, [r3, #0]
 80020c6:	2b03      	cmp	r3, #3
 80020c8:	d106      	bne.n	80020d8 <MAX30100_SetMode+0x68>
		MAX30100_EnableInterrupt(0, 1, 0, 0);
 80020ca:	2300      	movs	r3, #0
 80020cc:	2200      	movs	r2, #0
 80020ce:	2101      	movs	r1, #1
 80020d0:	2000      	movs	r0, #0
 80020d2:	f7ff ff41 	bl	8001f58 <MAX30100_EnableInterrupt>
	else if(_max30100_mode == MAX30100_HRONLY_MODE)
		MAX30100_EnableInterrupt(1, 0, 0, 0);
	else
		MAX30100_EnableInterrupt(0, 0, 0, 0);
}
 80020d6:	e010      	b.n	80020fa <MAX30100_SetMode+0x8a>
	else if(_max30100_mode == MAX30100_HRONLY_MODE)
 80020d8:	4b0a      	ldr	r3, [pc, #40]	@ (8002104 <MAX30100_SetMode+0x94>)
 80020da:	781b      	ldrb	r3, [r3, #0]
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d106      	bne.n	80020ee <MAX30100_SetMode+0x7e>
		MAX30100_EnableInterrupt(1, 0, 0, 0);
 80020e0:	2300      	movs	r3, #0
 80020e2:	2200      	movs	r2, #0
 80020e4:	2100      	movs	r1, #0
 80020e6:	2001      	movs	r0, #1
 80020e8:	f7ff ff36 	bl	8001f58 <MAX30100_EnableInterrupt>
}
 80020ec:	e005      	b.n	80020fa <MAX30100_SetMode+0x8a>
		MAX30100_EnableInterrupt(0, 0, 0, 0);
 80020ee:	2300      	movs	r3, #0
 80020f0:	2200      	movs	r2, #0
 80020f2:	2100      	movs	r1, #0
 80020f4:	2000      	movs	r0, #0
 80020f6:	f7ff ff2f 	bl	8001f58 <MAX30100_EnableInterrupt>
}
 80020fa:	bf00      	nop
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	20000340 	.word	0x20000340

08002108 <MAX30100_SetSpO2SampleRate>:
//ok
void MAX30100_SetSpO2SampleRate(enum MAX30100_SpO2SR sr){
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	71fb      	strb	r3, [r7, #7]
	uint8_t spo2Reg = MAX30100_ReadReg(MAX30100_SPO2_CONFIG);
 8002112:	2007      	movs	r0, #7
 8002114:	f7ff fede 	bl	8001ed4 <MAX30100_ReadReg>
 8002118:	4603      	mov	r3, r0
 800211a:	73fb      	strb	r3, [r7, #15]
	spo2Reg = ((sr << MAX30100_SPO2_SR) & 0x1c) | (spo2Reg & ~0x1c);
 800211c:	79fb      	ldrb	r3, [r7, #7]
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	b25b      	sxtb	r3, r3
 8002122:	f003 031c 	and.w	r3, r3, #28
 8002126:	b25a      	sxtb	r2, r3
 8002128:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800212c:	f023 031c 	bic.w	r3, r3, #28
 8002130:	b25b      	sxtb	r3, r3
 8002132:	4313      	orrs	r3, r2
 8002134:	b25b      	sxtb	r3, r3
 8002136:	73fb      	strb	r3, [r7, #15]
	MAX30100_WriteReg(MAX30100_SPO2_CONFIG, spo2Reg);
 8002138:	7bfb      	ldrb	r3, [r7, #15]
 800213a:	4619      	mov	r1, r3
 800213c:	2007      	movs	r0, #7
 800213e:	f7ff feed 	bl	8001f1c <MAX30100_WriteReg>
}
 8002142:	bf00      	nop
 8002144:	3710      	adds	r7, #16
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <MAX30100_SetLEDPulseWidth>:
//ok
void MAX30100_SetLEDPulseWidth(enum MAX30100_LEDPulseWidth pw){
 800214a:	b580      	push	{r7, lr}
 800214c:	b084      	sub	sp, #16
 800214e:	af00      	add	r7, sp, #0
 8002150:	4603      	mov	r3, r0
 8002152:	71fb      	strb	r3, [r7, #7]
	uint8_t spo2Reg = MAX30100_ReadReg(MAX30100_SPO2_CONFIG);
 8002154:	2007      	movs	r0, #7
 8002156:	f7ff febd 	bl	8001ed4 <MAX30100_ReadReg>
 800215a:	4603      	mov	r3, r0
 800215c:	73fb      	strb	r3, [r7, #15]
	spo2Reg = ((pw << MAX30100_LED_PW) & 0x03) | (spo2Reg & ~0x03);
 800215e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002162:	f003 0303 	and.w	r3, r3, #3
 8002166:	b25a      	sxtb	r2, r3
 8002168:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800216c:	f023 0303 	bic.w	r3, r3, #3
 8002170:	b25b      	sxtb	r3, r3
 8002172:	4313      	orrs	r3, r2
 8002174:	b25b      	sxtb	r3, r3
 8002176:	73fb      	strb	r3, [r7, #15]
	MAX30100_WriteReg(MAX30100_SPO2_CONFIG, spo2Reg);
 8002178:	7bfb      	ldrb	r3, [r7, #15]
 800217a:	4619      	mov	r1, r3
 800217c:	2007      	movs	r0, #7
 800217e:	f7ff fecd 	bl	8001f1c <MAX30100_WriteReg>
}
 8002182:	bf00      	nop
 8002184:	3710      	adds	r7, #16
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
	...

0800218c <MAX30100_SetLEDCurrent>:
void MAX30100_SetLEDCurrent(enum MAX30100_LEDCurrent redpa, enum MAX30100_LEDCurrent irpa){
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	4603      	mov	r3, r0
 8002194:	460a      	mov	r2, r1
 8002196:	71fb      	strb	r3, [r7, #7]
 8002198:	4613      	mov	r3, r2
 800219a:	71bb      	strb	r3, [r7, #6]
	_max30100_red_current = redpa;
 800219c:	4a0a      	ldr	r2, [pc, #40]	@ (80021c8 <MAX30100_SetLEDCurrent+0x3c>)
 800219e:	79fb      	ldrb	r3, [r7, #7]
 80021a0:	7013      	strb	r3, [r2, #0]
	_max30100_ir_current = irpa;
 80021a2:	4a0a      	ldr	r2, [pc, #40]	@ (80021cc <MAX30100_SetLEDCurrent+0x40>)
 80021a4:	79bb      	ldrb	r3, [r7, #6]
 80021a6:	7013      	strb	r3, [r2, #0]
	MAX30100_WriteReg(MAX30100_LED_CONFIG, (redpa << MAX30100_LED_RED_PA) | irpa);
 80021a8:	79fb      	ldrb	r3, [r7, #7]
 80021aa:	011b      	lsls	r3, r3, #4
 80021ac:	b25a      	sxtb	r2, r3
 80021ae:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	b25b      	sxtb	r3, r3
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	4619      	mov	r1, r3
 80021ba:	2009      	movs	r0, #9
 80021bc:	f7ff feae 	bl	8001f1c <MAX30100_WriteReg>
}
 80021c0:	bf00      	nop
 80021c2:	3708      	adds	r7, #8
 80021c4:	46bd      	mov	sp, r7
 80021c6:	bd80      	pop	{r7, pc}
 80021c8:	20000385 	.word	0x20000385
 80021cc:	20000384 	.word	0x20000384

080021d0 <MAX30100_ClearFIFO>:

void MAX30100_ClearFIFO(void){
 80021d0:	b580      	push	{r7, lr}
 80021d2:	af00      	add	r7, sp, #0
	MAX30100_WriteReg(MAX30100_FIFO_WR_PTR, 0x00);
 80021d4:	2100      	movs	r1, #0
 80021d6:	2002      	movs	r0, #2
 80021d8:	f7ff fea0 	bl	8001f1c <MAX30100_WriteReg>
	MAX30100_WriteReg(MAX30100_FIFO_RD_PTR, 0x00);
 80021dc:	2100      	movs	r1, #0
 80021de:	2004      	movs	r0, #4
 80021e0:	f7ff fe9c 	bl	8001f1c <MAX30100_WriteReg>
	MAX30100_WriteReg(MAX30100_OVF_COUNTER, 0x00);
 80021e4:	2100      	movs	r1, #0
 80021e6:	2003      	movs	r0, #3
 80021e8:	f7ff fe98 	bl	8001f1c <MAX30100_WriteReg>
}
 80021ec:	bf00      	nop
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <MAX30100_ReadFIFO>:

void MAX30100_ReadFIFO(void){
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b094      	sub	sp, #80	@ 0x50
 80021f4:	af02      	add	r7, sp, #8
	//uint8_t fifo_wr_ptr = MAX30100_ReadReg(MAX30100_FIFO_WR_PTR);
	//uint8_t fifo_rd_ptr = MAX30100_ReadReg(MAX30100_FIFO_RD_PTR);
	uint8_t num_sample = 64;//(fifo_wr_ptr - fifo_rd_ptr) * 4;
 80021f6:	2340      	movs	r3, #64	@ 0x40
 80021f8:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
	uint8_t fifo_data[64] = { 0 };
 80021fc:	2300      	movs	r3, #0
 80021fe:	607b      	str	r3, [r7, #4]
 8002200:	f107 0308 	add.w	r3, r7, #8
 8002204:	223c      	movs	r2, #60	@ 0x3c
 8002206:	2100      	movs	r1, #0
 8002208:	4618      	mov	r0, r3
 800220a:	f003 fd93 	bl	8005d34 <memset>
	uint8_t reg = MAX30100_FIFO_DATA;
 800220e:	2305      	movs	r3, #5
 8002210:	70fb      	strb	r3, [r7, #3]
	HAL_I2C_Master_Transmit(_max30100_ui2c, MAX30100_I2C_ADDR, &reg, 1, MAX30100_TIMEOUT);
 8002212:	4b30      	ldr	r3, [pc, #192]	@ (80022d4 <MAX30100_ReadFIFO+0xe4>)
 8002214:	6818      	ldr	r0, [r3, #0]
 8002216:	1cfa      	adds	r2, r7, #3
 8002218:	f04f 33ff 	mov.w	r3, #4294967295
 800221c:	9300      	str	r3, [sp, #0]
 800221e:	2301      	movs	r3, #1
 8002220:	21ae      	movs	r1, #174	@ 0xae
 8002222:	f001 f81f 	bl	8003264 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(_max30100_ui2c, MAX30100_I2C_ADDR, fifo_data, num_sample, MAX30100_TIMEOUT);
 8002226:	4b2b      	ldr	r3, [pc, #172]	@ (80022d4 <MAX30100_ReadFIFO+0xe4>)
 8002228:	6818      	ldr	r0, [r3, #0]
 800222a:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 800222e:	b29b      	uxth	r3, r3
 8002230:	1d3a      	adds	r2, r7, #4
 8002232:	f04f 31ff 	mov.w	r1, #4294967295
 8002236:	9100      	str	r1, [sp, #0]
 8002238:	21ae      	movs	r1, #174	@ 0xae
 800223a:	f001 f911 	bl	8003460 <HAL_I2C_Master_Receive>
	for(uint8_t i = 0; i < num_sample; i += 4){
 800223e:	2300      	movs	r3, #0
 8002240:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8002244:	e03b      	b.n	80022be <MAX30100_ReadFIFO+0xce>
		_max30100_ir_sample[i / 4] = (fifo_data[i] << 8) | fifo_data[i + 1];
 8002246:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800224a:	3348      	adds	r3, #72	@ 0x48
 800224c:	443b      	add	r3, r7
 800224e:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8002252:	021b      	lsls	r3, r3, #8
 8002254:	b21a      	sxth	r2, r3
 8002256:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800225a:	3301      	adds	r3, #1
 800225c:	3348      	adds	r3, #72	@ 0x48
 800225e:	443b      	add	r3, r7
 8002260:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 8002264:	b21b      	sxth	r3, r3
 8002266:	4313      	orrs	r3, r2
 8002268:	b219      	sxth	r1, r3
 800226a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800226e:	089b      	lsrs	r3, r3, #2
 8002270:	b2db      	uxtb	r3, r3
 8002272:	461a      	mov	r2, r3
 8002274:	b289      	uxth	r1, r1
 8002276:	4b18      	ldr	r3, [pc, #96]	@ (80022d8 <MAX30100_ReadFIFO+0xe8>)
 8002278:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		_max30100_red_sample[i / 4] = (fifo_data[i + 2] << 8) | fifo_data[i + 3];
 800227c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002280:	3302      	adds	r3, #2
 8002282:	3348      	adds	r3, #72	@ 0x48
 8002284:	443b      	add	r3, r7
 8002286:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 800228a:	021b      	lsls	r3, r3, #8
 800228c:	b21a      	sxth	r2, r3
 800228e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8002292:	3303      	adds	r3, #3
 8002294:	3348      	adds	r3, #72	@ 0x48
 8002296:	443b      	add	r3, r7
 8002298:	f813 3c44 	ldrb.w	r3, [r3, #-68]
 800229c:	b21b      	sxth	r3, r3
 800229e:	4313      	orrs	r3, r2
 80022a0:	b219      	sxth	r1, r3
 80022a2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80022a6:	089b      	lsrs	r3, r3, #2
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	461a      	mov	r2, r3
 80022ac:	b289      	uxth	r1, r1
 80022ae:	4b0b      	ldr	r3, [pc, #44]	@ (80022dc <MAX30100_ReadFIFO+0xec>)
 80022b0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for(uint8_t i = 0; i < num_sample; i += 4){
 80022b4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80022b8:	3304      	adds	r3, #4
 80022ba:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80022be:	f897 2047 	ldrb.w	r2, [r7, #71]	@ 0x47
 80022c2:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 80022c6:	429a      	cmp	r2, r3
 80022c8:	d3bd      	bcc.n	8002246 <MAX30100_ReadFIFO+0x56>
	}

}
 80022ca:	bf00      	nop
 80022cc:	bf00      	nop
 80022ce:	3748      	adds	r7, #72	@ 0x48
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	20000338 	.word	0x20000338
 80022d8:	20000344 	.word	0x20000344
 80022dc:	20000364 	.word	0x20000364

080022e0 <MAX30100_ReadTemperature>:

float MAX30100_ReadTemperature(){
 80022e0:	b5b0      	push	{r4, r5, r7, lr}
 80022e2:	b082      	sub	sp, #8
 80022e4:	af00      	add	r7, sp, #0
	int8_t tempInt = (int8_t) MAX30100_ReadReg(MAX30100_TMP_INTEGER);
 80022e6:	2016      	movs	r0, #22
 80022e8:	f7ff fdf4 	bl	8001ed4 <MAX30100_ReadReg>
 80022ec:	4603      	mov	r3, r0
 80022ee:	71fb      	strb	r3, [r7, #7]
	uint8_t tempFrac = MAX30100_ReadReg(MAX30100_TMP_FRACTION);
 80022f0:	2017      	movs	r0, #23
 80022f2:	f7ff fdef 	bl	8001ed4 <MAX30100_ReadReg>
 80022f6:	4603      	mov	r3, r0
 80022f8:	71bb      	strb	r3, [r7, #6]
	return (tempInt + tempFrac / 16.0);
 80022fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022fe:	4618      	mov	r0, r3
 8002300:	f7fe f910 	bl	8000524 <__aeabi_i2d>
 8002304:	4604      	mov	r4, r0
 8002306:	460d      	mov	r5, r1
 8002308:	79bb      	ldrb	r3, [r7, #6]
 800230a:	4618      	mov	r0, r3
 800230c:	f7fe f90a 	bl	8000524 <__aeabi_i2d>
 8002310:	f04f 0200 	mov.w	r2, #0
 8002314:	4b0b      	ldr	r3, [pc, #44]	@ (8002344 <MAX30100_ReadTemperature+0x64>)
 8002316:	f7fe fa99 	bl	800084c <__aeabi_ddiv>
 800231a:	4602      	mov	r2, r0
 800231c:	460b      	mov	r3, r1
 800231e:	4620      	mov	r0, r4
 8002320:	4629      	mov	r1, r5
 8002322:	f7fd ffb3 	bl	800028c <__adddf3>
 8002326:	4602      	mov	r2, r0
 8002328:	460b      	mov	r3, r1
 800232a:	4610      	mov	r0, r2
 800232c:	4619      	mov	r1, r3
 800232e:	f7fe fb75 	bl	8000a1c <__aeabi_d2f>
 8002332:	4603      	mov	r3, r0
 8002334:	ee07 3a90 	vmov	s15, r3
}
 8002338:	eeb0 0a67 	vmov.f32	s0, s15
 800233c:	3708      	adds	r7, #8
 800233e:	46bd      	mov	sp, r7
 8002340:	bdb0      	pop	{r4, r5, r7, pc}
 8002342:	bf00      	nop
 8002344:	40300000 	.word	0x40300000

08002348 <MAX30100_PlotIrToUART>:
	char data[15];
	sprintf(data, "temp:%d.%d\n", tempInt, tempFrac);
	HAL_UART_Transmit(uuart, data, strlen(data), MAX30100_TIMEOUT);
}

void MAX30100_PlotIrToUART(UART_HandleTypeDef *uuart, uint16_t *samples, uint8_t sampleSize){
 8002348:	b580      	push	{r7, lr}
 800234a:	b088      	sub	sp, #32
 800234c:	af00      	add	r7, sp, #0
 800234e:	60f8      	str	r0, [r7, #12]
 8002350:	60b9      	str	r1, [r7, #8]
 8002352:	4613      	mov	r3, r2
 8002354:	71fb      	strb	r3, [r7, #7]
	char data[10];
	for(uint8_t i = 0; i< sampleSize; i++){
 8002356:	2300      	movs	r3, #0
 8002358:	77fb      	strb	r3, [r7, #31]
 800235a:	e01c      	b.n	8002396 <MAX30100_PlotIrToUART+0x4e>
		sprintf(data, "s:%d\n", samples[i]);
 800235c:	7ffb      	ldrb	r3, [r7, #31]
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	68ba      	ldr	r2, [r7, #8]
 8002362:	4413      	add	r3, r2
 8002364:	881b      	ldrh	r3, [r3, #0]
 8002366:	461a      	mov	r2, r3
 8002368:	f107 0314 	add.w	r3, r7, #20
 800236c:	490e      	ldr	r1, [pc, #56]	@ (80023a8 <MAX30100_PlotIrToUART+0x60>)
 800236e:	4618      	mov	r0, r3
 8002370:	f003 fca0 	bl	8005cb4 <siprintf>
		HAL_UART_Transmit(uuart, data, strlen(data), MAX30100_TIMEOUT);
 8002374:	f107 0314 	add.w	r3, r7, #20
 8002378:	4618      	mov	r0, r3
 800237a:	f7fd ff29 	bl	80001d0 <strlen>
 800237e:	4603      	mov	r3, r0
 8002380:	b29a      	uxth	r2, r3
 8002382:	f107 0114 	add.w	r1, r7, #20
 8002386:	f04f 33ff 	mov.w	r3, #4294967295
 800238a:	68f8      	ldr	r0, [r7, #12]
 800238c:	f002 ff22 	bl	80051d4 <HAL_UART_Transmit>
	for(uint8_t i = 0; i< sampleSize; i++){
 8002390:	7ffb      	ldrb	r3, [r7, #31]
 8002392:	3301      	adds	r3, #1
 8002394:	77fb      	strb	r3, [r7, #31]
 8002396:	7ffa      	ldrb	r2, [r7, #31]
 8002398:	79fb      	ldrb	r3, [r7, #7]
 800239a:	429a      	cmp	r2, r3
 800239c:	d3de      	bcc.n	800235c <MAX30100_PlotIrToUART+0x14>
	}
}
 800239e:	bf00      	nop
 80023a0:	bf00      	nop
 80023a2:	3720      	adds	r7, #32
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	080066f0 	.word	0x080066f0

080023ac <MAX30100_PlotBothToUART>:

void MAX30100_PlotBothToUART(UART_HandleTypeDef *uuart, uint16_t *samplesRed, uint16_t *samplesIr, uint8_t sampleSize){
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b08a      	sub	sp, #40	@ 0x28
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	607a      	str	r2, [r7, #4]
 80023b8:	70fb      	strb	r3, [r7, #3]
	char data[20];
	for(uint8_t i = 0; i< sampleSize; i++){
 80023ba:	2300      	movs	r3, #0
 80023bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80023c0:	e025      	b.n	800240e <MAX30100_PlotBothToUART+0x62>
		sprintf(data, "red:%d\tir:%d\n", samplesRed[i], samplesIr[i]);
 80023c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80023c6:	005b      	lsls	r3, r3, #1
 80023c8:	68ba      	ldr	r2, [r7, #8]
 80023ca:	4413      	add	r3, r2
 80023cc:	881b      	ldrh	r3, [r3, #0]
 80023ce:	4619      	mov	r1, r3
 80023d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	4413      	add	r3, r2
 80023da:	881b      	ldrh	r3, [r3, #0]
 80023dc:	f107 0010 	add.w	r0, r7, #16
 80023e0:	460a      	mov	r2, r1
 80023e2:	4910      	ldr	r1, [pc, #64]	@ (8002424 <MAX30100_PlotBothToUART+0x78>)
 80023e4:	f003 fc66 	bl	8005cb4 <siprintf>
		HAL_UART_Transmit(uuart, data, strlen(data), MAX30100_TIMEOUT);
 80023e8:	f107 0310 	add.w	r3, r7, #16
 80023ec:	4618      	mov	r0, r3
 80023ee:	f7fd feef 	bl	80001d0 <strlen>
 80023f2:	4603      	mov	r3, r0
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	f107 0110 	add.w	r1, r7, #16
 80023fa:	f04f 33ff 	mov.w	r3, #4294967295
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	f002 fee8 	bl	80051d4 <HAL_UART_Transmit>
	for(uint8_t i = 0; i< sampleSize; i++){
 8002404:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002408:	3301      	adds	r3, #1
 800240a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800240e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002412:	78fb      	ldrb	r3, [r7, #3]
 8002414:	429a      	cmp	r2, r3
 8002416:	d3d4      	bcc.n	80023c2 <MAX30100_PlotBothToUART+0x16>
	}
}
 8002418:	bf00      	nop
 800241a:	bf00      	nop
 800241c:	3728      	adds	r7, #40	@ 0x28
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	080066f8 	.word	0x080066f8

08002428 <MAX30100_Stop>:

void MAX30100_Stop(void){
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
	_max30100_mode = MAX30100_IDLE_MODE;
 800242c:	4b06      	ldr	r3, [pc, #24]	@ (8002448 <MAX30100_Stop+0x20>)
 800242e:	2200      	movs	r2, #0
 8002430:	701a      	strb	r2, [r3, #0]
	MAX30100_SetLEDCurrent(MAX30100_LEDCURRENT_0_0, MAX30100_LEDCURRENT_0_0);
 8002432:	2100      	movs	r1, #0
 8002434:	2000      	movs	r0, #0
 8002436:	f7ff fea9 	bl	800218c <MAX30100_SetLEDCurrent>
	MAX30100_WriteReg(MAX30100_INTERRUPT_ENB, 0x00);
 800243a:	2100      	movs	r1, #0
 800243c:	2001      	movs	r0, #1
 800243e:	f7ff fd6d 	bl	8001f1c <MAX30100_WriteReg>
}
 8002442:	bf00      	nop
 8002444:	bd80      	pop	{r7, pc}
 8002446:	bf00      	nop
 8002448:	20000340 	.word	0x20000340

0800244c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002452:	2300      	movs	r3, #0
 8002454:	607b      	str	r3, [r7, #4]
 8002456:	4b10      	ldr	r3, [pc, #64]	@ (8002498 <HAL_MspInit+0x4c>)
 8002458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800245a:	4a0f      	ldr	r2, [pc, #60]	@ (8002498 <HAL_MspInit+0x4c>)
 800245c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002460:	6453      	str	r3, [r2, #68]	@ 0x44
 8002462:	4b0d      	ldr	r3, [pc, #52]	@ (8002498 <HAL_MspInit+0x4c>)
 8002464:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002466:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800246a:	607b      	str	r3, [r7, #4]
 800246c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800246e:	2300      	movs	r3, #0
 8002470:	603b      	str	r3, [r7, #0]
 8002472:	4b09      	ldr	r3, [pc, #36]	@ (8002498 <HAL_MspInit+0x4c>)
 8002474:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002476:	4a08      	ldr	r2, [pc, #32]	@ (8002498 <HAL_MspInit+0x4c>)
 8002478:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800247c:	6413      	str	r3, [r2, #64]	@ 0x40
 800247e:	4b06      	ldr	r3, [pc, #24]	@ (8002498 <HAL_MspInit+0x4c>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002482:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002486:	603b      	str	r3, [r7, #0]
 8002488:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800248a:	bf00      	nop
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	40023800 	.word	0x40023800

0800249c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b08a      	sub	sp, #40	@ 0x28
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a4:	f107 0314 	add.w	r3, r7, #20
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]
 80024ac:	605a      	str	r2, [r3, #4]
 80024ae:	609a      	str	r2, [r3, #8]
 80024b0:	60da      	str	r2, [r3, #12]
 80024b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a19      	ldr	r2, [pc, #100]	@ (8002520 <HAL_I2C_MspInit+0x84>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d12b      	bne.n	8002516 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024be:	2300      	movs	r3, #0
 80024c0:	613b      	str	r3, [r7, #16]
 80024c2:	4b18      	ldr	r3, [pc, #96]	@ (8002524 <HAL_I2C_MspInit+0x88>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c6:	4a17      	ldr	r2, [pc, #92]	@ (8002524 <HAL_I2C_MspInit+0x88>)
 80024c8:	f043 0302 	orr.w	r3, r3, #2
 80024cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ce:	4b15      	ldr	r3, [pc, #84]	@ (8002524 <HAL_I2C_MspInit+0x88>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d2:	f003 0302 	and.w	r3, r3, #2
 80024d6:	613b      	str	r3, [r7, #16]
 80024d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80024da:	23c0      	movs	r3, #192	@ 0xc0
 80024dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80024de:	2312      	movs	r3, #18
 80024e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e6:	2303      	movs	r3, #3
 80024e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80024ea:	2304      	movs	r3, #4
 80024ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024ee:	f107 0314 	add.w	r3, r7, #20
 80024f2:	4619      	mov	r1, r3
 80024f4:	480c      	ldr	r0, [pc, #48]	@ (8002528 <HAL_I2C_MspInit+0x8c>)
 80024f6:	f000 fba3 	bl	8002c40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	60fb      	str	r3, [r7, #12]
 80024fe:	4b09      	ldr	r3, [pc, #36]	@ (8002524 <HAL_I2C_MspInit+0x88>)
 8002500:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002502:	4a08      	ldr	r2, [pc, #32]	@ (8002524 <HAL_I2C_MspInit+0x88>)
 8002504:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002508:	6413      	str	r3, [r2, #64]	@ 0x40
 800250a:	4b06      	ldr	r3, [pc, #24]	@ (8002524 <HAL_I2C_MspInit+0x88>)
 800250c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800250e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002512:	60fb      	str	r3, [r7, #12]
 8002514:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002516:	bf00      	nop
 8002518:	3728      	adds	r7, #40	@ 0x28
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	40005400 	.word	0x40005400
 8002524:	40023800 	.word	0x40023800
 8002528:	40020400 	.word	0x40020400

0800252c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b08a      	sub	sp, #40	@ 0x28
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002534:	f107 0314 	add.w	r3, r7, #20
 8002538:	2200      	movs	r2, #0
 800253a:	601a      	str	r2, [r3, #0]
 800253c:	605a      	str	r2, [r3, #4]
 800253e:	609a      	str	r2, [r3, #8]
 8002540:	60da      	str	r2, [r3, #12]
 8002542:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a19      	ldr	r2, [pc, #100]	@ (80025b0 <HAL_SPI_MspInit+0x84>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d12c      	bne.n	80025a8 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800254e:	2300      	movs	r3, #0
 8002550:	613b      	str	r3, [r7, #16]
 8002552:	4b18      	ldr	r3, [pc, #96]	@ (80025b4 <HAL_SPI_MspInit+0x88>)
 8002554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002556:	4a17      	ldr	r2, [pc, #92]	@ (80025b4 <HAL_SPI_MspInit+0x88>)
 8002558:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800255c:	6413      	str	r3, [r2, #64]	@ 0x40
 800255e:	4b15      	ldr	r3, [pc, #84]	@ (80025b4 <HAL_SPI_MspInit+0x88>)
 8002560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002562:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002566:	613b      	str	r3, [r7, #16]
 8002568:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800256a:	2300      	movs	r3, #0
 800256c:	60fb      	str	r3, [r7, #12]
 800256e:	4b11      	ldr	r3, [pc, #68]	@ (80025b4 <HAL_SPI_MspInit+0x88>)
 8002570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002572:	4a10      	ldr	r2, [pc, #64]	@ (80025b4 <HAL_SPI_MspInit+0x88>)
 8002574:	f043 0302 	orr.w	r3, r3, #2
 8002578:	6313      	str	r3, [r2, #48]	@ 0x30
 800257a:	4b0e      	ldr	r3, [pc, #56]	@ (80025b4 <HAL_SPI_MspInit+0x88>)
 800257c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257e:	f003 0302 	and.w	r3, r3, #2
 8002582:	60fb      	str	r3, [r7, #12]
 8002584:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002586:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 800258a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800258c:	2302      	movs	r3, #2
 800258e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002590:	2300      	movs	r3, #0
 8002592:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002594:	2303      	movs	r3, #3
 8002596:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002598:	2305      	movs	r3, #5
 800259a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800259c:	f107 0314 	add.w	r3, r7, #20
 80025a0:	4619      	mov	r1, r3
 80025a2:	4805      	ldr	r0, [pc, #20]	@ (80025b8 <HAL_SPI_MspInit+0x8c>)
 80025a4:	f000 fb4c 	bl	8002c40 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 80025a8:	bf00      	nop
 80025aa:	3728      	adds	r7, #40	@ 0x28
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	40003800 	.word	0x40003800
 80025b4:	40023800 	.word	0x40023800
 80025b8:	40020400 	.word	0x40020400

080025bc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80025bc:	b480      	push	{r7}
 80025be:	b085      	sub	sp, #20
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025cc:	d10d      	bne.n	80025ea <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80025ce:	2300      	movs	r3, #0
 80025d0:	60fb      	str	r3, [r7, #12]
 80025d2:	4b09      	ldr	r3, [pc, #36]	@ (80025f8 <HAL_TIM_Base_MspInit+0x3c>)
 80025d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025d6:	4a08      	ldr	r2, [pc, #32]	@ (80025f8 <HAL_TIM_Base_MspInit+0x3c>)
 80025d8:	f043 0301 	orr.w	r3, r3, #1
 80025dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80025de:	4b06      	ldr	r3, [pc, #24]	@ (80025f8 <HAL_TIM_Base_MspInit+0x3c>)
 80025e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025e2:	f003 0301 	and.w	r3, r3, #1
 80025e6:	60fb      	str	r3, [r7, #12]
 80025e8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80025ea:	bf00      	nop
 80025ec:	3714      	adds	r7, #20
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	40023800 	.word	0x40023800

080025fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b08a      	sub	sp, #40	@ 0x28
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002604:	f107 0314 	add.w	r3, r7, #20
 8002608:	2200      	movs	r2, #0
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	605a      	str	r2, [r3, #4]
 800260e:	609a      	str	r2, [r3, #8]
 8002610:	60da      	str	r2, [r3, #12]
 8002612:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a19      	ldr	r2, [pc, #100]	@ (8002680 <HAL_UART_MspInit+0x84>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d12c      	bne.n	8002678 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800261e:	2300      	movs	r3, #0
 8002620:	613b      	str	r3, [r7, #16]
 8002622:	4b18      	ldr	r3, [pc, #96]	@ (8002684 <HAL_UART_MspInit+0x88>)
 8002624:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002626:	4a17      	ldr	r2, [pc, #92]	@ (8002684 <HAL_UART_MspInit+0x88>)
 8002628:	f043 0310 	orr.w	r3, r3, #16
 800262c:	6453      	str	r3, [r2, #68]	@ 0x44
 800262e:	4b15      	ldr	r3, [pc, #84]	@ (8002684 <HAL_UART_MspInit+0x88>)
 8002630:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002632:	f003 0310 	and.w	r3, r3, #16
 8002636:	613b      	str	r3, [r7, #16]
 8002638:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800263a:	2300      	movs	r3, #0
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	4b11      	ldr	r3, [pc, #68]	@ (8002684 <HAL_UART_MspInit+0x88>)
 8002640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002642:	4a10      	ldr	r2, [pc, #64]	@ (8002684 <HAL_UART_MspInit+0x88>)
 8002644:	f043 0301 	orr.w	r3, r3, #1
 8002648:	6313      	str	r3, [r2, #48]	@ 0x30
 800264a:	4b0e      	ldr	r3, [pc, #56]	@ (8002684 <HAL_UART_MspInit+0x88>)
 800264c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	60fb      	str	r3, [r7, #12]
 8002654:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002656:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800265a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800265c:	2302      	movs	r3, #2
 800265e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002660:	2300      	movs	r3, #0
 8002662:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002664:	2303      	movs	r3, #3
 8002666:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002668:	2307      	movs	r3, #7
 800266a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800266c:	f107 0314 	add.w	r3, r7, #20
 8002670:	4619      	mov	r1, r3
 8002672:	4805      	ldr	r0, [pc, #20]	@ (8002688 <HAL_UART_MspInit+0x8c>)
 8002674:	f000 fae4 	bl	8002c40 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002678:	bf00      	nop
 800267a:	3728      	adds	r7, #40	@ 0x28
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	40011000 	.word	0x40011000
 8002684:	40023800 	.word	0x40023800
 8002688:	40020000 	.word	0x40020000

0800268c <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800268c:	b580      	push	{r7, lr}
 800268e:	b086      	sub	sp, #24
 8002690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8002692:	1d3b      	adds	r3, r7, #4
 8002694:	2200      	movs	r2, #0
 8002696:	601a      	str	r2, [r3, #0]
 8002698:	605a      	str	r2, [r3, #4]
 800269a:	609a      	str	r2, [r3, #8]
 800269c:	60da      	str	r2, [r3, #12]
 800269e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 80026a0:	4b1c      	ldr	r3, [pc, #112]	@ (8002714 <HAL_FSMC_MspInit+0x88>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d131      	bne.n	800270c <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 80026a8:	4b1a      	ldr	r3, [pc, #104]	@ (8002714 <HAL_FSMC_MspInit+0x88>)
 80026aa:	2201      	movs	r2, #1
 80026ac:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 80026ae:	2300      	movs	r3, #0
 80026b0:	603b      	str	r3, [r7, #0]
 80026b2:	4b19      	ldr	r3, [pc, #100]	@ (8002718 <HAL_FSMC_MspInit+0x8c>)
 80026b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026b6:	4a18      	ldr	r2, [pc, #96]	@ (8002718 <HAL_FSMC_MspInit+0x8c>)
 80026b8:	f043 0301 	orr.w	r3, r3, #1
 80026bc:	6393      	str	r3, [r2, #56]	@ 0x38
 80026be:	4b16      	ldr	r3, [pc, #88]	@ (8002718 <HAL_FSMC_MspInit+0x8c>)
 80026c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	603b      	str	r3, [r7, #0]
 80026c8:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80026ca:	f64f 7380 	movw	r3, #65408	@ 0xff80
 80026ce:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026d0:	2302      	movs	r3, #2
 80026d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026d4:	2300      	movs	r3, #0
 80026d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026d8:	2303      	movs	r3, #3
 80026da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80026dc:	230c      	movs	r3, #12
 80026de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80026e0:	1d3b      	adds	r3, r7, #4
 80026e2:	4619      	mov	r1, r3
 80026e4:	480d      	ldr	r0, [pc, #52]	@ (800271c <HAL_FSMC_MspInit+0x90>)
 80026e6:	f000 faab 	bl	8002c40 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 80026ea:	f24e 73b3 	movw	r3, #59315	@ 0xe7b3
 80026ee:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026f0:	2302      	movs	r3, #2
 80026f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f4:	2300      	movs	r3, #0
 80026f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f8:	2303      	movs	r3, #3
 80026fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80026fc:	230c      	movs	r3, #12
 80026fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002700:	1d3b      	adds	r3, r7, #4
 8002702:	4619      	mov	r1, r3
 8002704:	4806      	ldr	r0, [pc, #24]	@ (8002720 <HAL_FSMC_MspInit+0x94>)
 8002706:	f000 fa9b 	bl	8002c40 <HAL_GPIO_Init>
 800270a:	e000      	b.n	800270e <HAL_FSMC_MspInit+0x82>
    return;
 800270c:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 800270e:	3718      	adds	r7, #24
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	2000038c 	.word	0x2000038c
 8002718:	40023800 	.word	0x40023800
 800271c:	40021000 	.word	0x40021000
 8002720:	40020c00 	.word	0x40020c00

08002724 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002724:	b580      	push	{r7, lr}
 8002726:	b082      	sub	sp, #8
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 800272c:	f7ff ffae 	bl	800268c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8002730:	bf00      	nop
 8002732:	3708      	adds	r7, #8
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}

08002738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800273c:	bf00      	nop
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002746:	b480      	push	{r7}
 8002748:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800274a:	bf00      	nop
 800274c:	e7fd      	b.n	800274a <HardFault_Handler+0x4>

0800274e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800274e:	b480      	push	{r7}
 8002750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002752:	bf00      	nop
 8002754:	e7fd      	b.n	8002752 <MemManage_Handler+0x4>

08002756 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002756:	b480      	push	{r7}
 8002758:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800275a:	bf00      	nop
 800275c:	e7fd      	b.n	800275a <BusFault_Handler+0x4>

0800275e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800275e:	b480      	push	{r7}
 8002760:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002762:	bf00      	nop
 8002764:	e7fd      	b.n	8002762 <UsageFault_Handler+0x4>

08002766 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002766:	b480      	push	{r7}
 8002768:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800276a:	bf00      	nop
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr

08002774 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002774:	b480      	push	{r7}
 8002776:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002778:	bf00      	nop
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002782:	b480      	push	{r7}
 8002784:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002786:	bf00      	nop
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002794:	f000 f8fe 	bl	8002994 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002798:	bf00      	nop
 800279a:	bd80      	pop	{r7, pc}

0800279c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80027a0:	2001      	movs	r0, #1
 80027a2:	f000 fc03 	bl	8002fac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  MAX30100_InterruptHandler();
 80027a6:	f7ff fc0b 	bl	8001fc0 <MAX30100_InterruptHandler>
  /* USER CODE END EXTI0_IRQn 1 */
}
 80027aa:	bf00      	nop
 80027ac:	bd80      	pop	{r7, pc}
	...

080027b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027b8:	4a14      	ldr	r2, [pc, #80]	@ (800280c <_sbrk+0x5c>)
 80027ba:	4b15      	ldr	r3, [pc, #84]	@ (8002810 <_sbrk+0x60>)
 80027bc:	1ad3      	subs	r3, r2, r3
 80027be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027c4:	4b13      	ldr	r3, [pc, #76]	@ (8002814 <_sbrk+0x64>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d102      	bne.n	80027d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027cc:	4b11      	ldr	r3, [pc, #68]	@ (8002814 <_sbrk+0x64>)
 80027ce:	4a12      	ldr	r2, [pc, #72]	@ (8002818 <_sbrk+0x68>)
 80027d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027d2:	4b10      	ldr	r3, [pc, #64]	@ (8002814 <_sbrk+0x64>)
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4413      	add	r3, r2
 80027da:	693a      	ldr	r2, [r7, #16]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d207      	bcs.n	80027f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027e0:	f003 fac0 	bl	8005d64 <__errno>
 80027e4:	4603      	mov	r3, r0
 80027e6:	220c      	movs	r2, #12
 80027e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027ea:	f04f 33ff 	mov.w	r3, #4294967295
 80027ee:	e009      	b.n	8002804 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027f0:	4b08      	ldr	r3, [pc, #32]	@ (8002814 <_sbrk+0x64>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027f6:	4b07      	ldr	r3, [pc, #28]	@ (8002814 <_sbrk+0x64>)
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4413      	add	r3, r2
 80027fe:	4a05      	ldr	r2, [pc, #20]	@ (8002814 <_sbrk+0x64>)
 8002800:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002802:	68fb      	ldr	r3, [r7, #12]
}
 8002804:	4618      	mov	r0, r3
 8002806:	3718      	adds	r7, #24
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	20020000 	.word	0x20020000
 8002810:	00000400 	.word	0x00000400
 8002814:	20000390 	.word	0x20000390
 8002818:	20000500 	.word	0x20000500

0800281c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002820:	4b06      	ldr	r3, [pc, #24]	@ (800283c <SystemInit+0x20>)
 8002822:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002826:	4a05      	ldr	r2, [pc, #20]	@ (800283c <SystemInit+0x20>)
 8002828:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800282c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002830:	bf00      	nop
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
 800283a:	bf00      	nop
 800283c:	e000ed00 	.word	0xe000ed00

08002840 <TouchCalibrate>:

	return true;
}

void TouchCalibrate(void)
{
 8002840:	b5b0      	push	{r4, r5, r7, lr}
 8002842:	b08c      	sub	sp, #48	@ 0x30
 8002844:	af00      	add	r7, sp, #0
//	uint16_t x;
//	uint16_t y;
	POINT_T raw_points[3];
	POINT_T display_points[3] = {{40, 40}, {200, 40}, {200, 280}};
 8002846:	4b13      	ldr	r3, [pc, #76]	@ (8002894 <TouchCalibrate+0x54>)
 8002848:	463c      	mov	r4, r7
 800284a:	461d      	mov	r5, r3
 800284c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800284e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002850:	e895 0003 	ldmia.w	r5, {r0, r1}
 8002854:	e884 0003 	stmia.w	r4, {r0, r1}

	raw_points[0].x = 2970;
 8002858:	f640 339a 	movw	r3, #2970	@ 0xb9a
 800285c:	61bb      	str	r3, [r7, #24]
	raw_points[0].y = 670;
 800285e:	f240 239e 	movw	r3, #670	@ 0x29e
 8002862:	61fb      	str	r3, [r7, #28]



    /* second point */

	raw_points[1].x = 865;
 8002864:	f240 3361 	movw	r3, #865	@ 0x361
 8002868:	623b      	str	r3, [r7, #32]
	raw_points[1].y = 711;
 800286a:	f240 23c7 	movw	r3, #711	@ 0x2c7
 800286e:	627b      	str	r3, [r7, #36]	@ 0x24




	raw_points[2].x = 789;
 8002870:	f240 3315 	movw	r3, #789	@ 0x315
 8002874:	62bb      	str	r3, [r7, #40]	@ 0x28
	raw_points[2].y = 3239;
 8002876:	f640 43a7 	movw	r3, #3239	@ 0xca7
 800287a:	62fb      	str	r3, [r7, #44]	@ 0x2c



	(void)setCalibrationMatrix(display_points, raw_points, &matrix);
 800287c:	f107 0118 	add.w	r1, r7, #24
 8002880:	463b      	mov	r3, r7
 8002882:	4a05      	ldr	r2, [pc, #20]	@ (8002898 <TouchCalibrate+0x58>)
 8002884:	4618      	mov	r0, r3
 8002886:	f7fe fa91 	bl	8000dac <setCalibrationMatrix>
}
 800288a:	bf00      	nop
 800288c:	3730      	adds	r7, #48	@ 0x30
 800288e:	46bd      	mov	sp, r7
 8002890:	bdb0      	pop	{r4, r5, r7, pc}
 8002892:	bf00      	nop
 8002894:	08006708 	.word	0x08006708
 8002898:	20000394 	.word	0x20000394

0800289c <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack     /* set stack pointer */
 800289c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80028d4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80028a0:	f7ff ffbc 	bl	800281c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028a4:	480c      	ldr	r0, [pc, #48]	@ (80028d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80028a6:	490d      	ldr	r1, [pc, #52]	@ (80028dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80028a8:	4a0d      	ldr	r2, [pc, #52]	@ (80028e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80028aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028ac:	e002      	b.n	80028b4 <LoopCopyDataInit>

080028ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028b2:	3304      	adds	r3, #4

080028b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028b8:	d3f9      	bcc.n	80028ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028ba:	4a0a      	ldr	r2, [pc, #40]	@ (80028e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80028bc:	4c0a      	ldr	r4, [pc, #40]	@ (80028e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80028be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028c0:	e001      	b.n	80028c6 <LoopFillZerobss>

080028c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028c4:	3204      	adds	r2, #4

080028c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028c8:	d3fb      	bcc.n	80028c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028ca:	f003 fa51 	bl	8005d70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028ce:	f7ff f805 	bl	80018dc <main>
  bx  lr    
 80028d2:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack     /* set stack pointer */
 80028d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80028d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028dc:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 80028e0:	080077d0 	.word	0x080077d0
  ldr r2, =_sbss
 80028e4:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 80028e8:	200004fc 	.word	0x200004fc

080028ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028ec:	e7fe      	b.n	80028ec <ADC_IRQHandler>
	...

080028f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028f4:	4b0e      	ldr	r3, [pc, #56]	@ (8002930 <HAL_Init+0x40>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4a0d      	ldr	r2, [pc, #52]	@ (8002930 <HAL_Init+0x40>)
 80028fa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028fe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002900:	4b0b      	ldr	r3, [pc, #44]	@ (8002930 <HAL_Init+0x40>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a0a      	ldr	r2, [pc, #40]	@ (8002930 <HAL_Init+0x40>)
 8002906:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800290a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800290c:	4b08      	ldr	r3, [pc, #32]	@ (8002930 <HAL_Init+0x40>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a07      	ldr	r2, [pc, #28]	@ (8002930 <HAL_Init+0x40>)
 8002912:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002916:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002918:	2003      	movs	r0, #3
 800291a:	f000 f94f 	bl	8002bbc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800291e:	200f      	movs	r0, #15
 8002920:	f000 f808 	bl	8002934 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002924:	f7ff fd92 	bl	800244c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002928:	2300      	movs	r3, #0
}
 800292a:	4618      	mov	r0, r3
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	40023c00 	.word	0x40023c00

08002934 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800293c:	4b12      	ldr	r3, [pc, #72]	@ (8002988 <HAL_InitTick+0x54>)
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	4b12      	ldr	r3, [pc, #72]	@ (800298c <HAL_InitTick+0x58>)
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	4619      	mov	r1, r3
 8002946:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800294a:	fbb3 f3f1 	udiv	r3, r3, r1
 800294e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002952:	4618      	mov	r0, r3
 8002954:	f000 f967 	bl	8002c26 <HAL_SYSTICK_Config>
 8002958:	4603      	mov	r3, r0
 800295a:	2b00      	cmp	r3, #0
 800295c:	d001      	beq.n	8002962 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e00e      	b.n	8002980 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b0f      	cmp	r3, #15
 8002966:	d80a      	bhi.n	800297e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002968:	2200      	movs	r2, #0
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	f04f 30ff 	mov.w	r0, #4294967295
 8002970:	f000 f92f 	bl	8002bd2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002974:	4a06      	ldr	r2, [pc, #24]	@ (8002990 <HAL_InitTick+0x5c>)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800297a:	2300      	movs	r3, #0
 800297c:	e000      	b.n	8002980 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800297e:	2301      	movs	r3, #1
}
 8002980:	4618      	mov	r0, r3
 8002982:	3708      	adds	r7, #8
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}
 8002988:	20000028 	.word	0x20000028
 800298c:	20000030 	.word	0x20000030
 8002990:	2000002c 	.word	0x2000002c

08002994 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002994:	b480      	push	{r7}
 8002996:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002998:	4b06      	ldr	r3, [pc, #24]	@ (80029b4 <HAL_IncTick+0x20>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	461a      	mov	r2, r3
 800299e:	4b06      	ldr	r3, [pc, #24]	@ (80029b8 <HAL_IncTick+0x24>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4413      	add	r3, r2
 80029a4:	4a04      	ldr	r2, [pc, #16]	@ (80029b8 <HAL_IncTick+0x24>)
 80029a6:	6013      	str	r3, [r2, #0]
}
 80029a8:	bf00      	nop
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	20000030 	.word	0x20000030
 80029b8:	200003b0 	.word	0x200003b0

080029bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  return uwTick;
 80029c0:	4b03      	ldr	r3, [pc, #12]	@ (80029d0 <HAL_GetTick+0x14>)
 80029c2:	681b      	ldr	r3, [r3, #0]
}
 80029c4:	4618      	mov	r0, r3
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr
 80029ce:	bf00      	nop
 80029d0:	200003b0 	.word	0x200003b0

080029d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029dc:	f7ff ffee 	bl	80029bc <HAL_GetTick>
 80029e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029ec:	d005      	beq.n	80029fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029ee:	4b0a      	ldr	r3, [pc, #40]	@ (8002a18 <HAL_Delay+0x44>)
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	461a      	mov	r2, r3
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	4413      	add	r3, r2
 80029f8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029fa:	bf00      	nop
 80029fc:	f7ff ffde 	bl	80029bc <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	68fa      	ldr	r2, [r7, #12]
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d8f7      	bhi.n	80029fc <HAL_Delay+0x28>
  {
  }
}
 8002a0c:	bf00      	nop
 8002a0e:	bf00      	nop
 8002a10:	3710      	adds	r7, #16
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	20000030 	.word	0x20000030

08002a1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b085      	sub	sp, #20
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f003 0307 	and.w	r3, r3, #7
 8002a2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a60 <__NVIC_SetPriorityGrouping+0x44>)
 8002a2e:	68db      	ldr	r3, [r3, #12]
 8002a30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a32:	68ba      	ldr	r2, [r7, #8]
 8002a34:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a38:	4013      	ands	r3, r2
 8002a3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a44:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a48:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a4e:	4a04      	ldr	r2, [pc, #16]	@ (8002a60 <__NVIC_SetPriorityGrouping+0x44>)
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	60d3      	str	r3, [r2, #12]
}
 8002a54:	bf00      	nop
 8002a56:	3714      	adds	r7, #20
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	e000ed00 	.word	0xe000ed00

08002a64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a68:	4b04      	ldr	r3, [pc, #16]	@ (8002a7c <__NVIC_GetPriorityGrouping+0x18>)
 8002a6a:	68db      	ldr	r3, [r3, #12]
 8002a6c:	0a1b      	lsrs	r3, r3, #8
 8002a6e:	f003 0307 	and.w	r3, r3, #7
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	46bd      	mov	sp, r7
 8002a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7a:	4770      	bx	lr
 8002a7c:	e000ed00 	.word	0xe000ed00

08002a80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	4603      	mov	r3, r0
 8002a88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	db0b      	blt.n	8002aaa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a92:	79fb      	ldrb	r3, [r7, #7]
 8002a94:	f003 021f 	and.w	r2, r3, #31
 8002a98:	4907      	ldr	r1, [pc, #28]	@ (8002ab8 <__NVIC_EnableIRQ+0x38>)
 8002a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9e:	095b      	lsrs	r3, r3, #5
 8002aa0:	2001      	movs	r0, #1
 8002aa2:	fa00 f202 	lsl.w	r2, r0, r2
 8002aa6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	e000e100 	.word	0xe000e100

08002abc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	6039      	str	r1, [r7, #0]
 8002ac6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	db0a      	blt.n	8002ae6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ad0:	683b      	ldr	r3, [r7, #0]
 8002ad2:	b2da      	uxtb	r2, r3
 8002ad4:	490c      	ldr	r1, [pc, #48]	@ (8002b08 <__NVIC_SetPriority+0x4c>)
 8002ad6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ada:	0112      	lsls	r2, r2, #4
 8002adc:	b2d2      	uxtb	r2, r2
 8002ade:	440b      	add	r3, r1
 8002ae0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ae4:	e00a      	b.n	8002afc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae6:	683b      	ldr	r3, [r7, #0]
 8002ae8:	b2da      	uxtb	r2, r3
 8002aea:	4908      	ldr	r1, [pc, #32]	@ (8002b0c <__NVIC_SetPriority+0x50>)
 8002aec:	79fb      	ldrb	r3, [r7, #7]
 8002aee:	f003 030f 	and.w	r3, r3, #15
 8002af2:	3b04      	subs	r3, #4
 8002af4:	0112      	lsls	r2, r2, #4
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	440b      	add	r3, r1
 8002afa:	761a      	strb	r2, [r3, #24]
}
 8002afc:	bf00      	nop
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr
 8002b08:	e000e100 	.word	0xe000e100
 8002b0c:	e000ed00 	.word	0xe000ed00

08002b10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b089      	sub	sp, #36	@ 0x24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f003 0307 	and.w	r3, r3, #7
 8002b22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b24:	69fb      	ldr	r3, [r7, #28]
 8002b26:	f1c3 0307 	rsb	r3, r3, #7
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	bf28      	it	cs
 8002b2e:	2304      	movcs	r3, #4
 8002b30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	3304      	adds	r3, #4
 8002b36:	2b06      	cmp	r3, #6
 8002b38:	d902      	bls.n	8002b40 <NVIC_EncodePriority+0x30>
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	3b03      	subs	r3, #3
 8002b3e:	e000      	b.n	8002b42 <NVIC_EncodePriority+0x32>
 8002b40:	2300      	movs	r3, #0
 8002b42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b44:	f04f 32ff 	mov.w	r2, #4294967295
 8002b48:	69bb      	ldr	r3, [r7, #24]
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	43da      	mvns	r2, r3
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	401a      	ands	r2, r3
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b58:	f04f 31ff 	mov.w	r1, #4294967295
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b62:	43d9      	mvns	r1, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b68:	4313      	orrs	r3, r2
         );
}
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3724      	adds	r7, #36	@ 0x24
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b74:	4770      	bx	lr
	...

08002b78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b082      	sub	sp, #8
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	3b01      	subs	r3, #1
 8002b84:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b88:	d301      	bcc.n	8002b8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e00f      	b.n	8002bae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b8e:	4a0a      	ldr	r2, [pc, #40]	@ (8002bb8 <SysTick_Config+0x40>)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3b01      	subs	r3, #1
 8002b94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b96:	210f      	movs	r1, #15
 8002b98:	f04f 30ff 	mov.w	r0, #4294967295
 8002b9c:	f7ff ff8e 	bl	8002abc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ba0:	4b05      	ldr	r3, [pc, #20]	@ (8002bb8 <SysTick_Config+0x40>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ba6:	4b04      	ldr	r3, [pc, #16]	@ (8002bb8 <SysTick_Config+0x40>)
 8002ba8:	2207      	movs	r2, #7
 8002baa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	bf00      	nop
 8002bb8:	e000e010 	.word	0xe000e010

08002bbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f7ff ff29 	bl	8002a1c <__NVIC_SetPriorityGrouping>
}
 8002bca:	bf00      	nop
 8002bcc:	3708      	adds	r7, #8
 8002bce:	46bd      	mov	sp, r7
 8002bd0:	bd80      	pop	{r7, pc}

08002bd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bd2:	b580      	push	{r7, lr}
 8002bd4:	b086      	sub	sp, #24
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	4603      	mov	r3, r0
 8002bda:	60b9      	str	r1, [r7, #8]
 8002bdc:	607a      	str	r2, [r7, #4]
 8002bde:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002be0:	2300      	movs	r3, #0
 8002be2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002be4:	f7ff ff3e 	bl	8002a64 <__NVIC_GetPriorityGrouping>
 8002be8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bea:	687a      	ldr	r2, [r7, #4]
 8002bec:	68b9      	ldr	r1, [r7, #8]
 8002bee:	6978      	ldr	r0, [r7, #20]
 8002bf0:	f7ff ff8e 	bl	8002b10 <NVIC_EncodePriority>
 8002bf4:	4602      	mov	r2, r0
 8002bf6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bfa:	4611      	mov	r1, r2
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff ff5d 	bl	8002abc <__NVIC_SetPriority>
}
 8002c02:	bf00      	nop
 8002c04:	3718      	adds	r7, #24
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b082      	sub	sp, #8
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	4603      	mov	r3, r0
 8002c12:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff ff31 	bl	8002a80 <__NVIC_EnableIRQ>
}
 8002c1e:	bf00      	nop
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b082      	sub	sp, #8
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f7ff ffa2 	bl	8002b78 <SysTick_Config>
 8002c34:	4603      	mov	r3, r0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3708      	adds	r7, #8
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
	...

08002c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b089      	sub	sp, #36	@ 0x24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
 8002c48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c52:	2300      	movs	r3, #0
 8002c54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c56:	2300      	movs	r3, #0
 8002c58:	61fb      	str	r3, [r7, #28]
 8002c5a:	e16b      	b.n	8002f34 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c70:	693a      	ldr	r2, [r7, #16]
 8002c72:	697b      	ldr	r3, [r7, #20]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	f040 815a 	bne.w	8002f2e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	f003 0303 	and.w	r3, r3, #3
 8002c82:	2b01      	cmp	r3, #1
 8002c84:	d005      	beq.n	8002c92 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d130      	bne.n	8002cf4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	2203      	movs	r2, #3
 8002c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca2:	43db      	mvns	r3, r3
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	4013      	ands	r3, r2
 8002ca8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	68da      	ldr	r2, [r3, #12]
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	005b      	lsls	r3, r3, #1
 8002cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	69ba      	ldr	r2, [r7, #24]
 8002cc0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cc8:	2201      	movs	r2, #1
 8002cca:	69fb      	ldr	r3, [r7, #28]
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	43db      	mvns	r3, r3
 8002cd2:	69ba      	ldr	r2, [r7, #24]
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	091b      	lsrs	r3, r3, #4
 8002cde:	f003 0201 	and.w	r2, r3, #1
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce8:	69ba      	ldr	r2, [r7, #24]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f003 0303 	and.w	r3, r3, #3
 8002cfc:	2b03      	cmp	r3, #3
 8002cfe:	d017      	beq.n	8002d30 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	2203      	movs	r2, #3
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	43db      	mvns	r3, r3
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	4013      	ands	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	005b      	lsls	r3, r3, #1
 8002d20:	fa02 f303 	lsl.w	r3, r2, r3
 8002d24:	69ba      	ldr	r2, [r7, #24]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d30:	683b      	ldr	r3, [r7, #0]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f003 0303 	and.w	r3, r3, #3
 8002d38:	2b02      	cmp	r3, #2
 8002d3a:	d123      	bne.n	8002d84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	08da      	lsrs	r2, r3, #3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	3208      	adds	r2, #8
 8002d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	f003 0307 	and.w	r3, r3, #7
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	220f      	movs	r2, #15
 8002d54:	fa02 f303 	lsl.w	r3, r2, r3
 8002d58:	43db      	mvns	r3, r3
 8002d5a:	69ba      	ldr	r2, [r7, #24]
 8002d5c:	4013      	ands	r3, r2
 8002d5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	691a      	ldr	r2, [r3, #16]
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	f003 0307 	and.w	r3, r3, #7
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d70:	69ba      	ldr	r2, [r7, #24]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d76:	69fb      	ldr	r3, [r7, #28]
 8002d78:	08da      	lsrs	r2, r3, #3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	3208      	adds	r2, #8
 8002d7e:	69b9      	ldr	r1, [r7, #24]
 8002d80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d8a:	69fb      	ldr	r3, [r7, #28]
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	2203      	movs	r2, #3
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	43db      	mvns	r3, r3
 8002d96:	69ba      	ldr	r2, [r7, #24]
 8002d98:	4013      	ands	r3, r2
 8002d9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d9c:	683b      	ldr	r3, [r7, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f003 0203 	and.w	r2, r3, #3
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	4313      	orrs	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	69ba      	ldr	r2, [r7, #24]
 8002db6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	f000 80b4 	beq.w	8002f2e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	60fb      	str	r3, [r7, #12]
 8002dca:	4b60      	ldr	r3, [pc, #384]	@ (8002f4c <HAL_GPIO_Init+0x30c>)
 8002dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dce:	4a5f      	ldr	r2, [pc, #380]	@ (8002f4c <HAL_GPIO_Init+0x30c>)
 8002dd0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002dd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dd6:	4b5d      	ldr	r3, [pc, #372]	@ (8002f4c <HAL_GPIO_Init+0x30c>)
 8002dd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dda:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dde:	60fb      	str	r3, [r7, #12]
 8002de0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002de2:	4a5b      	ldr	r2, [pc, #364]	@ (8002f50 <HAL_GPIO_Init+0x310>)
 8002de4:	69fb      	ldr	r3, [r7, #28]
 8002de6:	089b      	lsrs	r3, r3, #2
 8002de8:	3302      	adds	r3, #2
 8002dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002df0:	69fb      	ldr	r3, [r7, #28]
 8002df2:	f003 0303 	and.w	r3, r3, #3
 8002df6:	009b      	lsls	r3, r3, #2
 8002df8:	220f      	movs	r2, #15
 8002dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfe:	43db      	mvns	r3, r3
 8002e00:	69ba      	ldr	r2, [r7, #24]
 8002e02:	4013      	ands	r3, r2
 8002e04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a52      	ldr	r2, [pc, #328]	@ (8002f54 <HAL_GPIO_Init+0x314>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d02b      	beq.n	8002e66 <HAL_GPIO_Init+0x226>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	4a51      	ldr	r2, [pc, #324]	@ (8002f58 <HAL_GPIO_Init+0x318>)
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d025      	beq.n	8002e62 <HAL_GPIO_Init+0x222>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4a50      	ldr	r2, [pc, #320]	@ (8002f5c <HAL_GPIO_Init+0x31c>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d01f      	beq.n	8002e5e <HAL_GPIO_Init+0x21e>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	4a4f      	ldr	r2, [pc, #316]	@ (8002f60 <HAL_GPIO_Init+0x320>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d019      	beq.n	8002e5a <HAL_GPIO_Init+0x21a>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	4a4e      	ldr	r2, [pc, #312]	@ (8002f64 <HAL_GPIO_Init+0x324>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d013      	beq.n	8002e56 <HAL_GPIO_Init+0x216>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	4a4d      	ldr	r2, [pc, #308]	@ (8002f68 <HAL_GPIO_Init+0x328>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d00d      	beq.n	8002e52 <HAL_GPIO_Init+0x212>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	4a4c      	ldr	r2, [pc, #304]	@ (8002f6c <HAL_GPIO_Init+0x32c>)
 8002e3a:	4293      	cmp	r3, r2
 8002e3c:	d007      	beq.n	8002e4e <HAL_GPIO_Init+0x20e>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	4a4b      	ldr	r2, [pc, #300]	@ (8002f70 <HAL_GPIO_Init+0x330>)
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d101      	bne.n	8002e4a <HAL_GPIO_Init+0x20a>
 8002e46:	2307      	movs	r3, #7
 8002e48:	e00e      	b.n	8002e68 <HAL_GPIO_Init+0x228>
 8002e4a:	2308      	movs	r3, #8
 8002e4c:	e00c      	b.n	8002e68 <HAL_GPIO_Init+0x228>
 8002e4e:	2306      	movs	r3, #6
 8002e50:	e00a      	b.n	8002e68 <HAL_GPIO_Init+0x228>
 8002e52:	2305      	movs	r3, #5
 8002e54:	e008      	b.n	8002e68 <HAL_GPIO_Init+0x228>
 8002e56:	2304      	movs	r3, #4
 8002e58:	e006      	b.n	8002e68 <HAL_GPIO_Init+0x228>
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e004      	b.n	8002e68 <HAL_GPIO_Init+0x228>
 8002e5e:	2302      	movs	r3, #2
 8002e60:	e002      	b.n	8002e68 <HAL_GPIO_Init+0x228>
 8002e62:	2301      	movs	r3, #1
 8002e64:	e000      	b.n	8002e68 <HAL_GPIO_Init+0x228>
 8002e66:	2300      	movs	r3, #0
 8002e68:	69fa      	ldr	r2, [r7, #28]
 8002e6a:	f002 0203 	and.w	r2, r2, #3
 8002e6e:	0092      	lsls	r2, r2, #2
 8002e70:	4093      	lsls	r3, r2
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	4313      	orrs	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e78:	4935      	ldr	r1, [pc, #212]	@ (8002f50 <HAL_GPIO_Init+0x310>)
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	089b      	lsrs	r3, r3, #2
 8002e7e:	3302      	adds	r3, #2
 8002e80:	69ba      	ldr	r2, [r7, #24]
 8002e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e86:	4b3b      	ldr	r3, [pc, #236]	@ (8002f74 <HAL_GPIO_Init+0x334>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	43db      	mvns	r3, r3
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	4013      	ands	r3, r2
 8002e94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685b      	ldr	r3, [r3, #4]
 8002e9a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d003      	beq.n	8002eaa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002ea2:	69ba      	ldr	r2, [r7, #24]
 8002ea4:	693b      	ldr	r3, [r7, #16]
 8002ea6:	4313      	orrs	r3, r2
 8002ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002eaa:	4a32      	ldr	r2, [pc, #200]	@ (8002f74 <HAL_GPIO_Init+0x334>)
 8002eac:	69bb      	ldr	r3, [r7, #24]
 8002eae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002eb0:	4b30      	ldr	r3, [pc, #192]	@ (8002f74 <HAL_GPIO_Init+0x334>)
 8002eb2:	68db      	ldr	r3, [r3, #12]
 8002eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d003      	beq.n	8002ed4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ecc:	69ba      	ldr	r2, [r7, #24]
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ed4:	4a27      	ldr	r2, [pc, #156]	@ (8002f74 <HAL_GPIO_Init+0x334>)
 8002ed6:	69bb      	ldr	r3, [r7, #24]
 8002ed8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002eda:	4b26      	ldr	r3, [pc, #152]	@ (8002f74 <HAL_GPIO_Init+0x334>)
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	43db      	mvns	r3, r3
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	4013      	ands	r3, r2
 8002ee8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	4313      	orrs	r3, r2
 8002efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002efe:	4a1d      	ldr	r2, [pc, #116]	@ (8002f74 <HAL_GPIO_Init+0x334>)
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f04:	4b1b      	ldr	r3, [pc, #108]	@ (8002f74 <HAL_GPIO_Init+0x334>)
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	43db      	mvns	r3, r3
 8002f0e:	69ba      	ldr	r2, [r7, #24]
 8002f10:	4013      	ands	r3, r2
 8002f12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f14:	683b      	ldr	r3, [r7, #0]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d003      	beq.n	8002f28 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f28:	4a12      	ldr	r2, [pc, #72]	@ (8002f74 <HAL_GPIO_Init+0x334>)
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	3301      	adds	r3, #1
 8002f32:	61fb      	str	r3, [r7, #28]
 8002f34:	69fb      	ldr	r3, [r7, #28]
 8002f36:	2b0f      	cmp	r3, #15
 8002f38:	f67f ae90 	bls.w	8002c5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f3c:	bf00      	nop
 8002f3e:	bf00      	nop
 8002f40:	3724      	adds	r7, #36	@ 0x24
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
 8002f4a:	bf00      	nop
 8002f4c:	40023800 	.word	0x40023800
 8002f50:	40013800 	.word	0x40013800
 8002f54:	40020000 	.word	0x40020000
 8002f58:	40020400 	.word	0x40020400
 8002f5c:	40020800 	.word	0x40020800
 8002f60:	40020c00 	.word	0x40020c00
 8002f64:	40021000 	.word	0x40021000
 8002f68:	40021400 	.word	0x40021400
 8002f6c:	40021800 	.word	0x40021800
 8002f70:	40021c00 	.word	0x40021c00
 8002f74:	40013c00 	.word	0x40013c00

08002f78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b083      	sub	sp, #12
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
 8002f80:	460b      	mov	r3, r1
 8002f82:	807b      	strh	r3, [r7, #2]
 8002f84:	4613      	mov	r3, r2
 8002f86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f88:	787b      	ldrb	r3, [r7, #1]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d003      	beq.n	8002f96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f8e:	887a      	ldrh	r2, [r7, #2]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f94:	e003      	b.n	8002f9e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f96:	887b      	ldrh	r3, [r7, #2]
 8002f98:	041a      	lsls	r2, r3, #16
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	619a      	str	r2, [r3, #24]
}
 8002f9e:	bf00      	nop
 8002fa0:	370c      	adds	r7, #12
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
	...

08002fac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	4603      	mov	r3, r0
 8002fb4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002fb6:	4b08      	ldr	r3, [pc, #32]	@ (8002fd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fb8:	695a      	ldr	r2, [r3, #20]
 8002fba:	88fb      	ldrh	r3, [r7, #6]
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d006      	beq.n	8002fd0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002fc2:	4a05      	ldr	r2, [pc, #20]	@ (8002fd8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fc4:	88fb      	ldrh	r3, [r7, #6]
 8002fc6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002fc8:	88fb      	ldrh	r3, [r7, #6]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7fe ff1e 	bl	8001e0c <HAL_GPIO_EXTI_Callback>
  }
}
 8002fd0:	bf00      	nop
 8002fd2:	3708      	adds	r7, #8
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	40013c00 	.word	0x40013c00

08002fdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b084      	sub	sp, #16
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d101      	bne.n	8002fee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fea:	2301      	movs	r3, #1
 8002fec:	e12b      	b.n	8003246 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d106      	bne.n	8003008 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7ff fa4a 	bl	800249c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2224      	movs	r2, #36	@ 0x24
 800300c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	681a      	ldr	r2, [r3, #0]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	f022 0201 	bic.w	r2, r2, #1
 800301e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800302e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	681a      	ldr	r2, [r3, #0]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800303e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003040:	f001 fc36 	bl	80048b0 <HAL_RCC_GetPCLK1Freq>
 8003044:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	4a81      	ldr	r2, [pc, #516]	@ (8003250 <HAL_I2C_Init+0x274>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d807      	bhi.n	8003060 <HAL_I2C_Init+0x84>
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	4a80      	ldr	r2, [pc, #512]	@ (8003254 <HAL_I2C_Init+0x278>)
 8003054:	4293      	cmp	r3, r2
 8003056:	bf94      	ite	ls
 8003058:	2301      	movls	r3, #1
 800305a:	2300      	movhi	r3, #0
 800305c:	b2db      	uxtb	r3, r3
 800305e:	e006      	b.n	800306e <HAL_I2C_Init+0x92>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	4a7d      	ldr	r2, [pc, #500]	@ (8003258 <HAL_I2C_Init+0x27c>)
 8003064:	4293      	cmp	r3, r2
 8003066:	bf94      	ite	ls
 8003068:	2301      	movls	r3, #1
 800306a:	2300      	movhi	r3, #0
 800306c:	b2db      	uxtb	r3, r3
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e0e7      	b.n	8003246 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	4a78      	ldr	r2, [pc, #480]	@ (800325c <HAL_I2C_Init+0x280>)
 800307a:	fba2 2303 	umull	r2, r3, r2, r3
 800307e:	0c9b      	lsrs	r3, r3, #18
 8003080:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	68ba      	ldr	r2, [r7, #8]
 8003092:	430a      	orrs	r2, r1
 8003094:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	6a1b      	ldr	r3, [r3, #32]
 800309c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	4a6a      	ldr	r2, [pc, #424]	@ (8003250 <HAL_I2C_Init+0x274>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d802      	bhi.n	80030b0 <HAL_I2C_Init+0xd4>
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	3301      	adds	r3, #1
 80030ae:	e009      	b.n	80030c4 <HAL_I2C_Init+0xe8>
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80030b6:	fb02 f303 	mul.w	r3, r2, r3
 80030ba:	4a69      	ldr	r2, [pc, #420]	@ (8003260 <HAL_I2C_Init+0x284>)
 80030bc:	fba2 2303 	umull	r2, r3, r2, r3
 80030c0:	099b      	lsrs	r3, r3, #6
 80030c2:	3301      	adds	r3, #1
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	6812      	ldr	r2, [r2, #0]
 80030c8:	430b      	orrs	r3, r1
 80030ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	69db      	ldr	r3, [r3, #28]
 80030d2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80030d6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	495c      	ldr	r1, [pc, #368]	@ (8003250 <HAL_I2C_Init+0x274>)
 80030e0:	428b      	cmp	r3, r1
 80030e2:	d819      	bhi.n	8003118 <HAL_I2C_Init+0x13c>
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	1e59      	subs	r1, r3, #1
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	005b      	lsls	r3, r3, #1
 80030ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80030f2:	1c59      	adds	r1, r3, #1
 80030f4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80030f8:	400b      	ands	r3, r1
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00a      	beq.n	8003114 <HAL_I2C_Init+0x138>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	1e59      	subs	r1, r3, #1
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	005b      	lsls	r3, r3, #1
 8003108:	fbb1 f3f3 	udiv	r3, r1, r3
 800310c:	3301      	adds	r3, #1
 800310e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003112:	e051      	b.n	80031b8 <HAL_I2C_Init+0x1dc>
 8003114:	2304      	movs	r3, #4
 8003116:	e04f      	b.n	80031b8 <HAL_I2C_Init+0x1dc>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d111      	bne.n	8003144 <HAL_I2C_Init+0x168>
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	1e58      	subs	r0, r3, #1
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6859      	ldr	r1, [r3, #4]
 8003128:	460b      	mov	r3, r1
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	440b      	add	r3, r1
 800312e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003132:	3301      	adds	r3, #1
 8003134:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003138:	2b00      	cmp	r3, #0
 800313a:	bf0c      	ite	eq
 800313c:	2301      	moveq	r3, #1
 800313e:	2300      	movne	r3, #0
 8003140:	b2db      	uxtb	r3, r3
 8003142:	e012      	b.n	800316a <HAL_I2C_Init+0x18e>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	1e58      	subs	r0, r3, #1
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6859      	ldr	r1, [r3, #4]
 800314c:	460b      	mov	r3, r1
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	0099      	lsls	r1, r3, #2
 8003154:	440b      	add	r3, r1
 8003156:	fbb0 f3f3 	udiv	r3, r0, r3
 800315a:	3301      	adds	r3, #1
 800315c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003160:	2b00      	cmp	r3, #0
 8003162:	bf0c      	ite	eq
 8003164:	2301      	moveq	r3, #1
 8003166:	2300      	movne	r3, #0
 8003168:	b2db      	uxtb	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d001      	beq.n	8003172 <HAL_I2C_Init+0x196>
 800316e:	2301      	movs	r3, #1
 8003170:	e022      	b.n	80031b8 <HAL_I2C_Init+0x1dc>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	689b      	ldr	r3, [r3, #8]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d10e      	bne.n	8003198 <HAL_I2C_Init+0x1bc>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	1e58      	subs	r0, r3, #1
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6859      	ldr	r1, [r3, #4]
 8003182:	460b      	mov	r3, r1
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	440b      	add	r3, r1
 8003188:	fbb0 f3f3 	udiv	r3, r0, r3
 800318c:	3301      	adds	r3, #1
 800318e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003192:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003196:	e00f      	b.n	80031b8 <HAL_I2C_Init+0x1dc>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	1e58      	subs	r0, r3, #1
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6859      	ldr	r1, [r3, #4]
 80031a0:	460b      	mov	r3, r1
 80031a2:	009b      	lsls	r3, r3, #2
 80031a4:	440b      	add	r3, r1
 80031a6:	0099      	lsls	r1, r3, #2
 80031a8:	440b      	add	r3, r1
 80031aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ae:	3301      	adds	r3, #1
 80031b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	6809      	ldr	r1, [r1, #0]
 80031bc:	4313      	orrs	r3, r2
 80031be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	69da      	ldr	r2, [r3, #28]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6a1b      	ldr	r3, [r3, #32]
 80031d2:	431a      	orrs	r2, r3
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	430a      	orrs	r2, r1
 80031da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80031e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80031ea:	687a      	ldr	r2, [r7, #4]
 80031ec:	6911      	ldr	r1, [r2, #16]
 80031ee:	687a      	ldr	r2, [r7, #4]
 80031f0:	68d2      	ldr	r2, [r2, #12]
 80031f2:	4311      	orrs	r1, r2
 80031f4:	687a      	ldr	r2, [r7, #4]
 80031f6:	6812      	ldr	r2, [r2, #0]
 80031f8:	430b      	orrs	r3, r1
 80031fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	695a      	ldr	r2, [r3, #20]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	699b      	ldr	r3, [r3, #24]
 800320e:	431a      	orrs	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	430a      	orrs	r2, r1
 8003216:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f042 0201 	orr.w	r2, r2, #1
 8003226:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2220      	movs	r2, #32
 8003232:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	2200      	movs	r2, #0
 800323a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	3710      	adds	r7, #16
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	000186a0 	.word	0x000186a0
 8003254:	001e847f 	.word	0x001e847f
 8003258:	003d08ff 	.word	0x003d08ff
 800325c:	431bde83 	.word	0x431bde83
 8003260:	10624dd3 	.word	0x10624dd3

08003264 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b088      	sub	sp, #32
 8003268:	af02      	add	r7, sp, #8
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	607a      	str	r2, [r7, #4]
 800326e:	461a      	mov	r2, r3
 8003270:	460b      	mov	r3, r1
 8003272:	817b      	strh	r3, [r7, #10]
 8003274:	4613      	mov	r3, r2
 8003276:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003278:	f7ff fba0 	bl	80029bc <HAL_GetTick>
 800327c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003284:	b2db      	uxtb	r3, r3
 8003286:	2b20      	cmp	r3, #32
 8003288:	f040 80e0 	bne.w	800344c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	2319      	movs	r3, #25
 8003292:	2201      	movs	r2, #1
 8003294:	4970      	ldr	r1, [pc, #448]	@ (8003458 <HAL_I2C_Master_Transmit+0x1f4>)
 8003296:	68f8      	ldr	r0, [r7, #12]
 8003298:	f000 fc64 	bl	8003b64 <I2C_WaitOnFlagUntilTimeout>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d001      	beq.n	80032a6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80032a2:	2302      	movs	r3, #2
 80032a4:	e0d3      	b.n	800344e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d101      	bne.n	80032b4 <HAL_I2C_Master_Transmit+0x50>
 80032b0:	2302      	movs	r3, #2
 80032b2:	e0cc      	b.n	800344e <HAL_I2C_Master_Transmit+0x1ea>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	2201      	movs	r2, #1
 80032b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0301 	and.w	r3, r3, #1
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d007      	beq.n	80032da <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f042 0201 	orr.w	r2, r2, #1
 80032d8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80032e8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2221      	movs	r2, #33	@ 0x21
 80032ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2210      	movs	r2, #16
 80032f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	687a      	ldr	r2, [r7, #4]
 8003304:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	893a      	ldrh	r2, [r7, #8]
 800330a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003310:	b29a      	uxth	r2, r3
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	4a50      	ldr	r2, [pc, #320]	@ (800345c <HAL_I2C_Master_Transmit+0x1f8>)
 800331a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800331c:	8979      	ldrh	r1, [r7, #10]
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	6a3a      	ldr	r2, [r7, #32]
 8003322:	68f8      	ldr	r0, [r7, #12]
 8003324:	f000 face 	bl	80038c4 <I2C_MasterRequestWrite>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d001      	beq.n	8003332 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e08d      	b.n	800344e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003332:	2300      	movs	r3, #0
 8003334:	613b      	str	r3, [r7, #16]
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	695b      	ldr	r3, [r3, #20]
 800333c:	613b      	str	r3, [r7, #16]
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	699b      	ldr	r3, [r3, #24]
 8003344:	613b      	str	r3, [r7, #16]
 8003346:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003348:	e066      	b.n	8003418 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800334a:	697a      	ldr	r2, [r7, #20]
 800334c:	6a39      	ldr	r1, [r7, #32]
 800334e:	68f8      	ldr	r0, [r7, #12]
 8003350:	f000 fd22 	bl	8003d98 <I2C_WaitOnTXEFlagUntilTimeout>
 8003354:	4603      	mov	r3, r0
 8003356:	2b00      	cmp	r3, #0
 8003358:	d00d      	beq.n	8003376 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800335e:	2b04      	cmp	r3, #4
 8003360:	d107      	bne.n	8003372 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003370:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e06b      	b.n	800344e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800337a:	781a      	ldrb	r2, [r3, #0]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003386:	1c5a      	adds	r2, r3, #1
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003390:	b29b      	uxth	r3, r3
 8003392:	3b01      	subs	r3, #1
 8003394:	b29a      	uxth	r2, r3
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800339e:	3b01      	subs	r3, #1
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	695b      	ldr	r3, [r3, #20]
 80033ac:	f003 0304 	and.w	r3, r3, #4
 80033b0:	2b04      	cmp	r3, #4
 80033b2:	d11b      	bne.n	80033ec <HAL_I2C_Master_Transmit+0x188>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d017      	beq.n	80033ec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033c0:	781a      	ldrb	r2, [r3, #0]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033cc:	1c5a      	adds	r2, r3, #1
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	3b01      	subs	r3, #1
 80033da:	b29a      	uxth	r2, r3
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033e4:	3b01      	subs	r3, #1
 80033e6:	b29a      	uxth	r2, r3
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	6a39      	ldr	r1, [r7, #32]
 80033f0:	68f8      	ldr	r0, [r7, #12]
 80033f2:	f000 fd19 	bl	8003e28 <I2C_WaitOnBTFFlagUntilTimeout>
 80033f6:	4603      	mov	r3, r0
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d00d      	beq.n	8003418 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003400:	2b04      	cmp	r3, #4
 8003402:	d107      	bne.n	8003414 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003412:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003414:	2301      	movs	r3, #1
 8003416:	e01a      	b.n	800344e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800341c:	2b00      	cmp	r3, #0
 800341e:	d194      	bne.n	800334a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	681a      	ldr	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800342e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2220      	movs	r2, #32
 8003434:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	2200      	movs	r2, #0
 8003444:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003448:	2300      	movs	r3, #0
 800344a:	e000      	b.n	800344e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800344c:	2302      	movs	r3, #2
  }
}
 800344e:	4618      	mov	r0, r3
 8003450:	3718      	adds	r7, #24
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	00100002 	.word	0x00100002
 800345c:	ffff0000 	.word	0xffff0000

08003460 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b08c      	sub	sp, #48	@ 0x30
 8003464:	af02      	add	r7, sp, #8
 8003466:	60f8      	str	r0, [r7, #12]
 8003468:	607a      	str	r2, [r7, #4]
 800346a:	461a      	mov	r2, r3
 800346c:	460b      	mov	r3, r1
 800346e:	817b      	strh	r3, [r7, #10]
 8003470:	4613      	mov	r3, r2
 8003472:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003474:	f7ff faa2 	bl	80029bc <HAL_GetTick>
 8003478:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003480:	b2db      	uxtb	r3, r3
 8003482:	2b20      	cmp	r3, #32
 8003484:	f040 8217 	bne.w	80038b6 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800348a:	9300      	str	r3, [sp, #0]
 800348c:	2319      	movs	r3, #25
 800348e:	2201      	movs	r2, #1
 8003490:	497c      	ldr	r1, [pc, #496]	@ (8003684 <HAL_I2C_Master_Receive+0x224>)
 8003492:	68f8      	ldr	r0, [r7, #12]
 8003494:	f000 fb66 	bl	8003b64 <I2C_WaitOnFlagUntilTimeout>
 8003498:	4603      	mov	r3, r0
 800349a:	2b00      	cmp	r3, #0
 800349c:	d001      	beq.n	80034a2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800349e:	2302      	movs	r3, #2
 80034a0:	e20a      	b.n	80038b8 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034a8:	2b01      	cmp	r3, #1
 80034aa:	d101      	bne.n	80034b0 <HAL_I2C_Master_Receive+0x50>
 80034ac:	2302      	movs	r3, #2
 80034ae:	e203      	b.n	80038b8 <HAL_I2C_Master_Receive+0x458>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	2201      	movs	r2, #1
 80034b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d007      	beq.n	80034d6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	681a      	ldr	r2, [r3, #0]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f042 0201 	orr.w	r2, r2, #1
 80034d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	681a      	ldr	r2, [r3, #0]
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034e4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2222      	movs	r2, #34	@ 0x22
 80034ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2210      	movs	r2, #16
 80034f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	687a      	ldr	r2, [r7, #4]
 8003500:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	893a      	ldrh	r2, [r7, #8]
 8003506:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800350c:	b29a      	uxth	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	4a5c      	ldr	r2, [pc, #368]	@ (8003688 <HAL_I2C_Master_Receive+0x228>)
 8003516:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003518:	8979      	ldrh	r1, [r7, #10]
 800351a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800351c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800351e:	68f8      	ldr	r0, [r7, #12]
 8003520:	f000 fa52 	bl	80039c8 <I2C_MasterRequestRead>
 8003524:	4603      	mov	r3, r0
 8003526:	2b00      	cmp	r3, #0
 8003528:	d001      	beq.n	800352e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800352a:	2301      	movs	r3, #1
 800352c:	e1c4      	b.n	80038b8 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003532:	2b00      	cmp	r3, #0
 8003534:	d113      	bne.n	800355e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003536:	2300      	movs	r3, #0
 8003538:	623b      	str	r3, [r7, #32]
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	695b      	ldr	r3, [r3, #20]
 8003540:	623b      	str	r3, [r7, #32]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	699b      	ldr	r3, [r3, #24]
 8003548:	623b      	str	r3, [r7, #32]
 800354a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800355a:	601a      	str	r2, [r3, #0]
 800355c:	e198      	b.n	8003890 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003562:	2b01      	cmp	r3, #1
 8003564:	d11b      	bne.n	800359e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003574:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003576:	2300      	movs	r3, #0
 8003578:	61fb      	str	r3, [r7, #28]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	695b      	ldr	r3, [r3, #20]
 8003580:	61fb      	str	r3, [r7, #28]
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	699b      	ldr	r3, [r3, #24]
 8003588:	61fb      	str	r3, [r7, #28]
 800358a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	681a      	ldr	r2, [r3, #0]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800359a:	601a      	str	r2, [r3, #0]
 800359c:	e178      	b.n	8003890 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d11b      	bne.n	80035de <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035b4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035c4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035c6:	2300      	movs	r3, #0
 80035c8:	61bb      	str	r3, [r7, #24]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	695b      	ldr	r3, [r3, #20]
 80035d0:	61bb      	str	r3, [r7, #24]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	61bb      	str	r3, [r7, #24]
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	e158      	b.n	8003890 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681a      	ldr	r2, [r3, #0]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80035ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035ee:	2300      	movs	r3, #0
 80035f0:	617b      	str	r3, [r7, #20]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	695b      	ldr	r3, [r3, #20]
 80035f8:	617b      	str	r3, [r7, #20]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	699b      	ldr	r3, [r3, #24]
 8003600:	617b      	str	r3, [r7, #20]
 8003602:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003604:	e144      	b.n	8003890 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800360a:	2b03      	cmp	r3, #3
 800360c:	f200 80f1 	bhi.w	80037f2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003614:	2b01      	cmp	r3, #1
 8003616:	d123      	bne.n	8003660 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003618:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800361a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800361c:	68f8      	ldr	r0, [r7, #12]
 800361e:	f000 fc4b 	bl	8003eb8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003622:	4603      	mov	r3, r0
 8003624:	2b00      	cmp	r3, #0
 8003626:	d001      	beq.n	800362c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e145      	b.n	80038b8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	691a      	ldr	r2, [r3, #16]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003636:	b2d2      	uxtb	r2, r2
 8003638:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363e:	1c5a      	adds	r2, r3, #1
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003648:	3b01      	subs	r3, #1
 800364a:	b29a      	uxth	r2, r3
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003654:	b29b      	uxth	r3, r3
 8003656:	3b01      	subs	r3, #1
 8003658:	b29a      	uxth	r2, r3
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800365e:	e117      	b.n	8003890 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003664:	2b02      	cmp	r3, #2
 8003666:	d14e      	bne.n	8003706 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800366a:	9300      	str	r3, [sp, #0]
 800366c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800366e:	2200      	movs	r2, #0
 8003670:	4906      	ldr	r1, [pc, #24]	@ (800368c <HAL_I2C_Master_Receive+0x22c>)
 8003672:	68f8      	ldr	r0, [r7, #12]
 8003674:	f000 fa76 	bl	8003b64 <I2C_WaitOnFlagUntilTimeout>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d008      	beq.n	8003690 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e11a      	b.n	80038b8 <HAL_I2C_Master_Receive+0x458>
 8003682:	bf00      	nop
 8003684:	00100002 	.word	0x00100002
 8003688:	ffff0000 	.word	0xffff0000
 800368c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800369e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	691a      	ldr	r2, [r3, #16]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036aa:	b2d2      	uxtb	r2, r2
 80036ac:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b2:	1c5a      	adds	r2, r3, #1
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036bc:	3b01      	subs	r3, #1
 80036be:	b29a      	uxth	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	3b01      	subs	r3, #1
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	691a      	ldr	r2, [r3, #16]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036dc:	b2d2      	uxtb	r2, r2
 80036de:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036e4:	1c5a      	adds	r2, r3, #1
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ee:	3b01      	subs	r3, #1
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036fa:	b29b      	uxth	r3, r3
 80036fc:	3b01      	subs	r3, #1
 80036fe:	b29a      	uxth	r2, r3
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003704:	e0c4      	b.n	8003890 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003706:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003708:	9300      	str	r3, [sp, #0]
 800370a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800370c:	2200      	movs	r2, #0
 800370e:	496c      	ldr	r1, [pc, #432]	@ (80038c0 <HAL_I2C_Master_Receive+0x460>)
 8003710:	68f8      	ldr	r0, [r7, #12]
 8003712:	f000 fa27 	bl	8003b64 <I2C_WaitOnFlagUntilTimeout>
 8003716:	4603      	mov	r3, r0
 8003718:	2b00      	cmp	r3, #0
 800371a:	d001      	beq.n	8003720 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e0cb      	b.n	80038b8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	681a      	ldr	r2, [r3, #0]
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800372e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	691a      	ldr	r2, [r3, #16]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800373a:	b2d2      	uxtb	r2, r2
 800373c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003742:	1c5a      	adds	r2, r3, #1
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800374c:	3b01      	subs	r3, #1
 800374e:	b29a      	uxth	r2, r3
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003758:	b29b      	uxth	r3, r3
 800375a:	3b01      	subs	r3, #1
 800375c:	b29a      	uxth	r2, r3
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003764:	9300      	str	r3, [sp, #0]
 8003766:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003768:	2200      	movs	r2, #0
 800376a:	4955      	ldr	r1, [pc, #340]	@ (80038c0 <HAL_I2C_Master_Receive+0x460>)
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f000 f9f9 	bl	8003b64 <I2C_WaitOnFlagUntilTimeout>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003778:	2301      	movs	r3, #1
 800377a:	e09d      	b.n	80038b8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800378a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	691a      	ldr	r2, [r3, #16]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003796:	b2d2      	uxtb	r2, r2
 8003798:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800379e:	1c5a      	adds	r2, r3, #1
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037a8:	3b01      	subs	r3, #1
 80037aa:	b29a      	uxth	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037b4:	b29b      	uxth	r3, r3
 80037b6:	3b01      	subs	r3, #1
 80037b8:	b29a      	uxth	r2, r3
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	691a      	ldr	r2, [r3, #16]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c8:	b2d2      	uxtb	r2, r2
 80037ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d0:	1c5a      	adds	r2, r3, #1
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037da:	3b01      	subs	r3, #1
 80037dc:	b29a      	uxth	r2, r3
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	3b01      	subs	r3, #1
 80037ea:	b29a      	uxth	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80037f0:	e04e      	b.n	8003890 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80037f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037f4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80037f6:	68f8      	ldr	r0, [r7, #12]
 80037f8:	f000 fb5e 	bl	8003eb8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e058      	b.n	80038b8 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	691a      	ldr	r2, [r3, #16]
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003810:	b2d2      	uxtb	r2, r2
 8003812:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003818:	1c5a      	adds	r2, r3, #1
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003822:	3b01      	subs	r3, #1
 8003824:	b29a      	uxth	r2, r3
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800382e:	b29b      	uxth	r3, r3
 8003830:	3b01      	subs	r3, #1
 8003832:	b29a      	uxth	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	695b      	ldr	r3, [r3, #20]
 800383e:	f003 0304 	and.w	r3, r3, #4
 8003842:	2b04      	cmp	r3, #4
 8003844:	d124      	bne.n	8003890 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800384a:	2b03      	cmp	r3, #3
 800384c:	d107      	bne.n	800385e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800385c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	691a      	ldr	r2, [r3, #16]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003868:	b2d2      	uxtb	r2, r2
 800386a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003870:	1c5a      	adds	r2, r3, #1
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800387a:	3b01      	subs	r3, #1
 800387c:	b29a      	uxth	r2, r3
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003886:	b29b      	uxth	r3, r3
 8003888:	3b01      	subs	r3, #1
 800388a:	b29a      	uxth	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003894:	2b00      	cmp	r3, #0
 8003896:	f47f aeb6 	bne.w	8003606 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2220      	movs	r2, #32
 800389e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2200      	movs	r2, #0
 80038ae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80038b2:	2300      	movs	r3, #0
 80038b4:	e000      	b.n	80038b8 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80038b6:	2302      	movs	r3, #2
  }
}
 80038b8:	4618      	mov	r0, r3
 80038ba:	3728      	adds	r7, #40	@ 0x28
 80038bc:	46bd      	mov	sp, r7
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	00010004 	.word	0x00010004

080038c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b088      	sub	sp, #32
 80038c8:	af02      	add	r7, sp, #8
 80038ca:	60f8      	str	r0, [r7, #12]
 80038cc:	607a      	str	r2, [r7, #4]
 80038ce:	603b      	str	r3, [r7, #0]
 80038d0:	460b      	mov	r3, r1
 80038d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	2b08      	cmp	r3, #8
 80038de:	d006      	beq.n	80038ee <I2C_MasterRequestWrite+0x2a>
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d003      	beq.n	80038ee <I2C_MasterRequestWrite+0x2a>
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80038ec:	d108      	bne.n	8003900 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038fc:	601a      	str	r2, [r3, #0]
 80038fe:	e00b      	b.n	8003918 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003904:	2b12      	cmp	r3, #18
 8003906:	d107      	bne.n	8003918 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	681a      	ldr	r2, [r3, #0]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003916:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	9300      	str	r3, [sp, #0]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	2200      	movs	r2, #0
 8003920:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	f000 f91d 	bl	8003b64 <I2C_WaitOnFlagUntilTimeout>
 800392a:	4603      	mov	r3, r0
 800392c:	2b00      	cmp	r3, #0
 800392e:	d00d      	beq.n	800394c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800393a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800393e:	d103      	bne.n	8003948 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003946:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e035      	b.n	80039b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	691b      	ldr	r3, [r3, #16]
 8003950:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003954:	d108      	bne.n	8003968 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003956:	897b      	ldrh	r3, [r7, #10]
 8003958:	b2db      	uxtb	r3, r3
 800395a:	461a      	mov	r2, r3
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003964:	611a      	str	r2, [r3, #16]
 8003966:	e01b      	b.n	80039a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003968:	897b      	ldrh	r3, [r7, #10]
 800396a:	11db      	asrs	r3, r3, #7
 800396c:	b2db      	uxtb	r3, r3
 800396e:	f003 0306 	and.w	r3, r3, #6
 8003972:	b2db      	uxtb	r3, r3
 8003974:	f063 030f 	orn	r3, r3, #15
 8003978:	b2da      	uxtb	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	490e      	ldr	r1, [pc, #56]	@ (80039c0 <I2C_MasterRequestWrite+0xfc>)
 8003986:	68f8      	ldr	r0, [r7, #12]
 8003988:	f000 f966 	bl	8003c58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800398c:	4603      	mov	r3, r0
 800398e:	2b00      	cmp	r3, #0
 8003990:	d001      	beq.n	8003996 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003992:	2301      	movs	r3, #1
 8003994:	e010      	b.n	80039b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003996:	897b      	ldrh	r3, [r7, #10]
 8003998:	b2da      	uxtb	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80039a0:	683b      	ldr	r3, [r7, #0]
 80039a2:	687a      	ldr	r2, [r7, #4]
 80039a4:	4907      	ldr	r1, [pc, #28]	@ (80039c4 <I2C_MasterRequestWrite+0x100>)
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f000 f956 	bl	8003c58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d001      	beq.n	80039b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	e000      	b.n	80039b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80039b6:	2300      	movs	r3, #0
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	3718      	adds	r7, #24
 80039bc:	46bd      	mov	sp, r7
 80039be:	bd80      	pop	{r7, pc}
 80039c0:	00010008 	.word	0x00010008
 80039c4:	00010002 	.word	0x00010002

080039c8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b088      	sub	sp, #32
 80039cc:	af02      	add	r7, sp, #8
 80039ce:	60f8      	str	r0, [r7, #12]
 80039d0:	607a      	str	r2, [r7, #4]
 80039d2:	603b      	str	r3, [r7, #0]
 80039d4:	460b      	mov	r3, r1
 80039d6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039dc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681a      	ldr	r2, [r3, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80039ec:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	d006      	beq.n	8003a02 <I2C_MasterRequestRead+0x3a>
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	2b01      	cmp	r3, #1
 80039f8:	d003      	beq.n	8003a02 <I2C_MasterRequestRead+0x3a>
 80039fa:	697b      	ldr	r3, [r7, #20]
 80039fc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003a00:	d108      	bne.n	8003a14 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a10:	601a      	str	r2, [r3, #0]
 8003a12:	e00b      	b.n	8003a2c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a18:	2b11      	cmp	r3, #17
 8003a1a:	d107      	bne.n	8003a2c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a2a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	9300      	str	r3, [sp, #0]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a38:	68f8      	ldr	r0, [r7, #12]
 8003a3a:	f000 f893 	bl	8003b64 <I2C_WaitOnFlagUntilTimeout>
 8003a3e:	4603      	mov	r3, r0
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d00d      	beq.n	8003a60 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a52:	d103      	bne.n	8003a5c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a5a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e079      	b.n	8003b54 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	691b      	ldr	r3, [r3, #16]
 8003a64:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003a68:	d108      	bne.n	8003a7c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003a6a:	897b      	ldrh	r3, [r7, #10]
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	f043 0301 	orr.w	r3, r3, #1
 8003a72:	b2da      	uxtb	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	611a      	str	r2, [r3, #16]
 8003a7a:	e05f      	b.n	8003b3c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003a7c:	897b      	ldrh	r3, [r7, #10]
 8003a7e:	11db      	asrs	r3, r3, #7
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	f003 0306 	and.w	r3, r3, #6
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	f063 030f 	orn	r3, r3, #15
 8003a8c:	b2da      	uxtb	r2, r3
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	687a      	ldr	r2, [r7, #4]
 8003a98:	4930      	ldr	r1, [pc, #192]	@ (8003b5c <I2C_MasterRequestRead+0x194>)
 8003a9a:	68f8      	ldr	r0, [r7, #12]
 8003a9c:	f000 f8dc 	bl	8003c58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d001      	beq.n	8003aaa <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e054      	b.n	8003b54 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003aaa:	897b      	ldrh	r3, [r7, #10]
 8003aac:	b2da      	uxtb	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003ab4:	683b      	ldr	r3, [r7, #0]
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	4929      	ldr	r1, [pc, #164]	@ (8003b60 <I2C_MasterRequestRead+0x198>)
 8003aba:	68f8      	ldr	r0, [r7, #12]
 8003abc:	f000 f8cc 	bl	8003c58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d001      	beq.n	8003aca <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e044      	b.n	8003b54 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aca:	2300      	movs	r3, #0
 8003acc:	613b      	str	r3, [r7, #16]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	695b      	ldr	r3, [r3, #20]
 8003ad4:	613b      	str	r3, [r7, #16]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	613b      	str	r3, [r7, #16]
 8003ade:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	681a      	ldr	r2, [r3, #0]
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003aee:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	9300      	str	r3, [sp, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2200      	movs	r2, #0
 8003af8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f000 f831 	bl	8003b64 <I2C_WaitOnFlagUntilTimeout>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00d      	beq.n	8003b24 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003b16:	d103      	bne.n	8003b20 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003b1e:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003b20:	2303      	movs	r3, #3
 8003b22:	e017      	b.n	8003b54 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8003b24:	897b      	ldrh	r3, [r7, #10]
 8003b26:	11db      	asrs	r3, r3, #7
 8003b28:	b2db      	uxtb	r3, r3
 8003b2a:	f003 0306 	and.w	r3, r3, #6
 8003b2e:	b2db      	uxtb	r3, r3
 8003b30:	f063 030e 	orn	r3, r3, #14
 8003b34:	b2da      	uxtb	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	687a      	ldr	r2, [r7, #4]
 8003b40:	4907      	ldr	r1, [pc, #28]	@ (8003b60 <I2C_MasterRequestRead+0x198>)
 8003b42:	68f8      	ldr	r0, [r7, #12]
 8003b44:	f000 f888 	bl	8003c58 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d001      	beq.n	8003b52 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e000      	b.n	8003b54 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8003b52:	2300      	movs	r3, #0
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	3718      	adds	r7, #24
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	00010008 	.word	0x00010008
 8003b60:	00010002 	.word	0x00010002

08003b64 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b084      	sub	sp, #16
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	603b      	str	r3, [r7, #0]
 8003b70:	4613      	mov	r3, r2
 8003b72:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b74:	e048      	b.n	8003c08 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b7c:	d044      	beq.n	8003c08 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b7e:	f7fe ff1d 	bl	80029bc <HAL_GetTick>
 8003b82:	4602      	mov	r2, r0
 8003b84:	69bb      	ldr	r3, [r7, #24]
 8003b86:	1ad3      	subs	r3, r2, r3
 8003b88:	683a      	ldr	r2, [r7, #0]
 8003b8a:	429a      	cmp	r2, r3
 8003b8c:	d302      	bcc.n	8003b94 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d139      	bne.n	8003c08 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	0c1b      	lsrs	r3, r3, #16
 8003b98:	b2db      	uxtb	r3, r3
 8003b9a:	2b01      	cmp	r3, #1
 8003b9c:	d10d      	bne.n	8003bba <I2C_WaitOnFlagUntilTimeout+0x56>
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	695b      	ldr	r3, [r3, #20]
 8003ba4:	43da      	mvns	r2, r3
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	4013      	ands	r3, r2
 8003baa:	b29b      	uxth	r3, r3
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	bf0c      	ite	eq
 8003bb0:	2301      	moveq	r3, #1
 8003bb2:	2300      	movne	r3, #0
 8003bb4:	b2db      	uxtb	r3, r3
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	e00c      	b.n	8003bd4 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	43da      	mvns	r2, r3
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	b29b      	uxth	r3, r3
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	bf0c      	ite	eq
 8003bcc:	2301      	moveq	r3, #1
 8003bce:	2300      	movne	r3, #0
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	79fb      	ldrb	r3, [r7, #7]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d116      	bne.n	8003c08 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2220      	movs	r2, #32
 8003be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf4:	f043 0220 	orr.w	r2, r3, #32
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2200      	movs	r2, #0
 8003c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e023      	b.n	8003c50 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	0c1b      	lsrs	r3, r3, #16
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b01      	cmp	r3, #1
 8003c10:	d10d      	bne.n	8003c2e <I2C_WaitOnFlagUntilTimeout+0xca>
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	695b      	ldr	r3, [r3, #20]
 8003c18:	43da      	mvns	r2, r3
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	4013      	ands	r3, r2
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	bf0c      	ite	eq
 8003c24:	2301      	moveq	r3, #1
 8003c26:	2300      	movne	r3, #0
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	e00c      	b.n	8003c48 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	43da      	mvns	r2, r3
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	4013      	ands	r3, r2
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	bf0c      	ite	eq
 8003c40:	2301      	moveq	r3, #1
 8003c42:	2300      	movne	r3, #0
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	461a      	mov	r2, r3
 8003c48:	79fb      	ldrb	r3, [r7, #7]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d093      	beq.n	8003b76 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003c4e:	2300      	movs	r3, #0
}
 8003c50:	4618      	mov	r0, r3
 8003c52:	3710      	adds	r7, #16
 8003c54:	46bd      	mov	sp, r7
 8003c56:	bd80      	pop	{r7, pc}

08003c58 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b084      	sub	sp, #16
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	60f8      	str	r0, [r7, #12]
 8003c60:	60b9      	str	r1, [r7, #8]
 8003c62:	607a      	str	r2, [r7, #4]
 8003c64:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003c66:	e071      	b.n	8003d4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	695b      	ldr	r3, [r3, #20]
 8003c6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c76:	d123      	bne.n	8003cc0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c86:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003c90:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2200      	movs	r2, #0
 8003c96:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2220      	movs	r2, #32
 8003c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cac:	f043 0204 	orr.w	r2, r3, #4
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e067      	b.n	8003d90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cc6:	d041      	beq.n	8003d4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003cc8:	f7fe fe78 	bl	80029bc <HAL_GetTick>
 8003ccc:	4602      	mov	r2, r0
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	1ad3      	subs	r3, r2, r3
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	429a      	cmp	r2, r3
 8003cd6:	d302      	bcc.n	8003cde <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d136      	bne.n	8003d4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	0c1b      	lsrs	r3, r3, #16
 8003ce2:	b2db      	uxtb	r3, r3
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d10c      	bne.n	8003d02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	43da      	mvns	r2, r3
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	b29b      	uxth	r3, r3
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	bf14      	ite	ne
 8003cfa:	2301      	movne	r3, #1
 8003cfc:	2300      	moveq	r3, #0
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	e00b      	b.n	8003d1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	699b      	ldr	r3, [r3, #24]
 8003d08:	43da      	mvns	r2, r3
 8003d0a:	68bb      	ldr	r3, [r7, #8]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	bf14      	ite	ne
 8003d14:	2301      	movne	r3, #1
 8003d16:	2300      	moveq	r3, #0
 8003d18:	b2db      	uxtb	r3, r3
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d016      	beq.n	8003d4c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2220      	movs	r2, #32
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d38:	f043 0220 	orr.w	r2, r3, #32
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e021      	b.n	8003d90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	0c1b      	lsrs	r3, r3, #16
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b01      	cmp	r3, #1
 8003d54:	d10c      	bne.n	8003d70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	43da      	mvns	r2, r3
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	4013      	ands	r3, r2
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	bf14      	ite	ne
 8003d68:	2301      	movne	r3, #1
 8003d6a:	2300      	moveq	r3, #0
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	e00b      	b.n	8003d88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	699b      	ldr	r3, [r3, #24]
 8003d76:	43da      	mvns	r2, r3
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	4013      	ands	r3, r2
 8003d7c:	b29b      	uxth	r3, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	bf14      	ite	ne
 8003d82:	2301      	movne	r3, #1
 8003d84:	2300      	moveq	r3, #0
 8003d86:	b2db      	uxtb	r3, r3
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f47f af6d 	bne.w	8003c68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003d8e:	2300      	movs	r3, #0
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	3710      	adds	r7, #16
 8003d94:	46bd      	mov	sp, r7
 8003d96:	bd80      	pop	{r7, pc}

08003d98 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b084      	sub	sp, #16
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003da4:	e034      	b.n	8003e10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f000 f8e3 	bl	8003f72 <I2C_IsAcknowledgeFailed>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d001      	beq.n	8003db6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e034      	b.n	8003e20 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003db6:	68bb      	ldr	r3, [r7, #8]
 8003db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dbc:	d028      	beq.n	8003e10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dbe:	f7fe fdfd 	bl	80029bc <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	68ba      	ldr	r2, [r7, #8]
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d302      	bcc.n	8003dd4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003dce:	68bb      	ldr	r3, [r7, #8]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d11d      	bne.n	8003e10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	695b      	ldr	r3, [r3, #20]
 8003dda:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dde:	2b80      	cmp	r3, #128	@ 0x80
 8003de0:	d016      	beq.n	8003e10 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	2220      	movs	r2, #32
 8003dec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2200      	movs	r2, #0
 8003df4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003dfc:	f043 0220 	orr.w	r2, r3, #32
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2200      	movs	r2, #0
 8003e08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e0c:	2301      	movs	r3, #1
 8003e0e:	e007      	b.n	8003e20 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	695b      	ldr	r3, [r3, #20]
 8003e16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e1a:	2b80      	cmp	r3, #128	@ 0x80
 8003e1c:	d1c3      	bne.n	8003da6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e1e:	2300      	movs	r3, #0
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3710      	adds	r7, #16
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}

08003e28 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b084      	sub	sp, #16
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	60f8      	str	r0, [r7, #12]
 8003e30:	60b9      	str	r1, [r7, #8]
 8003e32:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e34:	e034      	b.n	8003ea0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e36:	68f8      	ldr	r0, [r7, #12]
 8003e38:	f000 f89b 	bl	8003f72 <I2C_IsAcknowledgeFailed>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d001      	beq.n	8003e46 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e034      	b.n	8003eb0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e4c:	d028      	beq.n	8003ea0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e4e:	f7fe fdb5 	bl	80029bc <HAL_GetTick>
 8003e52:	4602      	mov	r2, r0
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	1ad3      	subs	r3, r2, r3
 8003e58:	68ba      	ldr	r2, [r7, #8]
 8003e5a:	429a      	cmp	r2, r3
 8003e5c:	d302      	bcc.n	8003e64 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003e5e:	68bb      	ldr	r3, [r7, #8]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d11d      	bne.n	8003ea0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	695b      	ldr	r3, [r3, #20]
 8003e6a:	f003 0304 	and.w	r3, r3, #4
 8003e6e:	2b04      	cmp	r3, #4
 8003e70:	d016      	beq.n	8003ea0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2200      	movs	r2, #0
 8003e84:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e8c:	f043 0220 	orr.w	r2, r3, #32
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	2200      	movs	r2, #0
 8003e98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	e007      	b.n	8003eb0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	f003 0304 	and.w	r3, r3, #4
 8003eaa:	2b04      	cmp	r3, #4
 8003eac:	d1c3      	bne.n	8003e36 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003eae:	2300      	movs	r3, #0
}
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	3710      	adds	r7, #16
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bd80      	pop	{r7, pc}

08003eb8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b084      	sub	sp, #16
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	60b9      	str	r1, [r7, #8]
 8003ec2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ec4:	e049      	b.n	8003f5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	695b      	ldr	r3, [r3, #20]
 8003ecc:	f003 0310 	and.w	r3, r3, #16
 8003ed0:	2b10      	cmp	r3, #16
 8003ed2:	d119      	bne.n	8003f08 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f06f 0210 	mvn.w	r2, #16
 8003edc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e030      	b.n	8003f6a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f08:	f7fe fd58 	bl	80029bc <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	68ba      	ldr	r2, [r7, #8]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d302      	bcc.n	8003f1e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d11d      	bne.n	8003f5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	695b      	ldr	r3, [r3, #20]
 8003f24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f28:	2b40      	cmp	r3, #64	@ 0x40
 8003f2a:	d016      	beq.n	8003f5a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2220      	movs	r2, #32
 8003f36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f46:	f043 0220 	orr.w	r2, r3, #32
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e007      	b.n	8003f6a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	695b      	ldr	r3, [r3, #20]
 8003f60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f64:	2b40      	cmp	r3, #64	@ 0x40
 8003f66:	d1ae      	bne.n	8003ec6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f68:	2300      	movs	r3, #0
}
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	3710      	adds	r7, #16
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	bd80      	pop	{r7, pc}

08003f72 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f72:	b480      	push	{r7}
 8003f74:	b083      	sub	sp, #12
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	695b      	ldr	r3, [r3, #20]
 8003f80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003f88:	d11b      	bne.n	8003fc2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003f92:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2220      	movs	r2, #32
 8003f9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fae:	f043 0204 	orr.w	r2, r3, #4
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e000      	b.n	8003fc4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003fc2:	2300      	movs	r3, #0
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	370c      	adds	r7, #12
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b086      	sub	sp, #24
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d101      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fde:	2301      	movs	r3, #1
 8003fe0:	e267      	b.n	80044b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f003 0301 	and.w	r3, r3, #1
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d075      	beq.n	80040da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003fee:	4b88      	ldr	r3, [pc, #544]	@ (8004210 <HAL_RCC_OscConfig+0x240>)
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f003 030c 	and.w	r3, r3, #12
 8003ff6:	2b04      	cmp	r3, #4
 8003ff8:	d00c      	beq.n	8004014 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003ffa:	4b85      	ldr	r3, [pc, #532]	@ (8004210 <HAL_RCC_OscConfig+0x240>)
 8003ffc:	689b      	ldr	r3, [r3, #8]
 8003ffe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004002:	2b08      	cmp	r3, #8
 8004004:	d112      	bne.n	800402c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004006:	4b82      	ldr	r3, [pc, #520]	@ (8004210 <HAL_RCC_OscConfig+0x240>)
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800400e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004012:	d10b      	bne.n	800402c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004014:	4b7e      	ldr	r3, [pc, #504]	@ (8004210 <HAL_RCC_OscConfig+0x240>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800401c:	2b00      	cmp	r3, #0
 800401e:	d05b      	beq.n	80040d8 <HAL_RCC_OscConfig+0x108>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	685b      	ldr	r3, [r3, #4]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d157      	bne.n	80040d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004028:	2301      	movs	r3, #1
 800402a:	e242      	b.n	80044b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004034:	d106      	bne.n	8004044 <HAL_RCC_OscConfig+0x74>
 8004036:	4b76      	ldr	r3, [pc, #472]	@ (8004210 <HAL_RCC_OscConfig+0x240>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a75      	ldr	r2, [pc, #468]	@ (8004210 <HAL_RCC_OscConfig+0x240>)
 800403c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004040:	6013      	str	r3, [r2, #0]
 8004042:	e01d      	b.n	8004080 <HAL_RCC_OscConfig+0xb0>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800404c:	d10c      	bne.n	8004068 <HAL_RCC_OscConfig+0x98>
 800404e:	4b70      	ldr	r3, [pc, #448]	@ (8004210 <HAL_RCC_OscConfig+0x240>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	4a6f      	ldr	r2, [pc, #444]	@ (8004210 <HAL_RCC_OscConfig+0x240>)
 8004054:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004058:	6013      	str	r3, [r2, #0]
 800405a:	4b6d      	ldr	r3, [pc, #436]	@ (8004210 <HAL_RCC_OscConfig+0x240>)
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	4a6c      	ldr	r2, [pc, #432]	@ (8004210 <HAL_RCC_OscConfig+0x240>)
 8004060:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004064:	6013      	str	r3, [r2, #0]
 8004066:	e00b      	b.n	8004080 <HAL_RCC_OscConfig+0xb0>
 8004068:	4b69      	ldr	r3, [pc, #420]	@ (8004210 <HAL_RCC_OscConfig+0x240>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a68      	ldr	r2, [pc, #416]	@ (8004210 <HAL_RCC_OscConfig+0x240>)
 800406e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004072:	6013      	str	r3, [r2, #0]
 8004074:	4b66      	ldr	r3, [pc, #408]	@ (8004210 <HAL_RCC_OscConfig+0x240>)
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a65      	ldr	r2, [pc, #404]	@ (8004210 <HAL_RCC_OscConfig+0x240>)
 800407a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800407e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	685b      	ldr	r3, [r3, #4]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d013      	beq.n	80040b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004088:	f7fe fc98 	bl	80029bc <HAL_GetTick>
 800408c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800408e:	e008      	b.n	80040a2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004090:	f7fe fc94 	bl	80029bc <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b64      	cmp	r3, #100	@ 0x64
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e207      	b.n	80044b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040a2:	4b5b      	ldr	r3, [pc, #364]	@ (8004210 <HAL_RCC_OscConfig+0x240>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d0f0      	beq.n	8004090 <HAL_RCC_OscConfig+0xc0>
 80040ae:	e014      	b.n	80040da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040b0:	f7fe fc84 	bl	80029bc <HAL_GetTick>
 80040b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040b6:	e008      	b.n	80040ca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80040b8:	f7fe fc80 	bl	80029bc <HAL_GetTick>
 80040bc:	4602      	mov	r2, r0
 80040be:	693b      	ldr	r3, [r7, #16]
 80040c0:	1ad3      	subs	r3, r2, r3
 80040c2:	2b64      	cmp	r3, #100	@ 0x64
 80040c4:	d901      	bls.n	80040ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80040c6:	2303      	movs	r3, #3
 80040c8:	e1f3      	b.n	80044b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040ca:	4b51      	ldr	r3, [pc, #324]	@ (8004210 <HAL_RCC_OscConfig+0x240>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d1f0      	bne.n	80040b8 <HAL_RCC_OscConfig+0xe8>
 80040d6:	e000      	b.n	80040da <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f003 0302 	and.w	r3, r3, #2
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d063      	beq.n	80041ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80040e6:	4b4a      	ldr	r3, [pc, #296]	@ (8004210 <HAL_RCC_OscConfig+0x240>)
 80040e8:	689b      	ldr	r3, [r3, #8]
 80040ea:	f003 030c 	and.w	r3, r3, #12
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00b      	beq.n	800410a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040f2:	4b47      	ldr	r3, [pc, #284]	@ (8004210 <HAL_RCC_OscConfig+0x240>)
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80040fa:	2b08      	cmp	r3, #8
 80040fc:	d11c      	bne.n	8004138 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040fe:	4b44      	ldr	r3, [pc, #272]	@ (8004210 <HAL_RCC_OscConfig+0x240>)
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004106:	2b00      	cmp	r3, #0
 8004108:	d116      	bne.n	8004138 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800410a:	4b41      	ldr	r3, [pc, #260]	@ (8004210 <HAL_RCC_OscConfig+0x240>)
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d005      	beq.n	8004122 <HAL_RCC_OscConfig+0x152>
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	68db      	ldr	r3, [r3, #12]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d001      	beq.n	8004122 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e1c7      	b.n	80044b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004122:	4b3b      	ldr	r3, [pc, #236]	@ (8004210 <HAL_RCC_OscConfig+0x240>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	691b      	ldr	r3, [r3, #16]
 800412e:	00db      	lsls	r3, r3, #3
 8004130:	4937      	ldr	r1, [pc, #220]	@ (8004210 <HAL_RCC_OscConfig+0x240>)
 8004132:	4313      	orrs	r3, r2
 8004134:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004136:	e03a      	b.n	80041ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	68db      	ldr	r3, [r3, #12]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d020      	beq.n	8004182 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004140:	4b34      	ldr	r3, [pc, #208]	@ (8004214 <HAL_RCC_OscConfig+0x244>)
 8004142:	2201      	movs	r2, #1
 8004144:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004146:	f7fe fc39 	bl	80029bc <HAL_GetTick>
 800414a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800414c:	e008      	b.n	8004160 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800414e:	f7fe fc35 	bl	80029bc <HAL_GetTick>
 8004152:	4602      	mov	r2, r0
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	1ad3      	subs	r3, r2, r3
 8004158:	2b02      	cmp	r3, #2
 800415a:	d901      	bls.n	8004160 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e1a8      	b.n	80044b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004160:	4b2b      	ldr	r3, [pc, #172]	@ (8004210 <HAL_RCC_OscConfig+0x240>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d0f0      	beq.n	800414e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800416c:	4b28      	ldr	r3, [pc, #160]	@ (8004210 <HAL_RCC_OscConfig+0x240>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	00db      	lsls	r3, r3, #3
 800417a:	4925      	ldr	r1, [pc, #148]	@ (8004210 <HAL_RCC_OscConfig+0x240>)
 800417c:	4313      	orrs	r3, r2
 800417e:	600b      	str	r3, [r1, #0]
 8004180:	e015      	b.n	80041ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004182:	4b24      	ldr	r3, [pc, #144]	@ (8004214 <HAL_RCC_OscConfig+0x244>)
 8004184:	2200      	movs	r2, #0
 8004186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004188:	f7fe fc18 	bl	80029bc <HAL_GetTick>
 800418c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800418e:	e008      	b.n	80041a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004190:	f7fe fc14 	bl	80029bc <HAL_GetTick>
 8004194:	4602      	mov	r2, r0
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	1ad3      	subs	r3, r2, r3
 800419a:	2b02      	cmp	r3, #2
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e187      	b.n	80044b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041a2:	4b1b      	ldr	r3, [pc, #108]	@ (8004210 <HAL_RCC_OscConfig+0x240>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d1f0      	bne.n	8004190 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0308 	and.w	r3, r3, #8
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d036      	beq.n	8004228 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d016      	beq.n	80041f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80041c2:	4b15      	ldr	r3, [pc, #84]	@ (8004218 <HAL_RCC_OscConfig+0x248>)
 80041c4:	2201      	movs	r2, #1
 80041c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041c8:	f7fe fbf8 	bl	80029bc <HAL_GetTick>
 80041cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ce:	e008      	b.n	80041e2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041d0:	f7fe fbf4 	bl	80029bc <HAL_GetTick>
 80041d4:	4602      	mov	r2, r0
 80041d6:	693b      	ldr	r3, [r7, #16]
 80041d8:	1ad3      	subs	r3, r2, r3
 80041da:	2b02      	cmp	r3, #2
 80041dc:	d901      	bls.n	80041e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80041de:	2303      	movs	r3, #3
 80041e0:	e167      	b.n	80044b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004210 <HAL_RCC_OscConfig+0x240>)
 80041e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80041e6:	f003 0302 	and.w	r3, r3, #2
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d0f0      	beq.n	80041d0 <HAL_RCC_OscConfig+0x200>
 80041ee:	e01b      	b.n	8004228 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041f0:	4b09      	ldr	r3, [pc, #36]	@ (8004218 <HAL_RCC_OscConfig+0x248>)
 80041f2:	2200      	movs	r2, #0
 80041f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041f6:	f7fe fbe1 	bl	80029bc <HAL_GetTick>
 80041fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041fc:	e00e      	b.n	800421c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80041fe:	f7fe fbdd 	bl	80029bc <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d907      	bls.n	800421c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e150      	b.n	80044b2 <HAL_RCC_OscConfig+0x4e2>
 8004210:	40023800 	.word	0x40023800
 8004214:	42470000 	.word	0x42470000
 8004218:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800421c:	4b88      	ldr	r3, [pc, #544]	@ (8004440 <HAL_RCC_OscConfig+0x470>)
 800421e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004220:	f003 0302 	and.w	r3, r3, #2
 8004224:	2b00      	cmp	r3, #0
 8004226:	d1ea      	bne.n	80041fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f003 0304 	and.w	r3, r3, #4
 8004230:	2b00      	cmp	r3, #0
 8004232:	f000 8097 	beq.w	8004364 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004236:	2300      	movs	r3, #0
 8004238:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800423a:	4b81      	ldr	r3, [pc, #516]	@ (8004440 <HAL_RCC_OscConfig+0x470>)
 800423c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800423e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d10f      	bne.n	8004266 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004246:	2300      	movs	r3, #0
 8004248:	60bb      	str	r3, [r7, #8]
 800424a:	4b7d      	ldr	r3, [pc, #500]	@ (8004440 <HAL_RCC_OscConfig+0x470>)
 800424c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800424e:	4a7c      	ldr	r2, [pc, #496]	@ (8004440 <HAL_RCC_OscConfig+0x470>)
 8004250:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004254:	6413      	str	r3, [r2, #64]	@ 0x40
 8004256:	4b7a      	ldr	r3, [pc, #488]	@ (8004440 <HAL_RCC_OscConfig+0x470>)
 8004258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800425a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800425e:	60bb      	str	r3, [r7, #8]
 8004260:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004262:	2301      	movs	r3, #1
 8004264:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004266:	4b77      	ldr	r3, [pc, #476]	@ (8004444 <HAL_RCC_OscConfig+0x474>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800426e:	2b00      	cmp	r3, #0
 8004270:	d118      	bne.n	80042a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004272:	4b74      	ldr	r3, [pc, #464]	@ (8004444 <HAL_RCC_OscConfig+0x474>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	4a73      	ldr	r2, [pc, #460]	@ (8004444 <HAL_RCC_OscConfig+0x474>)
 8004278:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800427c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800427e:	f7fe fb9d 	bl	80029bc <HAL_GetTick>
 8004282:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004284:	e008      	b.n	8004298 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004286:	f7fe fb99 	bl	80029bc <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	2b02      	cmp	r3, #2
 8004292:	d901      	bls.n	8004298 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004294:	2303      	movs	r3, #3
 8004296:	e10c      	b.n	80044b2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004298:	4b6a      	ldr	r3, [pc, #424]	@ (8004444 <HAL_RCC_OscConfig+0x474>)
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d0f0      	beq.n	8004286 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	2b01      	cmp	r3, #1
 80042aa:	d106      	bne.n	80042ba <HAL_RCC_OscConfig+0x2ea>
 80042ac:	4b64      	ldr	r3, [pc, #400]	@ (8004440 <HAL_RCC_OscConfig+0x470>)
 80042ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042b0:	4a63      	ldr	r2, [pc, #396]	@ (8004440 <HAL_RCC_OscConfig+0x470>)
 80042b2:	f043 0301 	orr.w	r3, r3, #1
 80042b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80042b8:	e01c      	b.n	80042f4 <HAL_RCC_OscConfig+0x324>
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	2b05      	cmp	r3, #5
 80042c0:	d10c      	bne.n	80042dc <HAL_RCC_OscConfig+0x30c>
 80042c2:	4b5f      	ldr	r3, [pc, #380]	@ (8004440 <HAL_RCC_OscConfig+0x470>)
 80042c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042c6:	4a5e      	ldr	r2, [pc, #376]	@ (8004440 <HAL_RCC_OscConfig+0x470>)
 80042c8:	f043 0304 	orr.w	r3, r3, #4
 80042cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80042ce:	4b5c      	ldr	r3, [pc, #368]	@ (8004440 <HAL_RCC_OscConfig+0x470>)
 80042d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042d2:	4a5b      	ldr	r2, [pc, #364]	@ (8004440 <HAL_RCC_OscConfig+0x470>)
 80042d4:	f043 0301 	orr.w	r3, r3, #1
 80042d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80042da:	e00b      	b.n	80042f4 <HAL_RCC_OscConfig+0x324>
 80042dc:	4b58      	ldr	r3, [pc, #352]	@ (8004440 <HAL_RCC_OscConfig+0x470>)
 80042de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042e0:	4a57      	ldr	r2, [pc, #348]	@ (8004440 <HAL_RCC_OscConfig+0x470>)
 80042e2:	f023 0301 	bic.w	r3, r3, #1
 80042e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80042e8:	4b55      	ldr	r3, [pc, #340]	@ (8004440 <HAL_RCC_OscConfig+0x470>)
 80042ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ec:	4a54      	ldr	r2, [pc, #336]	@ (8004440 <HAL_RCC_OscConfig+0x470>)
 80042ee:	f023 0304 	bic.w	r3, r3, #4
 80042f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	689b      	ldr	r3, [r3, #8]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d015      	beq.n	8004328 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042fc:	f7fe fb5e 	bl	80029bc <HAL_GetTick>
 8004300:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004302:	e00a      	b.n	800431a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004304:	f7fe fb5a 	bl	80029bc <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004312:	4293      	cmp	r3, r2
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e0cb      	b.n	80044b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800431a:	4b49      	ldr	r3, [pc, #292]	@ (8004440 <HAL_RCC_OscConfig+0x470>)
 800431c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800431e:	f003 0302 	and.w	r3, r3, #2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d0ee      	beq.n	8004304 <HAL_RCC_OscConfig+0x334>
 8004326:	e014      	b.n	8004352 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004328:	f7fe fb48 	bl	80029bc <HAL_GetTick>
 800432c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800432e:	e00a      	b.n	8004346 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004330:	f7fe fb44 	bl	80029bc <HAL_GetTick>
 8004334:	4602      	mov	r2, r0
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	1ad3      	subs	r3, r2, r3
 800433a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800433e:	4293      	cmp	r3, r2
 8004340:	d901      	bls.n	8004346 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e0b5      	b.n	80044b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004346:	4b3e      	ldr	r3, [pc, #248]	@ (8004440 <HAL_RCC_OscConfig+0x470>)
 8004348:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800434a:	f003 0302 	and.w	r3, r3, #2
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1ee      	bne.n	8004330 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004352:	7dfb      	ldrb	r3, [r7, #23]
 8004354:	2b01      	cmp	r3, #1
 8004356:	d105      	bne.n	8004364 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004358:	4b39      	ldr	r3, [pc, #228]	@ (8004440 <HAL_RCC_OscConfig+0x470>)
 800435a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800435c:	4a38      	ldr	r2, [pc, #224]	@ (8004440 <HAL_RCC_OscConfig+0x470>)
 800435e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004362:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	699b      	ldr	r3, [r3, #24]
 8004368:	2b00      	cmp	r3, #0
 800436a:	f000 80a1 	beq.w	80044b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800436e:	4b34      	ldr	r3, [pc, #208]	@ (8004440 <HAL_RCC_OscConfig+0x470>)
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	f003 030c 	and.w	r3, r3, #12
 8004376:	2b08      	cmp	r3, #8
 8004378:	d05c      	beq.n	8004434 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	699b      	ldr	r3, [r3, #24]
 800437e:	2b02      	cmp	r3, #2
 8004380:	d141      	bne.n	8004406 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004382:	4b31      	ldr	r3, [pc, #196]	@ (8004448 <HAL_RCC_OscConfig+0x478>)
 8004384:	2200      	movs	r2, #0
 8004386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004388:	f7fe fb18 	bl	80029bc <HAL_GetTick>
 800438c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800438e:	e008      	b.n	80043a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004390:	f7fe fb14 	bl	80029bc <HAL_GetTick>
 8004394:	4602      	mov	r2, r0
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	2b02      	cmp	r3, #2
 800439c:	d901      	bls.n	80043a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800439e:	2303      	movs	r3, #3
 80043a0:	e087      	b.n	80044b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043a2:	4b27      	ldr	r3, [pc, #156]	@ (8004440 <HAL_RCC_OscConfig+0x470>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d1f0      	bne.n	8004390 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	69da      	ldr	r2, [r3, #28]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	431a      	orrs	r2, r3
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043bc:	019b      	lsls	r3, r3, #6
 80043be:	431a      	orrs	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043c4:	085b      	lsrs	r3, r3, #1
 80043c6:	3b01      	subs	r3, #1
 80043c8:	041b      	lsls	r3, r3, #16
 80043ca:	431a      	orrs	r2, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d0:	061b      	lsls	r3, r3, #24
 80043d2:	491b      	ldr	r1, [pc, #108]	@ (8004440 <HAL_RCC_OscConfig+0x470>)
 80043d4:	4313      	orrs	r3, r2
 80043d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043d8:	4b1b      	ldr	r3, [pc, #108]	@ (8004448 <HAL_RCC_OscConfig+0x478>)
 80043da:	2201      	movs	r2, #1
 80043dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043de:	f7fe faed 	bl	80029bc <HAL_GetTick>
 80043e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043e4:	e008      	b.n	80043f8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043e6:	f7fe fae9 	bl	80029bc <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d901      	bls.n	80043f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e05c      	b.n	80044b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043f8:	4b11      	ldr	r3, [pc, #68]	@ (8004440 <HAL_RCC_OscConfig+0x470>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d0f0      	beq.n	80043e6 <HAL_RCC_OscConfig+0x416>
 8004404:	e054      	b.n	80044b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004406:	4b10      	ldr	r3, [pc, #64]	@ (8004448 <HAL_RCC_OscConfig+0x478>)
 8004408:	2200      	movs	r2, #0
 800440a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800440c:	f7fe fad6 	bl	80029bc <HAL_GetTick>
 8004410:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004412:	e008      	b.n	8004426 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004414:	f7fe fad2 	bl	80029bc <HAL_GetTick>
 8004418:	4602      	mov	r2, r0
 800441a:	693b      	ldr	r3, [r7, #16]
 800441c:	1ad3      	subs	r3, r2, r3
 800441e:	2b02      	cmp	r3, #2
 8004420:	d901      	bls.n	8004426 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004422:	2303      	movs	r3, #3
 8004424:	e045      	b.n	80044b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004426:	4b06      	ldr	r3, [pc, #24]	@ (8004440 <HAL_RCC_OscConfig+0x470>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800442e:	2b00      	cmp	r3, #0
 8004430:	d1f0      	bne.n	8004414 <HAL_RCC_OscConfig+0x444>
 8004432:	e03d      	b.n	80044b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	2b01      	cmp	r3, #1
 800443a:	d107      	bne.n	800444c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	e038      	b.n	80044b2 <HAL_RCC_OscConfig+0x4e2>
 8004440:	40023800 	.word	0x40023800
 8004444:	40007000 	.word	0x40007000
 8004448:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800444c:	4b1b      	ldr	r3, [pc, #108]	@ (80044bc <HAL_RCC_OscConfig+0x4ec>)
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	699b      	ldr	r3, [r3, #24]
 8004456:	2b01      	cmp	r3, #1
 8004458:	d028      	beq.n	80044ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004464:	429a      	cmp	r2, r3
 8004466:	d121      	bne.n	80044ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004472:	429a      	cmp	r2, r3
 8004474:	d11a      	bne.n	80044ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004476:	68fa      	ldr	r2, [r7, #12]
 8004478:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800447c:	4013      	ands	r3, r2
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004482:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004484:	4293      	cmp	r3, r2
 8004486:	d111      	bne.n	80044ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004492:	085b      	lsrs	r3, r3, #1
 8004494:	3b01      	subs	r3, #1
 8004496:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004498:	429a      	cmp	r2, r3
 800449a:	d107      	bne.n	80044ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d001      	beq.n	80044b0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e000      	b.n	80044b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80044b0:	2300      	movs	r3, #0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3718      	adds	r7, #24
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	40023800 	.word	0x40023800

080044c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d101      	bne.n	80044d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	e0cc      	b.n	800466e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80044d4:	4b68      	ldr	r3, [pc, #416]	@ (8004678 <HAL_RCC_ClockConfig+0x1b8>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f003 0307 	and.w	r3, r3, #7
 80044dc:	683a      	ldr	r2, [r7, #0]
 80044de:	429a      	cmp	r2, r3
 80044e0:	d90c      	bls.n	80044fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044e2:	4b65      	ldr	r3, [pc, #404]	@ (8004678 <HAL_RCC_ClockConfig+0x1b8>)
 80044e4:	683a      	ldr	r2, [r7, #0]
 80044e6:	b2d2      	uxtb	r2, r2
 80044e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ea:	4b63      	ldr	r3, [pc, #396]	@ (8004678 <HAL_RCC_ClockConfig+0x1b8>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 0307 	and.w	r3, r3, #7
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d001      	beq.n	80044fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044f8:	2301      	movs	r3, #1
 80044fa:	e0b8      	b.n	800466e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0302 	and.w	r3, r3, #2
 8004504:	2b00      	cmp	r3, #0
 8004506:	d020      	beq.n	800454a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 0304 	and.w	r3, r3, #4
 8004510:	2b00      	cmp	r3, #0
 8004512:	d005      	beq.n	8004520 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004514:	4b59      	ldr	r3, [pc, #356]	@ (800467c <HAL_RCC_ClockConfig+0x1bc>)
 8004516:	689b      	ldr	r3, [r3, #8]
 8004518:	4a58      	ldr	r2, [pc, #352]	@ (800467c <HAL_RCC_ClockConfig+0x1bc>)
 800451a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800451e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f003 0308 	and.w	r3, r3, #8
 8004528:	2b00      	cmp	r3, #0
 800452a:	d005      	beq.n	8004538 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800452c:	4b53      	ldr	r3, [pc, #332]	@ (800467c <HAL_RCC_ClockConfig+0x1bc>)
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	4a52      	ldr	r2, [pc, #328]	@ (800467c <HAL_RCC_ClockConfig+0x1bc>)
 8004532:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004536:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004538:	4b50      	ldr	r3, [pc, #320]	@ (800467c <HAL_RCC_ClockConfig+0x1bc>)
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	494d      	ldr	r1, [pc, #308]	@ (800467c <HAL_RCC_ClockConfig+0x1bc>)
 8004546:	4313      	orrs	r3, r2
 8004548:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b00      	cmp	r3, #0
 8004554:	d044      	beq.n	80045e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d107      	bne.n	800456e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800455e:	4b47      	ldr	r3, [pc, #284]	@ (800467c <HAL_RCC_ClockConfig+0x1bc>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004566:	2b00      	cmp	r3, #0
 8004568:	d119      	bne.n	800459e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e07f      	b.n	800466e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	2b02      	cmp	r3, #2
 8004574:	d003      	beq.n	800457e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800457a:	2b03      	cmp	r3, #3
 800457c:	d107      	bne.n	800458e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800457e:	4b3f      	ldr	r3, [pc, #252]	@ (800467c <HAL_RCC_ClockConfig+0x1bc>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004586:	2b00      	cmp	r3, #0
 8004588:	d109      	bne.n	800459e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800458a:	2301      	movs	r3, #1
 800458c:	e06f      	b.n	800466e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800458e:	4b3b      	ldr	r3, [pc, #236]	@ (800467c <HAL_RCC_ClockConfig+0x1bc>)
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0302 	and.w	r3, r3, #2
 8004596:	2b00      	cmp	r3, #0
 8004598:	d101      	bne.n	800459e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e067      	b.n	800466e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800459e:	4b37      	ldr	r3, [pc, #220]	@ (800467c <HAL_RCC_ClockConfig+0x1bc>)
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	f023 0203 	bic.w	r2, r3, #3
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	4934      	ldr	r1, [pc, #208]	@ (800467c <HAL_RCC_ClockConfig+0x1bc>)
 80045ac:	4313      	orrs	r3, r2
 80045ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045b0:	f7fe fa04 	bl	80029bc <HAL_GetTick>
 80045b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045b6:	e00a      	b.n	80045ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045b8:	f7fe fa00 	bl	80029bc <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d901      	bls.n	80045ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80045ca:	2303      	movs	r3, #3
 80045cc:	e04f      	b.n	800466e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045ce:	4b2b      	ldr	r3, [pc, #172]	@ (800467c <HAL_RCC_ClockConfig+0x1bc>)
 80045d0:	689b      	ldr	r3, [r3, #8]
 80045d2:	f003 020c 	and.w	r2, r3, #12
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	685b      	ldr	r3, [r3, #4]
 80045da:	009b      	lsls	r3, r3, #2
 80045dc:	429a      	cmp	r2, r3
 80045de:	d1eb      	bne.n	80045b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80045e0:	4b25      	ldr	r3, [pc, #148]	@ (8004678 <HAL_RCC_ClockConfig+0x1b8>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0307 	and.w	r3, r3, #7
 80045e8:	683a      	ldr	r2, [r7, #0]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d20c      	bcs.n	8004608 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ee:	4b22      	ldr	r3, [pc, #136]	@ (8004678 <HAL_RCC_ClockConfig+0x1b8>)
 80045f0:	683a      	ldr	r2, [r7, #0]
 80045f2:	b2d2      	uxtb	r2, r2
 80045f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80045f6:	4b20      	ldr	r3, [pc, #128]	@ (8004678 <HAL_RCC_ClockConfig+0x1b8>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0307 	and.w	r3, r3, #7
 80045fe:	683a      	ldr	r2, [r7, #0]
 8004600:	429a      	cmp	r2, r3
 8004602:	d001      	beq.n	8004608 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e032      	b.n	800466e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0304 	and.w	r3, r3, #4
 8004610:	2b00      	cmp	r3, #0
 8004612:	d008      	beq.n	8004626 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004614:	4b19      	ldr	r3, [pc, #100]	@ (800467c <HAL_RCC_ClockConfig+0x1bc>)
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	68db      	ldr	r3, [r3, #12]
 8004620:	4916      	ldr	r1, [pc, #88]	@ (800467c <HAL_RCC_ClockConfig+0x1bc>)
 8004622:	4313      	orrs	r3, r2
 8004624:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 0308 	and.w	r3, r3, #8
 800462e:	2b00      	cmp	r3, #0
 8004630:	d009      	beq.n	8004646 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004632:	4b12      	ldr	r3, [pc, #72]	@ (800467c <HAL_RCC_ClockConfig+0x1bc>)
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	00db      	lsls	r3, r3, #3
 8004640:	490e      	ldr	r1, [pc, #56]	@ (800467c <HAL_RCC_ClockConfig+0x1bc>)
 8004642:	4313      	orrs	r3, r2
 8004644:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004646:	f000 f821 	bl	800468c <HAL_RCC_GetSysClockFreq>
 800464a:	4602      	mov	r2, r0
 800464c:	4b0b      	ldr	r3, [pc, #44]	@ (800467c <HAL_RCC_ClockConfig+0x1bc>)
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	091b      	lsrs	r3, r3, #4
 8004652:	f003 030f 	and.w	r3, r3, #15
 8004656:	490a      	ldr	r1, [pc, #40]	@ (8004680 <HAL_RCC_ClockConfig+0x1c0>)
 8004658:	5ccb      	ldrb	r3, [r1, r3]
 800465a:	fa22 f303 	lsr.w	r3, r2, r3
 800465e:	4a09      	ldr	r2, [pc, #36]	@ (8004684 <HAL_RCC_ClockConfig+0x1c4>)
 8004660:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004662:	4b09      	ldr	r3, [pc, #36]	@ (8004688 <HAL_RCC_ClockConfig+0x1c8>)
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4618      	mov	r0, r3
 8004668:	f7fe f964 	bl	8002934 <HAL_InitTick>

  return HAL_OK;
 800466c:	2300      	movs	r3, #0
}
 800466e:	4618      	mov	r0, r3
 8004670:	3710      	adds	r7, #16
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	40023c00 	.word	0x40023c00
 800467c:	40023800 	.word	0x40023800
 8004680:	08007774 	.word	0x08007774
 8004684:	20000028 	.word	0x20000028
 8004688:	2000002c 	.word	0x2000002c

0800468c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800468c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004690:	b094      	sub	sp, #80	@ 0x50
 8004692:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004694:	2300      	movs	r3, #0
 8004696:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004698:	2300      	movs	r3, #0
 800469a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800469c:	2300      	movs	r3, #0
 800469e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80046a0:	2300      	movs	r3, #0
 80046a2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046a4:	4b79      	ldr	r3, [pc, #484]	@ (800488c <HAL_RCC_GetSysClockFreq+0x200>)
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f003 030c 	and.w	r3, r3, #12
 80046ac:	2b08      	cmp	r3, #8
 80046ae:	d00d      	beq.n	80046cc <HAL_RCC_GetSysClockFreq+0x40>
 80046b0:	2b08      	cmp	r3, #8
 80046b2:	f200 80e1 	bhi.w	8004878 <HAL_RCC_GetSysClockFreq+0x1ec>
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d002      	beq.n	80046c0 <HAL_RCC_GetSysClockFreq+0x34>
 80046ba:	2b04      	cmp	r3, #4
 80046bc:	d003      	beq.n	80046c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80046be:	e0db      	b.n	8004878 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80046c0:	4b73      	ldr	r3, [pc, #460]	@ (8004890 <HAL_RCC_GetSysClockFreq+0x204>)
 80046c2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046c4:	e0db      	b.n	800487e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80046c6:	4b73      	ldr	r3, [pc, #460]	@ (8004894 <HAL_RCC_GetSysClockFreq+0x208>)
 80046c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80046ca:	e0d8      	b.n	800487e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80046cc:	4b6f      	ldr	r3, [pc, #444]	@ (800488c <HAL_RCC_GetSysClockFreq+0x200>)
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80046d4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80046d6:	4b6d      	ldr	r3, [pc, #436]	@ (800488c <HAL_RCC_GetSysClockFreq+0x200>)
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d063      	beq.n	80047aa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046e2:	4b6a      	ldr	r3, [pc, #424]	@ (800488c <HAL_RCC_GetSysClockFreq+0x200>)
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	099b      	lsrs	r3, r3, #6
 80046e8:	2200      	movs	r2, #0
 80046ea:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046ec:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80046ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80046f6:	2300      	movs	r3, #0
 80046f8:	637b      	str	r3, [r7, #52]	@ 0x34
 80046fa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80046fe:	4622      	mov	r2, r4
 8004700:	462b      	mov	r3, r5
 8004702:	f04f 0000 	mov.w	r0, #0
 8004706:	f04f 0100 	mov.w	r1, #0
 800470a:	0159      	lsls	r1, r3, #5
 800470c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004710:	0150      	lsls	r0, r2, #5
 8004712:	4602      	mov	r2, r0
 8004714:	460b      	mov	r3, r1
 8004716:	4621      	mov	r1, r4
 8004718:	1a51      	subs	r1, r2, r1
 800471a:	6139      	str	r1, [r7, #16]
 800471c:	4629      	mov	r1, r5
 800471e:	eb63 0301 	sbc.w	r3, r3, r1
 8004722:	617b      	str	r3, [r7, #20]
 8004724:	f04f 0200 	mov.w	r2, #0
 8004728:	f04f 0300 	mov.w	r3, #0
 800472c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004730:	4659      	mov	r1, fp
 8004732:	018b      	lsls	r3, r1, #6
 8004734:	4651      	mov	r1, sl
 8004736:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800473a:	4651      	mov	r1, sl
 800473c:	018a      	lsls	r2, r1, #6
 800473e:	4651      	mov	r1, sl
 8004740:	ebb2 0801 	subs.w	r8, r2, r1
 8004744:	4659      	mov	r1, fp
 8004746:	eb63 0901 	sbc.w	r9, r3, r1
 800474a:	f04f 0200 	mov.w	r2, #0
 800474e:	f04f 0300 	mov.w	r3, #0
 8004752:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004756:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800475a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800475e:	4690      	mov	r8, r2
 8004760:	4699      	mov	r9, r3
 8004762:	4623      	mov	r3, r4
 8004764:	eb18 0303 	adds.w	r3, r8, r3
 8004768:	60bb      	str	r3, [r7, #8]
 800476a:	462b      	mov	r3, r5
 800476c:	eb49 0303 	adc.w	r3, r9, r3
 8004770:	60fb      	str	r3, [r7, #12]
 8004772:	f04f 0200 	mov.w	r2, #0
 8004776:	f04f 0300 	mov.w	r3, #0
 800477a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800477e:	4629      	mov	r1, r5
 8004780:	024b      	lsls	r3, r1, #9
 8004782:	4621      	mov	r1, r4
 8004784:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004788:	4621      	mov	r1, r4
 800478a:	024a      	lsls	r2, r1, #9
 800478c:	4610      	mov	r0, r2
 800478e:	4619      	mov	r1, r3
 8004790:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004792:	2200      	movs	r2, #0
 8004794:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004796:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004798:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800479c:	f7fc f98e 	bl	8000abc <__aeabi_uldivmod>
 80047a0:	4602      	mov	r2, r0
 80047a2:	460b      	mov	r3, r1
 80047a4:	4613      	mov	r3, r2
 80047a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047a8:	e058      	b.n	800485c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047aa:	4b38      	ldr	r3, [pc, #224]	@ (800488c <HAL_RCC_GetSysClockFreq+0x200>)
 80047ac:	685b      	ldr	r3, [r3, #4]
 80047ae:	099b      	lsrs	r3, r3, #6
 80047b0:	2200      	movs	r2, #0
 80047b2:	4618      	mov	r0, r3
 80047b4:	4611      	mov	r1, r2
 80047b6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80047ba:	623b      	str	r3, [r7, #32]
 80047bc:	2300      	movs	r3, #0
 80047be:	627b      	str	r3, [r7, #36]	@ 0x24
 80047c0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80047c4:	4642      	mov	r2, r8
 80047c6:	464b      	mov	r3, r9
 80047c8:	f04f 0000 	mov.w	r0, #0
 80047cc:	f04f 0100 	mov.w	r1, #0
 80047d0:	0159      	lsls	r1, r3, #5
 80047d2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80047d6:	0150      	lsls	r0, r2, #5
 80047d8:	4602      	mov	r2, r0
 80047da:	460b      	mov	r3, r1
 80047dc:	4641      	mov	r1, r8
 80047de:	ebb2 0a01 	subs.w	sl, r2, r1
 80047e2:	4649      	mov	r1, r9
 80047e4:	eb63 0b01 	sbc.w	fp, r3, r1
 80047e8:	f04f 0200 	mov.w	r2, #0
 80047ec:	f04f 0300 	mov.w	r3, #0
 80047f0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80047f4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80047f8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80047fc:	ebb2 040a 	subs.w	r4, r2, sl
 8004800:	eb63 050b 	sbc.w	r5, r3, fp
 8004804:	f04f 0200 	mov.w	r2, #0
 8004808:	f04f 0300 	mov.w	r3, #0
 800480c:	00eb      	lsls	r3, r5, #3
 800480e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004812:	00e2      	lsls	r2, r4, #3
 8004814:	4614      	mov	r4, r2
 8004816:	461d      	mov	r5, r3
 8004818:	4643      	mov	r3, r8
 800481a:	18e3      	adds	r3, r4, r3
 800481c:	603b      	str	r3, [r7, #0]
 800481e:	464b      	mov	r3, r9
 8004820:	eb45 0303 	adc.w	r3, r5, r3
 8004824:	607b      	str	r3, [r7, #4]
 8004826:	f04f 0200 	mov.w	r2, #0
 800482a:	f04f 0300 	mov.w	r3, #0
 800482e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004832:	4629      	mov	r1, r5
 8004834:	028b      	lsls	r3, r1, #10
 8004836:	4621      	mov	r1, r4
 8004838:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800483c:	4621      	mov	r1, r4
 800483e:	028a      	lsls	r2, r1, #10
 8004840:	4610      	mov	r0, r2
 8004842:	4619      	mov	r1, r3
 8004844:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004846:	2200      	movs	r2, #0
 8004848:	61bb      	str	r3, [r7, #24]
 800484a:	61fa      	str	r2, [r7, #28]
 800484c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004850:	f7fc f934 	bl	8000abc <__aeabi_uldivmod>
 8004854:	4602      	mov	r2, r0
 8004856:	460b      	mov	r3, r1
 8004858:	4613      	mov	r3, r2
 800485a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800485c:	4b0b      	ldr	r3, [pc, #44]	@ (800488c <HAL_RCC_GetSysClockFreq+0x200>)
 800485e:	685b      	ldr	r3, [r3, #4]
 8004860:	0c1b      	lsrs	r3, r3, #16
 8004862:	f003 0303 	and.w	r3, r3, #3
 8004866:	3301      	adds	r3, #1
 8004868:	005b      	lsls	r3, r3, #1
 800486a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800486c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800486e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004870:	fbb2 f3f3 	udiv	r3, r2, r3
 8004874:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004876:	e002      	b.n	800487e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004878:	4b05      	ldr	r3, [pc, #20]	@ (8004890 <HAL_RCC_GetSysClockFreq+0x204>)
 800487a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800487c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800487e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004880:	4618      	mov	r0, r3
 8004882:	3750      	adds	r7, #80	@ 0x50
 8004884:	46bd      	mov	sp, r7
 8004886:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800488a:	bf00      	nop
 800488c:	40023800 	.word	0x40023800
 8004890:	00f42400 	.word	0x00f42400
 8004894:	007a1200 	.word	0x007a1200

08004898 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004898:	b480      	push	{r7}
 800489a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800489c:	4b03      	ldr	r3, [pc, #12]	@ (80048ac <HAL_RCC_GetHCLKFreq+0x14>)
 800489e:	681b      	ldr	r3, [r3, #0]
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	20000028 	.word	0x20000028

080048b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048b4:	f7ff fff0 	bl	8004898 <HAL_RCC_GetHCLKFreq>
 80048b8:	4602      	mov	r2, r0
 80048ba:	4b05      	ldr	r3, [pc, #20]	@ (80048d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048bc:	689b      	ldr	r3, [r3, #8]
 80048be:	0a9b      	lsrs	r3, r3, #10
 80048c0:	f003 0307 	and.w	r3, r3, #7
 80048c4:	4903      	ldr	r1, [pc, #12]	@ (80048d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80048c6:	5ccb      	ldrb	r3, [r1, r3]
 80048c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048cc:	4618      	mov	r0, r3
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	40023800 	.word	0x40023800
 80048d4:	08007784 	.word	0x08007784

080048d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80048dc:	f7ff ffdc 	bl	8004898 <HAL_RCC_GetHCLKFreq>
 80048e0:	4602      	mov	r2, r0
 80048e2:	4b05      	ldr	r3, [pc, #20]	@ (80048f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048e4:	689b      	ldr	r3, [r3, #8]
 80048e6:	0b5b      	lsrs	r3, r3, #13
 80048e8:	f003 0307 	and.w	r3, r3, #7
 80048ec:	4903      	ldr	r1, [pc, #12]	@ (80048fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80048ee:	5ccb      	ldrb	r3, [r1, r3]
 80048f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	bd80      	pop	{r7, pc}
 80048f8:	40023800 	.word	0x40023800
 80048fc:	08007784 	.word	0x08007784

08004900 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d101      	bne.n	8004912 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e07b      	b.n	8004a0a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004916:	2b00      	cmp	r3, #0
 8004918:	d108      	bne.n	800492c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004922:	d009      	beq.n	8004938 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	61da      	str	r2, [r3, #28]
 800492a:	e005      	b.n	8004938 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2200      	movs	r2, #0
 800493c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004944:	b2db      	uxtb	r3, r3
 8004946:	2b00      	cmp	r3, #0
 8004948:	d106      	bne.n	8004958 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f7fd fdea 	bl	800252c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	2202      	movs	r2, #2
 800495c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	681a      	ldr	r2, [r3, #0]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800496e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004980:	431a      	orrs	r2, r3
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800498a:	431a      	orrs	r2, r3
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	f003 0302 	and.w	r3, r3, #2
 8004994:	431a      	orrs	r2, r3
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	f003 0301 	and.w	r3, r3, #1
 800499e:	431a      	orrs	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	699b      	ldr	r3, [r3, #24]
 80049a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80049a8:	431a      	orrs	r2, r3
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	69db      	ldr	r3, [r3, #28]
 80049ae:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80049b2:	431a      	orrs	r2, r3
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6a1b      	ldr	r3, [r3, #32]
 80049b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049bc:	ea42 0103 	orr.w	r1, r2, r3
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049c4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	430a      	orrs	r2, r1
 80049ce:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	699b      	ldr	r3, [r3, #24]
 80049d4:	0c1b      	lsrs	r3, r3, #16
 80049d6:	f003 0104 	and.w	r1, r3, #4
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049de:	f003 0210 	and.w	r2, r3, #16
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	430a      	orrs	r2, r1
 80049e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	69da      	ldr	r2, [r3, #28]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80049f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	2200      	movs	r2, #0
 80049fe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2201      	movs	r2, #1
 8004a04:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	3708      	adds	r7, #8
 8004a0e:	46bd      	mov	sp, r7
 8004a10:	bd80      	pop	{r7, pc}

08004a12 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 8004a12:	b580      	push	{r7, lr}
 8004a14:	b084      	sub	sp, #16
 8004a16:	af00      	add	r7, sp, #0
 8004a18:	60f8      	str	r0, [r7, #12]
 8004a1a:	60b9      	str	r1, [r7, #8]
 8004a1c:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d101      	bne.n	8004a28 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e038      	b.n	8004a9a <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d106      	bne.n	8004a42 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	2200      	movs	r2, #0
 8004a38:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	f7fd fe71 	bl	8002724 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	3308      	adds	r3, #8
 8004a4a:	4619      	mov	r1, r3
 8004a4c:	4610      	mov	r0, r2
 8004a4e:	f000 ff7d 	bl	800594c <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	6818      	ldr	r0, [r3, #0]
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	461a      	mov	r2, r3
 8004a5c:	68b9      	ldr	r1, [r7, #8]
 8004a5e:	f000 ffdf 	bl	8005a20 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	6858      	ldr	r0, [r3, #4]
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	689a      	ldr	r2, [r3, #8]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a6e:	6879      	ldr	r1, [r7, #4]
 8004a70:	f001 f80c 	bl	8005a8c <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	68fa      	ldr	r2, [r7, #12]
 8004a7a:	6892      	ldr	r2, [r2, #8]
 8004a7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68fa      	ldr	r2, [r7, #12]
 8004a86:	6892      	ldr	r2, [r2, #8]
 8004a88:	f041 0101 	orr.w	r1, r1, #1
 8004a8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2201      	movs	r2, #1
 8004a94:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3710      	adds	r7, #16
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	bd80      	pop	{r7, pc}

08004aa2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004aa2:	b580      	push	{r7, lr}
 8004aa4:	b082      	sub	sp, #8
 8004aa6:	af00      	add	r7, sp, #0
 8004aa8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d101      	bne.n	8004ab4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	e041      	b.n	8004b38 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d106      	bne.n	8004ace <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004ac8:	6878      	ldr	r0, [r7, #4]
 8004aca:	f7fd fd77 	bl	80025bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2202      	movs	r2, #2
 8004ad2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681a      	ldr	r2, [r3, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	3304      	adds	r3, #4
 8004ade:	4619      	mov	r1, r3
 8004ae0:	4610      	mov	r0, r2
 8004ae2:	f000 f965 	bl	8004db0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2201      	movs	r2, #1
 8004afa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2201      	movs	r2, #1
 8004b12:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2201      	movs	r2, #1
 8004b2a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2201      	movs	r2, #1
 8004b32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3708      	adds	r7, #8
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b085      	sub	sp, #20
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b4e:	b2db      	uxtb	r3, r3
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d001      	beq.n	8004b58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004b54:	2301      	movs	r3, #1
 8004b56:	e04e      	b.n	8004bf6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	68da      	ldr	r2, [r3, #12]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f042 0201 	orr.w	r2, r2, #1
 8004b6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a23      	ldr	r2, [pc, #140]	@ (8004c04 <HAL_TIM_Base_Start_IT+0xc4>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d022      	beq.n	8004bc0 <HAL_TIM_Base_Start_IT+0x80>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004b82:	d01d      	beq.n	8004bc0 <HAL_TIM_Base_Start_IT+0x80>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	4a1f      	ldr	r2, [pc, #124]	@ (8004c08 <HAL_TIM_Base_Start_IT+0xc8>)
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d018      	beq.n	8004bc0 <HAL_TIM_Base_Start_IT+0x80>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	4a1e      	ldr	r2, [pc, #120]	@ (8004c0c <HAL_TIM_Base_Start_IT+0xcc>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d013      	beq.n	8004bc0 <HAL_TIM_Base_Start_IT+0x80>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a1c      	ldr	r2, [pc, #112]	@ (8004c10 <HAL_TIM_Base_Start_IT+0xd0>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d00e      	beq.n	8004bc0 <HAL_TIM_Base_Start_IT+0x80>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a1b      	ldr	r2, [pc, #108]	@ (8004c14 <HAL_TIM_Base_Start_IT+0xd4>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d009      	beq.n	8004bc0 <HAL_TIM_Base_Start_IT+0x80>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a19      	ldr	r2, [pc, #100]	@ (8004c18 <HAL_TIM_Base_Start_IT+0xd8>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d004      	beq.n	8004bc0 <HAL_TIM_Base_Start_IT+0x80>
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a18      	ldr	r2, [pc, #96]	@ (8004c1c <HAL_TIM_Base_Start_IT+0xdc>)
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d111      	bne.n	8004be4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f003 0307 	and.w	r3, r3, #7
 8004bca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2b06      	cmp	r3, #6
 8004bd0:	d010      	beq.n	8004bf4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f042 0201 	orr.w	r2, r2, #1
 8004be0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004be2:	e007      	b.n	8004bf4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681a      	ldr	r2, [r3, #0]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f042 0201 	orr.w	r2, r2, #1
 8004bf2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004bf4:	2300      	movs	r3, #0
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	3714      	adds	r7, #20
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	40010000 	.word	0x40010000
 8004c08:	40000400 	.word	0x40000400
 8004c0c:	40000800 	.word	0x40000800
 8004c10:	40000c00 	.word	0x40000c00
 8004c14:	40010400 	.word	0x40010400
 8004c18:	40014000 	.word	0x40014000
 8004c1c:	40001800 	.word	0x40001800

08004c20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b084      	sub	sp, #16
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
 8004c28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c2a:	2300      	movs	r3, #0
 8004c2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c34:	2b01      	cmp	r3, #1
 8004c36:	d101      	bne.n	8004c3c <HAL_TIM_ConfigClockSource+0x1c>
 8004c38:	2302      	movs	r3, #2
 8004c3a:	e0b4      	b.n	8004da6 <HAL_TIM_ConfigClockSource+0x186>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2202      	movs	r2, #2
 8004c48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	689b      	ldr	r3, [r3, #8]
 8004c52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004c5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	68ba      	ldr	r2, [r7, #8]
 8004c6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c74:	d03e      	beq.n	8004cf4 <HAL_TIM_ConfigClockSource+0xd4>
 8004c76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c7a:	f200 8087 	bhi.w	8004d8c <HAL_TIM_ConfigClockSource+0x16c>
 8004c7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c82:	f000 8086 	beq.w	8004d92 <HAL_TIM_ConfigClockSource+0x172>
 8004c86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c8a:	d87f      	bhi.n	8004d8c <HAL_TIM_ConfigClockSource+0x16c>
 8004c8c:	2b70      	cmp	r3, #112	@ 0x70
 8004c8e:	d01a      	beq.n	8004cc6 <HAL_TIM_ConfigClockSource+0xa6>
 8004c90:	2b70      	cmp	r3, #112	@ 0x70
 8004c92:	d87b      	bhi.n	8004d8c <HAL_TIM_ConfigClockSource+0x16c>
 8004c94:	2b60      	cmp	r3, #96	@ 0x60
 8004c96:	d050      	beq.n	8004d3a <HAL_TIM_ConfigClockSource+0x11a>
 8004c98:	2b60      	cmp	r3, #96	@ 0x60
 8004c9a:	d877      	bhi.n	8004d8c <HAL_TIM_ConfigClockSource+0x16c>
 8004c9c:	2b50      	cmp	r3, #80	@ 0x50
 8004c9e:	d03c      	beq.n	8004d1a <HAL_TIM_ConfigClockSource+0xfa>
 8004ca0:	2b50      	cmp	r3, #80	@ 0x50
 8004ca2:	d873      	bhi.n	8004d8c <HAL_TIM_ConfigClockSource+0x16c>
 8004ca4:	2b40      	cmp	r3, #64	@ 0x40
 8004ca6:	d058      	beq.n	8004d5a <HAL_TIM_ConfigClockSource+0x13a>
 8004ca8:	2b40      	cmp	r3, #64	@ 0x40
 8004caa:	d86f      	bhi.n	8004d8c <HAL_TIM_ConfigClockSource+0x16c>
 8004cac:	2b30      	cmp	r3, #48	@ 0x30
 8004cae:	d064      	beq.n	8004d7a <HAL_TIM_ConfigClockSource+0x15a>
 8004cb0:	2b30      	cmp	r3, #48	@ 0x30
 8004cb2:	d86b      	bhi.n	8004d8c <HAL_TIM_ConfigClockSource+0x16c>
 8004cb4:	2b20      	cmp	r3, #32
 8004cb6:	d060      	beq.n	8004d7a <HAL_TIM_ConfigClockSource+0x15a>
 8004cb8:	2b20      	cmp	r3, #32
 8004cba:	d867      	bhi.n	8004d8c <HAL_TIM_ConfigClockSource+0x16c>
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d05c      	beq.n	8004d7a <HAL_TIM_ConfigClockSource+0x15a>
 8004cc0:	2b10      	cmp	r3, #16
 8004cc2:	d05a      	beq.n	8004d7a <HAL_TIM_ConfigClockSource+0x15a>
 8004cc4:	e062      	b.n	8004d8c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004cd6:	f000 f991 	bl	8004ffc <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004ce8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68ba      	ldr	r2, [r7, #8]
 8004cf0:	609a      	str	r2, [r3, #8]
      break;
 8004cf2:	e04f      	b.n	8004d94 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d04:	f000 f97a 	bl	8004ffc <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689a      	ldr	r2, [r3, #8]
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d16:	609a      	str	r2, [r3, #8]
      break;
 8004d18:	e03c      	b.n	8004d94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d26:	461a      	mov	r2, r3
 8004d28:	f000 f8ee 	bl	8004f08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	2150      	movs	r1, #80	@ 0x50
 8004d32:	4618      	mov	r0, r3
 8004d34:	f000 f947 	bl	8004fc6 <TIM_ITRx_SetConfig>
      break;
 8004d38:	e02c      	b.n	8004d94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d46:	461a      	mov	r2, r3
 8004d48:	f000 f90d 	bl	8004f66 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	2160      	movs	r1, #96	@ 0x60
 8004d52:	4618      	mov	r0, r3
 8004d54:	f000 f937 	bl	8004fc6 <TIM_ITRx_SetConfig>
      break;
 8004d58:	e01c      	b.n	8004d94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d66:	461a      	mov	r2, r3
 8004d68:	f000 f8ce 	bl	8004f08 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2140      	movs	r1, #64	@ 0x40
 8004d72:	4618      	mov	r0, r3
 8004d74:	f000 f927 	bl	8004fc6 <TIM_ITRx_SetConfig>
      break;
 8004d78:	e00c      	b.n	8004d94 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	683b      	ldr	r3, [r7, #0]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4619      	mov	r1, r3
 8004d84:	4610      	mov	r0, r2
 8004d86:	f000 f91e 	bl	8004fc6 <TIM_ITRx_SetConfig>
      break;
 8004d8a:	e003      	b.n	8004d94 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	73fb      	strb	r3, [r7, #15]
      break;
 8004d90:	e000      	b.n	8004d94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004d92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2201      	movs	r2, #1
 8004d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004da4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3710      	adds	r7, #16
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
	...

08004db0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004db0:	b480      	push	{r7}
 8004db2:	b085      	sub	sp, #20
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	4a46      	ldr	r2, [pc, #280]	@ (8004edc <TIM_Base_SetConfig+0x12c>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d013      	beq.n	8004df0 <TIM_Base_SetConfig+0x40>
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004dce:	d00f      	beq.n	8004df0 <TIM_Base_SetConfig+0x40>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a43      	ldr	r2, [pc, #268]	@ (8004ee0 <TIM_Base_SetConfig+0x130>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d00b      	beq.n	8004df0 <TIM_Base_SetConfig+0x40>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a42      	ldr	r2, [pc, #264]	@ (8004ee4 <TIM_Base_SetConfig+0x134>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d007      	beq.n	8004df0 <TIM_Base_SetConfig+0x40>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a41      	ldr	r2, [pc, #260]	@ (8004ee8 <TIM_Base_SetConfig+0x138>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d003      	beq.n	8004df0 <TIM_Base_SetConfig+0x40>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a40      	ldr	r2, [pc, #256]	@ (8004eec <TIM_Base_SetConfig+0x13c>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d108      	bne.n	8004e02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004df6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	68fa      	ldr	r2, [r7, #12]
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	4a35      	ldr	r2, [pc, #212]	@ (8004edc <TIM_Base_SetConfig+0x12c>)
 8004e06:	4293      	cmp	r3, r2
 8004e08:	d02b      	beq.n	8004e62 <TIM_Base_SetConfig+0xb2>
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e10:	d027      	beq.n	8004e62 <TIM_Base_SetConfig+0xb2>
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	4a32      	ldr	r2, [pc, #200]	@ (8004ee0 <TIM_Base_SetConfig+0x130>)
 8004e16:	4293      	cmp	r3, r2
 8004e18:	d023      	beq.n	8004e62 <TIM_Base_SetConfig+0xb2>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	4a31      	ldr	r2, [pc, #196]	@ (8004ee4 <TIM_Base_SetConfig+0x134>)
 8004e1e:	4293      	cmp	r3, r2
 8004e20:	d01f      	beq.n	8004e62 <TIM_Base_SetConfig+0xb2>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	4a30      	ldr	r2, [pc, #192]	@ (8004ee8 <TIM_Base_SetConfig+0x138>)
 8004e26:	4293      	cmp	r3, r2
 8004e28:	d01b      	beq.n	8004e62 <TIM_Base_SetConfig+0xb2>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	4a2f      	ldr	r2, [pc, #188]	@ (8004eec <TIM_Base_SetConfig+0x13c>)
 8004e2e:	4293      	cmp	r3, r2
 8004e30:	d017      	beq.n	8004e62 <TIM_Base_SetConfig+0xb2>
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a2e      	ldr	r2, [pc, #184]	@ (8004ef0 <TIM_Base_SetConfig+0x140>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d013      	beq.n	8004e62 <TIM_Base_SetConfig+0xb2>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	4a2d      	ldr	r2, [pc, #180]	@ (8004ef4 <TIM_Base_SetConfig+0x144>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d00f      	beq.n	8004e62 <TIM_Base_SetConfig+0xb2>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	4a2c      	ldr	r2, [pc, #176]	@ (8004ef8 <TIM_Base_SetConfig+0x148>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d00b      	beq.n	8004e62 <TIM_Base_SetConfig+0xb2>
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a2b      	ldr	r2, [pc, #172]	@ (8004efc <TIM_Base_SetConfig+0x14c>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d007      	beq.n	8004e62 <TIM_Base_SetConfig+0xb2>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	4a2a      	ldr	r2, [pc, #168]	@ (8004f00 <TIM_Base_SetConfig+0x150>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d003      	beq.n	8004e62 <TIM_Base_SetConfig+0xb2>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a29      	ldr	r2, [pc, #164]	@ (8004f04 <TIM_Base_SetConfig+0x154>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d108      	bne.n	8004e74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	68db      	ldr	r3, [r3, #12]
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	695b      	ldr	r3, [r3, #20]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	68fa      	ldr	r2, [r7, #12]
 8004e86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	689a      	ldr	r2, [r3, #8]
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	681a      	ldr	r2, [r3, #0]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a10      	ldr	r2, [pc, #64]	@ (8004edc <TIM_Base_SetConfig+0x12c>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d003      	beq.n	8004ea8 <TIM_Base_SetConfig+0xf8>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a12      	ldr	r2, [pc, #72]	@ (8004eec <TIM_Base_SetConfig+0x13c>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d103      	bne.n	8004eb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	691a      	ldr	r2, [r3, #16]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	2b01      	cmp	r3, #1
 8004ec0:	d105      	bne.n	8004ece <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	f023 0201 	bic.w	r2, r3, #1
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	611a      	str	r2, [r3, #16]
  }
}
 8004ece:	bf00      	nop
 8004ed0:	3714      	adds	r7, #20
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed8:	4770      	bx	lr
 8004eda:	bf00      	nop
 8004edc:	40010000 	.word	0x40010000
 8004ee0:	40000400 	.word	0x40000400
 8004ee4:	40000800 	.word	0x40000800
 8004ee8:	40000c00 	.word	0x40000c00
 8004eec:	40010400 	.word	0x40010400
 8004ef0:	40014000 	.word	0x40014000
 8004ef4:	40014400 	.word	0x40014400
 8004ef8:	40014800 	.word	0x40014800
 8004efc:	40001800 	.word	0x40001800
 8004f00:	40001c00 	.word	0x40001c00
 8004f04:	40002000 	.word	0x40002000

08004f08 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b087      	sub	sp, #28
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	6a1b      	ldr	r3, [r3, #32]
 8004f18:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	6a1b      	ldr	r3, [r3, #32]
 8004f1e:	f023 0201 	bic.w	r2, r3, #1
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	699b      	ldr	r3, [r3, #24]
 8004f2a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004f32:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	011b      	lsls	r3, r3, #4
 8004f38:	693a      	ldr	r2, [r7, #16]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	f023 030a 	bic.w	r3, r3, #10
 8004f44:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004f46:	697a      	ldr	r2, [r7, #20]
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	693a      	ldr	r2, [r7, #16]
 8004f52:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	621a      	str	r2, [r3, #32]
}
 8004f5a:	bf00      	nop
 8004f5c:	371c      	adds	r7, #28
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr

08004f66 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004f66:	b480      	push	{r7}
 8004f68:	b087      	sub	sp, #28
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	60f8      	str	r0, [r7, #12]
 8004f6e:	60b9      	str	r1, [r7, #8]
 8004f70:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	6a1b      	ldr	r3, [r3, #32]
 8004f76:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6a1b      	ldr	r3, [r3, #32]
 8004f7c:	f023 0210 	bic.w	r2, r3, #16
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004f8a:	693b      	ldr	r3, [r7, #16]
 8004f8c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004f90:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	031b      	lsls	r3, r3, #12
 8004f96:	693a      	ldr	r2, [r7, #16]
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004f9c:	697b      	ldr	r3, [r7, #20]
 8004f9e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004fa2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	011b      	lsls	r3, r3, #4
 8004fa8:	697a      	ldr	r2, [r7, #20]
 8004faa:	4313      	orrs	r3, r2
 8004fac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	693a      	ldr	r2, [r7, #16]
 8004fb2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	697a      	ldr	r2, [r7, #20]
 8004fb8:	621a      	str	r2, [r3, #32]
}
 8004fba:	bf00      	nop
 8004fbc:	371c      	adds	r7, #28
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr

08004fc6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004fc6:	b480      	push	{r7}
 8004fc8:	b085      	sub	sp, #20
 8004fca:	af00      	add	r7, sp, #0
 8004fcc:	6078      	str	r0, [r7, #4]
 8004fce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fdc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004fde:	683a      	ldr	r2, [r7, #0]
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	f043 0307 	orr.w	r3, r3, #7
 8004fe8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	68fa      	ldr	r2, [r7, #12]
 8004fee:	609a      	str	r2, [r3, #8]
}
 8004ff0:	bf00      	nop
 8004ff2:	3714      	adds	r7, #20
 8004ff4:	46bd      	mov	sp, r7
 8004ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffa:	4770      	bx	lr

08004ffc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b087      	sub	sp, #28
 8005000:	af00      	add	r7, sp, #0
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	60b9      	str	r1, [r7, #8]
 8005006:	607a      	str	r2, [r7, #4]
 8005008:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005016:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	021a      	lsls	r2, r3, #8
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	431a      	orrs	r2, r3
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	4313      	orrs	r3, r2
 8005024:	697a      	ldr	r2, [r7, #20]
 8005026:	4313      	orrs	r3, r2
 8005028:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	697a      	ldr	r2, [r7, #20]
 800502e:	609a      	str	r2, [r3, #8]
}
 8005030:	bf00      	nop
 8005032:	371c      	adds	r7, #28
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800503c:	b480      	push	{r7}
 800503e:	b085      	sub	sp, #20
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800504c:	2b01      	cmp	r3, #1
 800504e:	d101      	bne.n	8005054 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005050:	2302      	movs	r3, #2
 8005052:	e05a      	b.n	800510a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2202      	movs	r2, #2
 8005060:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800507a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	68fa      	ldr	r2, [r7, #12]
 8005082:	4313      	orrs	r3, r2
 8005084:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	4a21      	ldr	r2, [pc, #132]	@ (8005118 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005094:	4293      	cmp	r3, r2
 8005096:	d022      	beq.n	80050de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80050a0:	d01d      	beq.n	80050de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	4a1d      	ldr	r2, [pc, #116]	@ (800511c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80050a8:	4293      	cmp	r3, r2
 80050aa:	d018      	beq.n	80050de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4a1b      	ldr	r2, [pc, #108]	@ (8005120 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	d013      	beq.n	80050de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a1a      	ldr	r2, [pc, #104]	@ (8005124 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80050bc:	4293      	cmp	r3, r2
 80050be:	d00e      	beq.n	80050de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a18      	ldr	r2, [pc, #96]	@ (8005128 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d009      	beq.n	80050de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	4a17      	ldr	r2, [pc, #92]	@ (800512c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d004      	beq.n	80050de <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a15      	ldr	r2, [pc, #84]	@ (8005130 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	d10c      	bne.n	80050f8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	68ba      	ldr	r2, [r7, #8]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	68ba      	ldr	r2, [r7, #8]
 80050f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3714      	adds	r7, #20
 800510e:	46bd      	mov	sp, r7
 8005110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005114:	4770      	bx	lr
 8005116:	bf00      	nop
 8005118:	40010000 	.word	0x40010000
 800511c:	40000400 	.word	0x40000400
 8005120:	40000800 	.word	0x40000800
 8005124:	40000c00 	.word	0x40000c00
 8005128:	40010400 	.word	0x40010400
 800512c:	40014000 	.word	0x40014000
 8005130:	40001800 	.word	0x40001800

08005134 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2b00      	cmp	r3, #0
 8005140:	d101      	bne.n	8005146 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e042      	b.n	80051cc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d106      	bne.n	8005160 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f7fd fa4e 	bl	80025fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2224      	movs	r2, #36	@ 0x24
 8005164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	68da      	ldr	r2, [r3, #12]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005176:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f000 f973 	bl	8005464 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	691a      	ldr	r2, [r3, #16]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800518c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	695a      	ldr	r2, [r3, #20]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800519c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68da      	ldr	r2, [r3, #12]
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80051ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2200      	movs	r2, #0
 80051b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2220      	movs	r2, #32
 80051b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2220      	movs	r2, #32
 80051c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3708      	adds	r7, #8
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b08a      	sub	sp, #40	@ 0x28
 80051d8:	af02      	add	r7, sp, #8
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	603b      	str	r3, [r7, #0]
 80051e0:	4613      	mov	r3, r2
 80051e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80051e4:	2300      	movs	r3, #0
 80051e6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	2b20      	cmp	r3, #32
 80051f2:	d175      	bne.n	80052e0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80051f4:	68bb      	ldr	r3, [r7, #8]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d002      	beq.n	8005200 <HAL_UART_Transmit+0x2c>
 80051fa:	88fb      	ldrh	r3, [r7, #6]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d101      	bne.n	8005204 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005200:	2301      	movs	r3, #1
 8005202:	e06e      	b.n	80052e2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2200      	movs	r2, #0
 8005208:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	2221      	movs	r2, #33	@ 0x21
 800520e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005212:	f7fd fbd3 	bl	80029bc <HAL_GetTick>
 8005216:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	88fa      	ldrh	r2, [r7, #6]
 800521c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	88fa      	ldrh	r2, [r7, #6]
 8005222:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800522c:	d108      	bne.n	8005240 <HAL_UART_Transmit+0x6c>
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d104      	bne.n	8005240 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005236:	2300      	movs	r3, #0
 8005238:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	61bb      	str	r3, [r7, #24]
 800523e:	e003      	b.n	8005248 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005244:	2300      	movs	r3, #0
 8005246:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005248:	e02e      	b.n	80052a8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	9300      	str	r3, [sp, #0]
 800524e:	697b      	ldr	r3, [r7, #20]
 8005250:	2200      	movs	r2, #0
 8005252:	2180      	movs	r1, #128	@ 0x80
 8005254:	68f8      	ldr	r0, [r7, #12]
 8005256:	f000 f848 	bl	80052ea <UART_WaitOnFlagUntilTimeout>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d005      	beq.n	800526c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2220      	movs	r2, #32
 8005264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005268:	2303      	movs	r3, #3
 800526a:	e03a      	b.n	80052e2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d10b      	bne.n	800528a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005272:	69bb      	ldr	r3, [r7, #24]
 8005274:	881b      	ldrh	r3, [r3, #0]
 8005276:	461a      	mov	r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005280:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	3302      	adds	r3, #2
 8005286:	61bb      	str	r3, [r7, #24]
 8005288:	e007      	b.n	800529a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	781a      	ldrb	r2, [r3, #0]
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005294:	69fb      	ldr	r3, [r7, #28]
 8005296:	3301      	adds	r3, #1
 8005298:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800529e:	b29b      	uxth	r3, r3
 80052a0:	3b01      	subs	r3, #1
 80052a2:	b29a      	uxth	r2, r3
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d1cb      	bne.n	800524a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	9300      	str	r3, [sp, #0]
 80052b6:	697b      	ldr	r3, [r7, #20]
 80052b8:	2200      	movs	r2, #0
 80052ba:	2140      	movs	r1, #64	@ 0x40
 80052bc:	68f8      	ldr	r0, [r7, #12]
 80052be:	f000 f814 	bl	80052ea <UART_WaitOnFlagUntilTimeout>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d005      	beq.n	80052d4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2220      	movs	r2, #32
 80052cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e006      	b.n	80052e2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	2220      	movs	r2, #32
 80052d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80052dc:	2300      	movs	r3, #0
 80052de:	e000      	b.n	80052e2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80052e0:	2302      	movs	r3, #2
  }
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3720      	adds	r7, #32
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}

080052ea <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80052ea:	b580      	push	{r7, lr}
 80052ec:	b086      	sub	sp, #24
 80052ee:	af00      	add	r7, sp, #0
 80052f0:	60f8      	str	r0, [r7, #12]
 80052f2:	60b9      	str	r1, [r7, #8]
 80052f4:	603b      	str	r3, [r7, #0]
 80052f6:	4613      	mov	r3, r2
 80052f8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052fa:	e03b      	b.n	8005374 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052fc:	6a3b      	ldr	r3, [r7, #32]
 80052fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005302:	d037      	beq.n	8005374 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005304:	f7fd fb5a 	bl	80029bc <HAL_GetTick>
 8005308:	4602      	mov	r2, r0
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	6a3a      	ldr	r2, [r7, #32]
 8005310:	429a      	cmp	r2, r3
 8005312:	d302      	bcc.n	800531a <UART_WaitOnFlagUntilTimeout+0x30>
 8005314:	6a3b      	ldr	r3, [r7, #32]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d101      	bne.n	800531e <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e03a      	b.n	8005394 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	68db      	ldr	r3, [r3, #12]
 8005324:	f003 0304 	and.w	r3, r3, #4
 8005328:	2b00      	cmp	r3, #0
 800532a:	d023      	beq.n	8005374 <UART_WaitOnFlagUntilTimeout+0x8a>
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	2b80      	cmp	r3, #128	@ 0x80
 8005330:	d020      	beq.n	8005374 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005332:	68bb      	ldr	r3, [r7, #8]
 8005334:	2b40      	cmp	r3, #64	@ 0x40
 8005336:	d01d      	beq.n	8005374 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0308 	and.w	r3, r3, #8
 8005342:	2b08      	cmp	r3, #8
 8005344:	d116      	bne.n	8005374 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005346:	2300      	movs	r3, #0
 8005348:	617b      	str	r3, [r7, #20]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	617b      	str	r3, [r7, #20]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	617b      	str	r3, [r7, #20]
 800535a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	f000 f81d 	bl	800539c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2208      	movs	r2, #8
 8005366:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	2200      	movs	r2, #0
 800536c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e00f      	b.n	8005394 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	681a      	ldr	r2, [r3, #0]
 800537a:	68bb      	ldr	r3, [r7, #8]
 800537c:	4013      	ands	r3, r2
 800537e:	68ba      	ldr	r2, [r7, #8]
 8005380:	429a      	cmp	r2, r3
 8005382:	bf0c      	ite	eq
 8005384:	2301      	moveq	r3, #1
 8005386:	2300      	movne	r3, #0
 8005388:	b2db      	uxtb	r3, r3
 800538a:	461a      	mov	r2, r3
 800538c:	79fb      	ldrb	r3, [r7, #7]
 800538e:	429a      	cmp	r2, r3
 8005390:	d0b4      	beq.n	80052fc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005392:	2300      	movs	r3, #0
}
 8005394:	4618      	mov	r0, r3
 8005396:	3718      	adds	r7, #24
 8005398:	46bd      	mov	sp, r7
 800539a:	bd80      	pop	{r7, pc}

0800539c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800539c:	b480      	push	{r7}
 800539e:	b095      	sub	sp, #84	@ 0x54
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	330c      	adds	r3, #12
 80053aa:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053ae:	e853 3f00 	ldrex	r3, [r3]
 80053b2:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80053b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80053ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	330c      	adds	r3, #12
 80053c2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80053c4:	643a      	str	r2, [r7, #64]	@ 0x40
 80053c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80053ca:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80053cc:	e841 2300 	strex	r3, r2, [r1]
 80053d0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80053d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d1e5      	bne.n	80053a4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	3314      	adds	r3, #20
 80053de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e0:	6a3b      	ldr	r3, [r7, #32]
 80053e2:	e853 3f00 	ldrex	r3, [r3]
 80053e6:	61fb      	str	r3, [r7, #28]
   return(result);
 80053e8:	69fb      	ldr	r3, [r7, #28]
 80053ea:	f023 0301 	bic.w	r3, r3, #1
 80053ee:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	3314      	adds	r3, #20
 80053f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053f8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005400:	e841 2300 	strex	r3, r2, [r1]
 8005404:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005408:	2b00      	cmp	r3, #0
 800540a:	d1e5      	bne.n	80053d8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005410:	2b01      	cmp	r3, #1
 8005412:	d119      	bne.n	8005448 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	330c      	adds	r3, #12
 800541a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	e853 3f00 	ldrex	r3, [r3]
 8005422:	60bb      	str	r3, [r7, #8]
   return(result);
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	f023 0310 	bic.w	r3, r3, #16
 800542a:	647b      	str	r3, [r7, #68]	@ 0x44
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	330c      	adds	r3, #12
 8005432:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005434:	61ba      	str	r2, [r7, #24]
 8005436:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005438:	6979      	ldr	r1, [r7, #20]
 800543a:	69ba      	ldr	r2, [r7, #24]
 800543c:	e841 2300 	strex	r3, r2, [r1]
 8005440:	613b      	str	r3, [r7, #16]
   return(result);
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d1e5      	bne.n	8005414 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	2220      	movs	r2, #32
 800544c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2200      	movs	r2, #0
 8005454:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005456:	bf00      	nop
 8005458:	3754      	adds	r7, #84	@ 0x54
 800545a:	46bd      	mov	sp, r7
 800545c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005460:	4770      	bx	lr
	...

08005464 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005464:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005468:	b0c0      	sub	sp, #256	@ 0x100
 800546a:	af00      	add	r7, sp, #0
 800546c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	691b      	ldr	r3, [r3, #16]
 8005478:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800547c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005480:	68d9      	ldr	r1, [r3, #12]
 8005482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005486:	681a      	ldr	r2, [r3, #0]
 8005488:	ea40 0301 	orr.w	r3, r0, r1
 800548c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800548e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005492:	689a      	ldr	r2, [r3, #8]
 8005494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005498:	691b      	ldr	r3, [r3, #16]
 800549a:	431a      	orrs	r2, r3
 800549c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054a0:	695b      	ldr	r3, [r3, #20]
 80054a2:	431a      	orrs	r2, r3
 80054a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054a8:	69db      	ldr	r3, [r3, #28]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80054b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80054bc:	f021 010c 	bic.w	r1, r1, #12
 80054c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054c4:	681a      	ldr	r2, [r3, #0]
 80054c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80054ca:	430b      	orrs	r3, r1
 80054cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80054ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80054da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054de:	6999      	ldr	r1, [r3, #24]
 80054e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	ea40 0301 	orr.w	r3, r0, r1
 80054ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80054ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	4b8f      	ldr	r3, [pc, #572]	@ (8005730 <UART_SetConfig+0x2cc>)
 80054f4:	429a      	cmp	r2, r3
 80054f6:	d005      	beq.n	8005504 <UART_SetConfig+0xa0>
 80054f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054fc:	681a      	ldr	r2, [r3, #0]
 80054fe:	4b8d      	ldr	r3, [pc, #564]	@ (8005734 <UART_SetConfig+0x2d0>)
 8005500:	429a      	cmp	r2, r3
 8005502:	d104      	bne.n	800550e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005504:	f7ff f9e8 	bl	80048d8 <HAL_RCC_GetPCLK2Freq>
 8005508:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800550c:	e003      	b.n	8005516 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800550e:	f7ff f9cf 	bl	80048b0 <HAL_RCC_GetPCLK1Freq>
 8005512:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005516:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800551a:	69db      	ldr	r3, [r3, #28]
 800551c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005520:	f040 810c 	bne.w	800573c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005524:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005528:	2200      	movs	r2, #0
 800552a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800552e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005532:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005536:	4622      	mov	r2, r4
 8005538:	462b      	mov	r3, r5
 800553a:	1891      	adds	r1, r2, r2
 800553c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800553e:	415b      	adcs	r3, r3
 8005540:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005542:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005546:	4621      	mov	r1, r4
 8005548:	eb12 0801 	adds.w	r8, r2, r1
 800554c:	4629      	mov	r1, r5
 800554e:	eb43 0901 	adc.w	r9, r3, r1
 8005552:	f04f 0200 	mov.w	r2, #0
 8005556:	f04f 0300 	mov.w	r3, #0
 800555a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800555e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005562:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005566:	4690      	mov	r8, r2
 8005568:	4699      	mov	r9, r3
 800556a:	4623      	mov	r3, r4
 800556c:	eb18 0303 	adds.w	r3, r8, r3
 8005570:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005574:	462b      	mov	r3, r5
 8005576:	eb49 0303 	adc.w	r3, r9, r3
 800557a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800557e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800558a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800558e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005592:	460b      	mov	r3, r1
 8005594:	18db      	adds	r3, r3, r3
 8005596:	653b      	str	r3, [r7, #80]	@ 0x50
 8005598:	4613      	mov	r3, r2
 800559a:	eb42 0303 	adc.w	r3, r2, r3
 800559e:	657b      	str	r3, [r7, #84]	@ 0x54
 80055a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80055a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80055a8:	f7fb fa88 	bl	8000abc <__aeabi_uldivmod>
 80055ac:	4602      	mov	r2, r0
 80055ae:	460b      	mov	r3, r1
 80055b0:	4b61      	ldr	r3, [pc, #388]	@ (8005738 <UART_SetConfig+0x2d4>)
 80055b2:	fba3 2302 	umull	r2, r3, r3, r2
 80055b6:	095b      	lsrs	r3, r3, #5
 80055b8:	011c      	lsls	r4, r3, #4
 80055ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055be:	2200      	movs	r2, #0
 80055c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80055c4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80055c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80055cc:	4642      	mov	r2, r8
 80055ce:	464b      	mov	r3, r9
 80055d0:	1891      	adds	r1, r2, r2
 80055d2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80055d4:	415b      	adcs	r3, r3
 80055d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80055dc:	4641      	mov	r1, r8
 80055de:	eb12 0a01 	adds.w	sl, r2, r1
 80055e2:	4649      	mov	r1, r9
 80055e4:	eb43 0b01 	adc.w	fp, r3, r1
 80055e8:	f04f 0200 	mov.w	r2, #0
 80055ec:	f04f 0300 	mov.w	r3, #0
 80055f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80055f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80055f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055fc:	4692      	mov	sl, r2
 80055fe:	469b      	mov	fp, r3
 8005600:	4643      	mov	r3, r8
 8005602:	eb1a 0303 	adds.w	r3, sl, r3
 8005606:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800560a:	464b      	mov	r3, r9
 800560c:	eb4b 0303 	adc.w	r3, fp, r3
 8005610:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005620:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005624:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005628:	460b      	mov	r3, r1
 800562a:	18db      	adds	r3, r3, r3
 800562c:	643b      	str	r3, [r7, #64]	@ 0x40
 800562e:	4613      	mov	r3, r2
 8005630:	eb42 0303 	adc.w	r3, r2, r3
 8005634:	647b      	str	r3, [r7, #68]	@ 0x44
 8005636:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800563a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800563e:	f7fb fa3d 	bl	8000abc <__aeabi_uldivmod>
 8005642:	4602      	mov	r2, r0
 8005644:	460b      	mov	r3, r1
 8005646:	4611      	mov	r1, r2
 8005648:	4b3b      	ldr	r3, [pc, #236]	@ (8005738 <UART_SetConfig+0x2d4>)
 800564a:	fba3 2301 	umull	r2, r3, r3, r1
 800564e:	095b      	lsrs	r3, r3, #5
 8005650:	2264      	movs	r2, #100	@ 0x64
 8005652:	fb02 f303 	mul.w	r3, r2, r3
 8005656:	1acb      	subs	r3, r1, r3
 8005658:	00db      	lsls	r3, r3, #3
 800565a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800565e:	4b36      	ldr	r3, [pc, #216]	@ (8005738 <UART_SetConfig+0x2d4>)
 8005660:	fba3 2302 	umull	r2, r3, r3, r2
 8005664:	095b      	lsrs	r3, r3, #5
 8005666:	005b      	lsls	r3, r3, #1
 8005668:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800566c:	441c      	add	r4, r3
 800566e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005672:	2200      	movs	r2, #0
 8005674:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005678:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800567c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005680:	4642      	mov	r2, r8
 8005682:	464b      	mov	r3, r9
 8005684:	1891      	adds	r1, r2, r2
 8005686:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005688:	415b      	adcs	r3, r3
 800568a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800568c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005690:	4641      	mov	r1, r8
 8005692:	1851      	adds	r1, r2, r1
 8005694:	6339      	str	r1, [r7, #48]	@ 0x30
 8005696:	4649      	mov	r1, r9
 8005698:	414b      	adcs	r3, r1
 800569a:	637b      	str	r3, [r7, #52]	@ 0x34
 800569c:	f04f 0200 	mov.w	r2, #0
 80056a0:	f04f 0300 	mov.w	r3, #0
 80056a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80056a8:	4659      	mov	r1, fp
 80056aa:	00cb      	lsls	r3, r1, #3
 80056ac:	4651      	mov	r1, sl
 80056ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056b2:	4651      	mov	r1, sl
 80056b4:	00ca      	lsls	r2, r1, #3
 80056b6:	4610      	mov	r0, r2
 80056b8:	4619      	mov	r1, r3
 80056ba:	4603      	mov	r3, r0
 80056bc:	4642      	mov	r2, r8
 80056be:	189b      	adds	r3, r3, r2
 80056c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80056c4:	464b      	mov	r3, r9
 80056c6:	460a      	mov	r2, r1
 80056c8:	eb42 0303 	adc.w	r3, r2, r3
 80056cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80056d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80056dc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80056e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80056e4:	460b      	mov	r3, r1
 80056e6:	18db      	adds	r3, r3, r3
 80056e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056ea:	4613      	mov	r3, r2
 80056ec:	eb42 0303 	adc.w	r3, r2, r3
 80056f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80056f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80056fa:	f7fb f9df 	bl	8000abc <__aeabi_uldivmod>
 80056fe:	4602      	mov	r2, r0
 8005700:	460b      	mov	r3, r1
 8005702:	4b0d      	ldr	r3, [pc, #52]	@ (8005738 <UART_SetConfig+0x2d4>)
 8005704:	fba3 1302 	umull	r1, r3, r3, r2
 8005708:	095b      	lsrs	r3, r3, #5
 800570a:	2164      	movs	r1, #100	@ 0x64
 800570c:	fb01 f303 	mul.w	r3, r1, r3
 8005710:	1ad3      	subs	r3, r2, r3
 8005712:	00db      	lsls	r3, r3, #3
 8005714:	3332      	adds	r3, #50	@ 0x32
 8005716:	4a08      	ldr	r2, [pc, #32]	@ (8005738 <UART_SetConfig+0x2d4>)
 8005718:	fba2 2303 	umull	r2, r3, r2, r3
 800571c:	095b      	lsrs	r3, r3, #5
 800571e:	f003 0207 	and.w	r2, r3, #7
 8005722:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	4422      	add	r2, r4
 800572a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800572c:	e106      	b.n	800593c <UART_SetConfig+0x4d8>
 800572e:	bf00      	nop
 8005730:	40011000 	.word	0x40011000
 8005734:	40011400 	.word	0x40011400
 8005738:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800573c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005740:	2200      	movs	r2, #0
 8005742:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005746:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800574a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800574e:	4642      	mov	r2, r8
 8005750:	464b      	mov	r3, r9
 8005752:	1891      	adds	r1, r2, r2
 8005754:	6239      	str	r1, [r7, #32]
 8005756:	415b      	adcs	r3, r3
 8005758:	627b      	str	r3, [r7, #36]	@ 0x24
 800575a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800575e:	4641      	mov	r1, r8
 8005760:	1854      	adds	r4, r2, r1
 8005762:	4649      	mov	r1, r9
 8005764:	eb43 0501 	adc.w	r5, r3, r1
 8005768:	f04f 0200 	mov.w	r2, #0
 800576c:	f04f 0300 	mov.w	r3, #0
 8005770:	00eb      	lsls	r3, r5, #3
 8005772:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005776:	00e2      	lsls	r2, r4, #3
 8005778:	4614      	mov	r4, r2
 800577a:	461d      	mov	r5, r3
 800577c:	4643      	mov	r3, r8
 800577e:	18e3      	adds	r3, r4, r3
 8005780:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005784:	464b      	mov	r3, r9
 8005786:	eb45 0303 	adc.w	r3, r5, r3
 800578a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800578e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800579a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800579e:	f04f 0200 	mov.w	r2, #0
 80057a2:	f04f 0300 	mov.w	r3, #0
 80057a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80057aa:	4629      	mov	r1, r5
 80057ac:	008b      	lsls	r3, r1, #2
 80057ae:	4621      	mov	r1, r4
 80057b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057b4:	4621      	mov	r1, r4
 80057b6:	008a      	lsls	r2, r1, #2
 80057b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80057bc:	f7fb f97e 	bl	8000abc <__aeabi_uldivmod>
 80057c0:	4602      	mov	r2, r0
 80057c2:	460b      	mov	r3, r1
 80057c4:	4b60      	ldr	r3, [pc, #384]	@ (8005948 <UART_SetConfig+0x4e4>)
 80057c6:	fba3 2302 	umull	r2, r3, r3, r2
 80057ca:	095b      	lsrs	r3, r3, #5
 80057cc:	011c      	lsls	r4, r3, #4
 80057ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057d2:	2200      	movs	r2, #0
 80057d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80057d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80057dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80057e0:	4642      	mov	r2, r8
 80057e2:	464b      	mov	r3, r9
 80057e4:	1891      	adds	r1, r2, r2
 80057e6:	61b9      	str	r1, [r7, #24]
 80057e8:	415b      	adcs	r3, r3
 80057ea:	61fb      	str	r3, [r7, #28]
 80057ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057f0:	4641      	mov	r1, r8
 80057f2:	1851      	adds	r1, r2, r1
 80057f4:	6139      	str	r1, [r7, #16]
 80057f6:	4649      	mov	r1, r9
 80057f8:	414b      	adcs	r3, r1
 80057fa:	617b      	str	r3, [r7, #20]
 80057fc:	f04f 0200 	mov.w	r2, #0
 8005800:	f04f 0300 	mov.w	r3, #0
 8005804:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005808:	4659      	mov	r1, fp
 800580a:	00cb      	lsls	r3, r1, #3
 800580c:	4651      	mov	r1, sl
 800580e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005812:	4651      	mov	r1, sl
 8005814:	00ca      	lsls	r2, r1, #3
 8005816:	4610      	mov	r0, r2
 8005818:	4619      	mov	r1, r3
 800581a:	4603      	mov	r3, r0
 800581c:	4642      	mov	r2, r8
 800581e:	189b      	adds	r3, r3, r2
 8005820:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005824:	464b      	mov	r3, r9
 8005826:	460a      	mov	r2, r1
 8005828:	eb42 0303 	adc.w	r3, r2, r3
 800582c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	67bb      	str	r3, [r7, #120]	@ 0x78
 800583a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800583c:	f04f 0200 	mov.w	r2, #0
 8005840:	f04f 0300 	mov.w	r3, #0
 8005844:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005848:	4649      	mov	r1, r9
 800584a:	008b      	lsls	r3, r1, #2
 800584c:	4641      	mov	r1, r8
 800584e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005852:	4641      	mov	r1, r8
 8005854:	008a      	lsls	r2, r1, #2
 8005856:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800585a:	f7fb f92f 	bl	8000abc <__aeabi_uldivmod>
 800585e:	4602      	mov	r2, r0
 8005860:	460b      	mov	r3, r1
 8005862:	4611      	mov	r1, r2
 8005864:	4b38      	ldr	r3, [pc, #224]	@ (8005948 <UART_SetConfig+0x4e4>)
 8005866:	fba3 2301 	umull	r2, r3, r3, r1
 800586a:	095b      	lsrs	r3, r3, #5
 800586c:	2264      	movs	r2, #100	@ 0x64
 800586e:	fb02 f303 	mul.w	r3, r2, r3
 8005872:	1acb      	subs	r3, r1, r3
 8005874:	011b      	lsls	r3, r3, #4
 8005876:	3332      	adds	r3, #50	@ 0x32
 8005878:	4a33      	ldr	r2, [pc, #204]	@ (8005948 <UART_SetConfig+0x4e4>)
 800587a:	fba2 2303 	umull	r2, r3, r2, r3
 800587e:	095b      	lsrs	r3, r3, #5
 8005880:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005884:	441c      	add	r4, r3
 8005886:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800588a:	2200      	movs	r2, #0
 800588c:	673b      	str	r3, [r7, #112]	@ 0x70
 800588e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005890:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005894:	4642      	mov	r2, r8
 8005896:	464b      	mov	r3, r9
 8005898:	1891      	adds	r1, r2, r2
 800589a:	60b9      	str	r1, [r7, #8]
 800589c:	415b      	adcs	r3, r3
 800589e:	60fb      	str	r3, [r7, #12]
 80058a0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80058a4:	4641      	mov	r1, r8
 80058a6:	1851      	adds	r1, r2, r1
 80058a8:	6039      	str	r1, [r7, #0]
 80058aa:	4649      	mov	r1, r9
 80058ac:	414b      	adcs	r3, r1
 80058ae:	607b      	str	r3, [r7, #4]
 80058b0:	f04f 0200 	mov.w	r2, #0
 80058b4:	f04f 0300 	mov.w	r3, #0
 80058b8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80058bc:	4659      	mov	r1, fp
 80058be:	00cb      	lsls	r3, r1, #3
 80058c0:	4651      	mov	r1, sl
 80058c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058c6:	4651      	mov	r1, sl
 80058c8:	00ca      	lsls	r2, r1, #3
 80058ca:	4610      	mov	r0, r2
 80058cc:	4619      	mov	r1, r3
 80058ce:	4603      	mov	r3, r0
 80058d0:	4642      	mov	r2, r8
 80058d2:	189b      	adds	r3, r3, r2
 80058d4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80058d6:	464b      	mov	r3, r9
 80058d8:	460a      	mov	r2, r1
 80058da:	eb42 0303 	adc.w	r3, r2, r3
 80058de:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80058e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	2200      	movs	r2, #0
 80058e8:	663b      	str	r3, [r7, #96]	@ 0x60
 80058ea:	667a      	str	r2, [r7, #100]	@ 0x64
 80058ec:	f04f 0200 	mov.w	r2, #0
 80058f0:	f04f 0300 	mov.w	r3, #0
 80058f4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80058f8:	4649      	mov	r1, r9
 80058fa:	008b      	lsls	r3, r1, #2
 80058fc:	4641      	mov	r1, r8
 80058fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005902:	4641      	mov	r1, r8
 8005904:	008a      	lsls	r2, r1, #2
 8005906:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800590a:	f7fb f8d7 	bl	8000abc <__aeabi_uldivmod>
 800590e:	4602      	mov	r2, r0
 8005910:	460b      	mov	r3, r1
 8005912:	4b0d      	ldr	r3, [pc, #52]	@ (8005948 <UART_SetConfig+0x4e4>)
 8005914:	fba3 1302 	umull	r1, r3, r3, r2
 8005918:	095b      	lsrs	r3, r3, #5
 800591a:	2164      	movs	r1, #100	@ 0x64
 800591c:	fb01 f303 	mul.w	r3, r1, r3
 8005920:	1ad3      	subs	r3, r2, r3
 8005922:	011b      	lsls	r3, r3, #4
 8005924:	3332      	adds	r3, #50	@ 0x32
 8005926:	4a08      	ldr	r2, [pc, #32]	@ (8005948 <UART_SetConfig+0x4e4>)
 8005928:	fba2 2303 	umull	r2, r3, r2, r3
 800592c:	095b      	lsrs	r3, r3, #5
 800592e:	f003 020f 	and.w	r2, r3, #15
 8005932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	4422      	add	r2, r4
 800593a:	609a      	str	r2, [r3, #8]
}
 800593c:	bf00      	nop
 800593e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005942:	46bd      	mov	sp, r7
 8005944:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005948:	51eb851f 	.word	0x51eb851f

0800594c <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 800594c:	b480      	push	{r7}
 800594e:	b087      	sub	sp, #28
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	681a      	ldr	r2, [r3, #0]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005960:	683a      	ldr	r2, [r7, #0]
 8005962:	6812      	ldr	r2, [r2, #0]
 8005964:	f023 0101 	bic.w	r1, r3, #1
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 800596e:	683b      	ldr	r3, [r7, #0]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	2b08      	cmp	r3, #8
 8005974:	d102      	bne.n	800597c <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8005976:	2340      	movs	r3, #64	@ 0x40
 8005978:	617b      	str	r3, [r7, #20]
 800597a:	e001      	b.n	8005980 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 800597c:	2300      	movs	r3, #0
 800597e:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 800598c:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 800598e:	683b      	ldr	r3, [r7, #0]
 8005990:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8005992:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8005994:	683b      	ldr	r3, [r7, #0]
 8005996:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8005998:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 800599e:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 80059a4:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 80059aa:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 80059b0:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 80059b6:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 80059bc:	431a      	orrs	r2, r3
              Init->WriteBurst);
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 80059c2:	4313      	orrs	r3, r2
 80059c4:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	693a      	ldr	r2, [r7, #16]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	4313      	orrs	r3, r2
 80059d8:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 80059da:	4b10      	ldr	r3, [pc, #64]	@ (8005a1c <FSMC_NORSRAM_Init+0xd0>)
 80059dc:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80059e4:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 80059ec:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	681a      	ldr	r2, [r3, #0]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	43db      	mvns	r3, r3
 80059fc:	ea02 0103 	and.w	r1, r2, r3
 8005a00:	683b      	ldr	r3, [r7, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	693b      	ldr	r3, [r7, #16]
 8005a06:	4319      	orrs	r1, r3
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	4618      	mov	r0, r3
 8005a12:	371c      	adds	r7, #28
 8005a14:	46bd      	mov	sp, r7
 8005a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1a:	4770      	bx	lr
 8005a1c:	0008fb7f 	.word	0x0008fb7f

08005a20 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b085      	sub	sp, #20
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	1c5a      	adds	r2, r3, #1
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a36:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	681a      	ldr	r2, [r3, #0]
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	685b      	ldr	r3, [r3, #4]
 8005a42:	011b      	lsls	r3, r3, #4
 8005a44:	431a      	orrs	r2, r3
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	689b      	ldr	r3, [r3, #8]
 8005a4a:	021b      	lsls	r3, r3, #8
 8005a4c:	431a      	orrs	r2, r3
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	68db      	ldr	r3, [r3, #12]
 8005a52:	041b      	lsls	r3, r3, #16
 8005a54:	431a      	orrs	r2, r3
 8005a56:	68bb      	ldr	r3, [r7, #8]
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	051b      	lsls	r3, r3, #20
 8005a5e:	431a      	orrs	r2, r3
 8005a60:	68bb      	ldr	r3, [r7, #8]
 8005a62:	695b      	ldr	r3, [r3, #20]
 8005a64:	3b02      	subs	r3, #2
 8005a66:	061b      	lsls	r3, r3, #24
 8005a68:	431a      	orrs	r2, r3
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	4313      	orrs	r3, r2
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	3201      	adds	r2, #1
 8005a74:	4319      	orrs	r1, r3
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8005a7c:	2300      	movs	r3, #0
}
 8005a7e:	4618      	mov	r0, r3
 8005a80:	3714      	adds	r7, #20
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
	...

08005a8c <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	60f8      	str	r0, [r7, #12]
 8005a94:	60b9      	str	r1, [r7, #8]
 8005a96:	607a      	str	r2, [r7, #4]
 8005a98:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005aa0:	d11d      	bne.n	8005ade <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	687a      	ldr	r2, [r7, #4]
 8005aa6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005aaa:	4b13      	ldr	r3, [pc, #76]	@ (8005af8 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8005aac:	4013      	ands	r3, r2
 8005aae:	68ba      	ldr	r2, [r7, #8]
 8005ab0:	6811      	ldr	r1, [r2, #0]
 8005ab2:	68ba      	ldr	r2, [r7, #8]
 8005ab4:	6852      	ldr	r2, [r2, #4]
 8005ab6:	0112      	lsls	r2, r2, #4
 8005ab8:	4311      	orrs	r1, r2
 8005aba:	68ba      	ldr	r2, [r7, #8]
 8005abc:	6892      	ldr	r2, [r2, #8]
 8005abe:	0212      	lsls	r2, r2, #8
 8005ac0:	4311      	orrs	r1, r2
 8005ac2:	68ba      	ldr	r2, [r7, #8]
 8005ac4:	6992      	ldr	r2, [r2, #24]
 8005ac6:	4311      	orrs	r1, r2
 8005ac8:	68ba      	ldr	r2, [r7, #8]
 8005aca:	68d2      	ldr	r2, [r2, #12]
 8005acc:	0412      	lsls	r2, r2, #16
 8005ace:	430a      	orrs	r2, r1
 8005ad0:	ea43 0102 	orr.w	r1, r3, r2
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005adc:	e005      	b.n	8005aea <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	687a      	ldr	r2, [r7, #4]
 8005ae2:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8005ae6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8005aea:	2300      	movs	r3, #0
}
 8005aec:	4618      	mov	r0, r3
 8005aee:	3714      	adds	r7, #20
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr
 8005af8:	cff00000 	.word	0xcff00000

08005afc <sbrk_aligned>:
 8005afc:	b570      	push	{r4, r5, r6, lr}
 8005afe:	4e0f      	ldr	r6, [pc, #60]	@ (8005b3c <sbrk_aligned+0x40>)
 8005b00:	460c      	mov	r4, r1
 8005b02:	6831      	ldr	r1, [r6, #0]
 8005b04:	4605      	mov	r5, r0
 8005b06:	b911      	cbnz	r1, 8005b0e <sbrk_aligned+0x12>
 8005b08:	f000 f91c 	bl	8005d44 <_sbrk_r>
 8005b0c:	6030      	str	r0, [r6, #0]
 8005b0e:	4621      	mov	r1, r4
 8005b10:	4628      	mov	r0, r5
 8005b12:	f000 f917 	bl	8005d44 <_sbrk_r>
 8005b16:	1c43      	adds	r3, r0, #1
 8005b18:	d103      	bne.n	8005b22 <sbrk_aligned+0x26>
 8005b1a:	f04f 34ff 	mov.w	r4, #4294967295
 8005b1e:	4620      	mov	r0, r4
 8005b20:	bd70      	pop	{r4, r5, r6, pc}
 8005b22:	1cc4      	adds	r4, r0, #3
 8005b24:	f024 0403 	bic.w	r4, r4, #3
 8005b28:	42a0      	cmp	r0, r4
 8005b2a:	d0f8      	beq.n	8005b1e <sbrk_aligned+0x22>
 8005b2c:	1a21      	subs	r1, r4, r0
 8005b2e:	4628      	mov	r0, r5
 8005b30:	f000 f908 	bl	8005d44 <_sbrk_r>
 8005b34:	3001      	adds	r0, #1
 8005b36:	d1f2      	bne.n	8005b1e <sbrk_aligned+0x22>
 8005b38:	e7ef      	b.n	8005b1a <sbrk_aligned+0x1e>
 8005b3a:	bf00      	nop
 8005b3c:	200003b4 	.word	0x200003b4

08005b40 <_malloc_r>:
 8005b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b44:	1ccd      	adds	r5, r1, #3
 8005b46:	f025 0503 	bic.w	r5, r5, #3
 8005b4a:	3508      	adds	r5, #8
 8005b4c:	2d0c      	cmp	r5, #12
 8005b4e:	bf38      	it	cc
 8005b50:	250c      	movcc	r5, #12
 8005b52:	2d00      	cmp	r5, #0
 8005b54:	4606      	mov	r6, r0
 8005b56:	db01      	blt.n	8005b5c <_malloc_r+0x1c>
 8005b58:	42a9      	cmp	r1, r5
 8005b5a:	d904      	bls.n	8005b66 <_malloc_r+0x26>
 8005b5c:	230c      	movs	r3, #12
 8005b5e:	6033      	str	r3, [r6, #0]
 8005b60:	2000      	movs	r0, #0
 8005b62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8005c3c <_malloc_r+0xfc>
 8005b6a:	f000 f869 	bl	8005c40 <__malloc_lock>
 8005b6e:	f8d8 3000 	ldr.w	r3, [r8]
 8005b72:	461c      	mov	r4, r3
 8005b74:	bb44      	cbnz	r4, 8005bc8 <_malloc_r+0x88>
 8005b76:	4629      	mov	r1, r5
 8005b78:	4630      	mov	r0, r6
 8005b7a:	f7ff ffbf 	bl	8005afc <sbrk_aligned>
 8005b7e:	1c43      	adds	r3, r0, #1
 8005b80:	4604      	mov	r4, r0
 8005b82:	d158      	bne.n	8005c36 <_malloc_r+0xf6>
 8005b84:	f8d8 4000 	ldr.w	r4, [r8]
 8005b88:	4627      	mov	r7, r4
 8005b8a:	2f00      	cmp	r7, #0
 8005b8c:	d143      	bne.n	8005c16 <_malloc_r+0xd6>
 8005b8e:	2c00      	cmp	r4, #0
 8005b90:	d04b      	beq.n	8005c2a <_malloc_r+0xea>
 8005b92:	6823      	ldr	r3, [r4, #0]
 8005b94:	4639      	mov	r1, r7
 8005b96:	4630      	mov	r0, r6
 8005b98:	eb04 0903 	add.w	r9, r4, r3
 8005b9c:	f000 f8d2 	bl	8005d44 <_sbrk_r>
 8005ba0:	4581      	cmp	r9, r0
 8005ba2:	d142      	bne.n	8005c2a <_malloc_r+0xea>
 8005ba4:	6821      	ldr	r1, [r4, #0]
 8005ba6:	1a6d      	subs	r5, r5, r1
 8005ba8:	4629      	mov	r1, r5
 8005baa:	4630      	mov	r0, r6
 8005bac:	f7ff ffa6 	bl	8005afc <sbrk_aligned>
 8005bb0:	3001      	adds	r0, #1
 8005bb2:	d03a      	beq.n	8005c2a <_malloc_r+0xea>
 8005bb4:	6823      	ldr	r3, [r4, #0]
 8005bb6:	442b      	add	r3, r5
 8005bb8:	6023      	str	r3, [r4, #0]
 8005bba:	f8d8 3000 	ldr.w	r3, [r8]
 8005bbe:	685a      	ldr	r2, [r3, #4]
 8005bc0:	bb62      	cbnz	r2, 8005c1c <_malloc_r+0xdc>
 8005bc2:	f8c8 7000 	str.w	r7, [r8]
 8005bc6:	e00f      	b.n	8005be8 <_malloc_r+0xa8>
 8005bc8:	6822      	ldr	r2, [r4, #0]
 8005bca:	1b52      	subs	r2, r2, r5
 8005bcc:	d420      	bmi.n	8005c10 <_malloc_r+0xd0>
 8005bce:	2a0b      	cmp	r2, #11
 8005bd0:	d917      	bls.n	8005c02 <_malloc_r+0xc2>
 8005bd2:	1961      	adds	r1, r4, r5
 8005bd4:	42a3      	cmp	r3, r4
 8005bd6:	6025      	str	r5, [r4, #0]
 8005bd8:	bf18      	it	ne
 8005bda:	6059      	strne	r1, [r3, #4]
 8005bdc:	6863      	ldr	r3, [r4, #4]
 8005bde:	bf08      	it	eq
 8005be0:	f8c8 1000 	streq.w	r1, [r8]
 8005be4:	5162      	str	r2, [r4, r5]
 8005be6:	604b      	str	r3, [r1, #4]
 8005be8:	4630      	mov	r0, r6
 8005bea:	f000 f82f 	bl	8005c4c <__malloc_unlock>
 8005bee:	f104 000b 	add.w	r0, r4, #11
 8005bf2:	1d23      	adds	r3, r4, #4
 8005bf4:	f020 0007 	bic.w	r0, r0, #7
 8005bf8:	1ac2      	subs	r2, r0, r3
 8005bfa:	bf1c      	itt	ne
 8005bfc:	1a1b      	subne	r3, r3, r0
 8005bfe:	50a3      	strne	r3, [r4, r2]
 8005c00:	e7af      	b.n	8005b62 <_malloc_r+0x22>
 8005c02:	6862      	ldr	r2, [r4, #4]
 8005c04:	42a3      	cmp	r3, r4
 8005c06:	bf0c      	ite	eq
 8005c08:	f8c8 2000 	streq.w	r2, [r8]
 8005c0c:	605a      	strne	r2, [r3, #4]
 8005c0e:	e7eb      	b.n	8005be8 <_malloc_r+0xa8>
 8005c10:	4623      	mov	r3, r4
 8005c12:	6864      	ldr	r4, [r4, #4]
 8005c14:	e7ae      	b.n	8005b74 <_malloc_r+0x34>
 8005c16:	463c      	mov	r4, r7
 8005c18:	687f      	ldr	r7, [r7, #4]
 8005c1a:	e7b6      	b.n	8005b8a <_malloc_r+0x4a>
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	42a3      	cmp	r3, r4
 8005c22:	d1fb      	bne.n	8005c1c <_malloc_r+0xdc>
 8005c24:	2300      	movs	r3, #0
 8005c26:	6053      	str	r3, [r2, #4]
 8005c28:	e7de      	b.n	8005be8 <_malloc_r+0xa8>
 8005c2a:	230c      	movs	r3, #12
 8005c2c:	6033      	str	r3, [r6, #0]
 8005c2e:	4630      	mov	r0, r6
 8005c30:	f000 f80c 	bl	8005c4c <__malloc_unlock>
 8005c34:	e794      	b.n	8005b60 <_malloc_r+0x20>
 8005c36:	6005      	str	r5, [r0, #0]
 8005c38:	e7d6      	b.n	8005be8 <_malloc_r+0xa8>
 8005c3a:	bf00      	nop
 8005c3c:	200003b8 	.word	0x200003b8

08005c40 <__malloc_lock>:
 8005c40:	4801      	ldr	r0, [pc, #4]	@ (8005c48 <__malloc_lock+0x8>)
 8005c42:	f000 b8b9 	b.w	8005db8 <__retarget_lock_acquire_recursive>
 8005c46:	bf00      	nop
 8005c48:	200004f8 	.word	0x200004f8

08005c4c <__malloc_unlock>:
 8005c4c:	4801      	ldr	r0, [pc, #4]	@ (8005c54 <__malloc_unlock+0x8>)
 8005c4e:	f000 b8b4 	b.w	8005dba <__retarget_lock_release_recursive>
 8005c52:	bf00      	nop
 8005c54:	200004f8 	.word	0x200004f8

08005c58 <_realloc_r>:
 8005c58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c5c:	4680      	mov	r8, r0
 8005c5e:	4615      	mov	r5, r2
 8005c60:	460c      	mov	r4, r1
 8005c62:	b921      	cbnz	r1, 8005c6e <_realloc_r+0x16>
 8005c64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005c68:	4611      	mov	r1, r2
 8005c6a:	f7ff bf69 	b.w	8005b40 <_malloc_r>
 8005c6e:	b92a      	cbnz	r2, 8005c7c <_realloc_r+0x24>
 8005c70:	f000 f8b2 	bl	8005dd8 <_free_r>
 8005c74:	2400      	movs	r4, #0
 8005c76:	4620      	mov	r0, r4
 8005c78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005c7c:	f000 f8f6 	bl	8005e6c <_malloc_usable_size_r>
 8005c80:	4285      	cmp	r5, r0
 8005c82:	4606      	mov	r6, r0
 8005c84:	d802      	bhi.n	8005c8c <_realloc_r+0x34>
 8005c86:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005c8a:	d8f4      	bhi.n	8005c76 <_realloc_r+0x1e>
 8005c8c:	4629      	mov	r1, r5
 8005c8e:	4640      	mov	r0, r8
 8005c90:	f7ff ff56 	bl	8005b40 <_malloc_r>
 8005c94:	4607      	mov	r7, r0
 8005c96:	2800      	cmp	r0, #0
 8005c98:	d0ec      	beq.n	8005c74 <_realloc_r+0x1c>
 8005c9a:	42b5      	cmp	r5, r6
 8005c9c:	462a      	mov	r2, r5
 8005c9e:	4621      	mov	r1, r4
 8005ca0:	bf28      	it	cs
 8005ca2:	4632      	movcs	r2, r6
 8005ca4:	f000 f88a 	bl	8005dbc <memcpy>
 8005ca8:	4621      	mov	r1, r4
 8005caa:	4640      	mov	r0, r8
 8005cac:	f000 f894 	bl	8005dd8 <_free_r>
 8005cb0:	463c      	mov	r4, r7
 8005cb2:	e7e0      	b.n	8005c76 <_realloc_r+0x1e>

08005cb4 <siprintf>:
 8005cb4:	b40e      	push	{r1, r2, r3}
 8005cb6:	b500      	push	{lr}
 8005cb8:	b09c      	sub	sp, #112	@ 0x70
 8005cba:	ab1d      	add	r3, sp, #116	@ 0x74
 8005cbc:	9002      	str	r0, [sp, #8]
 8005cbe:	9006      	str	r0, [sp, #24]
 8005cc0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005cc4:	4809      	ldr	r0, [pc, #36]	@ (8005cec <siprintf+0x38>)
 8005cc6:	9107      	str	r1, [sp, #28]
 8005cc8:	9104      	str	r1, [sp, #16]
 8005cca:	4909      	ldr	r1, [pc, #36]	@ (8005cf0 <siprintf+0x3c>)
 8005ccc:	f853 2b04 	ldr.w	r2, [r3], #4
 8005cd0:	9105      	str	r1, [sp, #20]
 8005cd2:	6800      	ldr	r0, [r0, #0]
 8005cd4:	9301      	str	r3, [sp, #4]
 8005cd6:	a902      	add	r1, sp, #8
 8005cd8:	f000 f92c 	bl	8005f34 <_svfiprintf_r>
 8005cdc:	9b02      	ldr	r3, [sp, #8]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	701a      	strb	r2, [r3, #0]
 8005ce2:	b01c      	add	sp, #112	@ 0x70
 8005ce4:	f85d eb04 	ldr.w	lr, [sp], #4
 8005ce8:	b003      	add	sp, #12
 8005cea:	4770      	bx	lr
 8005cec:	20000034 	.word	0x20000034
 8005cf0:	ffff0208 	.word	0xffff0208

08005cf4 <_vsiprintf_r>:
 8005cf4:	b500      	push	{lr}
 8005cf6:	b09b      	sub	sp, #108	@ 0x6c
 8005cf8:	9100      	str	r1, [sp, #0]
 8005cfa:	9104      	str	r1, [sp, #16]
 8005cfc:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005d00:	9105      	str	r1, [sp, #20]
 8005d02:	9102      	str	r1, [sp, #8]
 8005d04:	4905      	ldr	r1, [pc, #20]	@ (8005d1c <_vsiprintf_r+0x28>)
 8005d06:	9103      	str	r1, [sp, #12]
 8005d08:	4669      	mov	r1, sp
 8005d0a:	f000 f913 	bl	8005f34 <_svfiprintf_r>
 8005d0e:	9b00      	ldr	r3, [sp, #0]
 8005d10:	2200      	movs	r2, #0
 8005d12:	701a      	strb	r2, [r3, #0]
 8005d14:	b01b      	add	sp, #108	@ 0x6c
 8005d16:	f85d fb04 	ldr.w	pc, [sp], #4
 8005d1a:	bf00      	nop
 8005d1c:	ffff0208 	.word	0xffff0208

08005d20 <vsiprintf>:
 8005d20:	4613      	mov	r3, r2
 8005d22:	460a      	mov	r2, r1
 8005d24:	4601      	mov	r1, r0
 8005d26:	4802      	ldr	r0, [pc, #8]	@ (8005d30 <vsiprintf+0x10>)
 8005d28:	6800      	ldr	r0, [r0, #0]
 8005d2a:	f7ff bfe3 	b.w	8005cf4 <_vsiprintf_r>
 8005d2e:	bf00      	nop
 8005d30:	20000034 	.word	0x20000034

08005d34 <memset>:
 8005d34:	4402      	add	r2, r0
 8005d36:	4603      	mov	r3, r0
 8005d38:	4293      	cmp	r3, r2
 8005d3a:	d100      	bne.n	8005d3e <memset+0xa>
 8005d3c:	4770      	bx	lr
 8005d3e:	f803 1b01 	strb.w	r1, [r3], #1
 8005d42:	e7f9      	b.n	8005d38 <memset+0x4>

08005d44 <_sbrk_r>:
 8005d44:	b538      	push	{r3, r4, r5, lr}
 8005d46:	4d06      	ldr	r5, [pc, #24]	@ (8005d60 <_sbrk_r+0x1c>)
 8005d48:	2300      	movs	r3, #0
 8005d4a:	4604      	mov	r4, r0
 8005d4c:	4608      	mov	r0, r1
 8005d4e:	602b      	str	r3, [r5, #0]
 8005d50:	f7fc fd2e 	bl	80027b0 <_sbrk>
 8005d54:	1c43      	adds	r3, r0, #1
 8005d56:	d102      	bne.n	8005d5e <_sbrk_r+0x1a>
 8005d58:	682b      	ldr	r3, [r5, #0]
 8005d5a:	b103      	cbz	r3, 8005d5e <_sbrk_r+0x1a>
 8005d5c:	6023      	str	r3, [r4, #0]
 8005d5e:	bd38      	pop	{r3, r4, r5, pc}
 8005d60:	200004f4 	.word	0x200004f4

08005d64 <__errno>:
 8005d64:	4b01      	ldr	r3, [pc, #4]	@ (8005d6c <__errno+0x8>)
 8005d66:	6818      	ldr	r0, [r3, #0]
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	20000034 	.word	0x20000034

08005d70 <__libc_init_array>:
 8005d70:	b570      	push	{r4, r5, r6, lr}
 8005d72:	4d0d      	ldr	r5, [pc, #52]	@ (8005da8 <__libc_init_array+0x38>)
 8005d74:	4c0d      	ldr	r4, [pc, #52]	@ (8005dac <__libc_init_array+0x3c>)
 8005d76:	1b64      	subs	r4, r4, r5
 8005d78:	10a4      	asrs	r4, r4, #2
 8005d7a:	2600      	movs	r6, #0
 8005d7c:	42a6      	cmp	r6, r4
 8005d7e:	d109      	bne.n	8005d94 <__libc_init_array+0x24>
 8005d80:	4d0b      	ldr	r5, [pc, #44]	@ (8005db0 <__libc_init_array+0x40>)
 8005d82:	4c0c      	ldr	r4, [pc, #48]	@ (8005db4 <__libc_init_array+0x44>)
 8005d84:	f000 fb7a 	bl	800647c <_init>
 8005d88:	1b64      	subs	r4, r4, r5
 8005d8a:	10a4      	asrs	r4, r4, #2
 8005d8c:	2600      	movs	r6, #0
 8005d8e:	42a6      	cmp	r6, r4
 8005d90:	d105      	bne.n	8005d9e <__libc_init_array+0x2e>
 8005d92:	bd70      	pop	{r4, r5, r6, pc}
 8005d94:	f855 3b04 	ldr.w	r3, [r5], #4
 8005d98:	4798      	blx	r3
 8005d9a:	3601      	adds	r6, #1
 8005d9c:	e7ee      	b.n	8005d7c <__libc_init_array+0xc>
 8005d9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005da2:	4798      	blx	r3
 8005da4:	3601      	adds	r6, #1
 8005da6:	e7f2      	b.n	8005d8e <__libc_init_array+0x1e>
 8005da8:	080077c8 	.word	0x080077c8
 8005dac:	080077c8 	.word	0x080077c8
 8005db0:	080077c8 	.word	0x080077c8
 8005db4:	080077cc 	.word	0x080077cc

08005db8 <__retarget_lock_acquire_recursive>:
 8005db8:	4770      	bx	lr

08005dba <__retarget_lock_release_recursive>:
 8005dba:	4770      	bx	lr

08005dbc <memcpy>:
 8005dbc:	440a      	add	r2, r1
 8005dbe:	4291      	cmp	r1, r2
 8005dc0:	f100 33ff 	add.w	r3, r0, #4294967295
 8005dc4:	d100      	bne.n	8005dc8 <memcpy+0xc>
 8005dc6:	4770      	bx	lr
 8005dc8:	b510      	push	{r4, lr}
 8005dca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005dce:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005dd2:	4291      	cmp	r1, r2
 8005dd4:	d1f9      	bne.n	8005dca <memcpy+0xe>
 8005dd6:	bd10      	pop	{r4, pc}

08005dd8 <_free_r>:
 8005dd8:	b538      	push	{r3, r4, r5, lr}
 8005dda:	4605      	mov	r5, r0
 8005ddc:	2900      	cmp	r1, #0
 8005dde:	d041      	beq.n	8005e64 <_free_r+0x8c>
 8005de0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005de4:	1f0c      	subs	r4, r1, #4
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	bfb8      	it	lt
 8005dea:	18e4      	addlt	r4, r4, r3
 8005dec:	f7ff ff28 	bl	8005c40 <__malloc_lock>
 8005df0:	4a1d      	ldr	r2, [pc, #116]	@ (8005e68 <_free_r+0x90>)
 8005df2:	6813      	ldr	r3, [r2, #0]
 8005df4:	b933      	cbnz	r3, 8005e04 <_free_r+0x2c>
 8005df6:	6063      	str	r3, [r4, #4]
 8005df8:	6014      	str	r4, [r2, #0]
 8005dfa:	4628      	mov	r0, r5
 8005dfc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e00:	f7ff bf24 	b.w	8005c4c <__malloc_unlock>
 8005e04:	42a3      	cmp	r3, r4
 8005e06:	d908      	bls.n	8005e1a <_free_r+0x42>
 8005e08:	6820      	ldr	r0, [r4, #0]
 8005e0a:	1821      	adds	r1, r4, r0
 8005e0c:	428b      	cmp	r3, r1
 8005e0e:	bf01      	itttt	eq
 8005e10:	6819      	ldreq	r1, [r3, #0]
 8005e12:	685b      	ldreq	r3, [r3, #4]
 8005e14:	1809      	addeq	r1, r1, r0
 8005e16:	6021      	streq	r1, [r4, #0]
 8005e18:	e7ed      	b.n	8005df6 <_free_r+0x1e>
 8005e1a:	461a      	mov	r2, r3
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	b10b      	cbz	r3, 8005e24 <_free_r+0x4c>
 8005e20:	42a3      	cmp	r3, r4
 8005e22:	d9fa      	bls.n	8005e1a <_free_r+0x42>
 8005e24:	6811      	ldr	r1, [r2, #0]
 8005e26:	1850      	adds	r0, r2, r1
 8005e28:	42a0      	cmp	r0, r4
 8005e2a:	d10b      	bne.n	8005e44 <_free_r+0x6c>
 8005e2c:	6820      	ldr	r0, [r4, #0]
 8005e2e:	4401      	add	r1, r0
 8005e30:	1850      	adds	r0, r2, r1
 8005e32:	4283      	cmp	r3, r0
 8005e34:	6011      	str	r1, [r2, #0]
 8005e36:	d1e0      	bne.n	8005dfa <_free_r+0x22>
 8005e38:	6818      	ldr	r0, [r3, #0]
 8005e3a:	685b      	ldr	r3, [r3, #4]
 8005e3c:	6053      	str	r3, [r2, #4]
 8005e3e:	4408      	add	r0, r1
 8005e40:	6010      	str	r0, [r2, #0]
 8005e42:	e7da      	b.n	8005dfa <_free_r+0x22>
 8005e44:	d902      	bls.n	8005e4c <_free_r+0x74>
 8005e46:	230c      	movs	r3, #12
 8005e48:	602b      	str	r3, [r5, #0]
 8005e4a:	e7d6      	b.n	8005dfa <_free_r+0x22>
 8005e4c:	6820      	ldr	r0, [r4, #0]
 8005e4e:	1821      	adds	r1, r4, r0
 8005e50:	428b      	cmp	r3, r1
 8005e52:	bf04      	itt	eq
 8005e54:	6819      	ldreq	r1, [r3, #0]
 8005e56:	685b      	ldreq	r3, [r3, #4]
 8005e58:	6063      	str	r3, [r4, #4]
 8005e5a:	bf04      	itt	eq
 8005e5c:	1809      	addeq	r1, r1, r0
 8005e5e:	6021      	streq	r1, [r4, #0]
 8005e60:	6054      	str	r4, [r2, #4]
 8005e62:	e7ca      	b.n	8005dfa <_free_r+0x22>
 8005e64:	bd38      	pop	{r3, r4, r5, pc}
 8005e66:	bf00      	nop
 8005e68:	200003b8 	.word	0x200003b8

08005e6c <_malloc_usable_size_r>:
 8005e6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e70:	1f18      	subs	r0, r3, #4
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	bfbc      	itt	lt
 8005e76:	580b      	ldrlt	r3, [r1, r0]
 8005e78:	18c0      	addlt	r0, r0, r3
 8005e7a:	4770      	bx	lr

08005e7c <__ssputs_r>:
 8005e7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e80:	688e      	ldr	r6, [r1, #8]
 8005e82:	461f      	mov	r7, r3
 8005e84:	42be      	cmp	r6, r7
 8005e86:	680b      	ldr	r3, [r1, #0]
 8005e88:	4682      	mov	sl, r0
 8005e8a:	460c      	mov	r4, r1
 8005e8c:	4690      	mov	r8, r2
 8005e8e:	d82d      	bhi.n	8005eec <__ssputs_r+0x70>
 8005e90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005e94:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8005e98:	d026      	beq.n	8005ee8 <__ssputs_r+0x6c>
 8005e9a:	6965      	ldr	r5, [r4, #20]
 8005e9c:	6909      	ldr	r1, [r1, #16]
 8005e9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005ea2:	eba3 0901 	sub.w	r9, r3, r1
 8005ea6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005eaa:	1c7b      	adds	r3, r7, #1
 8005eac:	444b      	add	r3, r9
 8005eae:	106d      	asrs	r5, r5, #1
 8005eb0:	429d      	cmp	r5, r3
 8005eb2:	bf38      	it	cc
 8005eb4:	461d      	movcc	r5, r3
 8005eb6:	0553      	lsls	r3, r2, #21
 8005eb8:	d527      	bpl.n	8005f0a <__ssputs_r+0x8e>
 8005eba:	4629      	mov	r1, r5
 8005ebc:	f7ff fe40 	bl	8005b40 <_malloc_r>
 8005ec0:	4606      	mov	r6, r0
 8005ec2:	b360      	cbz	r0, 8005f1e <__ssputs_r+0xa2>
 8005ec4:	6921      	ldr	r1, [r4, #16]
 8005ec6:	464a      	mov	r2, r9
 8005ec8:	f7ff ff78 	bl	8005dbc <memcpy>
 8005ecc:	89a3      	ldrh	r3, [r4, #12]
 8005ece:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8005ed2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ed6:	81a3      	strh	r3, [r4, #12]
 8005ed8:	6126      	str	r6, [r4, #16]
 8005eda:	6165      	str	r5, [r4, #20]
 8005edc:	444e      	add	r6, r9
 8005ede:	eba5 0509 	sub.w	r5, r5, r9
 8005ee2:	6026      	str	r6, [r4, #0]
 8005ee4:	60a5      	str	r5, [r4, #8]
 8005ee6:	463e      	mov	r6, r7
 8005ee8:	42be      	cmp	r6, r7
 8005eea:	d900      	bls.n	8005eee <__ssputs_r+0x72>
 8005eec:	463e      	mov	r6, r7
 8005eee:	6820      	ldr	r0, [r4, #0]
 8005ef0:	4632      	mov	r2, r6
 8005ef2:	4641      	mov	r1, r8
 8005ef4:	f000 faa8 	bl	8006448 <memmove>
 8005ef8:	68a3      	ldr	r3, [r4, #8]
 8005efa:	1b9b      	subs	r3, r3, r6
 8005efc:	60a3      	str	r3, [r4, #8]
 8005efe:	6823      	ldr	r3, [r4, #0]
 8005f00:	4433      	add	r3, r6
 8005f02:	6023      	str	r3, [r4, #0]
 8005f04:	2000      	movs	r0, #0
 8005f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f0a:	462a      	mov	r2, r5
 8005f0c:	f7ff fea4 	bl	8005c58 <_realloc_r>
 8005f10:	4606      	mov	r6, r0
 8005f12:	2800      	cmp	r0, #0
 8005f14:	d1e0      	bne.n	8005ed8 <__ssputs_r+0x5c>
 8005f16:	6921      	ldr	r1, [r4, #16]
 8005f18:	4650      	mov	r0, sl
 8005f1a:	f7ff ff5d 	bl	8005dd8 <_free_r>
 8005f1e:	230c      	movs	r3, #12
 8005f20:	f8ca 3000 	str.w	r3, [sl]
 8005f24:	89a3      	ldrh	r3, [r4, #12]
 8005f26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f2a:	81a3      	strh	r3, [r4, #12]
 8005f2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f30:	e7e9      	b.n	8005f06 <__ssputs_r+0x8a>
	...

08005f34 <_svfiprintf_r>:
 8005f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f38:	4698      	mov	r8, r3
 8005f3a:	898b      	ldrh	r3, [r1, #12]
 8005f3c:	061b      	lsls	r3, r3, #24
 8005f3e:	b09d      	sub	sp, #116	@ 0x74
 8005f40:	4607      	mov	r7, r0
 8005f42:	460d      	mov	r5, r1
 8005f44:	4614      	mov	r4, r2
 8005f46:	d510      	bpl.n	8005f6a <_svfiprintf_r+0x36>
 8005f48:	690b      	ldr	r3, [r1, #16]
 8005f4a:	b973      	cbnz	r3, 8005f6a <_svfiprintf_r+0x36>
 8005f4c:	2140      	movs	r1, #64	@ 0x40
 8005f4e:	f7ff fdf7 	bl	8005b40 <_malloc_r>
 8005f52:	6028      	str	r0, [r5, #0]
 8005f54:	6128      	str	r0, [r5, #16]
 8005f56:	b930      	cbnz	r0, 8005f66 <_svfiprintf_r+0x32>
 8005f58:	230c      	movs	r3, #12
 8005f5a:	603b      	str	r3, [r7, #0]
 8005f5c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f60:	b01d      	add	sp, #116	@ 0x74
 8005f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f66:	2340      	movs	r3, #64	@ 0x40
 8005f68:	616b      	str	r3, [r5, #20]
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f6e:	2320      	movs	r3, #32
 8005f70:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005f74:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f78:	2330      	movs	r3, #48	@ 0x30
 8005f7a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006118 <_svfiprintf_r+0x1e4>
 8005f7e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005f82:	f04f 0901 	mov.w	r9, #1
 8005f86:	4623      	mov	r3, r4
 8005f88:	469a      	mov	sl, r3
 8005f8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f8e:	b10a      	cbz	r2, 8005f94 <_svfiprintf_r+0x60>
 8005f90:	2a25      	cmp	r2, #37	@ 0x25
 8005f92:	d1f9      	bne.n	8005f88 <_svfiprintf_r+0x54>
 8005f94:	ebba 0b04 	subs.w	fp, sl, r4
 8005f98:	d00b      	beq.n	8005fb2 <_svfiprintf_r+0x7e>
 8005f9a:	465b      	mov	r3, fp
 8005f9c:	4622      	mov	r2, r4
 8005f9e:	4629      	mov	r1, r5
 8005fa0:	4638      	mov	r0, r7
 8005fa2:	f7ff ff6b 	bl	8005e7c <__ssputs_r>
 8005fa6:	3001      	adds	r0, #1
 8005fa8:	f000 80a7 	beq.w	80060fa <_svfiprintf_r+0x1c6>
 8005fac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005fae:	445a      	add	r2, fp
 8005fb0:	9209      	str	r2, [sp, #36]	@ 0x24
 8005fb2:	f89a 3000 	ldrb.w	r3, [sl]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	f000 809f 	beq.w	80060fa <_svfiprintf_r+0x1c6>
 8005fbc:	2300      	movs	r3, #0
 8005fbe:	f04f 32ff 	mov.w	r2, #4294967295
 8005fc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005fc6:	f10a 0a01 	add.w	sl, sl, #1
 8005fca:	9304      	str	r3, [sp, #16]
 8005fcc:	9307      	str	r3, [sp, #28]
 8005fce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005fd2:	931a      	str	r3, [sp, #104]	@ 0x68
 8005fd4:	4654      	mov	r4, sl
 8005fd6:	2205      	movs	r2, #5
 8005fd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005fdc:	484e      	ldr	r0, [pc, #312]	@ (8006118 <_svfiprintf_r+0x1e4>)
 8005fde:	f7fa f8ff 	bl	80001e0 <memchr>
 8005fe2:	9a04      	ldr	r2, [sp, #16]
 8005fe4:	b9d8      	cbnz	r0, 800601e <_svfiprintf_r+0xea>
 8005fe6:	06d0      	lsls	r0, r2, #27
 8005fe8:	bf44      	itt	mi
 8005fea:	2320      	movmi	r3, #32
 8005fec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ff0:	0711      	lsls	r1, r2, #28
 8005ff2:	bf44      	itt	mi
 8005ff4:	232b      	movmi	r3, #43	@ 0x2b
 8005ff6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005ffa:	f89a 3000 	ldrb.w	r3, [sl]
 8005ffe:	2b2a      	cmp	r3, #42	@ 0x2a
 8006000:	d015      	beq.n	800602e <_svfiprintf_r+0xfa>
 8006002:	9a07      	ldr	r2, [sp, #28]
 8006004:	4654      	mov	r4, sl
 8006006:	2000      	movs	r0, #0
 8006008:	f04f 0c0a 	mov.w	ip, #10
 800600c:	4621      	mov	r1, r4
 800600e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006012:	3b30      	subs	r3, #48	@ 0x30
 8006014:	2b09      	cmp	r3, #9
 8006016:	d94b      	bls.n	80060b0 <_svfiprintf_r+0x17c>
 8006018:	b1b0      	cbz	r0, 8006048 <_svfiprintf_r+0x114>
 800601a:	9207      	str	r2, [sp, #28]
 800601c:	e014      	b.n	8006048 <_svfiprintf_r+0x114>
 800601e:	eba0 0308 	sub.w	r3, r0, r8
 8006022:	fa09 f303 	lsl.w	r3, r9, r3
 8006026:	4313      	orrs	r3, r2
 8006028:	9304      	str	r3, [sp, #16]
 800602a:	46a2      	mov	sl, r4
 800602c:	e7d2      	b.n	8005fd4 <_svfiprintf_r+0xa0>
 800602e:	9b03      	ldr	r3, [sp, #12]
 8006030:	1d19      	adds	r1, r3, #4
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	9103      	str	r1, [sp, #12]
 8006036:	2b00      	cmp	r3, #0
 8006038:	bfbb      	ittet	lt
 800603a:	425b      	neglt	r3, r3
 800603c:	f042 0202 	orrlt.w	r2, r2, #2
 8006040:	9307      	strge	r3, [sp, #28]
 8006042:	9307      	strlt	r3, [sp, #28]
 8006044:	bfb8      	it	lt
 8006046:	9204      	strlt	r2, [sp, #16]
 8006048:	7823      	ldrb	r3, [r4, #0]
 800604a:	2b2e      	cmp	r3, #46	@ 0x2e
 800604c:	d10a      	bne.n	8006064 <_svfiprintf_r+0x130>
 800604e:	7863      	ldrb	r3, [r4, #1]
 8006050:	2b2a      	cmp	r3, #42	@ 0x2a
 8006052:	d132      	bne.n	80060ba <_svfiprintf_r+0x186>
 8006054:	9b03      	ldr	r3, [sp, #12]
 8006056:	1d1a      	adds	r2, r3, #4
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	9203      	str	r2, [sp, #12]
 800605c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006060:	3402      	adds	r4, #2
 8006062:	9305      	str	r3, [sp, #20]
 8006064:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006128 <_svfiprintf_r+0x1f4>
 8006068:	7821      	ldrb	r1, [r4, #0]
 800606a:	2203      	movs	r2, #3
 800606c:	4650      	mov	r0, sl
 800606e:	f7fa f8b7 	bl	80001e0 <memchr>
 8006072:	b138      	cbz	r0, 8006084 <_svfiprintf_r+0x150>
 8006074:	9b04      	ldr	r3, [sp, #16]
 8006076:	eba0 000a 	sub.w	r0, r0, sl
 800607a:	2240      	movs	r2, #64	@ 0x40
 800607c:	4082      	lsls	r2, r0
 800607e:	4313      	orrs	r3, r2
 8006080:	3401      	adds	r4, #1
 8006082:	9304      	str	r3, [sp, #16]
 8006084:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006088:	4824      	ldr	r0, [pc, #144]	@ (800611c <_svfiprintf_r+0x1e8>)
 800608a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800608e:	2206      	movs	r2, #6
 8006090:	f7fa f8a6 	bl	80001e0 <memchr>
 8006094:	2800      	cmp	r0, #0
 8006096:	d036      	beq.n	8006106 <_svfiprintf_r+0x1d2>
 8006098:	4b21      	ldr	r3, [pc, #132]	@ (8006120 <_svfiprintf_r+0x1ec>)
 800609a:	bb1b      	cbnz	r3, 80060e4 <_svfiprintf_r+0x1b0>
 800609c:	9b03      	ldr	r3, [sp, #12]
 800609e:	3307      	adds	r3, #7
 80060a0:	f023 0307 	bic.w	r3, r3, #7
 80060a4:	3308      	adds	r3, #8
 80060a6:	9303      	str	r3, [sp, #12]
 80060a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060aa:	4433      	add	r3, r6
 80060ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80060ae:	e76a      	b.n	8005f86 <_svfiprintf_r+0x52>
 80060b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80060b4:	460c      	mov	r4, r1
 80060b6:	2001      	movs	r0, #1
 80060b8:	e7a8      	b.n	800600c <_svfiprintf_r+0xd8>
 80060ba:	2300      	movs	r3, #0
 80060bc:	3401      	adds	r4, #1
 80060be:	9305      	str	r3, [sp, #20]
 80060c0:	4619      	mov	r1, r3
 80060c2:	f04f 0c0a 	mov.w	ip, #10
 80060c6:	4620      	mov	r0, r4
 80060c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80060cc:	3a30      	subs	r2, #48	@ 0x30
 80060ce:	2a09      	cmp	r2, #9
 80060d0:	d903      	bls.n	80060da <_svfiprintf_r+0x1a6>
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d0c6      	beq.n	8006064 <_svfiprintf_r+0x130>
 80060d6:	9105      	str	r1, [sp, #20]
 80060d8:	e7c4      	b.n	8006064 <_svfiprintf_r+0x130>
 80060da:	fb0c 2101 	mla	r1, ip, r1, r2
 80060de:	4604      	mov	r4, r0
 80060e0:	2301      	movs	r3, #1
 80060e2:	e7f0      	b.n	80060c6 <_svfiprintf_r+0x192>
 80060e4:	ab03      	add	r3, sp, #12
 80060e6:	9300      	str	r3, [sp, #0]
 80060e8:	462a      	mov	r2, r5
 80060ea:	4b0e      	ldr	r3, [pc, #56]	@ (8006124 <_svfiprintf_r+0x1f0>)
 80060ec:	a904      	add	r1, sp, #16
 80060ee:	4638      	mov	r0, r7
 80060f0:	f3af 8000 	nop.w
 80060f4:	1c42      	adds	r2, r0, #1
 80060f6:	4606      	mov	r6, r0
 80060f8:	d1d6      	bne.n	80060a8 <_svfiprintf_r+0x174>
 80060fa:	89ab      	ldrh	r3, [r5, #12]
 80060fc:	065b      	lsls	r3, r3, #25
 80060fe:	f53f af2d 	bmi.w	8005f5c <_svfiprintf_r+0x28>
 8006102:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006104:	e72c      	b.n	8005f60 <_svfiprintf_r+0x2c>
 8006106:	ab03      	add	r3, sp, #12
 8006108:	9300      	str	r3, [sp, #0]
 800610a:	462a      	mov	r2, r5
 800610c:	4b05      	ldr	r3, [pc, #20]	@ (8006124 <_svfiprintf_r+0x1f0>)
 800610e:	a904      	add	r1, sp, #16
 8006110:	4638      	mov	r0, r7
 8006112:	f000 f879 	bl	8006208 <_printf_i>
 8006116:	e7ed      	b.n	80060f4 <_svfiprintf_r+0x1c0>
 8006118:	0800778c 	.word	0x0800778c
 800611c:	08007796 	.word	0x08007796
 8006120:	00000000 	.word	0x00000000
 8006124:	08005e7d 	.word	0x08005e7d
 8006128:	08007792 	.word	0x08007792

0800612c <_printf_common>:
 800612c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006130:	4616      	mov	r6, r2
 8006132:	4698      	mov	r8, r3
 8006134:	688a      	ldr	r2, [r1, #8]
 8006136:	690b      	ldr	r3, [r1, #16]
 8006138:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800613c:	4293      	cmp	r3, r2
 800613e:	bfb8      	it	lt
 8006140:	4613      	movlt	r3, r2
 8006142:	6033      	str	r3, [r6, #0]
 8006144:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006148:	4607      	mov	r7, r0
 800614a:	460c      	mov	r4, r1
 800614c:	b10a      	cbz	r2, 8006152 <_printf_common+0x26>
 800614e:	3301      	adds	r3, #1
 8006150:	6033      	str	r3, [r6, #0]
 8006152:	6823      	ldr	r3, [r4, #0]
 8006154:	0699      	lsls	r1, r3, #26
 8006156:	bf42      	ittt	mi
 8006158:	6833      	ldrmi	r3, [r6, #0]
 800615a:	3302      	addmi	r3, #2
 800615c:	6033      	strmi	r3, [r6, #0]
 800615e:	6825      	ldr	r5, [r4, #0]
 8006160:	f015 0506 	ands.w	r5, r5, #6
 8006164:	d106      	bne.n	8006174 <_printf_common+0x48>
 8006166:	f104 0a19 	add.w	sl, r4, #25
 800616a:	68e3      	ldr	r3, [r4, #12]
 800616c:	6832      	ldr	r2, [r6, #0]
 800616e:	1a9b      	subs	r3, r3, r2
 8006170:	42ab      	cmp	r3, r5
 8006172:	dc26      	bgt.n	80061c2 <_printf_common+0x96>
 8006174:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006178:	6822      	ldr	r2, [r4, #0]
 800617a:	3b00      	subs	r3, #0
 800617c:	bf18      	it	ne
 800617e:	2301      	movne	r3, #1
 8006180:	0692      	lsls	r2, r2, #26
 8006182:	d42b      	bmi.n	80061dc <_printf_common+0xb0>
 8006184:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006188:	4641      	mov	r1, r8
 800618a:	4638      	mov	r0, r7
 800618c:	47c8      	blx	r9
 800618e:	3001      	adds	r0, #1
 8006190:	d01e      	beq.n	80061d0 <_printf_common+0xa4>
 8006192:	6823      	ldr	r3, [r4, #0]
 8006194:	6922      	ldr	r2, [r4, #16]
 8006196:	f003 0306 	and.w	r3, r3, #6
 800619a:	2b04      	cmp	r3, #4
 800619c:	bf02      	ittt	eq
 800619e:	68e5      	ldreq	r5, [r4, #12]
 80061a0:	6833      	ldreq	r3, [r6, #0]
 80061a2:	1aed      	subeq	r5, r5, r3
 80061a4:	68a3      	ldr	r3, [r4, #8]
 80061a6:	bf0c      	ite	eq
 80061a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80061ac:	2500      	movne	r5, #0
 80061ae:	4293      	cmp	r3, r2
 80061b0:	bfc4      	itt	gt
 80061b2:	1a9b      	subgt	r3, r3, r2
 80061b4:	18ed      	addgt	r5, r5, r3
 80061b6:	2600      	movs	r6, #0
 80061b8:	341a      	adds	r4, #26
 80061ba:	42b5      	cmp	r5, r6
 80061bc:	d11a      	bne.n	80061f4 <_printf_common+0xc8>
 80061be:	2000      	movs	r0, #0
 80061c0:	e008      	b.n	80061d4 <_printf_common+0xa8>
 80061c2:	2301      	movs	r3, #1
 80061c4:	4652      	mov	r2, sl
 80061c6:	4641      	mov	r1, r8
 80061c8:	4638      	mov	r0, r7
 80061ca:	47c8      	blx	r9
 80061cc:	3001      	adds	r0, #1
 80061ce:	d103      	bne.n	80061d8 <_printf_common+0xac>
 80061d0:	f04f 30ff 	mov.w	r0, #4294967295
 80061d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061d8:	3501      	adds	r5, #1
 80061da:	e7c6      	b.n	800616a <_printf_common+0x3e>
 80061dc:	18e1      	adds	r1, r4, r3
 80061de:	1c5a      	adds	r2, r3, #1
 80061e0:	2030      	movs	r0, #48	@ 0x30
 80061e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80061e6:	4422      	add	r2, r4
 80061e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80061ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80061f0:	3302      	adds	r3, #2
 80061f2:	e7c7      	b.n	8006184 <_printf_common+0x58>
 80061f4:	2301      	movs	r3, #1
 80061f6:	4622      	mov	r2, r4
 80061f8:	4641      	mov	r1, r8
 80061fa:	4638      	mov	r0, r7
 80061fc:	47c8      	blx	r9
 80061fe:	3001      	adds	r0, #1
 8006200:	d0e6      	beq.n	80061d0 <_printf_common+0xa4>
 8006202:	3601      	adds	r6, #1
 8006204:	e7d9      	b.n	80061ba <_printf_common+0x8e>
	...

08006208 <_printf_i>:
 8006208:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800620c:	7e0f      	ldrb	r7, [r1, #24]
 800620e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006210:	2f78      	cmp	r7, #120	@ 0x78
 8006212:	4691      	mov	r9, r2
 8006214:	4680      	mov	r8, r0
 8006216:	460c      	mov	r4, r1
 8006218:	469a      	mov	sl, r3
 800621a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800621e:	d807      	bhi.n	8006230 <_printf_i+0x28>
 8006220:	2f62      	cmp	r7, #98	@ 0x62
 8006222:	d80a      	bhi.n	800623a <_printf_i+0x32>
 8006224:	2f00      	cmp	r7, #0
 8006226:	f000 80d2 	beq.w	80063ce <_printf_i+0x1c6>
 800622a:	2f58      	cmp	r7, #88	@ 0x58
 800622c:	f000 80b9 	beq.w	80063a2 <_printf_i+0x19a>
 8006230:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006234:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006238:	e03a      	b.n	80062b0 <_printf_i+0xa8>
 800623a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800623e:	2b15      	cmp	r3, #21
 8006240:	d8f6      	bhi.n	8006230 <_printf_i+0x28>
 8006242:	a101      	add	r1, pc, #4	@ (adr r1, 8006248 <_printf_i+0x40>)
 8006244:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006248:	080062a1 	.word	0x080062a1
 800624c:	080062b5 	.word	0x080062b5
 8006250:	08006231 	.word	0x08006231
 8006254:	08006231 	.word	0x08006231
 8006258:	08006231 	.word	0x08006231
 800625c:	08006231 	.word	0x08006231
 8006260:	080062b5 	.word	0x080062b5
 8006264:	08006231 	.word	0x08006231
 8006268:	08006231 	.word	0x08006231
 800626c:	08006231 	.word	0x08006231
 8006270:	08006231 	.word	0x08006231
 8006274:	080063b5 	.word	0x080063b5
 8006278:	080062df 	.word	0x080062df
 800627c:	0800636f 	.word	0x0800636f
 8006280:	08006231 	.word	0x08006231
 8006284:	08006231 	.word	0x08006231
 8006288:	080063d7 	.word	0x080063d7
 800628c:	08006231 	.word	0x08006231
 8006290:	080062df 	.word	0x080062df
 8006294:	08006231 	.word	0x08006231
 8006298:	08006231 	.word	0x08006231
 800629c:	08006377 	.word	0x08006377
 80062a0:	6833      	ldr	r3, [r6, #0]
 80062a2:	1d1a      	adds	r2, r3, #4
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	6032      	str	r2, [r6, #0]
 80062a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80062ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80062b0:	2301      	movs	r3, #1
 80062b2:	e09d      	b.n	80063f0 <_printf_i+0x1e8>
 80062b4:	6833      	ldr	r3, [r6, #0]
 80062b6:	6820      	ldr	r0, [r4, #0]
 80062b8:	1d19      	adds	r1, r3, #4
 80062ba:	6031      	str	r1, [r6, #0]
 80062bc:	0606      	lsls	r6, r0, #24
 80062be:	d501      	bpl.n	80062c4 <_printf_i+0xbc>
 80062c0:	681d      	ldr	r5, [r3, #0]
 80062c2:	e003      	b.n	80062cc <_printf_i+0xc4>
 80062c4:	0645      	lsls	r5, r0, #25
 80062c6:	d5fb      	bpl.n	80062c0 <_printf_i+0xb8>
 80062c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80062cc:	2d00      	cmp	r5, #0
 80062ce:	da03      	bge.n	80062d8 <_printf_i+0xd0>
 80062d0:	232d      	movs	r3, #45	@ 0x2d
 80062d2:	426d      	negs	r5, r5
 80062d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062d8:	4859      	ldr	r0, [pc, #356]	@ (8006440 <_printf_i+0x238>)
 80062da:	230a      	movs	r3, #10
 80062dc:	e011      	b.n	8006302 <_printf_i+0xfa>
 80062de:	6821      	ldr	r1, [r4, #0]
 80062e0:	6833      	ldr	r3, [r6, #0]
 80062e2:	0608      	lsls	r0, r1, #24
 80062e4:	f853 5b04 	ldr.w	r5, [r3], #4
 80062e8:	d402      	bmi.n	80062f0 <_printf_i+0xe8>
 80062ea:	0649      	lsls	r1, r1, #25
 80062ec:	bf48      	it	mi
 80062ee:	b2ad      	uxthmi	r5, r5
 80062f0:	2f6f      	cmp	r7, #111	@ 0x6f
 80062f2:	4853      	ldr	r0, [pc, #332]	@ (8006440 <_printf_i+0x238>)
 80062f4:	6033      	str	r3, [r6, #0]
 80062f6:	bf14      	ite	ne
 80062f8:	230a      	movne	r3, #10
 80062fa:	2308      	moveq	r3, #8
 80062fc:	2100      	movs	r1, #0
 80062fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006302:	6866      	ldr	r6, [r4, #4]
 8006304:	60a6      	str	r6, [r4, #8]
 8006306:	2e00      	cmp	r6, #0
 8006308:	bfa2      	ittt	ge
 800630a:	6821      	ldrge	r1, [r4, #0]
 800630c:	f021 0104 	bicge.w	r1, r1, #4
 8006310:	6021      	strge	r1, [r4, #0]
 8006312:	b90d      	cbnz	r5, 8006318 <_printf_i+0x110>
 8006314:	2e00      	cmp	r6, #0
 8006316:	d04b      	beq.n	80063b0 <_printf_i+0x1a8>
 8006318:	4616      	mov	r6, r2
 800631a:	fbb5 f1f3 	udiv	r1, r5, r3
 800631e:	fb03 5711 	mls	r7, r3, r1, r5
 8006322:	5dc7      	ldrb	r7, [r0, r7]
 8006324:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006328:	462f      	mov	r7, r5
 800632a:	42bb      	cmp	r3, r7
 800632c:	460d      	mov	r5, r1
 800632e:	d9f4      	bls.n	800631a <_printf_i+0x112>
 8006330:	2b08      	cmp	r3, #8
 8006332:	d10b      	bne.n	800634c <_printf_i+0x144>
 8006334:	6823      	ldr	r3, [r4, #0]
 8006336:	07df      	lsls	r7, r3, #31
 8006338:	d508      	bpl.n	800634c <_printf_i+0x144>
 800633a:	6923      	ldr	r3, [r4, #16]
 800633c:	6861      	ldr	r1, [r4, #4]
 800633e:	4299      	cmp	r1, r3
 8006340:	bfde      	ittt	le
 8006342:	2330      	movle	r3, #48	@ 0x30
 8006344:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006348:	f106 36ff 	addle.w	r6, r6, #4294967295
 800634c:	1b92      	subs	r2, r2, r6
 800634e:	6122      	str	r2, [r4, #16]
 8006350:	f8cd a000 	str.w	sl, [sp]
 8006354:	464b      	mov	r3, r9
 8006356:	aa03      	add	r2, sp, #12
 8006358:	4621      	mov	r1, r4
 800635a:	4640      	mov	r0, r8
 800635c:	f7ff fee6 	bl	800612c <_printf_common>
 8006360:	3001      	adds	r0, #1
 8006362:	d14a      	bne.n	80063fa <_printf_i+0x1f2>
 8006364:	f04f 30ff 	mov.w	r0, #4294967295
 8006368:	b004      	add	sp, #16
 800636a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800636e:	6823      	ldr	r3, [r4, #0]
 8006370:	f043 0320 	orr.w	r3, r3, #32
 8006374:	6023      	str	r3, [r4, #0]
 8006376:	4833      	ldr	r0, [pc, #204]	@ (8006444 <_printf_i+0x23c>)
 8006378:	2778      	movs	r7, #120	@ 0x78
 800637a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800637e:	6823      	ldr	r3, [r4, #0]
 8006380:	6831      	ldr	r1, [r6, #0]
 8006382:	061f      	lsls	r7, r3, #24
 8006384:	f851 5b04 	ldr.w	r5, [r1], #4
 8006388:	d402      	bmi.n	8006390 <_printf_i+0x188>
 800638a:	065f      	lsls	r7, r3, #25
 800638c:	bf48      	it	mi
 800638e:	b2ad      	uxthmi	r5, r5
 8006390:	6031      	str	r1, [r6, #0]
 8006392:	07d9      	lsls	r1, r3, #31
 8006394:	bf44      	itt	mi
 8006396:	f043 0320 	orrmi.w	r3, r3, #32
 800639a:	6023      	strmi	r3, [r4, #0]
 800639c:	b11d      	cbz	r5, 80063a6 <_printf_i+0x19e>
 800639e:	2310      	movs	r3, #16
 80063a0:	e7ac      	b.n	80062fc <_printf_i+0xf4>
 80063a2:	4827      	ldr	r0, [pc, #156]	@ (8006440 <_printf_i+0x238>)
 80063a4:	e7e9      	b.n	800637a <_printf_i+0x172>
 80063a6:	6823      	ldr	r3, [r4, #0]
 80063a8:	f023 0320 	bic.w	r3, r3, #32
 80063ac:	6023      	str	r3, [r4, #0]
 80063ae:	e7f6      	b.n	800639e <_printf_i+0x196>
 80063b0:	4616      	mov	r6, r2
 80063b2:	e7bd      	b.n	8006330 <_printf_i+0x128>
 80063b4:	6833      	ldr	r3, [r6, #0]
 80063b6:	6825      	ldr	r5, [r4, #0]
 80063b8:	6961      	ldr	r1, [r4, #20]
 80063ba:	1d18      	adds	r0, r3, #4
 80063bc:	6030      	str	r0, [r6, #0]
 80063be:	062e      	lsls	r6, r5, #24
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	d501      	bpl.n	80063c8 <_printf_i+0x1c0>
 80063c4:	6019      	str	r1, [r3, #0]
 80063c6:	e002      	b.n	80063ce <_printf_i+0x1c6>
 80063c8:	0668      	lsls	r0, r5, #25
 80063ca:	d5fb      	bpl.n	80063c4 <_printf_i+0x1bc>
 80063cc:	8019      	strh	r1, [r3, #0]
 80063ce:	2300      	movs	r3, #0
 80063d0:	6123      	str	r3, [r4, #16]
 80063d2:	4616      	mov	r6, r2
 80063d4:	e7bc      	b.n	8006350 <_printf_i+0x148>
 80063d6:	6833      	ldr	r3, [r6, #0]
 80063d8:	1d1a      	adds	r2, r3, #4
 80063da:	6032      	str	r2, [r6, #0]
 80063dc:	681e      	ldr	r6, [r3, #0]
 80063de:	6862      	ldr	r2, [r4, #4]
 80063e0:	2100      	movs	r1, #0
 80063e2:	4630      	mov	r0, r6
 80063e4:	f7f9 fefc 	bl	80001e0 <memchr>
 80063e8:	b108      	cbz	r0, 80063ee <_printf_i+0x1e6>
 80063ea:	1b80      	subs	r0, r0, r6
 80063ec:	6060      	str	r0, [r4, #4]
 80063ee:	6863      	ldr	r3, [r4, #4]
 80063f0:	6123      	str	r3, [r4, #16]
 80063f2:	2300      	movs	r3, #0
 80063f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063f8:	e7aa      	b.n	8006350 <_printf_i+0x148>
 80063fa:	6923      	ldr	r3, [r4, #16]
 80063fc:	4632      	mov	r2, r6
 80063fe:	4649      	mov	r1, r9
 8006400:	4640      	mov	r0, r8
 8006402:	47d0      	blx	sl
 8006404:	3001      	adds	r0, #1
 8006406:	d0ad      	beq.n	8006364 <_printf_i+0x15c>
 8006408:	6823      	ldr	r3, [r4, #0]
 800640a:	079b      	lsls	r3, r3, #30
 800640c:	d413      	bmi.n	8006436 <_printf_i+0x22e>
 800640e:	68e0      	ldr	r0, [r4, #12]
 8006410:	9b03      	ldr	r3, [sp, #12]
 8006412:	4298      	cmp	r0, r3
 8006414:	bfb8      	it	lt
 8006416:	4618      	movlt	r0, r3
 8006418:	e7a6      	b.n	8006368 <_printf_i+0x160>
 800641a:	2301      	movs	r3, #1
 800641c:	4632      	mov	r2, r6
 800641e:	4649      	mov	r1, r9
 8006420:	4640      	mov	r0, r8
 8006422:	47d0      	blx	sl
 8006424:	3001      	adds	r0, #1
 8006426:	d09d      	beq.n	8006364 <_printf_i+0x15c>
 8006428:	3501      	adds	r5, #1
 800642a:	68e3      	ldr	r3, [r4, #12]
 800642c:	9903      	ldr	r1, [sp, #12]
 800642e:	1a5b      	subs	r3, r3, r1
 8006430:	42ab      	cmp	r3, r5
 8006432:	dcf2      	bgt.n	800641a <_printf_i+0x212>
 8006434:	e7eb      	b.n	800640e <_printf_i+0x206>
 8006436:	2500      	movs	r5, #0
 8006438:	f104 0619 	add.w	r6, r4, #25
 800643c:	e7f5      	b.n	800642a <_printf_i+0x222>
 800643e:	bf00      	nop
 8006440:	0800779d 	.word	0x0800779d
 8006444:	080077ae 	.word	0x080077ae

08006448 <memmove>:
 8006448:	4288      	cmp	r0, r1
 800644a:	b510      	push	{r4, lr}
 800644c:	eb01 0402 	add.w	r4, r1, r2
 8006450:	d902      	bls.n	8006458 <memmove+0x10>
 8006452:	4284      	cmp	r4, r0
 8006454:	4623      	mov	r3, r4
 8006456:	d807      	bhi.n	8006468 <memmove+0x20>
 8006458:	1e43      	subs	r3, r0, #1
 800645a:	42a1      	cmp	r1, r4
 800645c:	d008      	beq.n	8006470 <memmove+0x28>
 800645e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006462:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006466:	e7f8      	b.n	800645a <memmove+0x12>
 8006468:	4402      	add	r2, r0
 800646a:	4601      	mov	r1, r0
 800646c:	428a      	cmp	r2, r1
 800646e:	d100      	bne.n	8006472 <memmove+0x2a>
 8006470:	bd10      	pop	{r4, pc}
 8006472:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006476:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800647a:	e7f7      	b.n	800646c <memmove+0x24>

0800647c <_init>:
 800647c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800647e:	bf00      	nop
 8006480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006482:	bc08      	pop	{r3}
 8006484:	469e      	mov	lr, r3
 8006486:	4770      	bx	lr

08006488 <_fini>:
 8006488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800648a:	bf00      	nop
 800648c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800648e:	bc08      	pop	{r3}
 8006490:	469e      	mov	lr, r3
 8006492:	4770      	bx	lr
