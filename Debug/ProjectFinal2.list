
ProjectFinal2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c24  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011bc  08006db4  08006db4  00007db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f70  08007f70  00009084  2**0
                  CONTENTS
  4 .ARM          00000008  08007f70  08007f70  00008f70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f78  08007f78  00009084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f78  08007f78  00008f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f7c  08007f7c  00008f7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  08007f80  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009084  2**0
                  CONTENTS
 10 .bss          00000914  20000084  20000084  00009084  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000998  20000998  00009084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001797d  00000000  00000000  000090b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003520  00000000  00000000  00020a31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001750  00000000  00000000  00023f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001227  00000000  00000000  000256a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004e6e  00000000  00000000  000268cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c1f0  00000000  00000000  0002b73d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e3626  00000000  00000000  0004792d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012af53  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000068a4  00000000  00000000  0012af98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000068  00000000  00000000  0013183c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006d9c 	.word	0x08006d9c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	08006d9c 	.word	0x08006d9c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <CircularBuffer_Init>:
#include "CircularBuffer.h"
#include <string.h>

// Khởi tạo buffer
void CircularBuffer_Init(CircularBuffer *cb)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
	cb->head = 0;
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	2200      	movs	r2, #0
 800057c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	cb->tail = 0;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	2200      	movs	r2, #0
 8000584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
	cb->count = 0;
 8000588:	687b      	ldr	r3, [r7, #4]
 800058a:	2200      	movs	r2, #0
 800058c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	memset(cb->buffer, 0, sizeof(cb->buffer));
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	2240      	movs	r2, #64	@ 0x40
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f005 ff36 	bl	8006408 <memset>
}
 800059c:	bf00      	nop
 800059e:	3708      	adds	r7, #8
 80005a0:	46bd      	mov	sp, r7
 80005a2:	bd80      	pop	{r7, pc}

080005a4 <CircularBuffer_Push>:

// Thêm phần tử vào cuối buffer (push)
bool CircularBuffer_Push(CircularBuffer *cb, SensorReadout value)
{
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
 80005ac:	6039      	str	r1, [r7, #0]
	if (cb->count == CIRCULAR_BUFFER_SIZE)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80005b4:	2b10      	cmp	r3, #16
 80005b6:	d116      	bne.n	80005e6 <CircularBuffer_Push+0x42>
	{
		// Buffer đầy, ghi đè phần tử đầu
		cb->head = (cb->head + 1) % CIRCULAR_BUFFER_SIZE;
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80005be:	3301      	adds	r3, #1
 80005c0:	425a      	negs	r2, r3
 80005c2:	f003 030f 	and.w	r3, r3, #15
 80005c6:	f002 020f 	and.w	r2, r2, #15
 80005ca:	bf58      	it	pl
 80005cc:	4253      	negpl	r3, r2
 80005ce:	b2da      	uxtb	r2, r3
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
		cb->count--;
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80005dc:	3b01      	subs	r3, #1
 80005de:	b2da      	uxtb	r2, r3
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	}
	cb->buffer[cb->tail] = value;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80005ec:	687a      	ldr	r2, [r7, #4]
 80005ee:	009b      	lsls	r3, r3, #2
 80005f0:	4413      	add	r3, r2
 80005f2:	463a      	mov	r2, r7
 80005f4:	6810      	ldr	r0, [r2, #0]
 80005f6:	6018      	str	r0, [r3, #0]
	cb->tail = (cb->tail + 1) % CIRCULAR_BUFFER_SIZE;
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80005fe:	3301      	adds	r3, #1
 8000600:	425a      	negs	r2, r3
 8000602:	f003 030f 	and.w	r3, r3, #15
 8000606:	f002 020f 	and.w	r2, r2, #15
 800060a:	bf58      	it	pl
 800060c:	4253      	negpl	r3, r2
 800060e:	b2da      	uxtb	r2, r3
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
	cb->count++;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800061c:	3301      	adds	r3, #1
 800061e:	b2da      	uxtb	r2, r3
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	return true;
 8000626:	2301      	movs	r3, #1
}
 8000628:	4618      	mov	r0, r3
 800062a:	370c      	adds	r7, #12
 800062c:	46bd      	mov	sp, r7
 800062e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000632:	4770      	bx	lr

08000634 <CircularBuffer_Pop>:

// Xóa phần tử đầu buffer (pop/shift)
bool CircularBuffer_Pop(CircularBuffer *cb, SensorReadout *value)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	6039      	str	r1, [r7, #0]
	if (cb->count == 0)
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8000644:	2b00      	cmp	r3, #0
 8000646:	d101      	bne.n	800064c <CircularBuffer_Pop+0x18>
		return false;
 8000648:	2300      	movs	r3, #0
 800064a:	e020      	b.n	800068e <CircularBuffer_Pop+0x5a>
	*value = cb->buffer[cb->head];
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000652:	6839      	ldr	r1, [r7, #0]
 8000654:	687a      	ldr	r2, [r7, #4]
 8000656:	009b      	lsls	r3, r3, #2
 8000658:	4413      	add	r3, r2
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	600b      	str	r3, [r1, #0]
	cb->head = (cb->head + 1) % CIRCULAR_BUFFER_SIZE;
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000664:	3301      	adds	r3, #1
 8000666:	425a      	negs	r2, r3
 8000668:	f003 030f 	and.w	r3, r3, #15
 800066c:	f002 020f 	and.w	r2, r2, #15
 8000670:	bf58      	it	pl
 8000672:	4253      	negpl	r3, r2
 8000674:	b2da      	uxtb	r2, r3
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
	cb->count--;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8000682:	3b01      	subs	r3, #1
 8000684:	b2da      	uxtb	r2, r3
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
	return true;
 800068c:	2301      	movs	r3, #1
}
 800068e:	4618      	mov	r0, r3
 8000690:	370c      	adds	r7, #12
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr

0800069a <MAX30100_Begin>:

extern I2C_HandleTypeDef hi2c1;
extern char data[1024];
// Khởi tạo cảm biến
bool MAX30100_Begin(MAX30100 *dev)
{
 800069a:	b580      	push	{r7, lr}
 800069c:	b082      	sub	sp, #8
 800069e:	af00      	add	r7, sp, #0
 80006a0:	6078      	str	r0, [r7, #4]
    if (MAX30100_GetPartId(dev) != EXPECTED_PART_ID)
 80006a2:	6878      	ldr	r0, [r7, #4]
 80006a4:	f000 f8b9 	bl	800081a <MAX30100_GetPartId>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b11      	cmp	r3, #17
 80006ac:	d001      	beq.n	80006b2 <MAX30100_Begin+0x18>
        return false;
 80006ae:	2300      	movs	r3, #0
 80006b0:	e01e      	b.n	80006f0 <MAX30100_Begin+0x56>

    // Thoát shutdown, chọn chế độ SPO2_HR
    MAX30100_WriteRegister(MAX30100_REG_MODE_CONFIGURATION, MAX30100_MODE_SPO2_HR);
 80006b2:	2103      	movs	r1, #3
 80006b4:	2006      	movs	r0, #6
 80006b6:	f000 f8d9 	bl	800086c <MAX30100_WriteRegister>
    HAL_Delay(2);
 80006ba:	2002      	movs	r0, #2
 80006bc:	f002 fa5c 	bl	8002b78 <HAL_Delay>

    // Cấu hình SPO2: sampling rate, pulse width, highres
    MAX30100_ConfigureSPO2(dev, DEFAULT_SAMPLING_RATE, DEFAULT_PULSE_WIDTH, true);
 80006c0:	2301      	movs	r3, #1
 80006c2:	2203      	movs	r2, #3
 80006c4:	2101      	movs	r1, #1
 80006c6:	6878      	ldr	r0, [r7, #4]
 80006c8:	f000 f825 	bl	8000716 <MAX30100_ConfigureSPO2>
    HAL_Delay(2);
 80006cc:	2002      	movs	r0, #2
 80006ce:	f002 fa53 	bl	8002b78 <HAL_Delay>

    // Cấu hình dòng điện LED
    MAX30100_SetLedsCurrent(dev, DEFAULT_IR_LED_CURRENT, DEFAULT_RED_LED_CURRENT);
 80006d2:	220f      	movs	r2, #15
 80006d4:	210f      	movs	r1, #15
 80006d6:	6878      	ldr	r0, [r7, #4]
 80006d8:	f000 f848 	bl	800076c <MAX30100_SetLedsCurrent>
    HAL_Delay(2);
 80006dc:	2002      	movs	r0, #2
 80006de:	f002 fa4b 	bl	8002b78 <HAL_Delay>

    // Reset FIFO
    MAX30100_ResetFifo(dev);
 80006e2:	6878      	ldr	r0, [r7, #4]
 80006e4:	f000 f885 	bl	80007f2 <MAX30100_ResetFifo>
    HAL_Delay(2);
 80006e8:	2002      	movs	r0, #2
 80006ea:	f002 fa45 	bl	8002b78 <HAL_Delay>

    return true;
 80006ee:	2301      	movs	r3, #1
}
 80006f0:	4618      	mov	r0, r3
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <MAX30100_SetMode>:

// Chọn chế độ đo (HR, SPO2, ...)
void MAX30100_SetMode(MAX30100 *dev, Mode mode)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b082      	sub	sp, #8
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	6078      	str	r0, [r7, #4]
 8000700:	460b      	mov	r3, r1
 8000702:	70fb      	strb	r3, [r7, #3]
    MAX30100_WriteRegister(MAX30100_REG_MODE_CONFIGURATION, mode);
 8000704:	78fb      	ldrb	r3, [r7, #3]
 8000706:	4619      	mov	r1, r3
 8000708:	2006      	movs	r0, #6
 800070a:	f000 f8af 	bl	800086c <MAX30100_WriteRegister>
}
 800070e:	bf00      	nop
 8000710:	3708      	adds	r7, #8
 8000712:	46bd      	mov	sp, r7
 8000714:	bd80      	pop	{r7, pc}

08000716 <MAX30100_ConfigureSPO2>:

// Cấu hình sampling rate, pulse width, highres
void MAX30100_ConfigureSPO2(MAX30100 *dev, SamplingRate sr, LEDPulseWidth pw, bool highres)
{
 8000716:	b580      	push	{r7, lr}
 8000718:	b084      	sub	sp, #16
 800071a:	af00      	add	r7, sp, #0
 800071c:	6078      	str	r0, [r7, #4]
 800071e:	4608      	mov	r0, r1
 8000720:	4611      	mov	r1, r2
 8000722:	461a      	mov	r2, r3
 8000724:	4603      	mov	r3, r0
 8000726:	70fb      	strb	r3, [r7, #3]
 8000728:	460b      	mov	r3, r1
 800072a:	70bb      	strb	r3, [r7, #2]
 800072c:	4613      	mov	r3, r2
 800072e:	707b      	strb	r3, [r7, #1]
    uint8_t value = 0;
 8000730:	2300      	movs	r3, #0
 8000732:	73fb      	strb	r3, [r7, #15]
    value |= (sr << 2); // Sampling rate
 8000734:	78fb      	ldrb	r3, [r7, #3]
 8000736:	009b      	lsls	r3, r3, #2
 8000738:	b25a      	sxtb	r2, r3
 800073a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800073e:	4313      	orrs	r3, r2
 8000740:	b25b      	sxtb	r3, r3
 8000742:	73fb      	strb	r3, [r7, #15]
    value |= pw;        // Pulse width
 8000744:	7bfa      	ldrb	r2, [r7, #15]
 8000746:	78bb      	ldrb	r3, [r7, #2]
 8000748:	4313      	orrs	r3, r2
 800074a:	73fb      	strb	r3, [r7, #15]
    if (highres)
 800074c:	787b      	ldrb	r3, [r7, #1]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d003      	beq.n	800075a <MAX30100_ConfigureSPO2+0x44>
        value |= MAX30100_SPC_SPO2_HI_RES_EN;
 8000752:	7bfb      	ldrb	r3, [r7, #15]
 8000754:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000758:	73fb      	strb	r3, [r7, #15]
    MAX30100_WriteRegister(MAX30100_REG_SPO2_CONFIGURATION, value);
 800075a:	7bfb      	ldrb	r3, [r7, #15]
 800075c:	4619      	mov	r1, r3
 800075e:	2007      	movs	r0, #7
 8000760:	f000 f884 	bl	800086c <MAX30100_WriteRegister>
}
 8000764:	bf00      	nop
 8000766:	3710      	adds	r7, #16
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}

0800076c <MAX30100_SetLedsCurrent>:

// Cấu hình dòng điện LED
void MAX30100_SetLedsCurrent(MAX30100 *dev, LEDCurrent irLedCurrent, LEDCurrent redLedCurrent)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	460b      	mov	r3, r1
 8000776:	70fb      	strb	r3, [r7, #3]
 8000778:	4613      	mov	r3, r2
 800077a:	70bb      	strb	r3, [r7, #2]
    MAX30100_WriteRegister(MAX30100_REG_LED_CONFIGURATION, (redLedCurrent << 4) | irLedCurrent);
 800077c:	78bb      	ldrb	r3, [r7, #2]
 800077e:	011b      	lsls	r3, r3, #4
 8000780:	b25a      	sxtb	r2, r3
 8000782:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000786:	4313      	orrs	r3, r2
 8000788:	b25b      	sxtb	r3, r3
 800078a:	b2db      	uxtb	r3, r3
 800078c:	4619      	mov	r1, r3
 800078e:	2009      	movs	r0, #9
 8000790:	f000 f86c 	bl	800086c <MAX30100_WriteRegister>
}
 8000794:	bf00      	nop
 8000796:	3708      	adds	r7, #8
 8000798:	46bd      	mov	sp, r7
 800079a:	bd80      	pop	{r7, pc}

0800079c <MAX30100_Update>:

// Đọc dữ liệu mới từ FIFO, cập nhật buffer
void MAX30100_Update(MAX30100 *dev)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
    MAX30100_ReadFifoData(dev);
 80007a4:	6878      	ldr	r0, [r7, #4]
 80007a6:	f000 f899 	bl	80008dc <MAX30100_ReadFifoData>
}
 80007aa:	bf00      	nop
 80007ac:	3708      	adds	r7, #8
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}

080007b2 <MAX30100_GetRawValues>:

// Lấy giá trị raw IR/RED mới nhất
bool MAX30100_GetRawValues(MAX30100 *dev, uint16_t *ir, uint16_t *red)
{
 80007b2:	b580      	push	{r7, lr}
 80007b4:	b086      	sub	sp, #24
 80007b6:	af00      	add	r7, sp, #0
 80007b8:	60f8      	str	r0, [r7, #12]
 80007ba:	60b9      	str	r1, [r7, #8]
 80007bc:	607a      	str	r2, [r7, #4]
    SensorReadout readout;
    if (!CircularBuffer_Pop(&dev->readoutsBuffer, &readout))
 80007be:	68fb      	ldr	r3, [r7, #12]
 80007c0:	f107 0214 	add.w	r2, r7, #20
 80007c4:	4611      	mov	r1, r2
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff ff34 	bl	8000634 <CircularBuffer_Pop>
 80007cc:	4603      	mov	r3, r0
 80007ce:	f083 0301 	eor.w	r3, r3, #1
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MAX30100_GetRawValues+0x2a>
        return false;
 80007d8:	2300      	movs	r3, #0
 80007da:	e006      	b.n	80007ea <MAX30100_GetRawValues+0x38>
    *ir = readout.ir;
 80007dc:	8aba      	ldrh	r2, [r7, #20]
 80007de:	68bb      	ldr	r3, [r7, #8]
 80007e0:	801a      	strh	r2, [r3, #0]
    *red = readout.red;
 80007e2:	8afa      	ldrh	r2, [r7, #22]
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	801a      	strh	r2, [r3, #0]
    return true;
 80007e8:	2301      	movs	r3, #1
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3718      	adds	r7, #24
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}

080007f2 <MAX30100_ResetFifo>:

// Reset FIFO
void MAX30100_ResetFifo(MAX30100 *dev)
{
 80007f2:	b580      	push	{r7, lr}
 80007f4:	b082      	sub	sp, #8
 80007f6:	af00      	add	r7, sp, #0
 80007f8:	6078      	str	r0, [r7, #4]
    MAX30100_WriteRegister(MAX30100_REG_FIFO_WRITE_POINTER, 0);
 80007fa:	2100      	movs	r1, #0
 80007fc:	2002      	movs	r0, #2
 80007fe:	f000 f835 	bl	800086c <MAX30100_WriteRegister>
    MAX30100_WriteRegister(MAX30100_REG_FIFO_READ_POINTER, 0);
 8000802:	2100      	movs	r1, #0
 8000804:	2004      	movs	r0, #4
 8000806:	f000 f831 	bl	800086c <MAX30100_WriteRegister>
    MAX30100_WriteRegister(MAX30100_REG_FIFO_OVERFLOW_COUNTER, 0);
 800080a:	2100      	movs	r1, #0
 800080c:	2003      	movs	r0, #3
 800080e:	f000 f82d 	bl	800086c <MAX30100_WriteRegister>
}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}

0800081a <MAX30100_GetPartId>:
    MAX30100_WriteRegister(MAX30100_REG_MODE_CONFIGURATION, modeConfig);
}

// Đọc Part ID
uint8_t MAX30100_GetPartId(MAX30100 *dev)
{
 800081a:	b580      	push	{r7, lr}
 800081c:	b082      	sub	sp, #8
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
    return MAX30100_ReadRegister(MAX30100_REG_PART_ID);
 8000822:	20ff      	movs	r0, #255	@ 0xff
 8000824:	f000 f806 	bl	8000834 <MAX30100_ReadRegister>
 8000828:	4603      	mov	r3, r0
}
 800082a:	4618      	mov	r0, r3
 800082c:	3708      	adds	r7, #8
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
	...

08000834 <MAX30100_ReadRegister>:

// --- I2C giao tiếp sử dụng HAL ---
uint8_t MAX30100_ReadRegister(uint8_t address)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b088      	sub	sp, #32
 8000838:	af04      	add	r7, sp, #16
 800083a:	4603      	mov	r3, r0
 800083c:	71fb      	strb	r3, [r7, #7]
    uint8_t value = 0;
 800083e:	2300      	movs	r3, #0
 8000840:	73fb      	strb	r3, [r7, #15]
    HAL_I2C_Mem_Read(&hi2c1, MAX30100_I2C_ADDRESS << 1, address, 1, &value, 1, 100);
 8000842:	79fb      	ldrb	r3, [r7, #7]
 8000844:	b29a      	uxth	r2, r3
 8000846:	2364      	movs	r3, #100	@ 0x64
 8000848:	9302      	str	r3, [sp, #8]
 800084a:	2301      	movs	r3, #1
 800084c:	9301      	str	r3, [sp, #4]
 800084e:	f107 030f 	add.w	r3, r7, #15
 8000852:	9300      	str	r3, [sp, #0]
 8000854:	2301      	movs	r3, #1
 8000856:	21ae      	movs	r1, #174	@ 0xae
 8000858:	4803      	ldr	r0, [pc, #12]	@ (8000868 <MAX30100_ReadRegister+0x34>)
 800085a:	f003 f93d 	bl	8003ad8 <HAL_I2C_Mem_Read>
    return value;
 800085e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000860:	4618      	mov	r0, r3
 8000862:	3710      	adds	r7, #16
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	200001f0 	.word	0x200001f0

0800086c <MAX30100_WriteRegister>:

void MAX30100_WriteRegister(uint8_t address, uint8_t data)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af04      	add	r7, sp, #16
 8000872:	4603      	mov	r3, r0
 8000874:	460a      	mov	r2, r1
 8000876:	71fb      	strb	r3, [r7, #7]
 8000878:	4613      	mov	r3, r2
 800087a:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Write(&hi2c1, MAX30100_I2C_ADDRESS << 1, address, 1, &data, 1, 100);
 800087c:	79fb      	ldrb	r3, [r7, #7]
 800087e:	b29a      	uxth	r2, r3
 8000880:	2364      	movs	r3, #100	@ 0x64
 8000882:	9302      	str	r3, [sp, #8]
 8000884:	2301      	movs	r3, #1
 8000886:	9301      	str	r3, [sp, #4]
 8000888:	1dbb      	adds	r3, r7, #6
 800088a:	9300      	str	r3, [sp, #0]
 800088c:	2301      	movs	r3, #1
 800088e:	21ae      	movs	r1, #174	@ 0xae
 8000890:	4803      	ldr	r0, [pc, #12]	@ (80008a0 <MAX30100_WriteRegister+0x34>)
 8000892:	f003 f827 	bl	80038e4 <HAL_I2C_Mem_Write>
}
 8000896:	bf00      	nop
 8000898:	3708      	adds	r7, #8
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	200001f0 	.word	0x200001f0

080008a4 <MAX30100_BurstRead>:

void MAX30100_BurstRead(uint8_t baseAddress, uint8_t *buffer, uint8_t length)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b086      	sub	sp, #24
 80008a8:	af04      	add	r7, sp, #16
 80008aa:	4603      	mov	r3, r0
 80008ac:	6039      	str	r1, [r7, #0]
 80008ae:	71fb      	strb	r3, [r7, #7]
 80008b0:	4613      	mov	r3, r2
 80008b2:	71bb      	strb	r3, [r7, #6]
    HAL_I2C_Mem_Read(&hi2c1, MAX30100_I2C_ADDRESS << 1, baseAddress, 1, buffer, length, 100);
 80008b4:	79fb      	ldrb	r3, [r7, #7]
 80008b6:	b29a      	uxth	r2, r3
 80008b8:	79bb      	ldrb	r3, [r7, #6]
 80008ba:	b29b      	uxth	r3, r3
 80008bc:	2164      	movs	r1, #100	@ 0x64
 80008be:	9102      	str	r1, [sp, #8]
 80008c0:	9301      	str	r3, [sp, #4]
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	9300      	str	r3, [sp, #0]
 80008c6:	2301      	movs	r3, #1
 80008c8:	21ae      	movs	r1, #174	@ 0xae
 80008ca:	4803      	ldr	r0, [pc, #12]	@ (80008d8 <MAX30100_BurstRead+0x34>)
 80008cc:	f003 f904 	bl	8003ad8 <HAL_I2C_Mem_Read>
}
 80008d0:	bf00      	nop
 80008d2:	3708      	adds	r7, #8
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd80      	pop	{r7, pc}
 80008d8:	200001f0 	.word	0x200001f0

080008dc <MAX30100_ReadFifoData>:

void MAX30100_ReadFifoData(MAX30100 *dev)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	6078      	str	r0, [r7, #4]
    uint8_t buffer[4];
    MAX30100_BurstRead(MAX30100_REG_FIFO_DATA, buffer, 4);
 80008e4:	f107 0310 	add.w	r3, r7, #16
 80008e8:	2204      	movs	r2, #4
 80008ea:	4619      	mov	r1, r3
 80008ec:	2005      	movs	r0, #5
 80008ee:	f7ff ffd9 	bl	80008a4 <MAX30100_BurstRead>

    uint16_t ir = (uint16_t)((buffer[0] << 8) | buffer[1]);
 80008f2:	7c3b      	ldrb	r3, [r7, #16]
 80008f4:	021b      	lsls	r3, r3, #8
 80008f6:	b21a      	sxth	r2, r3
 80008f8:	7c7b      	ldrb	r3, [r7, #17]
 80008fa:	b21b      	sxth	r3, r3
 80008fc:	4313      	orrs	r3, r2
 80008fe:	b21b      	sxth	r3, r3
 8000900:	82fb      	strh	r3, [r7, #22]
    uint16_t red = (uint16_t)((buffer[2] << 8) | buffer[3]);
 8000902:	7cbb      	ldrb	r3, [r7, #18]
 8000904:	021b      	lsls	r3, r3, #8
 8000906:	b21a      	sxth	r2, r3
 8000908:	7cfb      	ldrb	r3, [r7, #19]
 800090a:	b21b      	sxth	r3, r3
 800090c:	4313      	orrs	r3, r2
 800090e:	b21b      	sxth	r3, r3
 8000910:	82bb      	strh	r3, [r7, #20]
    // Hiển thị giá trị lên LCD hoặc UART để kiểm tra
//     sprintf(data, "IR:%u RED:%u", ir, red);
//     ILI9341_WriteString(0, 0, data, Font_7x10, ILI9341_YELLOW, ILI9341_BLACK);

    SensorReadout readout;
    readout.ir = ir;
 8000912:	8afb      	ldrh	r3, [r7, #22]
 8000914:	81bb      	strh	r3, [r7, #12]
    readout.red = red;
 8000916:	8abb      	ldrh	r3, [r7, #20]
 8000918:	81fb      	strh	r3, [r7, #14]
    CircularBuffer_Push(&dev->readoutsBuffer, readout);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	68f9      	ldr	r1, [r7, #12]
 800091e:	4618      	mov	r0, r3
 8000920:	f7ff fe40 	bl	80005a4 <CircularBuffer_Push>
}
 8000924:	bf00      	nop
 8000926:	3718      	adds	r7, #24
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <BeatDetector_GetRate>:
    bd->lastMaxValue = 0;
    bd->tsLastBeat = 0;
}

float BeatDetector_GetRate(BeatDetector *bd)
{
 800092c:	b480      	push	{r7}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
    if (bd->beatPeriod != 0)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	edd3 7a02 	vldr	s15, [r3, #8]
 800093a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800093e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000942:	d00f      	beq.n	8000964 <BeatDetector_GetRate+0x38>
    {
        return 1.0f / bd->beatPeriod * 1000.0f * 60.0f;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	ed93 7a02 	vldr	s14, [r3, #8]
 800094a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800094e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000952:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8000978 <BeatDetector_GetRate+0x4c>
 8000956:	ee67 7a87 	vmul.f32	s15, s15, s14
 800095a:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 800097c <BeatDetector_GetRate+0x50>
 800095e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000962:	e001      	b.n	8000968 <BeatDetector_GetRate+0x3c>
    }
    else
    {
        return 0.0f;
 8000964:	eddf 7a06 	vldr	s15, [pc, #24]	@ 8000980 <BeatDetector_GetRate+0x54>
    }
}
 8000968:	eeb0 0a67 	vmov.f32	s0, s15
 800096c:	370c      	adds	r7, #12
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	447a0000 	.word	0x447a0000
 800097c:	42700000 	.word	0x42700000
 8000980:	00000000 	.word	0x00000000

08000984 <BeatDetector_AddSample>:
    return bd->threshold;
}

// Hàm chính: thêm mẫu mới, trả về true nếu phát hiện nhịp
bool BeatDetector_AddSample(BeatDetector *bd, float sample, uint32_t timestamp_ms)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b086      	sub	sp, #24
 8000988:	af00      	add	r7, sp, #0
 800098a:	60f8      	str	r0, [r7, #12]
 800098c:	ed87 0a02 	vstr	s0, [r7, #8]
 8000990:	6079      	str	r1, [r7, #4]
    bool beatDetected = false;
 8000992:	2300      	movs	r3, #0
 8000994:	75fb      	strb	r3, [r7, #23]

    switch (bd->state)
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b04      	cmp	r3, #4
 800099c:	f200 80b1 	bhi.w	8000b02 <BeatDetector_AddSample+0x17e>
 80009a0:	a201      	add	r2, pc, #4	@ (adr r2, 80009a8 <BeatDetector_AddSample+0x24>)
 80009a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009a6:	bf00      	nop
 80009a8:	080009bd 	.word	0x080009bd
 80009ac:	080009cf 	.word	0x080009cf
 80009b0:	08000a2b 	.word	0x08000a2b
 80009b4:	08000a65 	.word	0x08000a65
 80009b8:	08000ae7 	.word	0x08000ae7
    {
    case BEATDETECTOR_STATE_INIT:
        if (timestamp_ms > BEATDETECTOR_INIT_HOLDOFF)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80009c2:	f240 809d 	bls.w	8000b00 <BeatDetector_AddSample+0x17c>
        {
            bd->state = BEATDETECTOR_STATE_WAITING;
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	2201      	movs	r2, #1
 80009ca:	701a      	strb	r2, [r3, #0]
        }
        break;
 80009cc:	e098      	b.n	8000b00 <BeatDetector_AddSample+0x17c>

    case BEATDETECTOR_STATE_WAITING:
        if (sample > bd->threshold)
 80009ce:	68fb      	ldr	r3, [r7, #12]
 80009d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80009d4:	ed97 7a02 	vldr	s14, [r7, #8]
 80009d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80009dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009e0:	dd10      	ble.n	8000a04 <BeatDetector_AddSample+0x80>
        {
            bd->threshold = MIN(sample, BEATDETECTOR_MAX_THRESHOLD);
 80009e2:	edd7 7a02 	vldr	s15, [r7, #8]
 80009e6:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8000b0c <BeatDetector_AddSample+0x188>
 80009ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80009ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80009f2:	d501      	bpl.n	80009f8 <BeatDetector_AddSample+0x74>
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	e000      	b.n	80009fa <BeatDetector_AddSample+0x76>
 80009f8:	4b45      	ldr	r3, [pc, #276]	@ (8000b10 <BeatDetector_AddSample+0x18c>)
 80009fa:	68fa      	ldr	r2, [r7, #12]
 80009fc:	6053      	str	r3, [r2, #4]
            bd->state = BEATDETECTOR_STATE_FOLLOWING_SLOPE;
 80009fe:	68fb      	ldr	r3, [r7, #12]
 8000a00:	2202      	movs	r2, #2
 8000a02:	701a      	strb	r2, [r3, #0]
        }
        // Tracking lost, resetting
        if (timestamp_ms - bd->tsLastBeat > BEATDETECTOR_INVALID_READOUT_DELAY)
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	691b      	ldr	r3, [r3, #16]
 8000a08:	687a      	ldr	r2, [r7, #4]
 8000a0a:	1ad3      	subs	r3, r2, r3
 8000a0c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8000a10:	d907      	bls.n	8000a22 <BeatDetector_AddSample+0x9e>
        {
            bd->beatPeriod = 0;
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	f04f 0200 	mov.w	r2, #0
 8000a18:	609a      	str	r2, [r3, #8]
            bd->lastMaxValue = 0;
 8000a1a:	68fb      	ldr	r3, [r7, #12]
 8000a1c:	f04f 0200 	mov.w	r2, #0
 8000a20:	60da      	str	r2, [r3, #12]
        }
        BeatDetector_DecreaseThreshold(bd);
 8000a22:	68f8      	ldr	r0, [r7, #12]
 8000a24:	f000 f87a 	bl	8000b1c <BeatDetector_DecreaseThreshold>
        break;
 8000a28:	e06b      	b.n	8000b02 <BeatDetector_AddSample+0x17e>

    case BEATDETECTOR_STATE_FOLLOWING_SLOPE:
        if (sample < bd->threshold)
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	edd3 7a01 	vldr	s15, [r3, #4]
 8000a30:	ed97 7a02 	vldr	s14, [r7, #8]
 8000a34:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a3c:	d503      	bpl.n	8000a46 <BeatDetector_AddSample+0xc2>
        {
            bd->state = BEATDETECTOR_STATE_MAYBE_DETECTED;
 8000a3e:	68fb      	ldr	r3, [r7, #12]
 8000a40:	2203      	movs	r2, #3
 8000a42:	701a      	strb	r2, [r3, #0]
        }
        else
        {
            bd->threshold = MIN(sample, BEATDETECTOR_MAX_THRESHOLD);
        }
        break;
 8000a44:	e05d      	b.n	8000b02 <BeatDetector_AddSample+0x17e>
            bd->threshold = MIN(sample, BEATDETECTOR_MAX_THRESHOLD);
 8000a46:	edd7 7a02 	vldr	s15, [r7, #8]
 8000a4a:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8000b0c <BeatDetector_AddSample+0x188>
 8000a4e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000a52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a56:	d501      	bpl.n	8000a5c <BeatDetector_AddSample+0xd8>
 8000a58:	68bb      	ldr	r3, [r7, #8]
 8000a5a:	e000      	b.n	8000a5e <BeatDetector_AddSample+0xda>
 8000a5c:	4b2c      	ldr	r3, [pc, #176]	@ (8000b10 <BeatDetector_AddSample+0x18c>)
 8000a5e:	68fa      	ldr	r2, [r7, #12]
 8000a60:	6053      	str	r3, [r2, #4]
        break;
 8000a62:	e04e      	b.n	8000b02 <BeatDetector_AddSample+0x17e>

    case BEATDETECTOR_STATE_MAYBE_DETECTED:
        if (sample + BEATDETECTOR_STEP_RESILIENCY < bd->threshold)
 8000a64:	edd7 7a02 	vldr	s15, [r7, #8]
 8000a68:	eeb3 7a0e 	vmov.f32	s14, #62	@ 0x41f00000  30.0
 8000a6c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	edd3 7a01 	vldr	s15, [r3, #4]
 8000a76:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000a7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000a7e:	d52e      	bpl.n	8000ade <BeatDetector_AddSample+0x15a>
        {
            // Found a beat
            beatDetected = true;
 8000a80:	2301      	movs	r3, #1
 8000a82:	75fb      	strb	r3, [r7, #23]
            bd->lastMaxValue = sample;
 8000a84:	68fb      	ldr	r3, [r7, #12]
 8000a86:	68ba      	ldr	r2, [r7, #8]
 8000a88:	60da      	str	r2, [r3, #12]
            bd->state = BEATDETECTOR_STATE_MASKING;
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	2204      	movs	r2, #4
 8000a8e:	701a      	strb	r2, [r3, #0]
            float delta = (float)(timestamp_ms - bd->tsLastBeat);
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	691b      	ldr	r3, [r3, #16]
 8000a94:	687a      	ldr	r2, [r7, #4]
 8000a96:	1ad3      	subs	r3, r2, r3
 8000a98:	ee07 3a90 	vmov	s15, r3
 8000a9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000aa0:	edc7 7a04 	vstr	s15, [r7, #16]
            if (delta > 0)
 8000aa4:	edd7 7a04 	vldr	s15, [r7, #16]
 8000aa8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000aac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ab0:	dd11      	ble.n	8000ad6 <BeatDetector_AddSample+0x152>
            {
                bd->beatPeriod = BEATDETECTOR_BPFILTER_ALPHA * delta +
 8000ab2:	edd7 7a04 	vldr	s15, [r7, #16]
 8000ab6:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8000b14 <BeatDetector_AddSample+0x190>
 8000aba:	ee27 7a87 	vmul.f32	s14, s15, s14
                                 (1.0f - BEATDETECTOR_BPFILTER_ALPHA) * bd->beatPeriod;
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	edd3 7a02 	vldr	s15, [r3, #8]
 8000ac4:	eddf 6a14 	vldr	s13, [pc, #80]	@ 8000b18 <BeatDetector_AddSample+0x194>
 8000ac8:	ee67 7aa6 	vmul.f32	s15, s15, s13
                bd->beatPeriod = BEATDETECTOR_BPFILTER_ALPHA * delta +
 8000acc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	edc3 7a02 	vstr	s15, [r3, #8]
            }
            bd->tsLastBeat = timestamp_ms;
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	611a      	str	r2, [r3, #16]
        }
        else
        {
            bd->state = BEATDETECTOR_STATE_FOLLOWING_SLOPE;
        }
        break;
 8000adc:	e011      	b.n	8000b02 <BeatDetector_AddSample+0x17e>
            bd->state = BEATDETECTOR_STATE_FOLLOWING_SLOPE;
 8000ade:	68fb      	ldr	r3, [r7, #12]
 8000ae0:	2202      	movs	r2, #2
 8000ae2:	701a      	strb	r2, [r3, #0]
        break;
 8000ae4:	e00d      	b.n	8000b02 <BeatDetector_AddSample+0x17e>

    case BEATDETECTOR_STATE_MASKING:
        if (timestamp_ms - bd->tsLastBeat > BEATDETECTOR_MASKING_HOLDOFF)
 8000ae6:	68fb      	ldr	r3, [r7, #12]
 8000ae8:	691b      	ldr	r3, [r3, #16]
 8000aea:	687a      	ldr	r2, [r7, #4]
 8000aec:	1ad3      	subs	r3, r2, r3
 8000aee:	2bc8      	cmp	r3, #200	@ 0xc8
 8000af0:	d902      	bls.n	8000af8 <BeatDetector_AddSample+0x174>
        {
            bd->state = BEATDETECTOR_STATE_WAITING;
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	2201      	movs	r2, #1
 8000af6:	701a      	strb	r2, [r3, #0]
        }
        BeatDetector_DecreaseThreshold(bd);
 8000af8:	68f8      	ldr	r0, [r7, #12]
 8000afa:	f000 f80f 	bl	8000b1c <BeatDetector_DecreaseThreshold>
        break;
 8000afe:	e000      	b.n	8000b02 <BeatDetector_AddSample+0x17e>
        break;
 8000b00:	bf00      	nop
    }

    return beatDetected;
 8000b02:	7dfb      	ldrb	r3, [r7, #23]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3718      	adds	r7, #24
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	44480000 	.word	0x44480000
 8000b10:	44480000 	.word	0x44480000
 8000b14:	3f19999a 	.word	0x3f19999a
 8000b18:	3ecccccc 	.word	0x3ecccccc

08000b1c <BeatDetector_DecreaseThreshold>:

// Hàm giảm ngưỡng threshold
static void BeatDetector_DecreaseThreshold(BeatDetector *bd)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
    if (bd->lastMaxValue > 0 && bd->beatPeriod > 0)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	edd3 7a03 	vldr	s15, [r3, #12]
 8000b2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b32:	dd20      	ble.n	8000b76 <BeatDetector_DecreaseThreshold+0x5a>
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	edd3 7a02 	vldr	s15, [r3, #8]
 8000b3a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000b3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b42:	dd18      	ble.n	8000b76 <BeatDetector_DecreaseThreshold+0x5a>
    {
        bd->threshold -= bd->lastMaxValue * (1.0f - BEATDETECTOR_THRESHOLD_FALLOFF_TARGET) /
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	ed93 7a01 	vldr	s14, [r3, #4]
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	edd3 7a03 	vldr	s15, [r3, #12]
 8000b50:	eddf 6a18 	vldr	s13, [pc, #96]	@ 8000bb4 <BeatDetector_DecreaseThreshold+0x98>
 8000b54:	ee27 6aa6 	vmul.f32	s12, s15, s13
                         (bd->beatPeriod / BEATDETECTOR_SAMPLES_PERIOD);
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	edd3 7a02 	vldr	s15, [r3, #8]
 8000b5e:	eef2 5a04 	vmov.f32	s11, #36	@ 0x41200000  10.0
 8000b62:	eec7 6aa5 	vdiv.f32	s13, s15, s11
        bd->threshold -= bd->lastMaxValue * (1.0f - BEATDETECTOR_THRESHOLD_FALLOFF_TARGET) /
 8000b66:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8000b6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	edc3 7a01 	vstr	s15, [r3, #4]
 8000b74:	e009      	b.n	8000b8a <BeatDetector_DecreaseThreshold+0x6e>
    }
    else
    {
        bd->threshold *= BEATDETECTOR_THRESHOLD_DECAY_FACTOR;
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	edd3 7a01 	vldr	s15, [r3, #4]
 8000b7c:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8000bb8 <BeatDetector_DecreaseThreshold+0x9c>
 8000b80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	edc3 7a01 	vstr	s15, [r3, #4]
    }
    if (bd->threshold < BEATDETECTOR_MIN_THRESHOLD)
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	edd3 7a01 	vldr	s15, [r3, #4]
 8000b90:	eeb3 7a04 	vmov.f32	s14, #52	@ 0x41a00000  20.0
 8000b94:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000b98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000b9c:	d400      	bmi.n	8000ba0 <BeatDetector_DecreaseThreshold+0x84>
    {
        bd->threshold = BEATDETECTOR_MIN_THRESHOLD;
    }
 8000b9e:	e002      	b.n	8000ba6 <BeatDetector_DecreaseThreshold+0x8a>
        bd->threshold = BEATDETECTOR_MIN_THRESHOLD;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4a06      	ldr	r2, [pc, #24]	@ (8000bbc <BeatDetector_DecreaseThreshold+0xa0>)
 8000ba4:	605a      	str	r2, [r3, #4]
 8000ba6:	bf00      	nop
 8000ba8:	370c      	adds	r7, #12
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	3f333333 	.word	0x3f333333
 8000bb8:	3f7d70a4 	.word	0x3f7d70a4
 8000bbc:	41a00000 	.word	0x41a00000

08000bc0 <FilterBuLp1_Step>:
	f->v[1] = 0.0f;
}

// Bước lọc (step)
static inline float FilterBuLp1_Step(FilterBuLp1 *f, float x)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
 8000bc8:	ed87 0a00 	vstr	s0, [r7]
	f->v[0] = f->v[1];
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	685a      	ldr	r2, [r3, #4]
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	601a      	str	r2, [r3, #0]
	f->v[1] = (0.2452372752527856f * x) + (0.5095254494944288f * f->v[0]);
 8000bd4:	edd7 7a00 	vldr	s15, [r7]
 8000bd8:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8000c18 <FilterBuLp1_Step+0x58>
 8000bdc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	edd3 7a00 	vldr	s15, [r3]
 8000be6:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8000c1c <FilterBuLp1_Step+0x5c>
 8000bea:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000bee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	edc3 7a01 	vstr	s15, [r3, #4]
	return (f->v[0] + f->v[1]);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	ed93 7a00 	vldr	s14, [r3]
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	edd3 7a01 	vldr	s15, [r3, #4]
 8000c04:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000c08:	eeb0 0a67 	vmov.f32	s0, s15
 8000c0c:	370c      	adds	r7, #12
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop
 8000c18:	3e7b1f7b 	.word	0x3e7b1f7b
 8000c1c:	3f027043 	.word	0x3f027043

08000c20 <DCRemover_Init>:
	float dcw;
} DCRemover;

// Khởi tạo DCRemover với alpha
static inline void DCRemover_Init(DCRemover *dcr, float alpha)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	ed87 0a00 	vstr	s0, [r7]
	dcr->alpha = alpha;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	683a      	ldr	r2, [r7, #0]
 8000c30:	601a      	str	r2, [r3, #0]
	dcr->dcw = 0.0f;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	f04f 0200 	mov.w	r2, #0
 8000c38:	605a      	str	r2, [r3, #4]
}
 8000c3a:	bf00      	nop
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr

08000c46 <DCRemover_Step>:

// Bước lọc (step)
static inline float DCRemover_Step(DCRemover *dcr, float x)
{
 8000c46:	b480      	push	{r7}
 8000c48:	b085      	sub	sp, #20
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
 8000c4e:	ed87 0a00 	vstr	s0, [r7]
	float olddcw = dcr->dcw;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	685b      	ldr	r3, [r3, #4]
 8000c56:	60fb      	str	r3, [r7, #12]
	dcr->dcw = x + dcr->alpha * dcr->dcw;
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	ed93 7a00 	vldr	s14, [r3]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	edd3 7a01 	vldr	s15, [r3, #4]
 8000c64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c68:	edd7 7a00 	vldr	s15, [r7]
 8000c6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	edc3 7a01 	vstr	s15, [r3, #4]
	return dcr->dcw - olddcw;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	ed93 7a01 	vldr	s14, [r3, #4]
 8000c7c:	edd7 7a03 	vldr	s15, [r7, #12]
 8000c80:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 8000c84:	eeb0 0a67 	vmov.f32	s0, s15
 8000c88:	3714      	adds	r7, #20
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr

08000c92 <DCRemover_GetDCW>:

// Lấy giá trị DC hiện tại
static inline float DCRemover_GetDCW(DCRemover *dcr)
{
 8000c92:	b480      	push	{r7}
 8000c94:	b083      	sub	sp, #12
 8000c96:	af00      	add	r7, sp, #0
 8000c98:	6078      	str	r0, [r7, #4]
	return dcr->dcw;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	685b      	ldr	r3, [r3, #4]
 8000c9e:	ee07 3a90 	vmov	s15, r3
}
 8000ca2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <PulseOximeter_Init>:

static void checkSample(PulseOximeter *po);
static void checkCurrentBias(PulseOximeter *po);

void PulseOximeter_Init(PulseOximeter *po)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
    po->state = PULSEOXIMETER_STATE_INIT;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	2200      	movs	r2, #0
 8000cbc:	701a      	strb	r2, [r3, #0]
    po->tsFirstBeatDetected = 0;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	605a      	str	r2, [r3, #4]
    po->tsLastBeatDetected = 0;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	609a      	str	r2, [r3, #8]
    po->tsLastBiasCheck = 0;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2200      	movs	r2, #0
 8000cce:	60da      	str	r2, [r3, #12]
    po->tsLastCurrentAdjustment = 0;
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	611a      	str	r2, [r3, #16]
    po->redLedCurrentIndex = (uint8_t)RED_LED_CURRENT_START;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2208      	movs	r2, #8
 8000cda:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
    po->irLedCurrent = DEFAULT_IR_LED_CURRENT;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	220f      	movs	r2, #15
 8000ce2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    po->onBeatDetected = NULL;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2200      	movs	r2, #0
 8000cea:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    CircularBuffer_Init(&po->hrm.readoutsBuffer);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	3358      	adds	r3, #88	@ 0x58
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	f7ff fc3c 	bl	8000570 <CircularBuffer_Init>
}
 8000cf8:	bf00      	nop
 8000cfa:	3708      	adds	r7, #8
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <PulseOximeter_Begin>:

bool PulseOximeter_Begin(PulseOximeter *po, PulseOximeterDebuggingMode debuggingMode)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	460b      	mov	r3, r1
 8000d0a:	70fb      	strb	r3, [r7, #3]
    po->debuggingMode = debuggingMode;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	78fa      	ldrb	r2, [r7, #3]
 8000d10:	705a      	strb	r2, [r3, #1]

    bool ready = MAX30100_Begin(&po->hrm);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	3358      	adds	r3, #88	@ 0x58
 8000d16:	4618      	mov	r0, r3
 8000d18:	f7ff fcbf 	bl	800069a <MAX30100_Begin>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	73fb      	strb	r3, [r7, #15]

    if (!ready)
 8000d20:	7bfb      	ldrb	r3, [r7, #15]
 8000d22:	f083 0301 	eor.w	r3, r3, #1
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d001      	beq.n	8000d30 <PulseOximeter_Begin+0x30>
    {
        // Có thể thêm debug qua UART nếu cần
        return false;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	e02b      	b.n	8000d88 <PulseOximeter_Begin+0x88>
    }

    MAX30100_SetMode(&po->hrm, MAX30100_MODE_SPO2_HR);
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	3358      	adds	r3, #88	@ 0x58
 8000d34:	2103      	movs	r1, #3
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff fcde 	bl	80006f8 <MAX30100_SetMode>
	MAX30100_SetLedsCurrent(&po->hrm, po->irLedCurrent, (LEDCurrent)po->redLedCurrentIndex);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	f893 1041 	ldrb.w	r1, [r3, #65]	@ 0x41
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000d4e:	461a      	mov	r2, r3
 8000d50:	f7ff fd0c 	bl	800076c <MAX30100_SetLedsCurrent>
	// Thay thế 3 dòng dưới đây:
	// MAX30100_SetLedsPulseWidth(&po->hrm, MAX30100_SPC_PW_1600US_16BITS);
	// MAX30100_SetSamplingRate(&po->hrm, MAX30100_SAMPRATE_100HZ);
	// MAX30100_SetHighresModeEnabled(&po->hrm, true);
	// Bằng 1 dòng này:
	MAX30100_ConfigureSPO2(&po->hrm, MAX30100_SAMPRATE_100HZ, MAX30100_SPC_PW_1600US_16BITS, true);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8000d5a:	2301      	movs	r3, #1
 8000d5c:	2203      	movs	r2, #3
 8000d5e:	2101      	movs	r1, #1
 8000d60:	f7ff fcd9 	bl	8000716 <MAX30100_ConfigureSPO2>

    DCRemover_Init(&po->irDCRemover, DC_REMOVER_ALPHA);
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3328      	adds	r3, #40	@ 0x28
 8000d68:	ed9f 0a09 	vldr	s0, [pc, #36]	@ 8000d90 <PulseOximeter_Begin+0x90>
 8000d6c:	4618      	mov	r0, r3
 8000d6e:	f7ff ff57 	bl	8000c20 <DCRemover_Init>
    DCRemover_Init(&po->redDCRemover, DC_REMOVER_ALPHA);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	3330      	adds	r3, #48	@ 0x30
 8000d76:	ed9f 0a06 	vldr	s0, [pc, #24]	@ 8000d90 <PulseOximeter_Begin+0x90>
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff ff50 	bl	8000c20 <DCRemover_Init>

    po->state = PULSEOXIMETER_STATE_IDLE;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2201      	movs	r2, #1
 8000d84:	701a      	strb	r2, [r3, #0]

    return true;
 8000d86:	2301      	movs	r3, #1
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	3710      	adds	r7, #16
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bd80      	pop	{r7, pc}
 8000d90:	3f733333 	.word	0x3f733333

08000d94 <PulseOximeter_Update>:

void PulseOximeter_Update(PulseOximeter *po)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	b082      	sub	sp, #8
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
    MAX30100_Update(&po->hrm);
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3358      	adds	r3, #88	@ 0x58
 8000da0:	4618      	mov	r0, r3
 8000da2:	f7ff fcfb 	bl	800079c <MAX30100_Update>
    checkSample(po);
 8000da6:	6878      	ldr	r0, [r7, #4]
 8000da8:	f000 f834 	bl	8000e14 <checkSample>
    checkCurrentBias(po);
 8000dac:	6878      	ldr	r0, [r7, #4]
 8000dae:	f000 f8b1 	bl	8000f14 <checkCurrentBias>
}
 8000db2:	bf00      	nop
 8000db4:	3708      	adds	r7, #8
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}

08000dba <PulseOximeter_GetHeartRate>:

float PulseOximeter_GetHeartRate(PulseOximeter *po)
{
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b082      	sub	sp, #8
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	6078      	str	r0, [r7, #4]
    return BeatDetector_GetRate(&po->beatDetector);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	3314      	adds	r3, #20
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f7ff fdb0 	bl	800092c <BeatDetector_GetRate>
 8000dcc:	eef0 7a40 	vmov.f32	s15, s0
}
 8000dd0:	eeb0 0a67 	vmov.f32	s0, s15
 8000dd4:	3708      	adds	r7, #8
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}

08000dda <PulseOximeter_GetSpO2>:

uint8_t PulseOximeter_GetSpO2(PulseOximeter *po)
{
 8000dda:	b580      	push	{r7, lr}
 8000ddc:	b082      	sub	sp, #8
 8000dde:	af00      	add	r7, sp, #0
 8000de0:	6078      	str	r0, [r7, #4]
    return SpO2Calculator_GetSpO2(&po->spO2calculator);
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	3344      	adds	r3, #68	@ 0x44
 8000de6:	4618      	mov	r0, r3
 8000de8:	f000 f9d6 	bl	8001198 <SpO2Calculator_GetSpO2>
 8000dec:	4603      	mov	r3, r0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}

08000df6 <PulseOximeter_SetOnBeatDetectedCallback>:
{
    return po->redLedCurrentIndex;
}

void PulseOximeter_SetOnBeatDetectedCallback(PulseOximeter *po, void (*cb)(void))
{
 8000df6:	b480      	push	{r7}
 8000df8:	b083      	sub	sp, #12
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
 8000dfe:	6039      	str	r1, [r7, #0]
    po->onBeatDetected = cb;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	683a      	ldr	r2, [r7, #0]
 8000e04:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
}
 8000e08:	bf00      	nop
 8000e0a:	370c      	adds	r7, #12
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <checkSample>:
}

// --- Hàm nội bộ ---

static void checkSample(PulseOximeter *po)
{
 8000e14:	b590      	push	{r4, r7, lr}
 8000e16:	b089      	sub	sp, #36	@ 0x24
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
    uint16_t rawIRValue, rawRedValue;

    // Lấy tất cả sample có sẵn
    while (MAX30100_GetRawValues(&po->hrm, &rawIRValue, &rawRedValue))
 8000e1c:	e069      	b.n	8000ef2 <checkSample+0xde>
    {
        float irACValue = DCRemover_Step(&po->irDCRemover, (float)rawIRValue);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	3328      	adds	r3, #40	@ 0x28
 8000e22:	8a3a      	ldrh	r2, [r7, #16]
 8000e24:	ee07 2a90 	vmov	s15, r2
 8000e28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e2c:	eeb0 0a67 	vmov.f32	s0, s15
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff ff08 	bl	8000c46 <DCRemover_Step>
 8000e36:	ed87 0a07 	vstr	s0, [r7, #28]
        float redACValue = DCRemover_Step(&po->redDCRemover, (float)rawRedValue);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	3330      	adds	r3, #48	@ 0x30
 8000e3e:	89fa      	ldrh	r2, [r7, #14]
 8000e40:	ee07 2a90 	vmov	s15, r2
 8000e44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000e48:	eeb0 0a67 	vmov.f32	s0, s15
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f7ff fefa 	bl	8000c46 <DCRemover_Step>
 8000e52:	ed87 0a06 	vstr	s0, [r7, #24]

        // Tín hiệu đưa vào beat detector là đảo dấu vì spike âm
        float filteredPulseValue = FilterBuLp1_Step(&po->lpf, -irACValue);
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	3338      	adds	r3, #56	@ 0x38
 8000e5a:	edd7 7a07 	vldr	s15, [r7, #28]
 8000e5e:	eef1 7a67 	vneg.f32	s15, s15
 8000e62:	eeb0 0a67 	vmov.f32	s0, s15
 8000e66:	4618      	mov	r0, r3
 8000e68:	f7ff feaa 	bl	8000bc0 <FilterBuLp1_Step>
 8000e6c:	ed87 0a05 	vstr	s0, [r7, #20]
        bool beatDetected = BeatDetector_AddSample(&po->beatDetector, filteredPulseValue, HAL_GetTick());
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	f103 0414 	add.w	r4, r3, #20
 8000e76:	f001 fe73 	bl	8002b60 <HAL_GetTick>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	ed97 0a05 	vldr	s0, [r7, #20]
 8000e82:	4620      	mov	r0, r4
 8000e84:	f7ff fd7e 	bl	8000984 <BeatDetector_AddSample>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	74fb      	strb	r3, [r7, #19]

        if (BeatDetector_GetRate(&po->beatDetector) > 0)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3314      	adds	r3, #20
 8000e90:	4618      	mov	r0, r3
 8000e92:	f7ff fd4b 	bl	800092c <BeatDetector_GetRate>
 8000e96:	eef0 7a40 	vmov.f32	s15, s0
 8000e9a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ea2:	dd0e      	ble.n	8000ec2 <checkSample+0xae>
        {
            po->state = PULSEOXIMETER_STATE_DETECTING;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	2202      	movs	r2, #2
 8000ea8:	701a      	strb	r2, [r3, #0]
            SpO2Calculator_Update(&po->spO2calculator, irACValue, redACValue, beatDetected);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	3344      	adds	r3, #68	@ 0x44
 8000eae:	7cfa      	ldrb	r2, [r7, #19]
 8000eb0:	4611      	mov	r1, r2
 8000eb2:	edd7 0a06 	vldr	s1, [r7, #24]
 8000eb6:	ed97 0a07 	vldr	s0, [r7, #28]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 f8c6 	bl	800104c <SpO2Calculator_Update>
 8000ec0:	e00b      	b.n	8000eda <checkSample+0xc6>
        }
        else if (po->state == PULSEOXIMETER_STATE_DETECTING)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d107      	bne.n	8000eda <checkSample+0xc6>
        {
            po->state = PULSEOXIMETER_STATE_IDLE;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2201      	movs	r2, #1
 8000ece:	701a      	strb	r2, [r3, #0]
            SpO2Calculator_Reset(&po->spO2calculator);
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	3344      	adds	r3, #68	@ 0x44
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f000 f89d 	bl	8001014 <SpO2Calculator_Reset>
        }

        // Nếu cần debug, có thể gửi giá trị qua UART ở đây

        if (beatDetected && po->onBeatDetected)
 8000eda:	7cfb      	ldrb	r3, [r7, #19]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d008      	beq.n	8000ef2 <checkSample+0xde>
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d003      	beq.n	8000ef2 <checkSample+0xde>
        {
            po->onBeatDetected();
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8000ef0:	4798      	blx	r3
    while (MAX30100_GetRawValues(&po->hrm, &rawIRValue, &rawRedValue))
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	3358      	adds	r3, #88	@ 0x58
 8000ef6:	f107 020e 	add.w	r2, r7, #14
 8000efa:	f107 0110 	add.w	r1, r7, #16
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff fc57 	bl	80007b2 <MAX30100_GetRawValues>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d189      	bne.n	8000e1e <checkSample+0xa>
        }
    }
}
 8000f0a:	bf00      	nop
 8000f0c:	bf00      	nop
 8000f0e:	3724      	adds	r7, #36	@ 0x24
 8000f10:	46bd      	mov	sp, r7
 8000f12:	bd90      	pop	{r4, r7, pc}

08000f14 <checkCurrentBias>:

static void checkCurrentBias(PulseOximeter *po)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	ed2d 8b02 	vpush	{d8}
 8000f1a:	b084      	sub	sp, #16
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]
    // Điều chỉnh dòng LED đỏ để cân bằng DC giữa IR và RED
    if (HAL_GetTick() - po->tsLastBiasCheck > CURRENT_ADJUSTMENT_PERIOD_MS)
 8000f20:	f001 fe1e 	bl	8002b60 <HAL_GetTick>
 8000f24:	4602      	mov	r2, r0
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	68db      	ldr	r3, [r3, #12]
 8000f2a:	1ad3      	subs	r3, r2, r3
 8000f2c:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8000f30:	d967      	bls.n	8001002 <checkCurrentBias+0xee>
    {
        bool changed = false;
 8000f32:	2300      	movs	r3, #0
 8000f34:	73fb      	strb	r3, [r7, #15]
        if (DCRemover_GetDCW(&po->irDCRemover) - DCRemover_GetDCW(&po->redDCRemover) > 70000 && po->redLedCurrentIndex < MAX30100_LED_CURR_50MA)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	3328      	adds	r3, #40	@ 0x28
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f7ff fea9 	bl	8000c92 <DCRemover_GetDCW>
 8000f40:	eeb0 8a40 	vmov.f32	s16, s0
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	3330      	adds	r3, #48	@ 0x30
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f7ff fea2 	bl	8000c92 <DCRemover_GetDCW>
 8000f4e:	eef0 7a40 	vmov.f32	s15, s0
 8000f52:	ee78 7a67 	vsub.f32	s15, s16, s15
 8000f56:	ed9f 7a2e 	vldr	s14, [pc, #184]	@ 8001010 <checkCurrentBias+0xfc>
 8000f5a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000f5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000f62:	dd0f      	ble.n	8000f84 <checkCurrentBias+0x70>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000f6a:	2b0e      	cmp	r3, #14
 8000f6c:	d80a      	bhi.n	8000f84 <checkCurrentBias+0x70>
        {
            ++po->redLedCurrentIndex;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000f74:	3301      	adds	r3, #1
 8000f76:	b2da      	uxtb	r2, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
            changed = true;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	73fb      	strb	r3, [r7, #15]
 8000f82:	e025      	b.n	8000fd0 <checkCurrentBias+0xbc>
        }
        else if (DCRemover_GetDCW(&po->redDCRemover) - DCRemover_GetDCW(&po->irDCRemover) > 70000 && po->redLedCurrentIndex > 0)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3330      	adds	r3, #48	@ 0x30
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff fe82 	bl	8000c92 <DCRemover_GetDCW>
 8000f8e:	eeb0 8a40 	vmov.f32	s16, s0
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	3328      	adds	r3, #40	@ 0x28
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff fe7b 	bl	8000c92 <DCRemover_GetDCW>
 8000f9c:	eef0 7a40 	vmov.f32	s15, s0
 8000fa0:	ee78 7a67 	vsub.f32	s15, s16, s15
 8000fa4:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8001010 <checkCurrentBias+0xfc>
 8000fa8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000fb0:	dd0e      	ble.n	8000fd0 <checkCurrentBias+0xbc>
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d009      	beq.n	8000fd0 <checkCurrentBias+0xbc>
        {
            --po->redLedCurrentIndex;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
            changed = true;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	73fb      	strb	r3, [r7, #15]
        }

        if (changed)
 8000fd0:	7bfb      	ldrb	r3, [r7, #15]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d010      	beq.n	8000ff8 <checkCurrentBias+0xe4>
        {
            MAX30100_SetLedsCurrent(&po->hrm, po->irLedCurrent, (LEDCurrent)po->redLedCurrentIndex);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f103 0058 	add.w	r0, r3, #88	@ 0x58
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f893 1041 	ldrb.w	r1, [r3, #65]	@ 0x41
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8000fe8:	461a      	mov	r2, r3
 8000fea:	f7ff fbbf 	bl	800076c <MAX30100_SetLedsCurrent>
            po->tsLastCurrentAdjustment = HAL_GetTick();
 8000fee:	f001 fdb7 	bl	8002b60 <HAL_GetTick>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	611a      	str	r2, [r3, #16]
            // Có thể gửi giá trị qua UART nếu cần debug
        }

        po->tsLastBiasCheck = HAL_GetTick();
 8000ff8:	f001 fdb2 	bl	8002b60 <HAL_GetTick>
 8000ffc:	4602      	mov	r2, r0
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	60da      	str	r2, [r3, #12]
    }
}
 8001002:	bf00      	nop
 8001004:	3710      	adds	r7, #16
 8001006:	46bd      	mov	sp, r7
 8001008:	ecbd 8b02 	vpop	{d8}
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	4788b800 	.word	0x4788b800

08001014 <SpO2Calculator_Reset>:
    100, 100, 100, 100, 99, 99, 99, 99, 99, 99, 98, 98, 98, 98,
    98, 97, 97, 97, 97, 97, 97, 96, 96, 96, 96, 96, 96, 95, 95,
    95, 95, 95, 95, 94, 94, 94, 94, 94, 93, 93, 93, 93, 93};

void SpO2Calculator_Reset(SpO2Calculator *calc)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
    calc->samplesRecorded = 0;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2200      	movs	r2, #0
 8001020:	60da      	str	r2, [r3, #12]
    calc->redACValueSqSum = 0;
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	f04f 0200 	mov.w	r2, #0
 8001028:	605a      	str	r2, [r3, #4]
    calc->irACValueSqSum = 0;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	f04f 0200 	mov.w	r2, #0
 8001030:	601a      	str	r2, [r3, #0]
    calc->beatsDetectedNum = 0;
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	2200      	movs	r2, #0
 8001036:	721a      	strb	r2, [r3, #8]
    calc->spO2 = 0;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2200      	movs	r2, #0
 800103c:	741a      	strb	r2, [r3, #16]
}
 800103e:	bf00      	nop
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr
	...

0800104c <SpO2Calculator_Update>:

void SpO2Calculator_Update(SpO2Calculator *calc, float irACValue, float redACValue, bool beatDetected)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	ed2d 8b02 	vpush	{d8}
 8001052:	b088      	sub	sp, #32
 8001054:	af00      	add	r7, sp, #0
 8001056:	6178      	str	r0, [r7, #20]
 8001058:	ed87 0a04 	vstr	s0, [r7, #16]
 800105c:	edc7 0a03 	vstr	s1, [r7, #12]
 8001060:	460b      	mov	r3, r1
 8001062:	72fb      	strb	r3, [r7, #11]
    calc->irACValueSqSum += irACValue * irACValue;
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	ed93 7a00 	vldr	s14, [r3]
 800106a:	edd7 7a04 	vldr	s15, [r7, #16]
 800106e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001072:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	edc3 7a00 	vstr	s15, [r3]
    calc->redACValueSqSum += redACValue * redACValue;
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	ed93 7a01 	vldr	s14, [r3, #4]
 8001082:	edd7 7a03 	vldr	s15, [r7, #12]
 8001086:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800108a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800108e:	697b      	ldr	r3, [r7, #20]
 8001090:	edc3 7a01 	vstr	s15, [r3, #4]
    calc->samplesRecorded++;
 8001094:	697b      	ldr	r3, [r7, #20]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	1c5a      	adds	r2, r3, #1
 800109a:	697b      	ldr	r3, [r7, #20]
 800109c:	60da      	str	r2, [r3, #12]

    if (beatDetected)
 800109e:	7afb      	ldrb	r3, [r7, #11]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d06b      	beq.n	800117c <SpO2Calculator_Update+0x130>
    {
        calc->beatsDetectedNum++;
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	7a1b      	ldrb	r3, [r3, #8]
 80010a8:	3301      	adds	r3, #1
 80010aa:	b2da      	uxtb	r2, r3
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	721a      	strb	r2, [r3, #8]
        if (calc->beatsDetectedNum == CALCULATE_EVERY_N_BEATS)
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	7a1b      	ldrb	r3, [r3, #8]
 80010b4:	2b03      	cmp	r3, #3
 80010b6:	d161      	bne.n	800117c <SpO2Calculator_Update+0x130>
        {
            float acSqRatio = 100.0f * logf(calc->redACValueSqSum / calc->samplesRecorded) / logf(calc->irACValueSqSum / calc->samplesRecorded);
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	ed93 7a01 	vldr	s14, [r3, #4]
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	68db      	ldr	r3, [r3, #12]
 80010c2:	ee07 3a90 	vmov	s15, r3
 80010c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010ca:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80010ce:	eeb0 0a66 	vmov.f32	s0, s13
 80010d2:	f005 fd43 	bl	8006b5c <logf>
 80010d6:	eef0 7a40 	vmov.f32	s15, s0
 80010da:	ed9f 7a2b 	vldr	s14, [pc, #172]	@ 8001188 <SpO2Calculator_Update+0x13c>
 80010de:	ee27 8a87 	vmul.f32	s16, s15, s14
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	ed93 7a00 	vldr	s14, [r3]
 80010e8:	697b      	ldr	r3, [r7, #20]
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	ee07 3a90 	vmov	s15, r3
 80010f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010f4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80010f8:	eeb0 0a66 	vmov.f32	s0, s13
 80010fc:	f005 fd2e 	bl	8006b5c <logf>
 8001100:	eeb0 7a40 	vmov.f32	s14, s0
 8001104:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8001108:	edc7 7a06 	vstr	s15, [r7, #24]
            uint8_t index = 0;
 800110c:	2300      	movs	r3, #0
 800110e:	77fb      	strb	r3, [r7, #31]

            if (acSqRatio > 66)
 8001110:	edd7 7a06 	vldr	s15, [r7, #24]
 8001114:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 800118c <SpO2Calculator_Update+0x140>
 8001118:	eef4 7ac7 	vcmpe.f32	s15, s14
 800111c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001120:	dd0a      	ble.n	8001138 <SpO2Calculator_Update+0xec>
            {
                index = (uint8_t)acSqRatio - 66;
 8001122:	edd7 7a06 	vldr	s15, [r7, #24]
 8001126:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800112a:	edc7 7a01 	vstr	s15, [r7, #4]
 800112e:	793b      	ldrb	r3, [r7, #4]
 8001130:	b2db      	uxtb	r3, r3
 8001132:	3b42      	subs	r3, #66	@ 0x42
 8001134:	77fb      	strb	r3, [r7, #31]
 8001136:	e012      	b.n	800115e <SpO2Calculator_Update+0x112>
            }
            else if (acSqRatio > 50)
 8001138:	edd7 7a06 	vldr	s15, [r7, #24]
 800113c:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001190 <SpO2Calculator_Update+0x144>
 8001140:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001148:	dd09      	ble.n	800115e <SpO2Calculator_Update+0x112>
            {
                index = (uint8_t)acSqRatio - 50;
 800114a:	edd7 7a06 	vldr	s15, [r7, #24]
 800114e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001152:	edc7 7a01 	vstr	s15, [r7, #4]
 8001156:	793b      	ldrb	r3, [r7, #4]
 8001158:	b2db      	uxtb	r3, r3
 800115a:	3b32      	subs	r3, #50	@ 0x32
 800115c:	77fb      	strb	r3, [r7, #31]
            }
            // Reset sau mỗi lần tính toán
            SpO2Calculator_Reset(calc);
 800115e:	6978      	ldr	r0, [r7, #20]
 8001160:	f7ff ff58 	bl	8001014 <SpO2Calculator_Reset>

            if (index < 43)
 8001164:	7ffb      	ldrb	r3, [r7, #31]
 8001166:	2b2a      	cmp	r3, #42	@ 0x2a
 8001168:	d805      	bhi.n	8001176 <SpO2Calculator_Update+0x12a>
            {
                calc->spO2 = SpO2Calculator_spO2LUT[index];
 800116a:	7ffb      	ldrb	r3, [r7, #31]
 800116c:	4a09      	ldr	r2, [pc, #36]	@ (8001194 <SpO2Calculator_Update+0x148>)
 800116e:	5cd2      	ldrb	r2, [r2, r3]
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	741a      	strb	r2, [r3, #16]
            {
                calc->spO2 = SpO2Calculator_spO2LUT[42];
            }
        }
    }
}
 8001174:	e002      	b.n	800117c <SpO2Calculator_Update+0x130>
                calc->spO2 = SpO2Calculator_spO2LUT[42];
 8001176:	225d      	movs	r2, #93	@ 0x5d
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	741a      	strb	r2, [r3, #16]
}
 800117c:	bf00      	nop
 800117e:	3720      	adds	r7, #32
 8001180:	46bd      	mov	sp, r7
 8001182:	ecbd 8b02 	vpop	{d8}
 8001186:	bd80      	pop	{r7, pc}
 8001188:	42c80000 	.word	0x42c80000
 800118c:	42840000 	.word	0x42840000
 8001190:	42480000 	.word	0x42480000
 8001194:	08006ea4 	.word	0x08006ea4

08001198 <SpO2Calculator_GetSpO2>:

uint8_t SpO2Calculator_GetSpO2(SpO2Calculator *calc)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
    return calc->spO2;
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	7c1b      	ldrb	r3, [r3, #16]
 80011a4:	4618      	mov	r0, r3
 80011a6:	370c      	adds	r7, #12
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <setCalibrationMatrix>:
#include "calibrate.h"

int setCalibrationMatrix( POINT_T * displayPtr,
						  POINT_T * screenPtr,
                          MATRIX * matrixPtr)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b087      	sub	sp, #28
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	60b9      	str	r1, [r7, #8]
 80011ba:	607a      	str	r2, [r7, #4]

    int  retValue = OK ;
 80011bc:	2300      	movs	r3, #0
 80011be:	617b      	str	r3, [r7, #20]



    matrixPtr->Divider = ((screenPtr[0].x - screenPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) -
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	3310      	adds	r3, #16
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	68ba      	ldr	r2, [r7, #8]
 80011ce:	3208      	adds	r2, #8
 80011d0:	6851      	ldr	r1, [r2, #4]
 80011d2:	68ba      	ldr	r2, [r7, #8]
 80011d4:	3210      	adds	r2, #16
 80011d6:	6852      	ldr	r2, [r2, #4]
 80011d8:	1a8a      	subs	r2, r1, r2
 80011da:	fb03 f202 	mul.w	r2, r3, r2
                         ((screenPtr[1].x - screenPtr[2].x) * (screenPtr[0].y - screenPtr[2].y)) ;
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	3308      	adds	r3, #8
 80011e2:	6819      	ldr	r1, [r3, #0]
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	3310      	adds	r3, #16
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	1acb      	subs	r3, r1, r3
 80011ec:	68b9      	ldr	r1, [r7, #8]
 80011ee:	6848      	ldr	r0, [r1, #4]
 80011f0:	68b9      	ldr	r1, [r7, #8]
 80011f2:	3110      	adds	r1, #16
 80011f4:	6849      	ldr	r1, [r1, #4]
 80011f6:	1a41      	subs	r1, r0, r1
 80011f8:	fb01 f303 	mul.w	r3, r1, r3
    matrixPtr->Divider = ((screenPtr[0].x - screenPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) -
 80011fc:	1ad2      	subs	r2, r2, r3
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	619a      	str	r2, [r3, #24]

    if( matrixPtr->Divider == 0 )
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d103      	bne.n	8001212 <setCalibrationMatrix+0x62>
    {
        retValue = NOT_OK ;
 800120a:	f04f 33ff 	mov.w	r3, #4294967295
 800120e:	617b      	str	r3, [r7, #20]
 8001210:	e105      	b.n	800141e <setCalibrationMatrix+0x26e>
    }
    else
    {
        matrixPtr->An = ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) -
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681a      	ldr	r2, [r3, #0]
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	3310      	adds	r3, #16
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	1ad3      	subs	r3, r2, r3
 800121e:	68ba      	ldr	r2, [r7, #8]
 8001220:	3208      	adds	r2, #8
 8001222:	6851      	ldr	r1, [r2, #4]
 8001224:	68ba      	ldr	r2, [r7, #8]
 8001226:	3210      	adds	r2, #16
 8001228:	6852      	ldr	r2, [r2, #4]
 800122a:	1a8a      	subs	r2, r1, r2
 800122c:	fb03 f202 	mul.w	r2, r3, r2
                        ((displayPtr[1].x - displayPtr[2].x) * (screenPtr[0].y - screenPtr[2].y)) ;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	3308      	adds	r3, #8
 8001234:	6819      	ldr	r1, [r3, #0]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	3310      	adds	r3, #16
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	1acb      	subs	r3, r1, r3
 800123e:	68b9      	ldr	r1, [r7, #8]
 8001240:	6848      	ldr	r0, [r1, #4]
 8001242:	68b9      	ldr	r1, [r7, #8]
 8001244:	3110      	adds	r1, #16
 8001246:	6849      	ldr	r1, [r1, #4]
 8001248:	1a41      	subs	r1, r0, r1
 800124a:	fb01 f303 	mul.w	r3, r1, r3
        matrixPtr->An = ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].y - screenPtr[2].y)) -
 800124e:	1ad2      	subs	r2, r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	601a      	str	r2, [r3, #0]

        matrixPtr->Bn = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].x - displayPtr[2].x)) -
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	681a      	ldr	r2, [r3, #0]
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	3310      	adds	r3, #16
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	1ad3      	subs	r3, r2, r3
 8001260:	68fa      	ldr	r2, [r7, #12]
 8001262:	3208      	adds	r2, #8
 8001264:	6811      	ldr	r1, [r2, #0]
 8001266:	68fa      	ldr	r2, [r7, #12]
 8001268:	3210      	adds	r2, #16
 800126a:	6812      	ldr	r2, [r2, #0]
 800126c:	1a8a      	subs	r2, r1, r2
 800126e:	fb03 f202 	mul.w	r2, r3, r2
                        ((displayPtr[0].x - displayPtr[2].x) * (screenPtr[1].x - screenPtr[2].x)) ;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	6819      	ldr	r1, [r3, #0]
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	3310      	adds	r3, #16
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	1acb      	subs	r3, r1, r3
 800127e:	68b9      	ldr	r1, [r7, #8]
 8001280:	3108      	adds	r1, #8
 8001282:	6808      	ldr	r0, [r1, #0]
 8001284:	68b9      	ldr	r1, [r7, #8]
 8001286:	3110      	adds	r1, #16
 8001288:	6809      	ldr	r1, [r1, #0]
 800128a:	1a41      	subs	r1, r0, r1
 800128c:	fb01 f303 	mul.w	r3, r1, r3
        matrixPtr->Bn = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].x - displayPtr[2].x)) -
 8001290:	1ad2      	subs	r2, r2, r3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	605a      	str	r2, [r3, #4]

        matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	3310      	adds	r3, #16
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	68fa      	ldr	r2, [r7, #12]
 800129e:	3208      	adds	r2, #8
 80012a0:	6812      	ldr	r2, [r2, #0]
 80012a2:	fb03 f202 	mul.w	r2, r3, r2
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	3308      	adds	r3, #8
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	68f9      	ldr	r1, [r7, #12]
 80012ae:	3110      	adds	r1, #16
 80012b0:	6809      	ldr	r1, [r1, #0]
 80012b2:	fb01 f303 	mul.w	r3, r1, r3
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	68ba      	ldr	r2, [r7, #8]
 80012ba:	6852      	ldr	r2, [r2, #4]
 80012bc:	fb03 f202 	mul.w	r2, r3, r2
                        (screenPtr[0].x * displayPtr[2].x - screenPtr[2].x * displayPtr[0].x) * screenPtr[1].y +
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	68f9      	ldr	r1, [r7, #12]
 80012c6:	3110      	adds	r1, #16
 80012c8:	6809      	ldr	r1, [r1, #0]
 80012ca:	fb03 f101 	mul.w	r1, r3, r1
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	3310      	adds	r3, #16
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	68f8      	ldr	r0, [r7, #12]
 80012d6:	6800      	ldr	r0, [r0, #0]
 80012d8:	fb00 f303 	mul.w	r3, r0, r3
 80012dc:	1acb      	subs	r3, r1, r3
 80012de:	68b9      	ldr	r1, [r7, #8]
 80012e0:	3108      	adds	r1, #8
 80012e2:	6849      	ldr	r1, [r1, #4]
 80012e4:	fb01 f303 	mul.w	r3, r1, r3
        matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
 80012e8:	441a      	add	r2, r3
                        (screenPtr[1].x * displayPtr[0].x - screenPtr[0].x * displayPtr[1].x) * screenPtr[2].y ;
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	3308      	adds	r3, #8
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	68f9      	ldr	r1, [r7, #12]
 80012f2:	6809      	ldr	r1, [r1, #0]
 80012f4:	fb03 f101 	mul.w	r1, r3, r1
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	68f8      	ldr	r0, [r7, #12]
 80012fe:	3008      	adds	r0, #8
 8001300:	6800      	ldr	r0, [r0, #0]
 8001302:	fb00 f303 	mul.w	r3, r0, r3
 8001306:	1acb      	subs	r3, r1, r3
 8001308:	68b9      	ldr	r1, [r7, #8]
 800130a:	3110      	adds	r1, #16
 800130c:	6849      	ldr	r1, [r1, #4]
 800130e:	fb01 f303 	mul.w	r3, r1, r3
                        (screenPtr[0].x * displayPtr[2].x - screenPtr[2].x * displayPtr[0].x) * screenPtr[1].y +
 8001312:	441a      	add	r2, r3
        matrixPtr->Cn = (screenPtr[2].x * displayPtr[1].x - screenPtr[1].x * displayPtr[2].x) * screenPtr[0].y +
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	609a      	str	r2, [r3, #8]

        matrixPtr->Dn = ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].y - screenPtr[2].y)) -
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	685a      	ldr	r2, [r3, #4]
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	3310      	adds	r3, #16
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	68ba      	ldr	r2, [r7, #8]
 8001326:	3208      	adds	r2, #8
 8001328:	6851      	ldr	r1, [r2, #4]
 800132a:	68ba      	ldr	r2, [r7, #8]
 800132c:	3210      	adds	r2, #16
 800132e:	6852      	ldr	r2, [r2, #4]
 8001330:	1a8a      	subs	r2, r1, r2
 8001332:	fb03 f202 	mul.w	r2, r3, r2
                        ((displayPtr[1].y - displayPtr[2].y) * (screenPtr[0].y - screenPtr[2].y)) ;
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	3308      	adds	r3, #8
 800133a:	6859      	ldr	r1, [r3, #4]
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	3310      	adds	r3, #16
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	1acb      	subs	r3, r1, r3
 8001344:	68b9      	ldr	r1, [r7, #8]
 8001346:	6848      	ldr	r0, [r1, #4]
 8001348:	68b9      	ldr	r1, [r7, #8]
 800134a:	3110      	adds	r1, #16
 800134c:	6849      	ldr	r1, [r1, #4]
 800134e:	1a41      	subs	r1, r0, r1
 8001350:	fb01 f303 	mul.w	r3, r1, r3
        matrixPtr->Dn = ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].y - screenPtr[2].y)) -
 8001354:	1ad2      	subs	r2, r2, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	60da      	str	r2, [r3, #12]

        matrixPtr->En = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].y - displayPtr[2].y)) -
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	681a      	ldr	r2, [r3, #0]
 800135e:	68bb      	ldr	r3, [r7, #8]
 8001360:	3310      	adds	r3, #16
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	1ad3      	subs	r3, r2, r3
 8001366:	68fa      	ldr	r2, [r7, #12]
 8001368:	3208      	adds	r2, #8
 800136a:	6851      	ldr	r1, [r2, #4]
 800136c:	68fa      	ldr	r2, [r7, #12]
 800136e:	3210      	adds	r2, #16
 8001370:	6852      	ldr	r2, [r2, #4]
 8001372:	1a8a      	subs	r2, r1, r2
 8001374:	fb03 f202 	mul.w	r2, r3, r2
                        ((displayPtr[0].y - displayPtr[2].y) * (screenPtr[1].x - screenPtr[2].x)) ;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	6859      	ldr	r1, [r3, #4]
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	3310      	adds	r3, #16
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	1acb      	subs	r3, r1, r3
 8001384:	68b9      	ldr	r1, [r7, #8]
 8001386:	3108      	adds	r1, #8
 8001388:	6808      	ldr	r0, [r1, #0]
 800138a:	68b9      	ldr	r1, [r7, #8]
 800138c:	3110      	adds	r1, #16
 800138e:	6809      	ldr	r1, [r1, #0]
 8001390:	1a41      	subs	r1, r0, r1
 8001392:	fb01 f303 	mul.w	r3, r1, r3
        matrixPtr->En = ((screenPtr[0].x - screenPtr[2].x) * (displayPtr[1].y - displayPtr[2].y)) -
 8001396:	1ad2      	subs	r2, r2, r3
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	611a      	str	r2, [r3, #16]

        matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
 800139c:	68bb      	ldr	r3, [r7, #8]
 800139e:	3310      	adds	r3, #16
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	68fa      	ldr	r2, [r7, #12]
 80013a4:	3208      	adds	r2, #8
 80013a6:	6852      	ldr	r2, [r2, #4]
 80013a8:	fb03 f202 	mul.w	r2, r3, r2
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	3308      	adds	r3, #8
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	68f9      	ldr	r1, [r7, #12]
 80013b4:	3110      	adds	r1, #16
 80013b6:	6849      	ldr	r1, [r1, #4]
 80013b8:	fb01 f303 	mul.w	r3, r1, r3
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	68ba      	ldr	r2, [r7, #8]
 80013c0:	6852      	ldr	r2, [r2, #4]
 80013c2:	fb03 f202 	mul.w	r2, r3, r2
                        (screenPtr[0].x * displayPtr[2].y - screenPtr[2].x * displayPtr[0].y) * screenPtr[1].y +
 80013c6:	68bb      	ldr	r3, [r7, #8]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	68f9      	ldr	r1, [r7, #12]
 80013cc:	3110      	adds	r1, #16
 80013ce:	6849      	ldr	r1, [r1, #4]
 80013d0:	fb03 f101 	mul.w	r1, r3, r1
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	3310      	adds	r3, #16
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	68f8      	ldr	r0, [r7, #12]
 80013dc:	6840      	ldr	r0, [r0, #4]
 80013de:	fb00 f303 	mul.w	r3, r0, r3
 80013e2:	1acb      	subs	r3, r1, r3
 80013e4:	68b9      	ldr	r1, [r7, #8]
 80013e6:	3108      	adds	r1, #8
 80013e8:	6849      	ldr	r1, [r1, #4]
 80013ea:	fb01 f303 	mul.w	r3, r1, r3
        matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
 80013ee:	441a      	add	r2, r3
                        (screenPtr[1].x * displayPtr[0].y - screenPtr[0].x * displayPtr[1].y) * screenPtr[2].y ;
 80013f0:	68bb      	ldr	r3, [r7, #8]
 80013f2:	3308      	adds	r3, #8
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	68f9      	ldr	r1, [r7, #12]
 80013f8:	6849      	ldr	r1, [r1, #4]
 80013fa:	fb03 f101 	mul.w	r1, r3, r1
 80013fe:	68bb      	ldr	r3, [r7, #8]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	68f8      	ldr	r0, [r7, #12]
 8001404:	3008      	adds	r0, #8
 8001406:	6840      	ldr	r0, [r0, #4]
 8001408:	fb00 f303 	mul.w	r3, r0, r3
 800140c:	1acb      	subs	r3, r1, r3
 800140e:	68b9      	ldr	r1, [r7, #8]
 8001410:	3110      	adds	r1, #16
 8001412:	6849      	ldr	r1, [r1, #4]
 8001414:	fb01 f303 	mul.w	r3, r1, r3
                        (screenPtr[0].x * displayPtr[2].y - screenPtr[2].x * displayPtr[0].y) * screenPtr[1].y +
 8001418:	441a      	add	r2, r3
        matrixPtr->Fn = (screenPtr[2].x * displayPtr[1].y - screenPtr[1].x * displayPtr[2].y) * screenPtr[0].y +
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	615a      	str	r2, [r3, #20]
    }

    return( retValue ) ;
 800141e:	697b      	ldr	r3, [r7, #20]

} /* end of setCalibrationMatrix() */
 8001420:	4618      	mov	r0, r3
 8001422:	371c      	adds	r7, #28
 8001424:	46bd      	mov	sp, r7
 8001426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142a:	4770      	bx	lr

0800142c <lcdInit>:
                                bool colorOrder,
                                bool horizontalRefreshOrder);


void lcdInit(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af02      	add	r7, sp, #8
  lcdPortraitConfig = lcdBuildMemoryAccessControlConfig(
 8001432:	2300      	movs	r3, #0
 8001434:	9301      	str	r3, [sp, #4]
 8001436:	2301      	movs	r3, #1
 8001438:	9300      	str	r3, [sp, #0]
 800143a:	2300      	movs	r3, #0
 800143c:	2200      	movs	r2, #0
 800143e:	2101      	movs	r1, #1
 8001440:	2000      	movs	r0, #0
 8001442:	f000 fc0b 	bl	8001c5c <lcdBuildMemoryAccessControlConfig>
 8001446:	4603      	mov	r3, r0
 8001448:	461a      	mov	r2, r3
 800144a:	4bae      	ldr	r3, [pc, #696]	@ (8001704 <lcdInit+0x2d8>)
 800144c:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlNormalOrder,		// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeConfig = lcdBuildMemoryAccessControlConfig(
 800144e:	2300      	movs	r3, #0
 8001450:	9301      	str	r3, [sp, #4]
 8001452:	2301      	movs	r3, #1
 8001454:	9300      	str	r3, [sp, #0]
 8001456:	2300      	movs	r3, #0
 8001458:	2201      	movs	r2, #1
 800145a:	2100      	movs	r1, #0
 800145c:	2000      	movs	r0, #0
 800145e:	f000 fbfd 	bl	8001c5c <lcdBuildMemoryAccessControlConfig>
 8001462:	4603      	mov	r3, r0
 8001464:	461a      	mov	r2, r3
 8001466:	4ba8      	ldr	r3, [pc, #672]	@ (8001708 <lcdInit+0x2dc>)
 8001468:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdPortraitMirrorConfig = lcdBuildMemoryAccessControlConfig(
 800146a:	2300      	movs	r3, #0
 800146c:	9301      	str	r3, [sp, #4]
 800146e:	2301      	movs	r3, #1
 8001470:	9300      	str	r3, [sp, #0]
 8001472:	2300      	movs	r3, #0
 8001474:	2200      	movs	r2, #0
 8001476:	2100      	movs	r1, #0
 8001478:	2001      	movs	r0, #1
 800147a:	f000 fbef 	bl	8001c5c <lcdBuildMemoryAccessControlConfig>
 800147e:	4603      	mov	r3, r0
 8001480:	461a      	mov	r2, r3
 8001482:	4ba2      	ldr	r3, [pc, #648]	@ (800170c <lcdInit+0x2e0>)
 8001484:	701a      	strb	r2, [r3, #0]
		                                            MemoryAccessControlNormalOrder,		// rowColumnExchange
		                                            MemoryAccessControlNormalOrder,		// verticalRefreshOrder
		                                            MemoryAccessControlColorOrderBGR,	// colorOrder
		                                            MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdLandscapeMirrorConfig = lcdBuildMemoryAccessControlConfig(
 8001486:	2300      	movs	r3, #0
 8001488:	9301      	str	r3, [sp, #4]
 800148a:	2301      	movs	r3, #1
 800148c:	9300      	str	r3, [sp, #0]
 800148e:	2300      	movs	r3, #0
 8001490:	2201      	movs	r2, #1
 8001492:	2101      	movs	r1, #1
 8001494:	2001      	movs	r0, #1
 8001496:	f000 fbe1 	bl	8001c5c <lcdBuildMemoryAccessControlConfig>
 800149a:	4603      	mov	r3, r0
 800149c:	461a      	mov	r2, r3
 800149e:	4b9c      	ldr	r3, [pc, #624]	@ (8001710 <lcdInit+0x2e4>)
 80014a0:	701a      	strb	r2, [r3, #0]
                                                    MemoryAccessControlReverseOrder,	// rowColumnExchange
                                                    MemoryAccessControlNormalOrder,		// verticalRefreshOrder
                                                    MemoryAccessControlColorOrderBGR,	// colorOrder
                                                    MemoryAccessControlNormalOrder);	// horizontalRefreshOrder

  lcdReset();
 80014a2:	f000 fbb1 	bl	8001c08 <lcdReset>

  lcdWriteCommand(ILI9341_DISPLAYOFF);
 80014a6:	2028      	movs	r0, #40	@ 0x28
 80014a8:	f000 fbb8 	bl	8001c1c <lcdWriteCommand>

  lcdWriteCommand(0xCF);
 80014ac:	20cf      	movs	r0, #207	@ 0xcf
 80014ae:	f000 fbb5 	bl	8001c1c <lcdWriteCommand>
  lcdWriteData(0x00);
 80014b2:	2000      	movs	r0, #0
 80014b4:	f000 fbc2 	bl	8001c3c <lcdWriteData>
  lcdWriteData(0x83);
 80014b8:	2083      	movs	r0, #131	@ 0x83
 80014ba:	f000 fbbf 	bl	8001c3c <lcdWriteData>
  lcdWriteData(0x30);
 80014be:	2030      	movs	r0, #48	@ 0x30
 80014c0:	f000 fbbc 	bl	8001c3c <lcdWriteData>

  lcdWriteCommand(0xED);
 80014c4:	20ed      	movs	r0, #237	@ 0xed
 80014c6:	f000 fba9 	bl	8001c1c <lcdWriteCommand>
  lcdWriteData(0x64);
 80014ca:	2064      	movs	r0, #100	@ 0x64
 80014cc:	f000 fbb6 	bl	8001c3c <lcdWriteData>
  lcdWriteData(0x03);
 80014d0:	2003      	movs	r0, #3
 80014d2:	f000 fbb3 	bl	8001c3c <lcdWriteData>
  lcdWriteData(0x12);
 80014d6:	2012      	movs	r0, #18
 80014d8:	f000 fbb0 	bl	8001c3c <lcdWriteData>
  lcdWriteData(0x81);
 80014dc:	2081      	movs	r0, #129	@ 0x81
 80014de:	f000 fbad 	bl	8001c3c <lcdWriteData>

  lcdWriteCommand(0xE8);
 80014e2:	20e8      	movs	r0, #232	@ 0xe8
 80014e4:	f000 fb9a 	bl	8001c1c <lcdWriteCommand>
  lcdWriteData(0x85);
 80014e8:	2085      	movs	r0, #133	@ 0x85
 80014ea:	f000 fba7 	bl	8001c3c <lcdWriteData>
  lcdWriteData(0x01);
 80014ee:	2001      	movs	r0, #1
 80014f0:	f000 fba4 	bl	8001c3c <lcdWriteData>
  lcdWriteData(0x79);
 80014f4:	2079      	movs	r0, #121	@ 0x79
 80014f6:	f000 fba1 	bl	8001c3c <lcdWriteData>

  lcdWriteCommand(0xCB);
 80014fa:	20cb      	movs	r0, #203	@ 0xcb
 80014fc:	f000 fb8e 	bl	8001c1c <lcdWriteCommand>
  lcdWriteData(0x39);
 8001500:	2039      	movs	r0, #57	@ 0x39
 8001502:	f000 fb9b 	bl	8001c3c <lcdWriteData>
  lcdWriteData(0x2C);
 8001506:	202c      	movs	r0, #44	@ 0x2c
 8001508:	f000 fb98 	bl	8001c3c <lcdWriteData>
  lcdWriteData(0x00);
 800150c:	2000      	movs	r0, #0
 800150e:	f000 fb95 	bl	8001c3c <lcdWriteData>
  lcdWriteData(0x34);
 8001512:	2034      	movs	r0, #52	@ 0x34
 8001514:	f000 fb92 	bl	8001c3c <lcdWriteData>
  lcdWriteData(0x02);
 8001518:	2002      	movs	r0, #2
 800151a:	f000 fb8f 	bl	8001c3c <lcdWriteData>

  lcdWriteCommand(0xF7);
 800151e:	20f7      	movs	r0, #247	@ 0xf7
 8001520:	f000 fb7c 	bl	8001c1c <lcdWriteCommand>
  lcdWriteData(0x20);
 8001524:	2020      	movs	r0, #32
 8001526:	f000 fb89 	bl	8001c3c <lcdWriteData>

  lcdWriteCommand(0xEA);
 800152a:	20ea      	movs	r0, #234	@ 0xea
 800152c:	f000 fb76 	bl	8001c1c <lcdWriteCommand>
  lcdWriteData(0x00);
 8001530:	2000      	movs	r0, #0
 8001532:	f000 fb83 	bl	8001c3c <lcdWriteData>
  lcdWriteData(0x00);
 8001536:	2000      	movs	r0, #0
 8001538:	f000 fb80 	bl	8001c3c <lcdWriteData>

  lcdWriteCommand(ILI9341_POWERCONTROL1);
 800153c:	20c0      	movs	r0, #192	@ 0xc0
 800153e:	f000 fb6d 	bl	8001c1c <lcdWriteCommand>
  lcdWriteData(0x26);
 8001542:	2026      	movs	r0, #38	@ 0x26
 8001544:	f000 fb7a 	bl	8001c3c <lcdWriteData>

  lcdWriteCommand(ILI9341_POWERCONTROL2);
 8001548:	20c1      	movs	r0, #193	@ 0xc1
 800154a:	f000 fb67 	bl	8001c1c <lcdWriteCommand>
  lcdWriteData(0x11);
 800154e:	2011      	movs	r0, #17
 8001550:	f000 fb74 	bl	8001c3c <lcdWriteData>

  lcdWriteCommand(ILI9341_VCOMCONTROL1);
 8001554:	20c5      	movs	r0, #197	@ 0xc5
 8001556:	f000 fb61 	bl	8001c1c <lcdWriteCommand>
  lcdWriteData(0x35);
 800155a:	2035      	movs	r0, #53	@ 0x35
 800155c:	f000 fb6e 	bl	8001c3c <lcdWriteData>
  lcdWriteData(0x3E);
 8001560:	203e      	movs	r0, #62	@ 0x3e
 8001562:	f000 fb6b 	bl	8001c3c <lcdWriteData>

  lcdWriteCommand(ILI9341_VCOMCONTROL2);
 8001566:	20c7      	movs	r0, #199	@ 0xc7
 8001568:	f000 fb58 	bl	8001c1c <lcdWriteCommand>
  lcdWriteData(0xBE);
 800156c:	20be      	movs	r0, #190	@ 0xbe
 800156e:	f000 fb65 	bl	8001c3c <lcdWriteData>

  lcdWriteCommand(ILI9341_MEMCONTROL);
 8001572:	2036      	movs	r0, #54	@ 0x36
 8001574:	f000 fb52 	bl	8001c1c <lcdWriteCommand>
  lcdWriteData(lcdPortraitConfig);
 8001578:	4b62      	ldr	r3, [pc, #392]	@ (8001704 <lcdInit+0x2d8>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f000 fb5d 	bl	8001c3c <lcdWriteData>

  lcdWriteCommand(ILI9341_PIXELFORMAT);
 8001582:	203a      	movs	r0, #58	@ 0x3a
 8001584:	f000 fb4a 	bl	8001c1c <lcdWriteCommand>
  lcdWriteData(0x55);
 8001588:	2055      	movs	r0, #85	@ 0x55
 800158a:	f000 fb57 	bl	8001c3c <lcdWriteData>

  lcdWriteCommand(ILI9341_FRAMECONTROLNORMAL);
 800158e:	20b1      	movs	r0, #177	@ 0xb1
 8001590:	f000 fb44 	bl	8001c1c <lcdWriteCommand>
  lcdWriteData(0x00);
 8001594:	2000      	movs	r0, #0
 8001596:	f000 fb51 	bl	8001c3c <lcdWriteData>
  lcdWriteData(0x1B);
 800159a:	201b      	movs	r0, #27
 800159c:	f000 fb4e 	bl	8001c3c <lcdWriteData>

  lcdWriteCommand(0xF2);
 80015a0:	20f2      	movs	r0, #242	@ 0xf2
 80015a2:	f000 fb3b 	bl	8001c1c <lcdWriteCommand>
  lcdWriteData(0x08);
 80015a6:	2008      	movs	r0, #8
 80015a8:	f000 fb48 	bl	8001c3c <lcdWriteData>

  lcdWriteCommand(ILI9341_GAMMASET);
 80015ac:	2026      	movs	r0, #38	@ 0x26
 80015ae:	f000 fb35 	bl	8001c1c <lcdWriteCommand>
  lcdWriteData(0x01);
 80015b2:	2001      	movs	r0, #1
 80015b4:	f000 fb42 	bl	8001c3c <lcdWriteData>

  lcdWriteCommand(ILI9341_POSITIVEGAMMCORR);
 80015b8:	20e0      	movs	r0, #224	@ 0xe0
 80015ba:	f000 fb2f 	bl	8001c1c <lcdWriteCommand>
  lcdWriteData(0x1F);
 80015be:	201f      	movs	r0, #31
 80015c0:	f000 fb3c 	bl	8001c3c <lcdWriteData>
  lcdWriteData(0x1A);
 80015c4:	201a      	movs	r0, #26
 80015c6:	f000 fb39 	bl	8001c3c <lcdWriteData>
  lcdWriteData(0x18);
 80015ca:	2018      	movs	r0, #24
 80015cc:	f000 fb36 	bl	8001c3c <lcdWriteData>
  lcdWriteData(0x0A);
 80015d0:	200a      	movs	r0, #10
 80015d2:	f000 fb33 	bl	8001c3c <lcdWriteData>
  lcdWriteData(0x0F);
 80015d6:	200f      	movs	r0, #15
 80015d8:	f000 fb30 	bl	8001c3c <lcdWriteData>
  lcdWriteData(0x06);
 80015dc:	2006      	movs	r0, #6
 80015de:	f000 fb2d 	bl	8001c3c <lcdWriteData>
  lcdWriteData(0x45);
 80015e2:	2045      	movs	r0, #69	@ 0x45
 80015e4:	f000 fb2a 	bl	8001c3c <lcdWriteData>
  lcdWriteData(0x87);
 80015e8:	2087      	movs	r0, #135	@ 0x87
 80015ea:	f000 fb27 	bl	8001c3c <lcdWriteData>
  lcdWriteData(0x32);
 80015ee:	2032      	movs	r0, #50	@ 0x32
 80015f0:	f000 fb24 	bl	8001c3c <lcdWriteData>
  lcdWriteData(0x0A);
 80015f4:	200a      	movs	r0, #10
 80015f6:	f000 fb21 	bl	8001c3c <lcdWriteData>
  lcdWriteData(0x07);
 80015fa:	2007      	movs	r0, #7
 80015fc:	f000 fb1e 	bl	8001c3c <lcdWriteData>
  lcdWriteData(0x02);
 8001600:	2002      	movs	r0, #2
 8001602:	f000 fb1b 	bl	8001c3c <lcdWriteData>
  lcdWriteData(0x07);
 8001606:	2007      	movs	r0, #7
 8001608:	f000 fb18 	bl	8001c3c <lcdWriteData>
  lcdWriteData(0x05);
 800160c:	2005      	movs	r0, #5
 800160e:	f000 fb15 	bl	8001c3c <lcdWriteData>
  lcdWriteData(0x00);
 8001612:	2000      	movs	r0, #0
 8001614:	f000 fb12 	bl	8001c3c <lcdWriteData>

  lcdWriteCommand(ILI9341_NEGATIVEGAMMCORR);
 8001618:	20e1      	movs	r0, #225	@ 0xe1
 800161a:	f000 faff 	bl	8001c1c <lcdWriteCommand>
  lcdWriteData(0x00);
 800161e:	2000      	movs	r0, #0
 8001620:	f000 fb0c 	bl	8001c3c <lcdWriteData>
  lcdWriteData(0x25);
 8001624:	2025      	movs	r0, #37	@ 0x25
 8001626:	f000 fb09 	bl	8001c3c <lcdWriteData>
  lcdWriteData(0x27);
 800162a:	2027      	movs	r0, #39	@ 0x27
 800162c:	f000 fb06 	bl	8001c3c <lcdWriteData>
  lcdWriteData(0x05);
 8001630:	2005      	movs	r0, #5
 8001632:	f000 fb03 	bl	8001c3c <lcdWriteData>
  lcdWriteData(0x10);
 8001636:	2010      	movs	r0, #16
 8001638:	f000 fb00 	bl	8001c3c <lcdWriteData>
  lcdWriteData(0x09);
 800163c:	2009      	movs	r0, #9
 800163e:	f000 fafd 	bl	8001c3c <lcdWriteData>
  lcdWriteData(0x3A);
 8001642:	203a      	movs	r0, #58	@ 0x3a
 8001644:	f000 fafa 	bl	8001c3c <lcdWriteData>
  lcdWriteData(0x78);
 8001648:	2078      	movs	r0, #120	@ 0x78
 800164a:	f000 faf7 	bl	8001c3c <lcdWriteData>
  lcdWriteData(0x4D);
 800164e:	204d      	movs	r0, #77	@ 0x4d
 8001650:	f000 faf4 	bl	8001c3c <lcdWriteData>
  lcdWriteData(0x05);
 8001654:	2005      	movs	r0, #5
 8001656:	f000 faf1 	bl	8001c3c <lcdWriteData>
  lcdWriteData(0x18);
 800165a:	2018      	movs	r0, #24
 800165c:	f000 faee 	bl	8001c3c <lcdWriteData>
  lcdWriteData(0x0D);
 8001660:	200d      	movs	r0, #13
 8001662:	f000 faeb 	bl	8001c3c <lcdWriteData>
  lcdWriteData(0x38);
 8001666:	2038      	movs	r0, #56	@ 0x38
 8001668:	f000 fae8 	bl	8001c3c <lcdWriteData>
  lcdWriteData(0x3A);
 800166c:	203a      	movs	r0, #58	@ 0x3a
 800166e:	f000 fae5 	bl	8001c3c <lcdWriteData>
  lcdWriteData(0x1F);
 8001672:	201f      	movs	r0, #31
 8001674:	f000 fae2 	bl	8001c3c <lcdWriteData>

  lcdWriteCommand(ILI9341_COLADDRSET);
 8001678:	202a      	movs	r0, #42	@ 0x2a
 800167a:	f000 facf 	bl	8001c1c <lcdWriteCommand>
  lcdWriteData(0x00);
 800167e:	2000      	movs	r0, #0
 8001680:	f000 fadc 	bl	8001c3c <lcdWriteData>
  lcdWriteData(0x00);
 8001684:	2000      	movs	r0, #0
 8001686:	f000 fad9 	bl	8001c3c <lcdWriteData>
  lcdWriteData(0x00);
 800168a:	2000      	movs	r0, #0
 800168c:	f000 fad6 	bl	8001c3c <lcdWriteData>
  lcdWriteData(0xEF);
 8001690:	20ef      	movs	r0, #239	@ 0xef
 8001692:	f000 fad3 	bl	8001c3c <lcdWriteData>

  lcdWriteCommand(ILI9341_PAGEADDRSET);
 8001696:	202b      	movs	r0, #43	@ 0x2b
 8001698:	f000 fac0 	bl	8001c1c <lcdWriteCommand>
  lcdWriteData(0x00);
 800169c:	2000      	movs	r0, #0
 800169e:	f000 facd 	bl	8001c3c <lcdWriteData>
  lcdWriteData(0x00);
 80016a2:	2000      	movs	r0, #0
 80016a4:	f000 faca 	bl	8001c3c <lcdWriteData>
  lcdWriteData(0x01);
 80016a8:	2001      	movs	r0, #1
 80016aa:	f000 fac7 	bl	8001c3c <lcdWriteData>
  lcdWriteData(0x3F);
 80016ae:	203f      	movs	r0, #63	@ 0x3f
 80016b0:	f000 fac4 	bl	8001c3c <lcdWriteData>

  lcdWriteCommand(ILI9341_ENTRYMODE);
 80016b4:	20b7      	movs	r0, #183	@ 0xb7
 80016b6:	f000 fab1 	bl	8001c1c <lcdWriteCommand>
  lcdWriteData(0x07);
 80016ba:	2007      	movs	r0, #7
 80016bc:	f000 fabe 	bl	8001c3c <lcdWriteData>

  lcdWriteCommand(ILI9341_DISPLAYFUNC);
 80016c0:	20b6      	movs	r0, #182	@ 0xb6
 80016c2:	f000 faab 	bl	8001c1c <lcdWriteCommand>
  lcdWriteData(0x0A);
 80016c6:	200a      	movs	r0, #10
 80016c8:	f000 fab8 	bl	8001c3c <lcdWriteData>
  lcdWriteData(0x82);
 80016cc:	2082      	movs	r0, #130	@ 0x82
 80016ce:	f000 fab5 	bl	8001c3c <lcdWriteData>
  lcdWriteData(0x27);
 80016d2:	2027      	movs	r0, #39	@ 0x27
 80016d4:	f000 fab2 	bl	8001c3c <lcdWriteData>
  lcdWriteData(0x00);
 80016d8:	2000      	movs	r0, #0
 80016da:	f000 faaf 	bl	8001c3c <lcdWriteData>

  lcdWriteCommand(ILI9341_SLEEPOUT);
 80016de:	2011      	movs	r0, #17
 80016e0:	f000 fa9c 	bl	8001c1c <lcdWriteCommand>
  HAL_Delay(100);
 80016e4:	2064      	movs	r0, #100	@ 0x64
 80016e6:	f001 fa47 	bl	8002b78 <HAL_Delay>
  lcdWriteCommand(ILI9341_DISPLAYON);
 80016ea:	2029      	movs	r0, #41	@ 0x29
 80016ec:	f000 fa96 	bl	8001c1c <lcdWriteCommand>
  HAL_Delay(100);
 80016f0:	2064      	movs	r0, #100	@ 0x64
 80016f2:	f001 fa41 	bl	8002b78 <HAL_Delay>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 80016f6:	202c      	movs	r0, #44	@ 0x2c
 80016f8:	f000 fa90 	bl	8001c1c <lcdWriteCommand>
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	200000a4 	.word	0x200000a4
 8001708:	200000a5 	.word	0x200000a5
 800170c:	200000a6 	.word	0x200000a6
 8001710:	200000a7 	.word	0x200000a7

08001714 <lcdFillRGB>:
		}
	}
}

void lcdFillRGB(uint16_t color)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	4603      	mov	r3, r0
 800171c:	80fb      	strh	r3, [r7, #6]
  lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 800171e:	4b11      	ldr	r3, [pc, #68]	@ (8001764 <lcdFillRGB+0x50>)
 8001720:	881b      	ldrh	r3, [r3, #0]
 8001722:	3b01      	subs	r3, #1
 8001724:	b29a      	uxth	r2, r3
 8001726:	4b0f      	ldr	r3, [pc, #60]	@ (8001764 <lcdFillRGB+0x50>)
 8001728:	885b      	ldrh	r3, [r3, #2]
 800172a:	3b01      	subs	r3, #1
 800172c:	b29b      	uxth	r3, r3
 800172e:	2100      	movs	r1, #0
 8001730:	2000      	movs	r0, #0
 8001732:	f000 fa1d 	bl	8001b70 <lcdSetWindow>
  int dimensions = lcdProperties.width * lcdProperties.height;
 8001736:	4b0b      	ldr	r3, [pc, #44]	@ (8001764 <lcdFillRGB+0x50>)
 8001738:	881b      	ldrh	r3, [r3, #0]
 800173a:	461a      	mov	r2, r3
 800173c:	4b09      	ldr	r3, [pc, #36]	@ (8001764 <lcdFillRGB+0x50>)
 800173e:	885b      	ldrh	r3, [r3, #2]
 8001740:	fb02 f303 	mul.w	r3, r2, r3
 8001744:	60fb      	str	r3, [r7, #12]
  while(dimensions--)
 8001746:	e003      	b.n	8001750 <lcdFillRGB+0x3c>
  {
    lcdWriteData(color);
 8001748:	88fb      	ldrh	r3, [r7, #6]
 800174a:	4618      	mov	r0, r3
 800174c:	f000 fa76 	bl	8001c3c <lcdWriteData>
  while(dimensions--)
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	1e5a      	subs	r2, r3, #1
 8001754:	60fa      	str	r2, [r7, #12]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d1f6      	bne.n	8001748 <lcdFillRGB+0x34>
  }
}
 800175a:	bf00      	nop
 800175c:	bf00      	nop
 800175e:	3710      	adds	r7, #16
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}
 8001764:	20000010 	.word	0x20000010

08001768 <lcdDrawPixel>:
 * \param color    Color
 *
 * \return void
 */
void lcdDrawPixel(uint16_t x, uint16_t y, uint16_t color)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b082      	sub	sp, #8
 800176c:	af00      	add	r7, sp, #0
 800176e:	4603      	mov	r3, r0
 8001770:	80fb      	strh	r3, [r7, #6]
 8001772:	460b      	mov	r3, r1
 8001774:	80bb      	strh	r3, [r7, #4]
 8001776:	4613      	mov	r3, r2
 8001778:	807b      	strh	r3, [r7, #2]
    // Clip
    if ((x < 0) || (y < 0) || (x >= lcdProperties.width) || (y >= lcdProperties.height))
 800177a:	4b0c      	ldr	r3, [pc, #48]	@ (80017ac <lcdDrawPixel+0x44>)
 800177c:	881b      	ldrh	r3, [r3, #0]
 800177e:	88fa      	ldrh	r2, [r7, #6]
 8001780:	429a      	cmp	r2, r3
 8001782:	d20f      	bcs.n	80017a4 <lcdDrawPixel+0x3c>
 8001784:	4b09      	ldr	r3, [pc, #36]	@ (80017ac <lcdDrawPixel+0x44>)
 8001786:	885b      	ldrh	r3, [r3, #2]
 8001788:	88ba      	ldrh	r2, [r7, #4]
 800178a:	429a      	cmp	r2, r3
 800178c:	d20a      	bcs.n	80017a4 <lcdDrawPixel+0x3c>
        return;

    lcdSetWindow(x, y, x, y);
 800178e:	88bb      	ldrh	r3, [r7, #4]
 8001790:	88fa      	ldrh	r2, [r7, #6]
 8001792:	88b9      	ldrh	r1, [r7, #4]
 8001794:	88f8      	ldrh	r0, [r7, #6]
 8001796:	f000 f9eb 	bl	8001b70 <lcdSetWindow>
    lcdWriteData(color);
 800179a:	887b      	ldrh	r3, [r7, #2]
 800179c:	4618      	mov	r0, r3
 800179e:	f000 fa4d 	bl	8001c3c <lcdWriteData>
 80017a2:	e000      	b.n	80017a6 <lcdDrawPixel+0x3e>
        return;
 80017a4:	bf00      	nop
}
 80017a6:	3708      	adds	r7, #8
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	20000010 	.word	0x20000010

080017b0 <lcdDrawChar>:
 * \param size		Character Size
 *
 * \return void
 */
void lcdDrawChar(int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg)
{
 80017b0:	b590      	push	{r4, r7, lr}
 80017b2:	b085      	sub	sp, #20
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	4604      	mov	r4, r0
 80017b8:	4608      	mov	r0, r1
 80017ba:	4611      	mov	r1, r2
 80017bc:	461a      	mov	r2, r3
 80017be:	4623      	mov	r3, r4
 80017c0:	80fb      	strh	r3, [r7, #6]
 80017c2:	4603      	mov	r3, r0
 80017c4:	80bb      	strh	r3, [r7, #4]
 80017c6:	460b      	mov	r3, r1
 80017c8:	70fb      	strb	r3, [r7, #3]
 80017ca:	4613      	mov	r3, r2
 80017cc:	803b      	strh	r3, [r7, #0]
	if ((x >= lcdProperties.width) || 			// Clip right
 80017ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017d2:	4a4a      	ldr	r2, [pc, #296]	@ (80018fc <lcdDrawChar+0x14c>)
 80017d4:	8812      	ldrh	r2, [r2, #0]
 80017d6:	4293      	cmp	r3, r2
 80017d8:	f280 808c 	bge.w	80018f4 <lcdDrawChar+0x144>
			(y >= lcdProperties.height) || 		// Clip bottom
 80017dc:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017e0:	4a46      	ldr	r2, [pc, #280]	@ (80018fc <lcdDrawChar+0x14c>)
 80017e2:	8852      	ldrh	r2, [r2, #2]
	if ((x >= lcdProperties.width) || 			// Clip right
 80017e4:	4293      	cmp	r3, r2
 80017e6:	f280 8085 	bge.w	80018f4 <lcdDrawChar+0x144>
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 80017ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80017ee:	4a44      	ldr	r2, [pc, #272]	@ (8001900 <lcdDrawChar+0x150>)
 80017f0:	6892      	ldr	r2, [r2, #8]
 80017f2:	8892      	ldrh	r2, [r2, #4]
 80017f4:	4413      	add	r3, r2
			(y >= lcdProperties.height) || 		// Clip bottom
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	db7c      	blt.n	80018f4 <lcdDrawChar+0x144>
			((y + lcdFont.pFont->Height) < 0))  // Clip top
 80017fa:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80017fe:	4a40      	ldr	r2, [pc, #256]	@ (8001900 <lcdDrawChar+0x150>)
 8001800:	6892      	ldr	r2, [r2, #8]
 8001802:	88d2      	ldrh	r2, [r2, #6]
 8001804:	4413      	add	r3, r2
			((x + lcdFont.pFont->Width) < 0) || // Clip left
 8001806:	2b00      	cmp	r3, #0
 8001808:	db74      	blt.n	80018f4 <lcdDrawChar+0x144>
		return;

	uint8_t fontCoeff = lcdFont.pFont->Height / 8;
 800180a:	4b3d      	ldr	r3, [pc, #244]	@ (8001900 <lcdDrawChar+0x150>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	88db      	ldrh	r3, [r3, #6]
 8001810:	08db      	lsrs	r3, r3, #3
 8001812:	b29b      	uxth	r3, r3
 8001814:	72bb      	strb	r3, [r7, #10]
	uint8_t xP = 0;
 8001816:	2300      	movs	r3, #0
 8001818:	73fb      	strb	r3, [r7, #15]

	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 800181a:	2300      	movs	r3, #0
 800181c:	73bb      	strb	r3, [r7, #14]
 800181e:	e061      	b.n	80018e4 <lcdDrawChar+0x134>
	{
		uint8_t line;

		for(uint8_t k = 0; k < fontCoeff; k++)
 8001820:	2300      	movs	r3, #0
 8001822:	733b      	strb	r3, [r7, #12]
 8001824:	e055      	b.n	80018d2 <lcdDrawChar+0x122>
		{
			line = lcdFont.pFont->table[((c - 0x20) * lcdFont.pFont->Height * fontCoeff) + (i * fontCoeff) + k];
 8001826:	4b36      	ldr	r3, [pc, #216]	@ (8001900 <lcdDrawChar+0x150>)
 8001828:	689b      	ldr	r3, [r3, #8]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	78fa      	ldrb	r2, [r7, #3]
 800182e:	3a20      	subs	r2, #32
 8001830:	4933      	ldr	r1, [pc, #204]	@ (8001900 <lcdDrawChar+0x150>)
 8001832:	6889      	ldr	r1, [r1, #8]
 8001834:	88c9      	ldrh	r1, [r1, #6]
 8001836:	fb01 f202 	mul.w	r2, r1, r2
 800183a:	7ab9      	ldrb	r1, [r7, #10]
 800183c:	fb02 f101 	mul.w	r1, r2, r1
 8001840:	7bba      	ldrb	r2, [r7, #14]
 8001842:	7ab8      	ldrb	r0, [r7, #10]
 8001844:	fb00 f202 	mul.w	r2, r0, r2
 8001848:	4411      	add	r1, r2
 800184a:	7b3a      	ldrb	r2, [r7, #12]
 800184c:	440a      	add	r2, r1
 800184e:	4413      	add	r3, r2
 8001850:	781b      	ldrb	r3, [r3, #0]
 8001852:	737b      	strb	r3, [r7, #13]

			for(uint8_t j = 0; j < 8; j++)
 8001854:	2300      	movs	r3, #0
 8001856:	72fb      	strb	r3, [r7, #11]
 8001858:	e032      	b.n	80018c0 <lcdDrawChar+0x110>
			{
				if((line & 0x80) == 0x80)
 800185a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800185e:	2b00      	cmp	r3, #0
 8001860:	da12      	bge.n	8001888 <lcdDrawChar+0xd8>
				{
					lcdDrawPixel(x + j + xP, y + i, color);
 8001862:	7afb      	ldrb	r3, [r7, #11]
 8001864:	b29a      	uxth	r2, r3
 8001866:	88fb      	ldrh	r3, [r7, #6]
 8001868:	4413      	add	r3, r2
 800186a:	b29a      	uxth	r2, r3
 800186c:	7bfb      	ldrb	r3, [r7, #15]
 800186e:	b29b      	uxth	r3, r3
 8001870:	4413      	add	r3, r2
 8001872:	b298      	uxth	r0, r3
 8001874:	7bbb      	ldrb	r3, [r7, #14]
 8001876:	b29a      	uxth	r2, r3
 8001878:	88bb      	ldrh	r3, [r7, #4]
 800187a:	4413      	add	r3, r2
 800187c:	b29b      	uxth	r3, r3
 800187e:	883a      	ldrh	r2, [r7, #0]
 8001880:	4619      	mov	r1, r3
 8001882:	f7ff ff71 	bl	8001768 <lcdDrawPixel>
 8001886:	e015      	b.n	80018b4 <lcdDrawChar+0x104>
				}
				else if (bg != color)
 8001888:	8c3a      	ldrh	r2, [r7, #32]
 800188a:	883b      	ldrh	r3, [r7, #0]
 800188c:	429a      	cmp	r2, r3
 800188e:	d011      	beq.n	80018b4 <lcdDrawChar+0x104>
				{
					lcdDrawPixel(x + j + xP, y + i, bg);
 8001890:	7afb      	ldrb	r3, [r7, #11]
 8001892:	b29a      	uxth	r2, r3
 8001894:	88fb      	ldrh	r3, [r7, #6]
 8001896:	4413      	add	r3, r2
 8001898:	b29a      	uxth	r2, r3
 800189a:	7bfb      	ldrb	r3, [r7, #15]
 800189c:	b29b      	uxth	r3, r3
 800189e:	4413      	add	r3, r2
 80018a0:	b298      	uxth	r0, r3
 80018a2:	7bbb      	ldrb	r3, [r7, #14]
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	88bb      	ldrh	r3, [r7, #4]
 80018a8:	4413      	add	r3, r2
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	8c3a      	ldrh	r2, [r7, #32]
 80018ae:	4619      	mov	r1, r3
 80018b0:	f7ff ff5a 	bl	8001768 <lcdDrawPixel>
				}
				line <<= 1;
 80018b4:	7b7b      	ldrb	r3, [r7, #13]
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	737b      	strb	r3, [r7, #13]
			for(uint8_t j = 0; j < 8; j++)
 80018ba:	7afb      	ldrb	r3, [r7, #11]
 80018bc:	3301      	adds	r3, #1
 80018be:	72fb      	strb	r3, [r7, #11]
 80018c0:	7afb      	ldrb	r3, [r7, #11]
 80018c2:	2b07      	cmp	r3, #7
 80018c4:	d9c9      	bls.n	800185a <lcdDrawChar+0xaa>
			}

			xP += 8;
 80018c6:	7bfb      	ldrb	r3, [r7, #15]
 80018c8:	3308      	adds	r3, #8
 80018ca:	73fb      	strb	r3, [r7, #15]
		for(uint8_t k = 0; k < fontCoeff; k++)
 80018cc:	7b3b      	ldrb	r3, [r7, #12]
 80018ce:	3301      	adds	r3, #1
 80018d0:	733b      	strb	r3, [r7, #12]
 80018d2:	7b3a      	ldrb	r2, [r7, #12]
 80018d4:	7abb      	ldrb	r3, [r7, #10]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d3a5      	bcc.n	8001826 <lcdDrawChar+0x76>
		}

		xP = 0;
 80018da:	2300      	movs	r3, #0
 80018dc:	73fb      	strb	r3, [r7, #15]
	for(uint8_t i = 0; i < lcdFont.pFont->Height; i++)
 80018de:	7bbb      	ldrb	r3, [r7, #14]
 80018e0:	3301      	adds	r3, #1
 80018e2:	73bb      	strb	r3, [r7, #14]
 80018e4:	7bbb      	ldrb	r3, [r7, #14]
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	4b05      	ldr	r3, [pc, #20]	@ (8001900 <lcdDrawChar+0x150>)
 80018ea:	689b      	ldr	r3, [r3, #8]
 80018ec:	88db      	ldrh	r3, [r3, #6]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d396      	bcc.n	8001820 <lcdDrawChar+0x70>
 80018f2:	e000      	b.n	80018f6 <lcdDrawChar+0x146>
		return;
 80018f4:	bf00      	nop
	}
}
 80018f6:	3714      	adds	r7, #20
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd90      	pop	{r4, r7, pc}
 80018fc:	20000010 	.word	0x20000010
 8001900:	20000018 	.word	0x20000018

08001904 <lcdPrintf>:
 * \param
 *
 * \return void
 */
void lcdPrintf(const char *fmt, ...)
{
 8001904:	b40f      	push	{r0, r1, r2, r3}
 8001906:	b590      	push	{r4, r7, lr}
 8001908:	b085      	sub	sp, #20
 800190a:	af02      	add	r7, sp, #8
	static char buf[256];
	char *p;
	va_list lst;

	va_start(lst, fmt);
 800190c:	f107 031c 	add.w	r3, r7, #28
 8001910:	603b      	str	r3, [r7, #0]
	vsprintf(buf, fmt, lst);
 8001912:	683a      	ldr	r2, [r7, #0]
 8001914:	69b9      	ldr	r1, [r7, #24]
 8001916:	483d      	ldr	r0, [pc, #244]	@ (8001a0c <lcdPrintf+0x108>)
 8001918:	f004 fd6c 	bl	80063f4 <vsiprintf>
	va_end(lst);

	p = buf;
 800191c:	4b3b      	ldr	r3, [pc, #236]	@ (8001a0c <lcdPrintf+0x108>)
 800191e:	607b      	str	r3, [r7, #4]
	while (*p)
 8001920:	e067      	b.n	80019f2 <lcdPrintf+0xee>
	{
		if (*p == '\n')
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	2b0a      	cmp	r3, #10
 8001928:	d10c      	bne.n	8001944 <lcdPrintf+0x40>
		{
			cursorXY.y += lcdFont.pFont->Height;
 800192a:	4b39      	ldr	r3, [pc, #228]	@ (8001a10 <lcdPrintf+0x10c>)
 800192c:	885a      	ldrh	r2, [r3, #2]
 800192e:	4b39      	ldr	r3, [pc, #228]	@ (8001a14 <lcdPrintf+0x110>)
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	88db      	ldrh	r3, [r3, #6]
 8001934:	4413      	add	r3, r2
 8001936:	b29a      	uxth	r2, r3
 8001938:	4b35      	ldr	r3, [pc, #212]	@ (8001a10 <lcdPrintf+0x10c>)
 800193a:	805a      	strh	r2, [r3, #2]
			cursorXY.x = 0;
 800193c:	4b34      	ldr	r3, [pc, #208]	@ (8001a10 <lcdPrintf+0x10c>)
 800193e:	2200      	movs	r2, #0
 8001940:	801a      	strh	r2, [r3, #0]
 8001942:	e04a      	b.n	80019da <lcdPrintf+0xd6>
		}
		else if (*p == '\r')
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	781b      	ldrb	r3, [r3, #0]
 8001948:	2b0d      	cmp	r3, #13
 800194a:	d046      	beq.n	80019da <lcdPrintf+0xd6>
		{
			// skip em
		}
		else if (*p == '\t')
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b09      	cmp	r3, #9
 8001952:	d10b      	bne.n	800196c <lcdPrintf+0x68>
		{
			cursorXY.x += lcdFont.pFont->Width * 4;
 8001954:	4b2e      	ldr	r3, [pc, #184]	@ (8001a10 <lcdPrintf+0x10c>)
 8001956:	881a      	ldrh	r2, [r3, #0]
 8001958:	4b2e      	ldr	r3, [pc, #184]	@ (8001a14 <lcdPrintf+0x110>)
 800195a:	689b      	ldr	r3, [r3, #8]
 800195c:	889b      	ldrh	r3, [r3, #4]
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	b29b      	uxth	r3, r3
 8001962:	4413      	add	r3, r2
 8001964:	b29a      	uxth	r2, r3
 8001966:	4b2a      	ldr	r3, [pc, #168]	@ (8001a10 <lcdPrintf+0x10c>)
 8001968:	801a      	strh	r2, [r3, #0]
 800196a:	e036      	b.n	80019da <lcdPrintf+0xd6>
		}
		else
		{
			lcdDrawChar(cursorXY.x, cursorXY.y, *p, lcdFont.TextColor, lcdFont.BackColor);
 800196c:	4b28      	ldr	r3, [pc, #160]	@ (8001a10 <lcdPrintf+0x10c>)
 800196e:	881b      	ldrh	r3, [r3, #0]
 8001970:	b218      	sxth	r0, r3
 8001972:	4b27      	ldr	r3, [pc, #156]	@ (8001a10 <lcdPrintf+0x10c>)
 8001974:	885b      	ldrh	r3, [r3, #2]
 8001976:	b219      	sxth	r1, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	781a      	ldrb	r2, [r3, #0]
 800197c:	4b25      	ldr	r3, [pc, #148]	@ (8001a14 <lcdPrintf+0x110>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	b29c      	uxth	r4, r3
 8001982:	4b24      	ldr	r3, [pc, #144]	@ (8001a14 <lcdPrintf+0x110>)
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	b29b      	uxth	r3, r3
 8001988:	9300      	str	r3, [sp, #0]
 800198a:	4623      	mov	r3, r4
 800198c:	f7ff ff10 	bl	80017b0 <lcdDrawChar>
			cursorXY.x += lcdFont.pFont->Width;
 8001990:	4b1f      	ldr	r3, [pc, #124]	@ (8001a10 <lcdPrintf+0x10c>)
 8001992:	881a      	ldrh	r2, [r3, #0]
 8001994:	4b1f      	ldr	r3, [pc, #124]	@ (8001a14 <lcdPrintf+0x110>)
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	889b      	ldrh	r3, [r3, #4]
 800199a:	4413      	add	r3, r2
 800199c:	b29a      	uxth	r2, r3
 800199e:	4b1c      	ldr	r3, [pc, #112]	@ (8001a10 <lcdPrintf+0x10c>)
 80019a0:	801a      	strh	r2, [r3, #0]
			if (lcdFont.TextWrap && (cursorXY.x > (lcdProperties.width - lcdFont.pFont->Width)))
 80019a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a14 <lcdPrintf+0x110>)
 80019a4:	7b1b      	ldrb	r3, [r3, #12]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d017      	beq.n	80019da <lcdPrintf+0xd6>
 80019aa:	4b19      	ldr	r3, [pc, #100]	@ (8001a10 <lcdPrintf+0x10c>)
 80019ac:	881b      	ldrh	r3, [r3, #0]
 80019ae:	461a      	mov	r2, r3
 80019b0:	4b19      	ldr	r3, [pc, #100]	@ (8001a18 <lcdPrintf+0x114>)
 80019b2:	881b      	ldrh	r3, [r3, #0]
 80019b4:	4619      	mov	r1, r3
 80019b6:	4b17      	ldr	r3, [pc, #92]	@ (8001a14 <lcdPrintf+0x110>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	889b      	ldrh	r3, [r3, #4]
 80019bc:	1acb      	subs	r3, r1, r3
 80019be:	429a      	cmp	r2, r3
 80019c0:	dd0b      	ble.n	80019da <lcdPrintf+0xd6>
			{
				cursorXY.y += lcdFont.pFont->Height;
 80019c2:	4b13      	ldr	r3, [pc, #76]	@ (8001a10 <lcdPrintf+0x10c>)
 80019c4:	885a      	ldrh	r2, [r3, #2]
 80019c6:	4b13      	ldr	r3, [pc, #76]	@ (8001a14 <lcdPrintf+0x110>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	88db      	ldrh	r3, [r3, #6]
 80019cc:	4413      	add	r3, r2
 80019ce:	b29a      	uxth	r2, r3
 80019d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001a10 <lcdPrintf+0x10c>)
 80019d2:	805a      	strh	r2, [r3, #2]
				cursorXY.x = 0;
 80019d4:	4b0e      	ldr	r3, [pc, #56]	@ (8001a10 <lcdPrintf+0x10c>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	801a      	strh	r2, [r3, #0]
			}
		}
		p++;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	3301      	adds	r3, #1
 80019de:	607b      	str	r3, [r7, #4]

		if (cursorXY.y >= lcdProperties.height)
 80019e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001a10 <lcdPrintf+0x10c>)
 80019e2:	885a      	ldrh	r2, [r3, #2]
 80019e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a18 <lcdPrintf+0x114>)
 80019e6:	885b      	ldrh	r3, [r3, #2]
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d302      	bcc.n	80019f2 <lcdPrintf+0xee>
		{
			cursorXY.y = 0;
 80019ec:	4b08      	ldr	r3, [pc, #32]	@ (8001a10 <lcdPrintf+0x10c>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	805a      	strh	r2, [r3, #2]
	while (*p)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d193      	bne.n	8001922 <lcdPrintf+0x1e>
		}
	}
}
 80019fa:	bf00      	nop
 80019fc:	bf00      	nop
 80019fe:	370c      	adds	r7, #12
 8001a00:	46bd      	mov	sp, r7
 8001a02:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8001a06:	b004      	add	sp, #16
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	200000a8 	.word	0x200000a8
 8001a10:	200000a0 	.word	0x200000a0
 8001a14:	20000018 	.word	0x20000018
 8001a18:	20000010 	.word	0x20000010

08001a1c <lcdSetTextFont>:
 * \param font pointer font
 *
 * \return void
 */
void lcdSetTextFont(sFONT* font)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b083      	sub	sp, #12
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
	lcdFont.pFont = font;
 8001a24:	4a04      	ldr	r2, [pc, #16]	@ (8001a38 <lcdSetTextFont+0x1c>)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6093      	str	r3, [r2, #8]
}
 8001a2a:	bf00      	nop
 8001a2c:	370c      	adds	r7, #12
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	20000018 	.word	0x20000018

08001a3c <lcdSetTextColor>:
 * \param b		Background color
 *
 * \return void
 */
void lcdSetTextColor(uint16_t c, uint16_t b)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	460a      	mov	r2, r1
 8001a46:	80fb      	strh	r3, [r7, #6]
 8001a48:	4613      	mov	r3, r2
 8001a4a:	80bb      	strh	r3, [r7, #4]
	lcdFont.TextColor = c;
 8001a4c:	88fb      	ldrh	r3, [r7, #6]
 8001a4e:	4a05      	ldr	r2, [pc, #20]	@ (8001a64 <lcdSetTextColor+0x28>)
 8001a50:	6013      	str	r3, [r2, #0]
	lcdFont.BackColor = b;
 8001a52:	88bb      	ldrh	r3, [r7, #4]
 8001a54:	4a03      	ldr	r2, [pc, #12]	@ (8001a64 <lcdSetTextColor+0x28>)
 8001a56:	6053      	str	r3, [r2, #4]
}
 8001a58:	bf00      	nop
 8001a5a:	370c      	adds	r7, #12
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	20000018 	.word	0x20000018

08001a68 <lcdSetOrientation>:
{
	lcdFont.TextWrap = w;
}

void lcdSetOrientation(lcdOrientationTypeDef value)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b082      	sub	sp, #8
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	71fb      	strb	r3, [r7, #7]
	lcdProperties.orientation = value;
 8001a72:	4a2d      	ldr	r2, [pc, #180]	@ (8001b28 <lcdSetOrientation+0xc0>)
 8001a74:	79fb      	ldrb	r3, [r7, #7]
 8001a76:	7113      	strb	r3, [r2, #4]
	lcdWriteCommand(ILI9341_MEMCONTROL);
 8001a78:	2036      	movs	r0, #54	@ 0x36
 8001a7a:	f000 f8cf 	bl	8001c1c <lcdWriteCommand>

	switch (lcdProperties.orientation)
 8001a7e:	4b2a      	ldr	r3, [pc, #168]	@ (8001b28 <lcdSetOrientation+0xc0>)
 8001a80:	791b      	ldrb	r3, [r3, #4]
 8001a82:	2b03      	cmp	r3, #3
 8001a84:	d83e      	bhi.n	8001b04 <lcdSetOrientation+0x9c>
 8001a86:	a201      	add	r2, pc, #4	@ (adr r2, 8001a8c <lcdSetOrientation+0x24>)
 8001a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a8c:	08001a9d 	.word	0x08001a9d
 8001a90:	08001ad1 	.word	0x08001ad1
 8001a94:	08001ab7 	.word	0x08001ab7
 8001a98:	08001aeb 	.word	0x08001aeb
	{
		case LCD_ORIENTATION_PORTRAIT:
			lcdWriteData(lcdPortraitConfig);
 8001a9c:	4b23      	ldr	r3, [pc, #140]	@ (8001b2c <lcdSetOrientation+0xc4>)
 8001a9e:	781b      	ldrb	r3, [r3, #0]
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	f000 f8cb 	bl	8001c3c <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 8001aa6:	4b20      	ldr	r3, [pc, #128]	@ (8001b28 <lcdSetOrientation+0xc0>)
 8001aa8:	22f0      	movs	r2, #240	@ 0xf0
 8001aaa:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_HEIGHT;
 8001aac:	4b1e      	ldr	r3, [pc, #120]	@ (8001b28 <lcdSetOrientation+0xc0>)
 8001aae:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001ab2:	805a      	strh	r2, [r3, #2]
			break;
 8001ab4:	e027      	b.n	8001b06 <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_PORTRAIT_MIRROR:
			lcdWriteData(lcdPortraitMirrorConfig);
 8001ab6:	4b1e      	ldr	r3, [pc, #120]	@ (8001b30 <lcdSetOrientation+0xc8>)
 8001ab8:	781b      	ldrb	r3, [r3, #0]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f000 f8be 	bl	8001c3c <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_WIDTH;
 8001ac0:	4b19      	ldr	r3, [pc, #100]	@ (8001b28 <lcdSetOrientation+0xc0>)
 8001ac2:	22f0      	movs	r2, #240	@ 0xf0
 8001ac4:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_HEIGHT;
 8001ac6:	4b18      	ldr	r3, [pc, #96]	@ (8001b28 <lcdSetOrientation+0xc0>)
 8001ac8:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001acc:	805a      	strh	r2, [r3, #2]
			break;
 8001ace:	e01a      	b.n	8001b06 <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_LANDSCAPE:
			lcdWriteData(lcdLandscapeConfig);
 8001ad0:	4b18      	ldr	r3, [pc, #96]	@ (8001b34 <lcdSetOrientation+0xcc>)
 8001ad2:	781b      	ldrb	r3, [r3, #0]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f000 f8b1 	bl	8001c3c <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 8001ada:	4b13      	ldr	r3, [pc, #76]	@ (8001b28 <lcdSetOrientation+0xc0>)
 8001adc:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001ae0:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 8001ae2:	4b11      	ldr	r3, [pc, #68]	@ (8001b28 <lcdSetOrientation+0xc0>)
 8001ae4:	22f0      	movs	r2, #240	@ 0xf0
 8001ae6:	805a      	strh	r2, [r3, #2]
			break;
 8001ae8:	e00d      	b.n	8001b06 <lcdSetOrientation+0x9e>
		case LCD_ORIENTATION_LANDSCAPE_MIRROR:
			lcdWriteData(lcdLandscapeMirrorConfig);
 8001aea:	4b13      	ldr	r3, [pc, #76]	@ (8001b38 <lcdSetOrientation+0xd0>)
 8001aec:	781b      	ldrb	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f000 f8a4 	bl	8001c3c <lcdWriteData>
			lcdProperties.width = ILI9341_PIXEL_HEIGHT;
 8001af4:	4b0c      	ldr	r3, [pc, #48]	@ (8001b28 <lcdSetOrientation+0xc0>)
 8001af6:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8001afa:	801a      	strh	r2, [r3, #0]
			lcdProperties.height = ILI9341_PIXEL_WIDTH;
 8001afc:	4b0a      	ldr	r3, [pc, #40]	@ (8001b28 <lcdSetOrientation+0xc0>)
 8001afe:	22f0      	movs	r2, #240	@ 0xf0
 8001b00:	805a      	strh	r2, [r3, #2]
			break;
 8001b02:	e000      	b.n	8001b06 <lcdSetOrientation+0x9e>
		default:
			break;
 8001b04:	bf00      	nop
	}

	//lcdWriteCommand(ILI9341_MEMORYWRITE);
	lcdSetWindow(0, 0, lcdProperties.width - 1, lcdProperties.height - 1);
 8001b06:	4b08      	ldr	r3, [pc, #32]	@ (8001b28 <lcdSetOrientation+0xc0>)
 8001b08:	881b      	ldrh	r3, [r3, #0]
 8001b0a:	3b01      	subs	r3, #1
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	4b06      	ldr	r3, [pc, #24]	@ (8001b28 <lcdSetOrientation+0xc0>)
 8001b10:	885b      	ldrh	r3, [r3, #2]
 8001b12:	3b01      	subs	r3, #1
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	2100      	movs	r1, #0
 8001b18:	2000      	movs	r0, #0
 8001b1a:	f000 f829 	bl	8001b70 <lcdSetWindow>
}
 8001b1e:	bf00      	nop
 8001b20:	3708      	adds	r7, #8
 8001b22:	46bd      	mov	sp, r7
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	20000010 	.word	0x20000010
 8001b2c:	200000a4 	.word	0x200000a4
 8001b30:	200000a6 	.word	0x200000a6
 8001b34:	200000a5 	.word	0x200000a5
 8001b38:	200000a7 	.word	0x200000a7

08001b3c <lcdSetCursor>:

void lcdSetCursor(unsigned short x, unsigned short y)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	460a      	mov	r2, r1
 8001b46:	80fb      	strh	r3, [r7, #6]
 8001b48:	4613      	mov	r3, r2
 8001b4a:	80bb      	strh	r3, [r7, #4]
	cursorXY.x = x;
 8001b4c:	4a07      	ldr	r2, [pc, #28]	@ (8001b6c <lcdSetCursor+0x30>)
 8001b4e:	88fb      	ldrh	r3, [r7, #6]
 8001b50:	8013      	strh	r3, [r2, #0]
	cursorXY.y = y;
 8001b52:	4a06      	ldr	r2, [pc, #24]	@ (8001b6c <lcdSetCursor+0x30>)
 8001b54:	88bb      	ldrh	r3, [r7, #4]
 8001b56:	8053      	strh	r3, [r2, #2]
	lcdSetWindow(x, y, x, y);
 8001b58:	88bb      	ldrh	r3, [r7, #4]
 8001b5a:	88fa      	ldrh	r2, [r7, #6]
 8001b5c:	88b9      	ldrh	r1, [r7, #4]
 8001b5e:	88f8      	ldrh	r0, [r7, #6]
 8001b60:	f000 f806 	bl	8001b70 <lcdSetWindow>
}
 8001b64:	bf00      	nop
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	200000a0 	.word	0x200000a0

08001b70 <lcdSetWindow>:
 * \param y1         Rigth bottom window y-coordinate
 *
 * \return void
 */
void lcdSetWindow(unsigned short x0, unsigned short y0, unsigned short x1, unsigned short y1)
{
 8001b70:	b590      	push	{r4, r7, lr}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	4604      	mov	r4, r0
 8001b78:	4608      	mov	r0, r1
 8001b7a:	4611      	mov	r1, r2
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	4623      	mov	r3, r4
 8001b80:	80fb      	strh	r3, [r7, #6]
 8001b82:	4603      	mov	r3, r0
 8001b84:	80bb      	strh	r3, [r7, #4]
 8001b86:	460b      	mov	r3, r1
 8001b88:	807b      	strh	r3, [r7, #2]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	803b      	strh	r3, [r7, #0]
  lcdWriteCommand(ILI9341_COLADDRSET);
 8001b8e:	202a      	movs	r0, #42	@ 0x2a
 8001b90:	f000 f844 	bl	8001c1c <lcdWriteCommand>
  lcdWriteData((x0 >> 8) & 0xFF);
 8001b94:	88fb      	ldrh	r3, [r7, #6]
 8001b96:	0a1b      	lsrs	r3, r3, #8
 8001b98:	b29b      	uxth	r3, r3
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f000 f84e 	bl	8001c3c <lcdWriteData>
  lcdWriteData(x0 & 0xFF);
 8001ba0:	88fb      	ldrh	r3, [r7, #6]
 8001ba2:	b2db      	uxtb	r3, r3
 8001ba4:	b29b      	uxth	r3, r3
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f000 f848 	bl	8001c3c <lcdWriteData>
  lcdWriteData((x1 >> 8) & 0xFF);
 8001bac:	887b      	ldrh	r3, [r7, #2]
 8001bae:	0a1b      	lsrs	r3, r3, #8
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f000 f842 	bl	8001c3c <lcdWriteData>
  lcdWriteData(x1 & 0xFF);
 8001bb8:	887b      	ldrh	r3, [r7, #2]
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f000 f83c 	bl	8001c3c <lcdWriteData>
  lcdWriteCommand(ILI9341_PAGEADDRSET);
 8001bc4:	202b      	movs	r0, #43	@ 0x2b
 8001bc6:	f000 f829 	bl	8001c1c <lcdWriteCommand>
  lcdWriteData((y0 >> 8) & 0xFF);
 8001bca:	88bb      	ldrh	r3, [r7, #4]
 8001bcc:	0a1b      	lsrs	r3, r3, #8
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	f000 f833 	bl	8001c3c <lcdWriteData>
  lcdWriteData(y0 & 0xFF);
 8001bd6:	88bb      	ldrh	r3, [r7, #4]
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f000 f82d 	bl	8001c3c <lcdWriteData>
  lcdWriteData((y1 >> 8) & 0xFF);
 8001be2:	883b      	ldrh	r3, [r7, #0]
 8001be4:	0a1b      	lsrs	r3, r3, #8
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	4618      	mov	r0, r3
 8001bea:	f000 f827 	bl	8001c3c <lcdWriteData>
  lcdWriteData(y1 & 0xFF);
 8001bee:	883b      	ldrh	r3, [r7, #0]
 8001bf0:	b2db      	uxtb	r3, r3
 8001bf2:	b29b      	uxth	r3, r3
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f000 f821 	bl	8001c3c <lcdWriteData>
  lcdWriteCommand(ILI9341_MEMORYWRITE);
 8001bfa:	202c      	movs	r0, #44	@ 0x2c
 8001bfc:	f000 f80e 	bl	8001c1c <lcdWriteCommand>
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	bd90      	pop	{r4, r7, pc}

08001c08 <lcdReset>:
  }
  while (i < dataLength);
}

static void lcdReset(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
	lcdWriteCommand(ILI9341_SOFTRESET);
 8001c0c:	2001      	movs	r0, #1
 8001c0e:	f000 f805 	bl	8001c1c <lcdWriteCommand>
	HAL_Delay(50);
 8001c12:	2032      	movs	r0, #50	@ 0x32
 8001c14:	f000 ffb0 	bl	8002b78 <HAL_Delay>
}
 8001c18:	bf00      	nop
 8001c1a:	bd80      	pop	{r7, pc}

08001c1c <lcdWriteCommand>:

// Write an 8 bit command to the IC driver
static void lcdWriteCommand(unsigned char command)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	b083      	sub	sp, #12
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	4603      	mov	r3, r0
 8001c24:	71fb      	strb	r3, [r7, #7]
	LCD_CmdWrite(command);
 8001c26:	f04f 43c0 	mov.w	r3, #1610612736	@ 0x60000000
 8001c2a:	79fa      	ldrb	r2, [r7, #7]
 8001c2c:	b292      	uxth	r2, r2
 8001c2e:	801a      	strh	r2, [r3, #0]
}
 8001c30:	bf00      	nop
 8001c32:	370c      	adds	r7, #12
 8001c34:	46bd      	mov	sp, r7
 8001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3a:	4770      	bx	lr

08001c3c <lcdWriteData>:

// Write an 16 bit data word to the IC driver
static void lcdWriteData(unsigned short data)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	4603      	mov	r3, r0
 8001c44:	80fb      	strh	r3, [r7, #6]
	LCD_DataWrite(data);
 8001c46:	4a04      	ldr	r2, [pc, #16]	@ (8001c58 <lcdWriteData+0x1c>)
 8001c48:	88fb      	ldrh	r3, [r7, #6]
 8001c4a:	8013      	strh	r3, [r2, #0]
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	60080000 	.word	0x60080000

08001c5c <lcdBuildMemoryAccessControlConfig>:
                        bool columnAddressOrder,
                        bool rowColumnExchange,
                        bool verticalRefreshOrder,
                        bool colorOrder,
                        bool horizontalRefreshOrder)
{
 8001c5c:	b490      	push	{r4, r7}
 8001c5e:	b084      	sub	sp, #16
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4604      	mov	r4, r0
 8001c64:	4608      	mov	r0, r1
 8001c66:	4611      	mov	r1, r2
 8001c68:	461a      	mov	r2, r3
 8001c6a:	4623      	mov	r3, r4
 8001c6c:	71fb      	strb	r3, [r7, #7]
 8001c6e:	4603      	mov	r3, r0
 8001c70:	71bb      	strb	r3, [r7, #6]
 8001c72:	460b      	mov	r3, r1
 8001c74:	717b      	strb	r3, [r7, #5]
 8001c76:	4613      	mov	r3, r2
 8001c78:	713b      	strb	r3, [r7, #4]
  unsigned char value 				= 0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	73fb      	strb	r3, [r7, #15]
  if(horizontalRefreshOrder) value 	|= ILI9341_MADCTL_MH;
 8001c7e:	7f3b      	ldrb	r3, [r7, #28]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d003      	beq.n	8001c8c <lcdBuildMemoryAccessControlConfig+0x30>
 8001c84:	7bfb      	ldrb	r3, [r7, #15]
 8001c86:	f043 0304 	orr.w	r3, r3, #4
 8001c8a:	73fb      	strb	r3, [r7, #15]
  if(colorOrder) value 				|= ILI9341_MADCTL_BGR;
 8001c8c:	7e3b      	ldrb	r3, [r7, #24]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <lcdBuildMemoryAccessControlConfig+0x3e>
 8001c92:	7bfb      	ldrb	r3, [r7, #15]
 8001c94:	f043 0308 	orr.w	r3, r3, #8
 8001c98:	73fb      	strb	r3, [r7, #15]
  if(verticalRefreshOrder) value 	|= ILI9341_MADCTL_ML;
 8001c9a:	793b      	ldrb	r3, [r7, #4]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d003      	beq.n	8001ca8 <lcdBuildMemoryAccessControlConfig+0x4c>
 8001ca0:	7bfb      	ldrb	r3, [r7, #15]
 8001ca2:	f043 0310 	orr.w	r3, r3, #16
 8001ca6:	73fb      	strb	r3, [r7, #15]
  if(rowColumnExchange) value 		|= ILI9341_MADCTL_MV;
 8001ca8:	797b      	ldrb	r3, [r7, #5]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d003      	beq.n	8001cb6 <lcdBuildMemoryAccessControlConfig+0x5a>
 8001cae:	7bfb      	ldrb	r3, [r7, #15]
 8001cb0:	f043 0320 	orr.w	r3, r3, #32
 8001cb4:	73fb      	strb	r3, [r7, #15]
  if(columnAddressOrder) value 		|= ILI9341_MADCTL_MX;
 8001cb6:	79bb      	ldrb	r3, [r7, #6]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d003      	beq.n	8001cc4 <lcdBuildMemoryAccessControlConfig+0x68>
 8001cbc:	7bfb      	ldrb	r3, [r7, #15]
 8001cbe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001cc2:	73fb      	strb	r3, [r7, #15]
  if(rowAddressOrder) value 		|= ILI9341_MADCTL_MY;
 8001cc4:	79fb      	ldrb	r3, [r7, #7]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d003      	beq.n	8001cd2 <lcdBuildMemoryAccessControlConfig+0x76>
 8001cca:	7bfb      	ldrb	r3, [r7, #15]
 8001ccc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001cd0:	73fb      	strb	r3, [r7, #15]
  return value;
 8001cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3710      	adds	r7, #16
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc90      	pop	{r4, r7}
 8001cdc:	4770      	bx	lr

08001cde <onBeatDetected>:
void RunProgram();
void Max30100 ();
void Max30100_Init();
void AD8232_ReadData();
void ECG_DrawWave(uint16_t value);
void onBeatDetected(void) {
 8001cde:	b480      	push	{r7}
 8001ce0:	af00      	add	r7, sp, #0
    // Xử lý khi phát hiện nhịp tim (bật LED, gửi UART, ...)

}
 8001ce2:	bf00      	nop
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cea:	4770      	bx	lr

08001cec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cf2:	f000 fecf 	bl	8002a94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cf6:	f000 f83f 	bl	8001d78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cfa:	f000 f9d5 	bl	80020a8 <MX_GPIO_Init>
  MX_FSMC_Init();
 8001cfe:	f000 fa73 	bl	80021e8 <MX_FSMC_Init>
  MX_USART1_UART_Init();
 8001d02:	f000 f9a7 	bl	8002054 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8001d06:	f000 f921 	bl	8001f4c <MX_SPI2_Init>
  MX_TIM2_Init();
 8001d0a:	f000 f955 	bl	8001fb8 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001d0e:	f000 f8ef 	bl	8001ef0 <MX_I2C1_Init>
  MX_ADC3_Init();
 8001d12:	f000 f89b 	bl	8001e4c <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
  //-----------------------------
  // LCD init
  LCD_BL_ON();
 8001d16:	2201      	movs	r2, #1
 8001d18:	2102      	movs	r1, #2
 8001d1a:	4814      	ldr	r0, [pc, #80]	@ (8001d6c <main+0x80>)
 8001d1c:	f001 fc60 	bl	80035e0 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim2);
 8001d20:	4813      	ldr	r0, [pc, #76]	@ (8001d70 <main+0x84>)
 8001d22:	f003 fa77 	bl	8005214 <HAL_TIM_Base_Start_IT>
  TouchCalibrate();
 8001d26:	f000 fe5d 	bl	80029e4 <TouchCalibrate>

  lcdInit();
 8001d2a:	f7ff fb7f 	bl	800142c <lcdInit>
  int i = 2;
 8001d2e:	2302      	movs	r3, #2
 8001d30:	607b      	str	r3, [r7, #4]

  lcdSetOrientation(i%4);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	425a      	negs	r2, r3
 8001d36:	f003 0303 	and.w	r3, r3, #3
 8001d3a:	f002 0203 	and.w	r2, r2, #3
 8001d3e:	bf58      	it	pl
 8001d40:	4253      	negpl	r3, r2
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	4618      	mov	r0, r3
 8001d46:	f7ff fe8f 	bl	8001a68 <lcdSetOrientation>
  lcdFillRGB(COLOR_BLACK);
 8001d4a:	2000      	movs	r0, #0
 8001d4c:	f7ff fce2 	bl	8001714 <lcdFillRGB>
  lcdSetTextColor(COLOR_YELLOW,COLOR_BLACK);
 8001d50:	2100      	movs	r1, #0
 8001d52:	f64f 70e0 	movw	r0, #65504	@ 0xffe0
 8001d56:	f7ff fe71 	bl	8001a3c <lcdSetTextColor>
  lcdSetTextFont(&Font16);
 8001d5a:	4806      	ldr	r0, [pc, #24]	@ (8001d74 <main+0x88>)
 8001d5c:	f7ff fe5e 	bl	8001a1c <lcdSetTextFont>
  // Max30100 init
  Max30100_Init();
 8001d60:	f000 fae8 	bl	8002334 <Max30100_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //RunProgram();
	  Max30100();
 8001d64:	f000 fb8a 	bl	800247c <Max30100>
 8001d68:	e7fc      	b.n	8001d64 <main+0x78>
 8001d6a:	bf00      	nop
 8001d6c:	40020400 	.word	0x40020400
 8001d70:	2000029c 	.word	0x2000029c
 8001d74:	20000008 	.word	0x20000008

08001d78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b094      	sub	sp, #80	@ 0x50
 8001d7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d7e:	f107 0320 	add.w	r3, r7, #32
 8001d82:	2230      	movs	r2, #48	@ 0x30
 8001d84:	2100      	movs	r1, #0
 8001d86:	4618      	mov	r0, r3
 8001d88:	f004 fb3e 	bl	8006408 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d8c:	f107 030c 	add.w	r3, r7, #12
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60bb      	str	r3, [r7, #8]
 8001da0:	4b28      	ldr	r3, [pc, #160]	@ (8001e44 <SystemClock_Config+0xcc>)
 8001da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da4:	4a27      	ldr	r2, [pc, #156]	@ (8001e44 <SystemClock_Config+0xcc>)
 8001da6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001daa:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dac:	4b25      	ldr	r3, [pc, #148]	@ (8001e44 <SystemClock_Config+0xcc>)
 8001dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001db4:	60bb      	str	r3, [r7, #8]
 8001db6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001db8:	2300      	movs	r3, #0
 8001dba:	607b      	str	r3, [r7, #4]
 8001dbc:	4b22      	ldr	r3, [pc, #136]	@ (8001e48 <SystemClock_Config+0xd0>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a21      	ldr	r2, [pc, #132]	@ (8001e48 <SystemClock_Config+0xd0>)
 8001dc2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dc6:	6013      	str	r3, [r2, #0]
 8001dc8:	4b1f      	ldr	r3, [pc, #124]	@ (8001e48 <SystemClock_Config+0xd0>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dd0:	607b      	str	r3, [r7, #4]
 8001dd2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001dd4:	2301      	movs	r3, #1
 8001dd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001dd8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001ddc:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dde:	2302      	movs	r3, #2
 8001de0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001de2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001de6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001de8:	2304      	movs	r3, #4
 8001dea:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001dec:	23a8      	movs	r3, #168	@ 0xa8
 8001dee:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001df0:	2302      	movs	r3, #2
 8001df2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001df4:	2304      	movs	r3, #4
 8001df6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001df8:	f107 0320 	add.w	r3, r7, #32
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f002 fc51 	bl	80046a4 <HAL_RCC_OscConfig>
 8001e02:	4603      	mov	r3, r0
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001e08:	f000 fbaa 	bl	8002560 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e0c:	230f      	movs	r3, #15
 8001e0e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e10:	2302      	movs	r3, #2
 8001e12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e14:	2300      	movs	r3, #0
 8001e16:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001e18:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001e1c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001e1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e22:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001e24:	f107 030c 	add.w	r3, r7, #12
 8001e28:	2105      	movs	r1, #5
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f002 feb2 	bl	8004b94 <HAL_RCC_ClockConfig>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001e36:	f000 fb93 	bl	8002560 <Error_Handler>
  }
}
 8001e3a:	bf00      	nop
 8001e3c:	3750      	adds	r7, #80	@ 0x50
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	40023800 	.word	0x40023800
 8001e48:	40007000 	.word	0x40007000

08001e4c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	b084      	sub	sp, #16
 8001e50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e52:	463b      	mov	r3, r7
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	605a      	str	r2, [r3, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001e5e:	4b21      	ldr	r3, [pc, #132]	@ (8001ee4 <MX_ADC3_Init+0x98>)
 8001e60:	4a21      	ldr	r2, [pc, #132]	@ (8001ee8 <MX_ADC3_Init+0x9c>)
 8001e62:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001e64:	4b1f      	ldr	r3, [pc, #124]	@ (8001ee4 <MX_ADC3_Init+0x98>)
 8001e66:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8001e6a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001e6c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee4 <MX_ADC3_Init+0x98>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 8001e72:	4b1c      	ldr	r3, [pc, #112]	@ (8001ee4 <MX_ADC3_Init+0x98>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = ENABLE;
 8001e78:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee4 <MX_ADC3_Init+0x98>)
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001e7e:	4b19      	ldr	r3, [pc, #100]	@ (8001ee4 <MX_ADC3_Init+0x98>)
 8001e80:	2200      	movs	r2, #0
 8001e82:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e86:	4b17      	ldr	r3, [pc, #92]	@ (8001ee4 <MX_ADC3_Init+0x98>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e8c:	4b15      	ldr	r3, [pc, #84]	@ (8001ee4 <MX_ADC3_Init+0x98>)
 8001e8e:	4a17      	ldr	r2, [pc, #92]	@ (8001eec <MX_ADC3_Init+0xa0>)
 8001e90:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e92:	4b14      	ldr	r3, [pc, #80]	@ (8001ee4 <MX_ADC3_Init+0x98>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001e98:	4b12      	ldr	r3, [pc, #72]	@ (8001ee4 <MX_ADC3_Init+0x98>)
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001e9e:	4b11      	ldr	r3, [pc, #68]	@ (8001ee4 <MX_ADC3_Init+0x98>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001ea6:	4b0f      	ldr	r3, [pc, #60]	@ (8001ee4 <MX_ADC3_Init+0x98>)
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001eac:	480d      	ldr	r0, [pc, #52]	@ (8001ee4 <MX_ADC3_Init+0x98>)
 8001eae:	f000 fe87 	bl	8002bc0 <HAL_ADC_Init>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001eb8:	f000 fb52 	bl	8002560 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001ec8:	463b      	mov	r3, r7
 8001eca:	4619      	mov	r1, r3
 8001ecc:	4805      	ldr	r0, [pc, #20]	@ (8001ee4 <MX_ADC3_Init+0x98>)
 8001ece:	f000 febb 	bl	8002c48 <HAL_ADC_ConfigChannel>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001ed8:	f000 fb42 	bl	8002560 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001edc:	bf00      	nop
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	200001a8 	.word	0x200001a8
 8001ee8:	40012200 	.word	0x40012200
 8001eec:	0f000001 	.word	0x0f000001

08001ef0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001ef4:	4b12      	ldr	r3, [pc, #72]	@ (8001f40 <MX_I2C1_Init+0x50>)
 8001ef6:	4a13      	ldr	r2, [pc, #76]	@ (8001f44 <MX_I2C1_Init+0x54>)
 8001ef8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001efa:	4b11      	ldr	r3, [pc, #68]	@ (8001f40 <MX_I2C1_Init+0x50>)
 8001efc:	4a12      	ldr	r2, [pc, #72]	@ (8001f48 <MX_I2C1_Init+0x58>)
 8001efe:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f00:	4b0f      	ldr	r3, [pc, #60]	@ (8001f40 <MX_I2C1_Init+0x50>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001f06:	4b0e      	ldr	r3, [pc, #56]	@ (8001f40 <MX_I2C1_Init+0x50>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001f0c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f40 <MX_I2C1_Init+0x50>)
 8001f0e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001f12:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f14:	4b0a      	ldr	r3, [pc, #40]	@ (8001f40 <MX_I2C1_Init+0x50>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f1a:	4b09      	ldr	r3, [pc, #36]	@ (8001f40 <MX_I2C1_Init+0x50>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f20:	4b07      	ldr	r3, [pc, #28]	@ (8001f40 <MX_I2C1_Init+0x50>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f26:	4b06      	ldr	r3, [pc, #24]	@ (8001f40 <MX_I2C1_Init+0x50>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f2c:	4804      	ldr	r0, [pc, #16]	@ (8001f40 <MX_I2C1_Init+0x50>)
 8001f2e:	f001 fb95 	bl	800365c <HAL_I2C_Init>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d001      	beq.n	8001f3c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f38:	f000 fb12 	bl	8002560 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f3c:	bf00      	nop
 8001f3e:	bd80      	pop	{r7, pc}
 8001f40:	200001f0 	.word	0x200001f0
 8001f44:	40005400 	.word	0x40005400
 8001f48:	00061a80 	.word	0x00061a80

08001f4c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001f50:	4b17      	ldr	r3, [pc, #92]	@ (8001fb0 <MX_SPI2_Init+0x64>)
 8001f52:	4a18      	ldr	r2, [pc, #96]	@ (8001fb4 <MX_SPI2_Init+0x68>)
 8001f54:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001f56:	4b16      	ldr	r3, [pc, #88]	@ (8001fb0 <MX_SPI2_Init+0x64>)
 8001f58:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001f5c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001f5e:	4b14      	ldr	r3, [pc, #80]	@ (8001fb0 <MX_SPI2_Init+0x64>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001f64:	4b12      	ldr	r3, [pc, #72]	@ (8001fb0 <MX_SPI2_Init+0x64>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001f6a:	4b11      	ldr	r3, [pc, #68]	@ (8001fb0 <MX_SPI2_Init+0x64>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001f70:	4b0f      	ldr	r3, [pc, #60]	@ (8001fb0 <MX_SPI2_Init+0x64>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001f76:	4b0e      	ldr	r3, [pc, #56]	@ (8001fb0 <MX_SPI2_Init+0x64>)
 8001f78:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001f7c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8001f7e:	4b0c      	ldr	r3, [pc, #48]	@ (8001fb0 <MX_SPI2_Init+0x64>)
 8001f80:	2228      	movs	r2, #40	@ 0x28
 8001f82:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001f84:	4b0a      	ldr	r3, [pc, #40]	@ (8001fb0 <MX_SPI2_Init+0x64>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001f8a:	4b09      	ldr	r3, [pc, #36]	@ (8001fb0 <MX_SPI2_Init+0x64>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001f90:	4b07      	ldr	r3, [pc, #28]	@ (8001fb0 <MX_SPI2_Init+0x64>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001f96:	4b06      	ldr	r3, [pc, #24]	@ (8001fb0 <MX_SPI2_Init+0x64>)
 8001f98:	220a      	movs	r2, #10
 8001f9a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001f9c:	4804      	ldr	r0, [pc, #16]	@ (8001fb0 <MX_SPI2_Init+0x64>)
 8001f9e:	f003 f819 	bl	8004fd4 <HAL_SPI_Init>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d001      	beq.n	8001fac <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001fa8:	f000 fada 	bl	8002560 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001fac:	bf00      	nop
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	20000244 	.word	0x20000244
 8001fb4:	40003800 	.word	0x40003800

08001fb8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b086      	sub	sp, #24
 8001fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fbe:	f107 0308 	add.w	r3, r7, #8
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	601a      	str	r2, [r3, #0]
 8001fc6:	605a      	str	r2, [r3, #4]
 8001fc8:	609a      	str	r2, [r3, #8]
 8001fca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fcc:	463b      	mov	r3, r7
 8001fce:	2200      	movs	r2, #0
 8001fd0:	601a      	str	r2, [r3, #0]
 8001fd2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001fd4:	4b1e      	ldr	r3, [pc, #120]	@ (8002050 <MX_TIM2_Init+0x98>)
 8001fd6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001fda:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8499;
 8001fdc:	4b1c      	ldr	r3, [pc, #112]	@ (8002050 <MX_TIM2_Init+0x98>)
 8001fde:	f242 1233 	movw	r2, #8499	@ 0x2133
 8001fe2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fe4:	4b1a      	ldr	r3, [pc, #104]	@ (8002050 <MX_TIM2_Init+0x98>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 8001fea:	4b19      	ldr	r3, [pc, #100]	@ (8002050 <MX_TIM2_Init+0x98>)
 8001fec:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001ff0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ff2:	4b17      	ldr	r3, [pc, #92]	@ (8002050 <MX_TIM2_Init+0x98>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ff8:	4b15      	ldr	r3, [pc, #84]	@ (8002050 <MX_TIM2_Init+0x98>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001ffe:	4814      	ldr	r0, [pc, #80]	@ (8002050 <MX_TIM2_Init+0x98>)
 8002000:	f003 f8b9 	bl	8005176 <HAL_TIM_Base_Init>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800200a:	f000 faa9 	bl	8002560 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800200e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002012:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002014:	f107 0308 	add.w	r3, r7, #8
 8002018:	4619      	mov	r1, r3
 800201a:	480d      	ldr	r0, [pc, #52]	@ (8002050 <MX_TIM2_Init+0x98>)
 800201c:	f003 f96a 	bl	80052f4 <HAL_TIM_ConfigClockSource>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002026:	f000 fa9b 	bl	8002560 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800202a:	2300      	movs	r3, #0
 800202c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800202e:	2300      	movs	r3, #0
 8002030:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002032:	463b      	mov	r3, r7
 8002034:	4619      	mov	r1, r3
 8002036:	4806      	ldr	r0, [pc, #24]	@ (8002050 <MX_TIM2_Init+0x98>)
 8002038:	f003 fb6a 	bl	8005710 <HAL_TIMEx_MasterConfigSynchronization>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002042:	f000 fa8d 	bl	8002560 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002046:	bf00      	nop
 8002048:	3718      	adds	r7, #24
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	2000029c 	.word	0x2000029c

08002054 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002058:	4b11      	ldr	r3, [pc, #68]	@ (80020a0 <MX_USART1_UART_Init+0x4c>)
 800205a:	4a12      	ldr	r2, [pc, #72]	@ (80020a4 <MX_USART1_UART_Init+0x50>)
 800205c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800205e:	4b10      	ldr	r3, [pc, #64]	@ (80020a0 <MX_USART1_UART_Init+0x4c>)
 8002060:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002064:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002066:	4b0e      	ldr	r3, [pc, #56]	@ (80020a0 <MX_USART1_UART_Init+0x4c>)
 8002068:	2200      	movs	r2, #0
 800206a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800206c:	4b0c      	ldr	r3, [pc, #48]	@ (80020a0 <MX_USART1_UART_Init+0x4c>)
 800206e:	2200      	movs	r2, #0
 8002070:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002072:	4b0b      	ldr	r3, [pc, #44]	@ (80020a0 <MX_USART1_UART_Init+0x4c>)
 8002074:	2200      	movs	r2, #0
 8002076:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002078:	4b09      	ldr	r3, [pc, #36]	@ (80020a0 <MX_USART1_UART_Init+0x4c>)
 800207a:	220c      	movs	r2, #12
 800207c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800207e:	4b08      	ldr	r3, [pc, #32]	@ (80020a0 <MX_USART1_UART_Init+0x4c>)
 8002080:	2200      	movs	r2, #0
 8002082:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002084:	4b06      	ldr	r3, [pc, #24]	@ (80020a0 <MX_USART1_UART_Init+0x4c>)
 8002086:	2200      	movs	r2, #0
 8002088:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800208a:	4805      	ldr	r0, [pc, #20]	@ (80020a0 <MX_USART1_UART_Init+0x4c>)
 800208c:	f003 fbbc 	bl	8005808 <HAL_UART_Init>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002096:	f000 fa63 	bl	8002560 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800209a:	bf00      	nop
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	200002e4 	.word	0x200002e4
 80020a4:	40011000 	.word	0x40011000

080020a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b08c      	sub	sp, #48	@ 0x30
 80020ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020ae:	f107 031c 	add.w	r3, r7, #28
 80020b2:	2200      	movs	r2, #0
 80020b4:	601a      	str	r2, [r3, #0]
 80020b6:	605a      	str	r2, [r3, #4]
 80020b8:	609a      	str	r2, [r3, #8]
 80020ba:	60da      	str	r2, [r3, #12]
 80020bc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	61bb      	str	r3, [r7, #24]
 80020c2:	4b46      	ldr	r3, [pc, #280]	@ (80021dc <MX_GPIO_Init+0x134>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020c6:	4a45      	ldr	r2, [pc, #276]	@ (80021dc <MX_GPIO_Init+0x134>)
 80020c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ce:	4b43      	ldr	r3, [pc, #268]	@ (80021dc <MX_GPIO_Init+0x134>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020d6:	61bb      	str	r3, [r7, #24]
 80020d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	617b      	str	r3, [r7, #20]
 80020de:	4b3f      	ldr	r3, [pc, #252]	@ (80021dc <MX_GPIO_Init+0x134>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e2:	4a3e      	ldr	r2, [pc, #248]	@ (80021dc <MX_GPIO_Init+0x134>)
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ea:	4b3c      	ldr	r3, [pc, #240]	@ (80021dc <MX_GPIO_Init+0x134>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	617b      	str	r3, [r7, #20]
 80020f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	613b      	str	r3, [r7, #16]
 80020fa:	4b38      	ldr	r3, [pc, #224]	@ (80021dc <MX_GPIO_Init+0x134>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fe:	4a37      	ldr	r2, [pc, #220]	@ (80021dc <MX_GPIO_Init+0x134>)
 8002100:	f043 0304 	orr.w	r3, r3, #4
 8002104:	6313      	str	r3, [r2, #48]	@ 0x30
 8002106:	4b35      	ldr	r3, [pc, #212]	@ (80021dc <MX_GPIO_Init+0x134>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800210a:	f003 0304 	and.w	r3, r3, #4
 800210e:	613b      	str	r3, [r7, #16]
 8002110:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	60fb      	str	r3, [r7, #12]
 8002116:	4b31      	ldr	r3, [pc, #196]	@ (80021dc <MX_GPIO_Init+0x134>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800211a:	4a30      	ldr	r2, [pc, #192]	@ (80021dc <MX_GPIO_Init+0x134>)
 800211c:	f043 0302 	orr.w	r3, r3, #2
 8002120:	6313      	str	r3, [r2, #48]	@ 0x30
 8002122:	4b2e      	ldr	r3, [pc, #184]	@ (80021dc <MX_GPIO_Init+0x134>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	60fb      	str	r3, [r7, #12]
 800212c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	60bb      	str	r3, [r7, #8]
 8002132:	4b2a      	ldr	r3, [pc, #168]	@ (80021dc <MX_GPIO_Init+0x134>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002136:	4a29      	ldr	r2, [pc, #164]	@ (80021dc <MX_GPIO_Init+0x134>)
 8002138:	f043 0310 	orr.w	r3, r3, #16
 800213c:	6313      	str	r3, [r2, #48]	@ 0x30
 800213e:	4b27      	ldr	r3, [pc, #156]	@ (80021dc <MX_GPIO_Init+0x134>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002142:	f003 0310 	and.w	r3, r3, #16
 8002146:	60bb      	str	r3, [r7, #8]
 8002148:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800214a:	2300      	movs	r3, #0
 800214c:	607b      	str	r3, [r7, #4]
 800214e:	4b23      	ldr	r3, [pc, #140]	@ (80021dc <MX_GPIO_Init+0x134>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002152:	4a22      	ldr	r2, [pc, #136]	@ (80021dc <MX_GPIO_Init+0x134>)
 8002154:	f043 0308 	orr.w	r3, r3, #8
 8002158:	6313      	str	r3, [r2, #48]	@ 0x30
 800215a:	4b20      	ldr	r3, [pc, #128]	@ (80021dc <MX_GPIO_Init+0x134>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215e:	f003 0308 	and.w	r3, r3, #8
 8002162:	607b      	str	r3, [r7, #4]
 8002164:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_BL_Pin|TOUCH_CS_Pin, GPIO_PIN_RESET);
 8002166:	2200      	movs	r2, #0
 8002168:	f241 0102 	movw	r1, #4098	@ 0x1002
 800216c:	481c      	ldr	r0, [pc, #112]	@ (80021e0 <MX_GPIO_Init+0x138>)
 800216e:	f001 fa37 	bl	80035e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : TC_PEN_Pin */
  GPIO_InitStruct.Pin = TC_PEN_Pin;
 8002172:	2320      	movs	r3, #32
 8002174:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002176:	2300      	movs	r3, #0
 8002178:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217a:	2300      	movs	r3, #0
 800217c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(TC_PEN_GPIO_Port, &GPIO_InitStruct);
 800217e:	f107 031c 	add.w	r3, r7, #28
 8002182:	4619      	mov	r1, r3
 8002184:	4817      	ldr	r0, [pc, #92]	@ (80021e4 <MX_GPIO_Init+0x13c>)
 8002186:	f001 f88f 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800218a:	2301      	movs	r3, #1
 800218c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800218e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002192:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002194:	2301      	movs	r3, #1
 8002196:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002198:	f107 031c 	add.w	r3, r7, #28
 800219c:	4619      	mov	r1, r3
 800219e:	4810      	ldr	r0, [pc, #64]	@ (80021e0 <MX_GPIO_Init+0x138>)
 80021a0:	f001 f882 	bl	80032a8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_BL_Pin TOUCH_CS_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin|TOUCH_CS_Pin;
 80021a4:	f241 0302 	movw	r3, #4098	@ 0x1002
 80021a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021aa:	2301      	movs	r3, #1
 80021ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ae:	2300      	movs	r3, #0
 80021b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021b2:	2300      	movs	r3, #0
 80021b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b6:	f107 031c 	add.w	r3, r7, #28
 80021ba:	4619      	mov	r1, r3
 80021bc:	4808      	ldr	r0, [pc, #32]	@ (80021e0 <MX_GPIO_Init+0x138>)
 80021be:	f001 f873 	bl	80032a8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80021c2:	2200      	movs	r2, #0
 80021c4:	2100      	movs	r1, #0
 80021c6:	2006      	movs	r0, #6
 80021c8:	f001 f837 	bl	800323a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80021cc:	2006      	movs	r0, #6
 80021ce:	f001 f850 	bl	8003272 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80021d2:	bf00      	nop
 80021d4:	3730      	adds	r7, #48	@ 0x30
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40023800 	.word	0x40023800
 80021e0:	40020400 	.word	0x40020400
 80021e4:	40020800 	.word	0x40020800

080021e8 <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	b088      	sub	sp, #32
 80021ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 80021ee:	1d3b      	adds	r3, r7, #4
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
 80021f4:	605a      	str	r2, [r3, #4]
 80021f6:	609a      	str	r2, [r3, #8]
 80021f8:	60da      	str	r2, [r3, #12]
 80021fa:	611a      	str	r2, [r3, #16]
 80021fc:	615a      	str	r2, [r3, #20]
 80021fe:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8002200:	4b27      	ldr	r3, [pc, #156]	@ (80022a0 <MX_FSMC_Init+0xb8>)
 8002202:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 8002206:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 8002208:	4b25      	ldr	r3, [pc, #148]	@ (80022a0 <MX_FSMC_Init+0xb8>)
 800220a:	4a26      	ldr	r2, [pc, #152]	@ (80022a4 <MX_FSMC_Init+0xbc>)
 800220c:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 800220e:	4b24      	ldr	r3, [pc, #144]	@ (80022a0 <MX_FSMC_Init+0xb8>)
 8002210:	2200      	movs	r2, #0
 8002212:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8002214:	4b22      	ldr	r3, [pc, #136]	@ (80022a0 <MX_FSMC_Init+0xb8>)
 8002216:	2200      	movs	r2, #0
 8002218:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800221a:	4b21      	ldr	r3, [pc, #132]	@ (80022a0 <MX_FSMC_Init+0xb8>)
 800221c:	2200      	movs	r2, #0
 800221e:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002220:	4b1f      	ldr	r3, [pc, #124]	@ (80022a0 <MX_FSMC_Init+0xb8>)
 8002222:	2210      	movs	r2, #16
 8002224:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 8002226:	4b1e      	ldr	r3, [pc, #120]	@ (80022a0 <MX_FSMC_Init+0xb8>)
 8002228:	2200      	movs	r2, #0
 800222a:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 800222c:	4b1c      	ldr	r3, [pc, #112]	@ (80022a0 <MX_FSMC_Init+0xb8>)
 800222e:	2200      	movs	r2, #0
 8002230:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8002232:	4b1b      	ldr	r3, [pc, #108]	@ (80022a0 <MX_FSMC_Init+0xb8>)
 8002234:	2200      	movs	r2, #0
 8002236:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 8002238:	4b19      	ldr	r3, [pc, #100]	@ (80022a0 <MX_FSMC_Init+0xb8>)
 800223a:	2200      	movs	r2, #0
 800223c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 800223e:	4b18      	ldr	r3, [pc, #96]	@ (80022a0 <MX_FSMC_Init+0xb8>)
 8002240:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002244:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 8002246:	4b16      	ldr	r3, [pc, #88]	@ (80022a0 <MX_FSMC_Init+0xb8>)
 8002248:	2200      	movs	r2, #0
 800224a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 800224c:	4b14      	ldr	r3, [pc, #80]	@ (80022a0 <MX_FSMC_Init+0xb8>)
 800224e:	2200      	movs	r2, #0
 8002250:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 8002252:	4b13      	ldr	r3, [pc, #76]	@ (80022a0 <MX_FSMC_Init+0xb8>)
 8002254:	2200      	movs	r2, #0
 8002256:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 8002258:	4b11      	ldr	r3, [pc, #68]	@ (80022a0 <MX_FSMC_Init+0xb8>)
 800225a:	2200      	movs	r2, #0
 800225c:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 800225e:	4b10      	ldr	r3, [pc, #64]	@ (80022a0 <MX_FSMC_Init+0xb8>)
 8002260:	2200      	movs	r2, #0
 8002262:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 1;
 8002264:	2301      	movs	r3, #1
 8002266:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8002268:	230f      	movs	r3, #15
 800226a:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 5;
 800226c:	2305      	movs	r3, #5
 800226e:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 0;
 8002270:	2300      	movs	r3, #0
 8002272:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8002274:	2310      	movs	r3, #16
 8002276:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8002278:	2311      	movs	r3, #17
 800227a:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 800227c:	2300      	movs	r3, #0
 800227e:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8002280:	1d3b      	adds	r3, r7, #4
 8002282:	2200      	movs	r2, #0
 8002284:	4619      	mov	r1, r3
 8002286:	4806      	ldr	r0, [pc, #24]	@ (80022a0 <MX_FSMC_Init+0xb8>)
 8002288:	f002 ff2d 	bl	80050e6 <HAL_SRAM_Init>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 8002292:	f000 f965 	bl	8002560 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 8002296:	bf00      	nop
 8002298:	3720      	adds	r7, #32
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
 800229e:	bf00      	nop
 80022a0:	2000032c 	.word	0x2000032c
 80022a4:	a0000104 	.word	0xa0000104

080022a8 <Send_AT_Command>:
    		Reload = true;
    		count = 0;
    	}
    }
}
void Send_AT_Command(UART_HandleTypeDef *huart, const char *command, uint32_t timeout) {
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
    // Gửi lệnh qua UART

    HAL_UART_Transmit(huart, (uint8_t *)command, strlen(command), HAL_MAX_DELAY);
 80022b4:	68b8      	ldr	r0, [r7, #8]
 80022b6:	f7fd ff8b 	bl	80001d0 <strlen>
 80022ba:	4603      	mov	r3, r0
 80022bc:	b29a      	uxth	r2, r3
 80022be:	f04f 33ff 	mov.w	r3, #4294967295
 80022c2:	68b9      	ldr	r1, [r7, #8]
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f003 faef 	bl	80058a8 <HAL_UART_Transmit>

//    memset(uart_rx_buffer, 0, UART_BUFFER_SIZE); // Xóa buffer
//    HAL_UART_Receive(huart, uart_rx_buffer, UART_BUFFER_SIZE, timeout);

    lcdSetCursor(0,220);
 80022ca:	21dc      	movs	r1, #220	@ 0xdc
 80022cc:	2000      	movs	r0, #0
 80022ce:	f7ff fc35 	bl	8001b3c <lcdSetCursor>
    lcdPrintf("ESP Send: %s           ", command);
 80022d2:	68b9      	ldr	r1, [r7, #8]
 80022d4:	4803      	ldr	r0, [pc, #12]	@ (80022e4 <Send_AT_Command+0x3c>)
 80022d6:	f7ff fb15 	bl	8001904 <lcdPrintf>
}
 80022da:	bf00      	nop
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	08006db4 	.word	0x08006db4

080022e8 <Send_AT_Commands>:



void Send_AT_Commands(UART_HandleTypeDef *huart) {
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b084      	sub	sp, #16
 80022ec:	af02      	add	r7, sp, #8
 80022ee:	6078      	str	r0, [r7, #4]
	sprintf(MAX30100_data, "HR=%d;SPO2=%d;AD8232=%d\n", heartRate,spo2,AD8232_value);
 80022f0:	4b0b      	ldr	r3, [pc, #44]	@ (8002320 <Send_AT_Commands+0x38>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	461a      	mov	r2, r3
 80022f6:	4b0b      	ldr	r3, [pc, #44]	@ (8002324 <Send_AT_Commands+0x3c>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	4619      	mov	r1, r3
 80022fc:	4b0a      	ldr	r3, [pc, #40]	@ (8002328 <Send_AT_Commands+0x40>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	9300      	str	r3, [sp, #0]
 8002302:	460b      	mov	r3, r1
 8002304:	4909      	ldr	r1, [pc, #36]	@ (800232c <Send_AT_Commands+0x44>)
 8002306:	480a      	ldr	r0, [pc, #40]	@ (8002330 <Send_AT_Commands+0x48>)
 8002308:	f004 f83e 	bl	8006388 <siprintf>
	Send_AT_Command(huart, MAX30100_data , 10000);
 800230c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002310:	4907      	ldr	r1, [pc, #28]	@ (8002330 <Send_AT_Commands+0x48>)
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	f7ff ffc8 	bl	80022a8 <Send_AT_Command>
}
 8002318:	bf00      	nop
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	20000824 	.word	0x20000824
 8002324:	20000825 	.word	0x20000825
 8002328:	2000037c 	.word	0x2000037c
 800232c:	08006dcc 	.word	0x08006dcc
 8002330:	20000424 	.word	0x20000424

08002334 <Max30100_Init>:
    if (huart->Instance == USART1) { // Kiểm tra UART đúng
        // Xử lý dữ liệu nhận được ở đây
        HAL_UART_Receive_IT(huart, uart_rx_buffer, UART_BUFFER_SIZE);
    }
}
void Max30100_Init (){
 8002334:	b580      	push	{r7, lr}
 8002336:	b082      	sub	sp, #8
 8002338:	af00      	add	r7, sp, #0
	// Init
	PulseOximeter_Init(&pox);
 800233a:	4845      	ldr	r0, [pc, #276]	@ (8002450 <Max30100_Init+0x11c>)
 800233c:	f7fe fcb8 	bl	8000cb0 <PulseOximeter_Init>
	PulseOximeter_SetOnBeatDetectedCallback(&pox, onBeatDetected);
 8002340:	4944      	ldr	r1, [pc, #272]	@ (8002454 <Max30100_Init+0x120>)
 8002342:	4843      	ldr	r0, [pc, #268]	@ (8002450 <Max30100_Init+0x11c>)
 8002344:	f7fe fd57 	bl	8000df6 <PulseOximeter_SetOnBeatDetectedCallback>
	if (!PulseOximeter_Begin(&pox, PULSEOXIMETER_DEBUGGINGMODE_NONE)) {
 8002348:	2100      	movs	r1, #0
 800234a:	4841      	ldr	r0, [pc, #260]	@ (8002450 <Max30100_Init+0x11c>)
 800234c:	f7fe fcd8 	bl	8000d00 <PulseOximeter_Begin>
 8002350:	4603      	mov	r3, r0
 8002352:	f083 0301 	eor.w	r3, r3, #1
 8002356:	b2db      	uxtb	r3, r3
 8002358:	2b00      	cmp	r3, #0
 800235a:	d008      	beq.n	800236e <Max30100_Init+0x3a>
	  lcdSetCursor(0, 0);
 800235c:	2100      	movs	r1, #0
 800235e:	2000      	movs	r0, #0
 8002360:	f7ff fbec 	bl	8001b3c <lcdSetCursor>
	  lcdPrintf("Initializing!!");
 8002364:	483c      	ldr	r0, [pc, #240]	@ (8002458 <Max30100_Init+0x124>)
 8002366:	f7ff facd 	bl	8001904 <lcdPrintf>
	  while (1);
 800236a:	bf00      	nop
 800236c:	e7fd      	b.n	800236a <Max30100_Init+0x36>
	} else {
	  lcdSetCursor(0, 0);
 800236e:	2100      	movs	r1, #0
 8002370:	2000      	movs	r0, #0
 8002372:	f7ff fbe3 	bl	8001b3c <lcdSetCursor>
	  lcdPrintf("Init successfull");
 8002376:	4839      	ldr	r0, [pc, #228]	@ (800245c <Max30100_Init+0x128>)
 8002378:	f7ff fac4 	bl	8001904 <lcdPrintf>
	}
	// Check
	uint8_t spo2cfg = MAX30100_ReadRegister(MAX30100_REG_SPO2_CONFIGURATION);
 800237c:	2007      	movs	r0, #7
 800237e:	f7fe fa59 	bl	8000834 <MAX30100_ReadRegister>
 8002382:	4603      	mov	r3, r0
 8002384:	71fb      	strb	r3, [r7, #7]
	spo2cfg |= (1 << 6);
 8002386:	79fb      	ldrb	r3, [r7, #7]
 8002388:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800238c:	71fb      	strb	r3, [r7, #7]
	MAX30100_WriteRegister(MAX30100_REG_SPO2_CONFIGURATION, spo2cfg);
 800238e:	79fb      	ldrb	r3, [r7, #7]
 8002390:	4619      	mov	r1, r3
 8002392:	2007      	movs	r0, #7
 8002394:	f7fe fa6a 	bl	800086c <MAX30100_WriteRegister>
	spo2cfg = MAX30100_ReadRegister(MAX30100_REG_SPO2_CONFIGURATION);
 8002398:	2007      	movs	r0, #7
 800239a:	f7fe fa4b 	bl	8000834 <MAX30100_ReadRegister>
 800239e:	4603      	mov	r3, r0
 80023a0:	71fb      	strb	r3, [r7, #7]
	sprintf(MAX30100_data, "SPO2CFG:0x%02X", spo2cfg);
 80023a2:	79fb      	ldrb	r3, [r7, #7]
 80023a4:	461a      	mov	r2, r3
 80023a6:	492e      	ldr	r1, [pc, #184]	@ (8002460 <Max30100_Init+0x12c>)
 80023a8:	482e      	ldr	r0, [pc, #184]	@ (8002464 <Max30100_Init+0x130>)
 80023aa:	f003 ffed 	bl	8006388 <siprintf>
	lcdSetCursor(0, 15);
 80023ae:	210f      	movs	r1, #15
 80023b0:	2000      	movs	r0, #0
 80023b2:	f7ff fbc3 	bl	8001b3c <lcdSetCursor>
	lcdPrintf(MAX30100_data);
 80023b6:	482b      	ldr	r0, [pc, #172]	@ (8002464 <Max30100_Init+0x130>)
 80023b8:	f7ff faa4 	bl	8001904 <lcdPrintf>
	//
	MAX30100_WriteRegister(MAX30100_REG_INTERRUPT_STATUS, 0x00);
 80023bc:	2100      	movs	r1, #0
 80023be:	2000      	movs	r0, #0
 80023c0:	f7fe fa54 	bl	800086c <MAX30100_WriteRegister>
	uint8_t mode = MAX30100_ReadRegister(MAX30100_REG_MODE_CONFIGURATION);
 80023c4:	2006      	movs	r0, #6
 80023c6:	f7fe fa35 	bl	8000834 <MAX30100_ReadRegister>
 80023ca:	4603      	mov	r3, r0
 80023cc:	71bb      	strb	r3, [r7, #6]
	sprintf(MAX30100_data, "MODE:0x%02X", mode);
 80023ce:	79bb      	ldrb	r3, [r7, #6]
 80023d0:	461a      	mov	r2, r3
 80023d2:	4925      	ldr	r1, [pc, #148]	@ (8002468 <Max30100_Init+0x134>)
 80023d4:	4823      	ldr	r0, [pc, #140]	@ (8002464 <Max30100_Init+0x130>)
 80023d6:	f003 ffd7 	bl	8006388 <siprintf>
	lcdSetCursor(0, 30);
 80023da:	211e      	movs	r1, #30
 80023dc:	2000      	movs	r0, #0
 80023de:	f7ff fbad 	bl	8001b3c <lcdSetCursor>
	lcdPrintf(MAX30100_data);
 80023e2:	4820      	ldr	r0, [pc, #128]	@ (8002464 <Max30100_Init+0x130>)
 80023e4:	f7ff fa8e 	bl	8001904 <lcdPrintf>
	//
	uint8_t status = MAX30100_ReadRegister(MAX30100_REG_INTERRUPT_STATUS);
 80023e8:	2000      	movs	r0, #0
 80023ea:	f7fe fa23 	bl	8000834 <MAX30100_ReadRegister>
 80023ee:	4603      	mov	r3, r0
 80023f0:	717b      	strb	r3, [r7, #5]
	sprintf(MAX30100_data, "INT:0x%02X", status);
 80023f2:	797b      	ldrb	r3, [r7, #5]
 80023f4:	461a      	mov	r2, r3
 80023f6:	491d      	ldr	r1, [pc, #116]	@ (800246c <Max30100_Init+0x138>)
 80023f8:	481a      	ldr	r0, [pc, #104]	@ (8002464 <Max30100_Init+0x130>)
 80023fa:	f003 ffc5 	bl	8006388 <siprintf>
	lcdSetCursor(0, 45);
 80023fe:	212d      	movs	r1, #45	@ 0x2d
 8002400:	2000      	movs	r0, #0
 8002402:	f7ff fb9b 	bl	8001b3c <lcdSetCursor>
	lcdPrintf(MAX30100_data);
 8002406:	4817      	ldr	r0, [pc, #92]	@ (8002464 <Max30100_Init+0x130>)
 8002408:	f7ff fa7c 	bl	8001904 <lcdPrintf>
	//
	uint8_t part_id = MAX30100_GetPartId(&pox.hrm);
 800240c:	4818      	ldr	r0, [pc, #96]	@ (8002470 <Max30100_Init+0x13c>)
 800240e:	f7fe fa04 	bl	800081a <MAX30100_GetPartId>
 8002412:	4603      	mov	r3, r0
 8002414:	713b      	strb	r3, [r7, #4]
	sprintf(MAX30100_data, "PartID: 0x%02X", part_id);
 8002416:	793b      	ldrb	r3, [r7, #4]
 8002418:	461a      	mov	r2, r3
 800241a:	4916      	ldr	r1, [pc, #88]	@ (8002474 <Max30100_Init+0x140>)
 800241c:	4811      	ldr	r0, [pc, #68]	@ (8002464 <Max30100_Init+0x130>)
 800241e:	f003 ffb3 	bl	8006388 <siprintf>
	lcdSetCursor(0, 60);
 8002422:	213c      	movs	r1, #60	@ 0x3c
 8002424:	2000      	movs	r0, #0
 8002426:	f7ff fb89 	bl	8001b3c <lcdSetCursor>
	lcdPrintf(MAX30100_data);
 800242a:	480e      	ldr	r0, [pc, #56]	@ (8002464 <Max30100_Init+0x130>)
 800242c:	f7ff fa6a 	bl	8001904 <lcdPrintf>
	//
	HAL_Delay(3000);
 8002430:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002434:	f000 fba0 	bl	8002b78 <HAL_Delay>
	tsLastReport = HAL_GetTick();
 8002438:	f000 fb92 	bl	8002b60 <HAL_GetTick>
 800243c:	4603      	mov	r3, r0
 800243e:	4a0e      	ldr	r2, [pc, #56]	@ (8002478 <Max30100_Init+0x144>)
 8002440:	6013      	str	r3, [r2, #0]
	lcdFillRGB(COLOR_BLACK);
 8002442:	2000      	movs	r0, #0
 8002444:	f7ff f966 	bl	8001714 <lcdFillRGB>
}
 8002448:	bf00      	nop
 800244a:	3708      	adds	r7, #8
 800244c:	46bd      	mov	sp, r7
 800244e:	bd80      	pop	{r7, pc}
 8002450:	20000380 	.word	0x20000380
 8002454:	08001cdf 	.word	0x08001cdf
 8002458:	08006de8 	.word	0x08006de8
 800245c:	08006df8 	.word	0x08006df8
 8002460:	08006e0c 	.word	0x08006e0c
 8002464:	20000424 	.word	0x20000424
 8002468:	08006e1c 	.word	0x08006e1c
 800246c:	08006e28 	.word	0x08006e28
 8002470:	200003d8 	.word	0x200003d8
 8002474:	08006e34 	.word	0x08006e34
 8002478:	20000420 	.word	0x20000420

0800247c <Max30100>:
void Max30100 (){
 800247c:	b580      	push	{r7, lr}
 800247e:	b082      	sub	sp, #8
 8002480:	af00      	add	r7, sp, #0
    PulseOximeter_Update(&pox);
 8002482:	482d      	ldr	r0, [pc, #180]	@ (8002538 <Max30100+0xbc>)
 8002484:	f7fe fc86 	bl	8000d94 <PulseOximeter_Update>
    heartRate = PulseOximeter_GetHeartRate(&pox);
 8002488:	482b      	ldr	r0, [pc, #172]	@ (8002538 <Max30100+0xbc>)
 800248a:	f7fe fc96 	bl	8000dba <PulseOximeter_GetHeartRate>
 800248e:	eef0 7a40 	vmov.f32	s15, s0
 8002492:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002496:	edc7 7a01 	vstr	s15, [r7, #4]
 800249a:	793b      	ldrb	r3, [r7, #4]
 800249c:	b2da      	uxtb	r2, r3
 800249e:	4b27      	ldr	r3, [pc, #156]	@ (800253c <Max30100+0xc0>)
 80024a0:	701a      	strb	r2, [r3, #0]
    spo2 = PulseOximeter_GetSpO2(&pox);
 80024a2:	4825      	ldr	r0, [pc, #148]	@ (8002538 <Max30100+0xbc>)
 80024a4:	f7fe fc99 	bl	8000dda <PulseOximeter_GetSpO2>
 80024a8:	4603      	mov	r3, r0
 80024aa:	461a      	mov	r2, r3
 80024ac:	4b24      	ldr	r3, [pc, #144]	@ (8002540 <Max30100+0xc4>)
 80024ae:	701a      	strb	r2, [r3, #0]

    // Hiển thị LCD
    sprintf(MAX30100_data, "HR: %d bpm", heartRate);
 80024b0:	4b22      	ldr	r3, [pc, #136]	@ (800253c <Max30100+0xc0>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	461a      	mov	r2, r3
 80024b6:	4923      	ldr	r1, [pc, #140]	@ (8002544 <Max30100+0xc8>)
 80024b8:	4823      	ldr	r0, [pc, #140]	@ (8002548 <Max30100+0xcc>)
 80024ba:	f003 ff65 	bl	8006388 <siprintf>
    lcdSetCursor(0, 15);
 80024be:	210f      	movs	r1, #15
 80024c0:	2000      	movs	r0, #0
 80024c2:	f7ff fb3b 	bl	8001b3c <lcdSetCursor>
    lcdPrintf(MAX30100_data);
 80024c6:	4820      	ldr	r0, [pc, #128]	@ (8002548 <Max30100+0xcc>)
 80024c8:	f7ff fa1c 	bl	8001904 <lcdPrintf>
    sprintf(MAX30100_data, "SpO2: %d", spo2);
 80024cc:	4b1c      	ldr	r3, [pc, #112]	@ (8002540 <Max30100+0xc4>)
 80024ce:	781b      	ldrb	r3, [r3, #0]
 80024d0:	461a      	mov	r2, r3
 80024d2:	491e      	ldr	r1, [pc, #120]	@ (800254c <Max30100+0xd0>)
 80024d4:	481c      	ldr	r0, [pc, #112]	@ (8002548 <Max30100+0xcc>)
 80024d6:	f003 ff57 	bl	8006388 <siprintf>
    lcdSetCursor(0, 30);
 80024da:	211e      	movs	r1, #30
 80024dc:	2000      	movs	r0, #0
 80024de:	f7ff fb2d 	bl	8001b3c <lcdSetCursor>
    lcdPrintf(MAX30100_data);
 80024e2:	4819      	ldr	r0, [pc, #100]	@ (8002548 <Max30100+0xcc>)
 80024e4:	f7ff fa0e 	bl	8001904 <lcdPrintf>
    sprintf(MAX30100_data, "AD8232: %d", AD8232_value);
 80024e8:	4b19      	ldr	r3, [pc, #100]	@ (8002550 <Max30100+0xd4>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	461a      	mov	r2, r3
 80024ee:	4919      	ldr	r1, [pc, #100]	@ (8002554 <Max30100+0xd8>)
 80024f0:	4815      	ldr	r0, [pc, #84]	@ (8002548 <Max30100+0xcc>)
 80024f2:	f003 ff49 	bl	8006388 <siprintf>
    lcdSetCursor(0, 45);
 80024f6:	212d      	movs	r1, #45	@ 0x2d
 80024f8:	2000      	movs	r0, #0
 80024fa:	f7ff fb1f 	bl	8001b3c <lcdSetCursor>
    lcdPrintf(MAX30100_data);
 80024fe:	4812      	ldr	r0, [pc, #72]	@ (8002548 <Max30100+0xcc>)
 8002500:	f7ff fa00 	bl	8001904 <lcdPrintf>

    // Send Data định kỳ
    if (HAL_GetTick() - tsLastReport > 5000) {
 8002504:	f000 fb2c 	bl	8002b60 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	4b13      	ldr	r3, [pc, #76]	@ (8002558 <Max30100+0xdc>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002514:	4293      	cmp	r3, r2
 8002516:	d907      	bls.n	8002528 <Max30100+0xac>
        Send_AT_Commands(&huart1);
 8002518:	4810      	ldr	r0, [pc, #64]	@ (800255c <Max30100+0xe0>)
 800251a:	f7ff fee5 	bl	80022e8 <Send_AT_Commands>
        tsLastReport = HAL_GetTick();
 800251e:	f000 fb1f 	bl	8002b60 <HAL_GetTick>
 8002522:	4603      	mov	r3, r0
 8002524:	4a0c      	ldr	r2, [pc, #48]	@ (8002558 <Max30100+0xdc>)
 8002526:	6013      	str	r3, [r2, #0]
    }

    HAL_Delay(10);
 8002528:	200a      	movs	r0, #10
 800252a:	f000 fb25 	bl	8002b78 <HAL_Delay>
}
 800252e:	bf00      	nop
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	20000380 	.word	0x20000380
 800253c:	20000824 	.word	0x20000824
 8002540:	20000825 	.word	0x20000825
 8002544:	08006e44 	.word	0x08006e44
 8002548:	20000424 	.word	0x20000424
 800254c:	08006e50 	.word	0x08006e50
 8002550:	2000037c 	.word	0x2000037c
 8002554:	08006e5c 	.word	0x08006e5c
 8002558:	20000420 	.word	0x20000420
 800255c:	200002e4 	.word	0x200002e4

08002560 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002560:	b480      	push	{r7}
 8002562:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002564:	b672      	cpsid	i
}
 8002566:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002568:	bf00      	nop
 800256a:	e7fd      	b.n	8002568 <Error_Handler+0x8>

0800256c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	607b      	str	r3, [r7, #4]
 8002576:	4b10      	ldr	r3, [pc, #64]	@ (80025b8 <HAL_MspInit+0x4c>)
 8002578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800257a:	4a0f      	ldr	r2, [pc, #60]	@ (80025b8 <HAL_MspInit+0x4c>)
 800257c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002580:	6453      	str	r3, [r2, #68]	@ 0x44
 8002582:	4b0d      	ldr	r3, [pc, #52]	@ (80025b8 <HAL_MspInit+0x4c>)
 8002584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002586:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800258a:	607b      	str	r3, [r7, #4]
 800258c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800258e:	2300      	movs	r3, #0
 8002590:	603b      	str	r3, [r7, #0]
 8002592:	4b09      	ldr	r3, [pc, #36]	@ (80025b8 <HAL_MspInit+0x4c>)
 8002594:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002596:	4a08      	ldr	r2, [pc, #32]	@ (80025b8 <HAL_MspInit+0x4c>)
 8002598:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800259c:	6413      	str	r3, [r2, #64]	@ 0x40
 800259e:	4b06      	ldr	r3, [pc, #24]	@ (80025b8 <HAL_MspInit+0x4c>)
 80025a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80025a6:	603b      	str	r3, [r7, #0]
 80025a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80025aa:	bf00      	nop
 80025ac:	370c      	adds	r7, #12
 80025ae:	46bd      	mov	sp, r7
 80025b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b4:	4770      	bx	lr
 80025b6:	bf00      	nop
 80025b8:	40023800 	.word	0x40023800

080025bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b08a      	sub	sp, #40	@ 0x28
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025c4:	f107 0314 	add.w	r3, r7, #20
 80025c8:	2200      	movs	r2, #0
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	605a      	str	r2, [r3, #4]
 80025ce:	609a      	str	r2, [r3, #8]
 80025d0:	60da      	str	r2, [r3, #12]
 80025d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a17      	ldr	r2, [pc, #92]	@ (8002638 <HAL_ADC_MspInit+0x7c>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d127      	bne.n	800262e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80025de:	2300      	movs	r3, #0
 80025e0:	613b      	str	r3, [r7, #16]
 80025e2:	4b16      	ldr	r3, [pc, #88]	@ (800263c <HAL_ADC_MspInit+0x80>)
 80025e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025e6:	4a15      	ldr	r2, [pc, #84]	@ (800263c <HAL_ADC_MspInit+0x80>)
 80025e8:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80025ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80025ee:	4b13      	ldr	r3, [pc, #76]	@ (800263c <HAL_ADC_MspInit+0x80>)
 80025f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025f2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025f6:	613b      	str	r3, [r7, #16]
 80025f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025fa:	2300      	movs	r3, #0
 80025fc:	60fb      	str	r3, [r7, #12]
 80025fe:	4b0f      	ldr	r3, [pc, #60]	@ (800263c <HAL_ADC_MspInit+0x80>)
 8002600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002602:	4a0e      	ldr	r2, [pc, #56]	@ (800263c <HAL_ADC_MspInit+0x80>)
 8002604:	f043 0301 	orr.w	r3, r3, #1
 8002608:	6313      	str	r3, [r2, #48]	@ 0x30
 800260a:	4b0c      	ldr	r3, [pc, #48]	@ (800263c <HAL_ADC_MspInit+0x80>)
 800260c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	60fb      	str	r3, [r7, #12]
 8002614:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PA0-WKUP     ------> ADC3_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002616:	2301      	movs	r3, #1
 8002618:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800261a:	2303      	movs	r3, #3
 800261c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261e:	2300      	movs	r3, #0
 8002620:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002622:	f107 0314 	add.w	r3, r7, #20
 8002626:	4619      	mov	r1, r3
 8002628:	4805      	ldr	r0, [pc, #20]	@ (8002640 <HAL_ADC_MspInit+0x84>)
 800262a:	f000 fe3d 	bl	80032a8 <HAL_GPIO_Init>

  /* USER CODE END ADC3_MspInit 1 */

  }

}
 800262e:	bf00      	nop
 8002630:	3728      	adds	r7, #40	@ 0x28
 8002632:	46bd      	mov	sp, r7
 8002634:	bd80      	pop	{r7, pc}
 8002636:	bf00      	nop
 8002638:	40012200 	.word	0x40012200
 800263c:	40023800 	.word	0x40023800
 8002640:	40020000 	.word	0x40020000

08002644 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b08a      	sub	sp, #40	@ 0x28
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800264c:	f107 0314 	add.w	r3, r7, #20
 8002650:	2200      	movs	r2, #0
 8002652:	601a      	str	r2, [r3, #0]
 8002654:	605a      	str	r2, [r3, #4]
 8002656:	609a      	str	r2, [r3, #8]
 8002658:	60da      	str	r2, [r3, #12]
 800265a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a19      	ldr	r2, [pc, #100]	@ (80026c8 <HAL_I2C_MspInit+0x84>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d12b      	bne.n	80026be <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002666:	2300      	movs	r3, #0
 8002668:	613b      	str	r3, [r7, #16]
 800266a:	4b18      	ldr	r3, [pc, #96]	@ (80026cc <HAL_I2C_MspInit+0x88>)
 800266c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800266e:	4a17      	ldr	r2, [pc, #92]	@ (80026cc <HAL_I2C_MspInit+0x88>)
 8002670:	f043 0302 	orr.w	r3, r3, #2
 8002674:	6313      	str	r3, [r2, #48]	@ 0x30
 8002676:	4b15      	ldr	r3, [pc, #84]	@ (80026cc <HAL_I2C_MspInit+0x88>)
 8002678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	613b      	str	r3, [r7, #16]
 8002680:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002682:	23c0      	movs	r3, #192	@ 0xc0
 8002684:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002686:	2312      	movs	r3, #18
 8002688:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268a:	2300      	movs	r3, #0
 800268c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800268e:	2303      	movs	r3, #3
 8002690:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002692:	2304      	movs	r3, #4
 8002694:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002696:	f107 0314 	add.w	r3, r7, #20
 800269a:	4619      	mov	r1, r3
 800269c:	480c      	ldr	r0, [pc, #48]	@ (80026d0 <HAL_I2C_MspInit+0x8c>)
 800269e:	f000 fe03 	bl	80032a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80026a2:	2300      	movs	r3, #0
 80026a4:	60fb      	str	r3, [r7, #12]
 80026a6:	4b09      	ldr	r3, [pc, #36]	@ (80026cc <HAL_I2C_MspInit+0x88>)
 80026a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026aa:	4a08      	ldr	r2, [pc, #32]	@ (80026cc <HAL_I2C_MspInit+0x88>)
 80026ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80026b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80026b2:	4b06      	ldr	r3, [pc, #24]	@ (80026cc <HAL_I2C_MspInit+0x88>)
 80026b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80026be:	bf00      	nop
 80026c0:	3728      	adds	r7, #40	@ 0x28
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40005400 	.word	0x40005400
 80026cc:	40023800 	.word	0x40023800
 80026d0:	40020400 	.word	0x40020400

080026d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b08a      	sub	sp, #40	@ 0x28
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026dc:	f107 0314 	add.w	r3, r7, #20
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	60da      	str	r2, [r3, #12]
 80026ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a19      	ldr	r2, [pc, #100]	@ (8002758 <HAL_SPI_MspInit+0x84>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d12c      	bne.n	8002750 <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80026f6:	2300      	movs	r3, #0
 80026f8:	613b      	str	r3, [r7, #16]
 80026fa:	4b18      	ldr	r3, [pc, #96]	@ (800275c <HAL_SPI_MspInit+0x88>)
 80026fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fe:	4a17      	ldr	r2, [pc, #92]	@ (800275c <HAL_SPI_MspInit+0x88>)
 8002700:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002704:	6413      	str	r3, [r2, #64]	@ 0x40
 8002706:	4b15      	ldr	r3, [pc, #84]	@ (800275c <HAL_SPI_MspInit+0x88>)
 8002708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800270e:	613b      	str	r3, [r7, #16]
 8002710:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002712:	2300      	movs	r3, #0
 8002714:	60fb      	str	r3, [r7, #12]
 8002716:	4b11      	ldr	r3, [pc, #68]	@ (800275c <HAL_SPI_MspInit+0x88>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800271a:	4a10      	ldr	r2, [pc, #64]	@ (800275c <HAL_SPI_MspInit+0x88>)
 800271c:	f043 0302 	orr.w	r3, r3, #2
 8002720:	6313      	str	r3, [r2, #48]	@ 0x30
 8002722:	4b0e      	ldr	r3, [pc, #56]	@ (800275c <HAL_SPI_MspInit+0x88>)
 8002724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	60fb      	str	r3, [r7, #12]
 800272c:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800272e:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8002732:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002734:	2302      	movs	r3, #2
 8002736:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002738:	2300      	movs	r3, #0
 800273a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800273c:	2303      	movs	r3, #3
 800273e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002740:	2305      	movs	r3, #5
 8002742:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002744:	f107 0314 	add.w	r3, r7, #20
 8002748:	4619      	mov	r1, r3
 800274a:	4805      	ldr	r0, [pc, #20]	@ (8002760 <HAL_SPI_MspInit+0x8c>)
 800274c:	f000 fdac 	bl	80032a8 <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8002750:	bf00      	nop
 8002752:	3728      	adds	r7, #40	@ 0x28
 8002754:	46bd      	mov	sp, r7
 8002756:	bd80      	pop	{r7, pc}
 8002758:	40003800 	.word	0x40003800
 800275c:	40023800 	.word	0x40023800
 8002760:	40020400 	.word	0x40020400

08002764 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002764:	b480      	push	{r7}
 8002766:	b085      	sub	sp, #20
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002774:	d10d      	bne.n	8002792 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	4b09      	ldr	r3, [pc, #36]	@ (80027a0 <HAL_TIM_Base_MspInit+0x3c>)
 800277c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800277e:	4a08      	ldr	r2, [pc, #32]	@ (80027a0 <HAL_TIM_Base_MspInit+0x3c>)
 8002780:	f043 0301 	orr.w	r3, r3, #1
 8002784:	6413      	str	r3, [r2, #64]	@ 0x40
 8002786:	4b06      	ldr	r3, [pc, #24]	@ (80027a0 <HAL_TIM_Base_MspInit+0x3c>)
 8002788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 8002792:	bf00      	nop
 8002794:	3714      	adds	r7, #20
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
 800279e:	bf00      	nop
 80027a0:	40023800 	.word	0x40023800

080027a4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b08a      	sub	sp, #40	@ 0x28
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ac:	f107 0314 	add.w	r3, r7, #20
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]
 80027b4:	605a      	str	r2, [r3, #4]
 80027b6:	609a      	str	r2, [r3, #8]
 80027b8:	60da      	str	r2, [r3, #12]
 80027ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a19      	ldr	r2, [pc, #100]	@ (8002828 <HAL_UART_MspInit+0x84>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d12c      	bne.n	8002820 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80027c6:	2300      	movs	r3, #0
 80027c8:	613b      	str	r3, [r7, #16]
 80027ca:	4b18      	ldr	r3, [pc, #96]	@ (800282c <HAL_UART_MspInit+0x88>)
 80027cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ce:	4a17      	ldr	r2, [pc, #92]	@ (800282c <HAL_UART_MspInit+0x88>)
 80027d0:	f043 0310 	orr.w	r3, r3, #16
 80027d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80027d6:	4b15      	ldr	r3, [pc, #84]	@ (800282c <HAL_UART_MspInit+0x88>)
 80027d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027da:	f003 0310 	and.w	r3, r3, #16
 80027de:	613b      	str	r3, [r7, #16]
 80027e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80027e2:	2300      	movs	r3, #0
 80027e4:	60fb      	str	r3, [r7, #12]
 80027e6:	4b11      	ldr	r3, [pc, #68]	@ (800282c <HAL_UART_MspInit+0x88>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ea:	4a10      	ldr	r2, [pc, #64]	@ (800282c <HAL_UART_MspInit+0x88>)
 80027ec:	f043 0301 	orr.w	r3, r3, #1
 80027f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80027f2:	4b0e      	ldr	r3, [pc, #56]	@ (800282c <HAL_UART_MspInit+0x88>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	60fb      	str	r3, [r7, #12]
 80027fc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80027fe:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002802:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002804:	2302      	movs	r3, #2
 8002806:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002808:	2300      	movs	r3, #0
 800280a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800280c:	2303      	movs	r3, #3
 800280e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002810:	2307      	movs	r3, #7
 8002812:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002814:	f107 0314 	add.w	r3, r7, #20
 8002818:	4619      	mov	r1, r3
 800281a:	4805      	ldr	r0, [pc, #20]	@ (8002830 <HAL_UART_MspInit+0x8c>)
 800281c:	f000 fd44 	bl	80032a8 <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8002820:	bf00      	nop
 8002822:	3728      	adds	r7, #40	@ 0x28
 8002824:	46bd      	mov	sp, r7
 8002826:	bd80      	pop	{r7, pc}
 8002828:	40011000 	.word	0x40011000
 800282c:	40023800 	.word	0x40023800
 8002830:	40020000 	.word	0x40020000

08002834 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800283a:	1d3b      	adds	r3, r7, #4
 800283c:	2200      	movs	r2, #0
 800283e:	601a      	str	r2, [r3, #0]
 8002840:	605a      	str	r2, [r3, #4]
 8002842:	609a      	str	r2, [r3, #8]
 8002844:	60da      	str	r2, [r3, #12]
 8002846:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8002848:	4b1c      	ldr	r3, [pc, #112]	@ (80028bc <HAL_FSMC_MspInit+0x88>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d131      	bne.n	80028b4 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8002850:	4b1a      	ldr	r3, [pc, #104]	@ (80028bc <HAL_FSMC_MspInit+0x88>)
 8002852:	2201      	movs	r2, #1
 8002854:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	603b      	str	r3, [r7, #0]
 800285a:	4b19      	ldr	r3, [pc, #100]	@ (80028c0 <HAL_FSMC_MspInit+0x8c>)
 800285c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800285e:	4a18      	ldr	r2, [pc, #96]	@ (80028c0 <HAL_FSMC_MspInit+0x8c>)
 8002860:	f043 0301 	orr.w	r3, r3, #1
 8002864:	6393      	str	r3, [r2, #56]	@ 0x38
 8002866:	4b16      	ldr	r3, [pc, #88]	@ (80028c0 <HAL_FSMC_MspInit+0x8c>)
 8002868:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	603b      	str	r3, [r7, #0]
 8002870:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8002872:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8002876:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002878:	2302      	movs	r3, #2
 800287a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287c:	2300      	movs	r3, #0
 800287e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002880:	2303      	movs	r3, #3
 8002882:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 8002884:	230c      	movs	r3, #12
 8002886:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002888:	1d3b      	adds	r3, r7, #4
 800288a:	4619      	mov	r1, r3
 800288c:	480d      	ldr	r0, [pc, #52]	@ (80028c4 <HAL_FSMC_MspInit+0x90>)
 800288e:	f000 fd0b 	bl	80032a8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 8002892:	f24e 73b3 	movw	r3, #59315	@ 0xe7b3
 8002896:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002898:	2302      	movs	r3, #2
 800289a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800289c:	2300      	movs	r3, #0
 800289e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028a0:	2303      	movs	r3, #3
 80028a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80028a4:	230c      	movs	r3, #12
 80028a6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028a8:	1d3b      	adds	r3, r7, #4
 80028aa:	4619      	mov	r1, r3
 80028ac:	4806      	ldr	r0, [pc, #24]	@ (80028c8 <HAL_FSMC_MspInit+0x94>)
 80028ae:	f000 fcfb 	bl	80032a8 <HAL_GPIO_Init>
 80028b2:	e000      	b.n	80028b6 <HAL_FSMC_MspInit+0x82>
    return;
 80028b4:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80028b6:	3718      	adds	r7, #24
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	20000828 	.word	0x20000828
 80028c0:	40023800 	.word	0x40023800
 80028c4:	40021000 	.word	0x40021000
 80028c8:	40020c00 	.word	0x40020c00

080028cc <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80028d4:	f7ff ffae 	bl	8002834 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 80028d8:	bf00      	nop
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028e0:	b480      	push	{r7}
 80028e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80028e4:	bf00      	nop
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr

080028ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028ee:	b480      	push	{r7}
 80028f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028f2:	bf00      	nop
 80028f4:	e7fd      	b.n	80028f2 <HardFault_Handler+0x4>

080028f6 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80028f6:	b480      	push	{r7}
 80028f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80028fa:	bf00      	nop
 80028fc:	e7fd      	b.n	80028fa <MemManage_Handler+0x4>

080028fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80028fe:	b480      	push	{r7}
 8002900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002902:	bf00      	nop
 8002904:	e7fd      	b.n	8002902 <BusFault_Handler+0x4>

08002906 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002906:	b480      	push	{r7}
 8002908:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800290a:	bf00      	nop
 800290c:	e7fd      	b.n	800290a <UsageFault_Handler+0x4>

0800290e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800290e:	b480      	push	{r7}
 8002910:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002912:	bf00      	nop
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800291c:	b480      	push	{r7}
 800291e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002920:	bf00      	nop
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800292a:	b480      	push	{r7}
 800292c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800292e:	bf00      	nop
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800293c:	f000 f8fc 	bl	8002b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002940:	bf00      	nop
 8002942:	bd80      	pop	{r7, pc}

08002944 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002948:	2001      	movs	r0, #1
 800294a:	f000 fe63 	bl	8003614 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */
  /* USER CODE END EXTI0_IRQn 1 */
}
 800294e:	bf00      	nop
 8002950:	bd80      	pop	{r7, pc}
	...

08002954 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	b086      	sub	sp, #24
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800295c:	4a14      	ldr	r2, [pc, #80]	@ (80029b0 <_sbrk+0x5c>)
 800295e:	4b15      	ldr	r3, [pc, #84]	@ (80029b4 <_sbrk+0x60>)
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002968:	4b13      	ldr	r3, [pc, #76]	@ (80029b8 <_sbrk+0x64>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d102      	bne.n	8002976 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002970:	4b11      	ldr	r3, [pc, #68]	@ (80029b8 <_sbrk+0x64>)
 8002972:	4a12      	ldr	r2, [pc, #72]	@ (80029bc <_sbrk+0x68>)
 8002974:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002976:	4b10      	ldr	r3, [pc, #64]	@ (80029b8 <_sbrk+0x64>)
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	4413      	add	r3, r2
 800297e:	693a      	ldr	r2, [r7, #16]
 8002980:	429a      	cmp	r2, r3
 8002982:	d207      	bcs.n	8002994 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002984:	f003 fd58 	bl	8006438 <__errno>
 8002988:	4603      	mov	r3, r0
 800298a:	220c      	movs	r2, #12
 800298c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800298e:	f04f 33ff 	mov.w	r3, #4294967295
 8002992:	e009      	b.n	80029a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002994:	4b08      	ldr	r3, [pc, #32]	@ (80029b8 <_sbrk+0x64>)
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800299a:	4b07      	ldr	r3, [pc, #28]	@ (80029b8 <_sbrk+0x64>)
 800299c:	681a      	ldr	r2, [r3, #0]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4413      	add	r3, r2
 80029a2:	4a05      	ldr	r2, [pc, #20]	@ (80029b8 <_sbrk+0x64>)
 80029a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80029a6:	68fb      	ldr	r3, [r7, #12]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3718      	adds	r7, #24
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}
 80029b0:	20020000 	.word	0x20020000
 80029b4:	00000400 	.word	0x00000400
 80029b8:	2000082c 	.word	0x2000082c
 80029bc:	20000998 	.word	0x20000998

080029c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80029c4:	4b06      	ldr	r3, [pc, #24]	@ (80029e0 <SystemInit+0x20>)
 80029c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029ca:	4a05      	ldr	r2, [pc, #20]	@ (80029e0 <SystemInit+0x20>)
 80029cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80029d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80029d4:	bf00      	nop
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	e000ed00 	.word	0xe000ed00

080029e4 <TouchCalibrate>:

	return true;
}

void TouchCalibrate(void)
{
 80029e4:	b5b0      	push	{r4, r5, r7, lr}
 80029e6:	b08c      	sub	sp, #48	@ 0x30
 80029e8:	af00      	add	r7, sp, #0
//	uint16_t x;
//	uint16_t y;
	POINT_T raw_points[3];
	POINT_T display_points[3] = {{40, 40}, {200, 40}, {200, 280}};
 80029ea:	4b13      	ldr	r3, [pc, #76]	@ (8002a38 <TouchCalibrate+0x54>)
 80029ec:	463c      	mov	r4, r7
 80029ee:	461d      	mov	r5, r3
 80029f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80029f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80029f4:	e895 0003 	ldmia.w	r5, {r0, r1}
 80029f8:	e884 0003 	stmia.w	r4, {r0, r1}

	raw_points[0].x = 2970;
 80029fc:	f640 339a 	movw	r3, #2970	@ 0xb9a
 8002a00:	61bb      	str	r3, [r7, #24]
	raw_points[0].y = 670;
 8002a02:	f240 239e 	movw	r3, #670	@ 0x29e
 8002a06:	61fb      	str	r3, [r7, #28]



    /* second point */

	raw_points[1].x = 865;
 8002a08:	f240 3361 	movw	r3, #865	@ 0x361
 8002a0c:	623b      	str	r3, [r7, #32]
	raw_points[1].y = 711;
 8002a0e:	f240 23c7 	movw	r3, #711	@ 0x2c7
 8002a12:	627b      	str	r3, [r7, #36]	@ 0x24




	raw_points[2].x = 789;
 8002a14:	f240 3315 	movw	r3, #789	@ 0x315
 8002a18:	62bb      	str	r3, [r7, #40]	@ 0x28
	raw_points[2].y = 3239;
 8002a1a:	f640 43a7 	movw	r3, #3239	@ 0xca7
 8002a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c



	(void)setCalibrationMatrix(display_points, raw_points, &matrix);
 8002a20:	f107 0118 	add.w	r1, r7, #24
 8002a24:	463b      	mov	r3, r7
 8002a26:	4a05      	ldr	r2, [pc, #20]	@ (8002a3c <TouchCalibrate+0x58>)
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7fe fbc1 	bl	80011b0 <setCalibrationMatrix>
}
 8002a2e:	bf00      	nop
 8002a30:	3730      	adds	r7, #48	@ 0x30
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bdb0      	pop	{r4, r5, r7, pc}
 8002a36:	bf00      	nop
 8002a38:	08006e8c 	.word	0x08006e8c
 8002a3c:	20000830 	.word	0x20000830

08002a40 <Reset_Handler>:
*/

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:    ldr   sp, =_estack     /* set stack pointer */
 8002a40:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002a78 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002a44:	f7ff ffbc 	bl	80029c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002a48:	480c      	ldr	r0, [pc, #48]	@ (8002a7c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002a4a:	490d      	ldr	r1, [pc, #52]	@ (8002a80 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002a4c:	4a0d      	ldr	r2, [pc, #52]	@ (8002a84 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002a4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002a50:	e002      	b.n	8002a58 <LoopCopyDataInit>

08002a52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a56:	3304      	adds	r3, #4

08002a58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a5c:	d3f9      	bcc.n	8002a52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a5e:	4a0a      	ldr	r2, [pc, #40]	@ (8002a88 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002a60:	4c0a      	ldr	r4, [pc, #40]	@ (8002a8c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002a62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a64:	e001      	b.n	8002a6a <LoopFillZerobss>

08002a66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a68:	3204      	adds	r2, #4

08002a6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a6c:	d3fb      	bcc.n	8002a66 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a6e:	f003 fce9 	bl	8006444 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002a72:	f7ff f93b 	bl	8001cec <main>
  bx  lr    
 8002a76:	4770      	bx	lr
Reset_Handler:    ldr   sp, =_estack     /* set stack pointer */
 8002a78:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a80:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8002a84:	08007f80 	.word	0x08007f80
  ldr r2, =_sbss
 8002a88:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8002a8c:	20000998 	.word	0x20000998

08002a90 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002a90:	e7fe      	b.n	8002a90 <ADC_IRQHandler>
	...

08002a94 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002a98:	4b0e      	ldr	r3, [pc, #56]	@ (8002ad4 <HAL_Init+0x40>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a0d      	ldr	r2, [pc, #52]	@ (8002ad4 <HAL_Init+0x40>)
 8002a9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002aa2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ad4 <HAL_Init+0x40>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a0a      	ldr	r2, [pc, #40]	@ (8002ad4 <HAL_Init+0x40>)
 8002aaa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002aae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ab0:	4b08      	ldr	r3, [pc, #32]	@ (8002ad4 <HAL_Init+0x40>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a07      	ldr	r2, [pc, #28]	@ (8002ad4 <HAL_Init+0x40>)
 8002ab6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002abc:	2003      	movs	r0, #3
 8002abe:	f000 fbb1 	bl	8003224 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ac2:	200f      	movs	r0, #15
 8002ac4:	f000 f808 	bl	8002ad8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ac8:	f7ff fd50 	bl	800256c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002acc:	2300      	movs	r3, #0
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	40023c00 	.word	0x40023c00

08002ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ae0:	4b12      	ldr	r3, [pc, #72]	@ (8002b2c <HAL_InitTick+0x54>)
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	4b12      	ldr	r3, [pc, #72]	@ (8002b30 <HAL_InitTick+0x58>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	4619      	mov	r1, r3
 8002aea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002aee:	fbb3 f3f1 	udiv	r3, r3, r1
 8002af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af6:	4618      	mov	r0, r3
 8002af8:	f000 fbc9 	bl	800328e <HAL_SYSTICK_Config>
 8002afc:	4603      	mov	r3, r0
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d001      	beq.n	8002b06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b02:	2301      	movs	r3, #1
 8002b04:	e00e      	b.n	8002b24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b0f      	cmp	r3, #15
 8002b0a:	d80a      	bhi.n	8002b22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	6879      	ldr	r1, [r7, #4]
 8002b10:	f04f 30ff 	mov.w	r0, #4294967295
 8002b14:	f000 fb91 	bl	800323a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b18:	4a06      	ldr	r2, [pc, #24]	@ (8002b34 <HAL_InitTick+0x5c>)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	e000      	b.n	8002b24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3708      	adds	r7, #8
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	bd80      	pop	{r7, pc}
 8002b2c:	20000028 	.word	0x20000028
 8002b30:	20000030 	.word	0x20000030
 8002b34:	2000002c 	.word	0x2000002c

08002b38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b3c:	4b06      	ldr	r3, [pc, #24]	@ (8002b58 <HAL_IncTick+0x20>)
 8002b3e:	781b      	ldrb	r3, [r3, #0]
 8002b40:	461a      	mov	r2, r3
 8002b42:	4b06      	ldr	r3, [pc, #24]	@ (8002b5c <HAL_IncTick+0x24>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4413      	add	r3, r2
 8002b48:	4a04      	ldr	r2, [pc, #16]	@ (8002b5c <HAL_IncTick+0x24>)
 8002b4a:	6013      	str	r3, [r2, #0]
}
 8002b4c:	bf00      	nop
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	20000030 	.word	0x20000030
 8002b5c:	2000084c 	.word	0x2000084c

08002b60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  return uwTick;
 8002b64:	4b03      	ldr	r3, [pc, #12]	@ (8002b74 <HAL_GetTick+0x14>)
 8002b66:	681b      	ldr	r3, [r3, #0]
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	2000084c 	.word	0x2000084c

08002b78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b084      	sub	sp, #16
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b80:	f7ff ffee 	bl	8002b60 <HAL_GetTick>
 8002b84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b90:	d005      	beq.n	8002b9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b92:	4b0a      	ldr	r3, [pc, #40]	@ (8002bbc <HAL_Delay+0x44>)
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	461a      	mov	r2, r3
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b9e:	bf00      	nop
 8002ba0:	f7ff ffde 	bl	8002b60 <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	1ad3      	subs	r3, r2, r3
 8002baa:	68fa      	ldr	r2, [r7, #12]
 8002bac:	429a      	cmp	r2, r3
 8002bae:	d8f7      	bhi.n	8002ba0 <HAL_Delay+0x28>
  {
  }
}
 8002bb0:	bf00      	nop
 8002bb2:	bf00      	nop
 8002bb4:	3710      	adds	r7, #16
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	20000030 	.word	0x20000030

08002bc0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e033      	b.n	8002c3e <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d109      	bne.n	8002bf2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f7ff fcec 	bl	80025bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bf6:	f003 0310 	and.w	r3, r3, #16
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d118      	bne.n	8002c30 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c02:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002c06:	f023 0302 	bic.w	r3, r3, #2
 8002c0a:	f043 0202 	orr.w	r2, r3, #2
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f000 f93a 	bl	8002e8c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c22:	f023 0303 	bic.w	r3, r3, #3
 8002c26:	f043 0201 	orr.w	r2, r3, #1
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	641a      	str	r2, [r3, #64]	@ 0x40
 8002c2e:	e001      	b.n	8002c34 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002c30:	2301      	movs	r3, #1
 8002c32:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002c3c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
	...

08002c48 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002c52:	2300      	movs	r3, #0
 8002c54:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d101      	bne.n	8002c64 <HAL_ADC_ConfigChannel+0x1c>
 8002c60:	2302      	movs	r3, #2
 8002c62:	e105      	b.n	8002e70 <HAL_ADC_ConfigChannel+0x228>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2b09      	cmp	r3, #9
 8002c72:	d925      	bls.n	8002cc0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68d9      	ldr	r1, [r3, #12]
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	b29b      	uxth	r3, r3
 8002c80:	461a      	mov	r2, r3
 8002c82:	4613      	mov	r3, r2
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	4413      	add	r3, r2
 8002c88:	3b1e      	subs	r3, #30
 8002c8a:	2207      	movs	r2, #7
 8002c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c90:	43da      	mvns	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	400a      	ands	r2, r1
 8002c98:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	68d9      	ldr	r1, [r3, #12]
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	689a      	ldr	r2, [r3, #8]
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	4618      	mov	r0, r3
 8002cac:	4603      	mov	r3, r0
 8002cae:	005b      	lsls	r3, r3, #1
 8002cb0:	4403      	add	r3, r0
 8002cb2:	3b1e      	subs	r3, #30
 8002cb4:	409a      	lsls	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	430a      	orrs	r2, r1
 8002cbc:	60da      	str	r2, [r3, #12]
 8002cbe:	e022      	b.n	8002d06 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6919      	ldr	r1, [r3, #16]
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	b29b      	uxth	r3, r3
 8002ccc:	461a      	mov	r2, r3
 8002cce:	4613      	mov	r3, r2
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	4413      	add	r3, r2
 8002cd4:	2207      	movs	r2, #7
 8002cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002cda:	43da      	mvns	r2, r3
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	400a      	ands	r2, r1
 8002ce2:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	6919      	ldr	r1, [r3, #16]
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	689a      	ldr	r2, [r3, #8]
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	b29b      	uxth	r3, r3
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	4603      	mov	r3, r0
 8002cf8:	005b      	lsls	r3, r3, #1
 8002cfa:	4403      	add	r3, r0
 8002cfc:	409a      	lsls	r2, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	2b06      	cmp	r3, #6
 8002d0c:	d824      	bhi.n	8002d58 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	685a      	ldr	r2, [r3, #4]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	4413      	add	r3, r2
 8002d1e:	3b05      	subs	r3, #5
 8002d20:	221f      	movs	r2, #31
 8002d22:	fa02 f303 	lsl.w	r3, r2, r3
 8002d26:	43da      	mvns	r2, r3
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	400a      	ands	r2, r1
 8002d2e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685a      	ldr	r2, [r3, #4]
 8002d42:	4613      	mov	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4413      	add	r3, r2
 8002d48:	3b05      	subs	r3, #5
 8002d4a:	fa00 f203 	lsl.w	r2, r0, r3
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	430a      	orrs	r2, r1
 8002d54:	635a      	str	r2, [r3, #52]	@ 0x34
 8002d56:	e04c      	b.n	8002df2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	2b0c      	cmp	r3, #12
 8002d5e:	d824      	bhi.n	8002daa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685a      	ldr	r2, [r3, #4]
 8002d6a:	4613      	mov	r3, r2
 8002d6c:	009b      	lsls	r3, r3, #2
 8002d6e:	4413      	add	r3, r2
 8002d70:	3b23      	subs	r3, #35	@ 0x23
 8002d72:	221f      	movs	r2, #31
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	43da      	mvns	r2, r3
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	400a      	ands	r2, r1
 8002d80:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	4618      	mov	r0, r3
 8002d90:	683b      	ldr	r3, [r7, #0]
 8002d92:	685a      	ldr	r2, [r3, #4]
 8002d94:	4613      	mov	r3, r2
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	4413      	add	r3, r2
 8002d9a:	3b23      	subs	r3, #35	@ 0x23
 8002d9c:	fa00 f203 	lsl.w	r2, r0, r3
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	430a      	orrs	r2, r1
 8002da6:	631a      	str	r2, [r3, #48]	@ 0x30
 8002da8:	e023      	b.n	8002df2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	685a      	ldr	r2, [r3, #4]
 8002db4:	4613      	mov	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	4413      	add	r3, r2
 8002dba:	3b41      	subs	r3, #65	@ 0x41
 8002dbc:	221f      	movs	r2, #31
 8002dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc2:	43da      	mvns	r2, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	400a      	ands	r2, r1
 8002dca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	4618      	mov	r0, r3
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685a      	ldr	r2, [r3, #4]
 8002dde:	4613      	mov	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	4413      	add	r3, r2
 8002de4:	3b41      	subs	r3, #65	@ 0x41
 8002de6:	fa00 f203 	lsl.w	r2, r0, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	430a      	orrs	r2, r1
 8002df0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002df2:	4b22      	ldr	r3, [pc, #136]	@ (8002e7c <HAL_ADC_ConfigChannel+0x234>)
 8002df4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a21      	ldr	r2, [pc, #132]	@ (8002e80 <HAL_ADC_ConfigChannel+0x238>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d109      	bne.n	8002e14 <HAL_ADC_ConfigChannel+0x1cc>
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2b12      	cmp	r3, #18
 8002e06:	d105      	bne.n	8002e14 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a19      	ldr	r2, [pc, #100]	@ (8002e80 <HAL_ADC_ConfigChannel+0x238>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d123      	bne.n	8002e66 <HAL_ADC_ConfigChannel+0x21e>
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	2b10      	cmp	r3, #16
 8002e24:	d003      	beq.n	8002e2e <HAL_ADC_ConfigChannel+0x1e6>
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2b11      	cmp	r3, #17
 8002e2c:	d11b      	bne.n	8002e66 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	2b10      	cmp	r3, #16
 8002e40:	d111      	bne.n	8002e66 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e42:	4b10      	ldr	r3, [pc, #64]	@ (8002e84 <HAL_ADC_ConfigChannel+0x23c>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a10      	ldr	r2, [pc, #64]	@ (8002e88 <HAL_ADC_ConfigChannel+0x240>)
 8002e48:	fba2 2303 	umull	r2, r3, r2, r3
 8002e4c:	0c9a      	lsrs	r2, r3, #18
 8002e4e:	4613      	mov	r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	4413      	add	r3, r2
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002e58:	e002      	b.n	8002e60 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1f9      	bne.n	8002e5a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3714      	adds	r7, #20
 8002e74:	46bd      	mov	sp, r7
 8002e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7a:	4770      	bx	lr
 8002e7c:	40012300 	.word	0x40012300
 8002e80:	40012000 	.word	0x40012000
 8002e84:	20000028 	.word	0x20000028
 8002e88:	431bde83 	.word	0x431bde83

08002e8c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b085      	sub	sp, #20
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e94:	4b79      	ldr	r3, [pc, #484]	@ (800307c <ADC_Init+0x1f0>)
 8002e96:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	431a      	orrs	r2, r3
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	685a      	ldr	r2, [r3, #4]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002ec0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	6859      	ldr	r1, [r3, #4]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	691b      	ldr	r3, [r3, #16]
 8002ecc:	021a      	lsls	r2, r3, #8
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	685a      	ldr	r2, [r3, #4]
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002ee4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	6859      	ldr	r1, [r3, #4]
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689a      	ldr	r2, [r3, #8]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	689a      	ldr	r2, [r3, #8]
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f06:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6899      	ldr	r1, [r3, #8]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	68da      	ldr	r2, [r3, #12]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f1e:	4a58      	ldr	r2, [pc, #352]	@ (8003080 <ADC_Init+0x1f4>)
 8002f20:	4293      	cmp	r3, r2
 8002f22:	d022      	beq.n	8002f6a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	689a      	ldr	r2, [r3, #8]
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002f32:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	6899      	ldr	r1, [r3, #8]
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	430a      	orrs	r2, r1
 8002f44:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002f54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	6899      	ldr	r1, [r3, #8]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	430a      	orrs	r2, r1
 8002f66:	609a      	str	r2, [r3, #8]
 8002f68:	e00f      	b.n	8002f8a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	689a      	ldr	r2, [r3, #8]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002f78:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	689a      	ldr	r2, [r3, #8]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002f88:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	689a      	ldr	r2, [r3, #8]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f022 0202 	bic.w	r2, r2, #2
 8002f98:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	6899      	ldr	r1, [r3, #8]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	7e1b      	ldrb	r3, [r3, #24]
 8002fa4:	005a      	lsls	r2, r3, #1
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d01b      	beq.n	8002ff0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	685a      	ldr	r2, [r3, #4]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002fc6:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	685a      	ldr	r2, [r3, #4]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002fd6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	6859      	ldr	r1, [r3, #4]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	035a      	lsls	r2, r3, #13
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	430a      	orrs	r2, r1
 8002fec:	605a      	str	r2, [r3, #4]
 8002fee:	e007      	b.n	8003000 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	685a      	ldr	r2, [r3, #4]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ffe:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800300e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	69db      	ldr	r3, [r3, #28]
 800301a:	3b01      	subs	r3, #1
 800301c:	051a      	lsls	r2, r3, #20
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	430a      	orrs	r2, r1
 8003024:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	689a      	ldr	r2, [r3, #8]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003034:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6899      	ldr	r1, [r3, #8]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003042:	025a      	lsls	r2, r3, #9
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	430a      	orrs	r2, r1
 800304a:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689a      	ldr	r2, [r3, #8]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800305a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6899      	ldr	r1, [r3, #8]
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	695b      	ldr	r3, [r3, #20]
 8003066:	029a      	lsls	r2, r3, #10
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	430a      	orrs	r2, r1
 800306e:	609a      	str	r2, [r3, #8]
}
 8003070:	bf00      	nop
 8003072:	3714      	adds	r7, #20
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr
 800307c:	40012300 	.word	0x40012300
 8003080:	0f000001 	.word	0x0f000001

08003084 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003084:	b480      	push	{r7}
 8003086:	b085      	sub	sp, #20
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	f003 0307 	and.w	r3, r3, #7
 8003092:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003094:	4b0c      	ldr	r3, [pc, #48]	@ (80030c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800309a:	68ba      	ldr	r2, [r7, #8]
 800309c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80030a0:	4013      	ands	r3, r2
 80030a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80030b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80030b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030b6:	4a04      	ldr	r2, [pc, #16]	@ (80030c8 <__NVIC_SetPriorityGrouping+0x44>)
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	60d3      	str	r3, [r2, #12]
}
 80030bc:	bf00      	nop
 80030be:	3714      	adds	r7, #20
 80030c0:	46bd      	mov	sp, r7
 80030c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c6:	4770      	bx	lr
 80030c8:	e000ed00 	.word	0xe000ed00

080030cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80030cc:	b480      	push	{r7}
 80030ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80030d0:	4b04      	ldr	r3, [pc, #16]	@ (80030e4 <__NVIC_GetPriorityGrouping+0x18>)
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	0a1b      	lsrs	r3, r3, #8
 80030d6:	f003 0307 	and.w	r3, r3, #7
}
 80030da:	4618      	mov	r0, r3
 80030dc:	46bd      	mov	sp, r7
 80030de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e2:	4770      	bx	lr
 80030e4:	e000ed00 	.word	0xe000ed00

080030e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030e8:	b480      	push	{r7}
 80030ea:	b083      	sub	sp, #12
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	4603      	mov	r3, r0
 80030f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	db0b      	blt.n	8003112 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030fa:	79fb      	ldrb	r3, [r7, #7]
 80030fc:	f003 021f 	and.w	r2, r3, #31
 8003100:	4907      	ldr	r1, [pc, #28]	@ (8003120 <__NVIC_EnableIRQ+0x38>)
 8003102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003106:	095b      	lsrs	r3, r3, #5
 8003108:	2001      	movs	r0, #1
 800310a:	fa00 f202 	lsl.w	r2, r0, r2
 800310e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003112:	bf00      	nop
 8003114:	370c      	adds	r7, #12
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	e000e100 	.word	0xe000e100

08003124 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	4603      	mov	r3, r0
 800312c:	6039      	str	r1, [r7, #0]
 800312e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003134:	2b00      	cmp	r3, #0
 8003136:	db0a      	blt.n	800314e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	b2da      	uxtb	r2, r3
 800313c:	490c      	ldr	r1, [pc, #48]	@ (8003170 <__NVIC_SetPriority+0x4c>)
 800313e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003142:	0112      	lsls	r2, r2, #4
 8003144:	b2d2      	uxtb	r2, r2
 8003146:	440b      	add	r3, r1
 8003148:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800314c:	e00a      	b.n	8003164 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	b2da      	uxtb	r2, r3
 8003152:	4908      	ldr	r1, [pc, #32]	@ (8003174 <__NVIC_SetPriority+0x50>)
 8003154:	79fb      	ldrb	r3, [r7, #7]
 8003156:	f003 030f 	and.w	r3, r3, #15
 800315a:	3b04      	subs	r3, #4
 800315c:	0112      	lsls	r2, r2, #4
 800315e:	b2d2      	uxtb	r2, r2
 8003160:	440b      	add	r3, r1
 8003162:	761a      	strb	r2, [r3, #24]
}
 8003164:	bf00      	nop
 8003166:	370c      	adds	r7, #12
 8003168:	46bd      	mov	sp, r7
 800316a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316e:	4770      	bx	lr
 8003170:	e000e100 	.word	0xe000e100
 8003174:	e000ed00 	.word	0xe000ed00

08003178 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003178:	b480      	push	{r7}
 800317a:	b089      	sub	sp, #36	@ 0x24
 800317c:	af00      	add	r7, sp, #0
 800317e:	60f8      	str	r0, [r7, #12]
 8003180:	60b9      	str	r1, [r7, #8]
 8003182:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	f003 0307 	and.w	r3, r3, #7
 800318a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	f1c3 0307 	rsb	r3, r3, #7
 8003192:	2b04      	cmp	r3, #4
 8003194:	bf28      	it	cs
 8003196:	2304      	movcs	r3, #4
 8003198:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	3304      	adds	r3, #4
 800319e:	2b06      	cmp	r3, #6
 80031a0:	d902      	bls.n	80031a8 <NVIC_EncodePriority+0x30>
 80031a2:	69fb      	ldr	r3, [r7, #28]
 80031a4:	3b03      	subs	r3, #3
 80031a6:	e000      	b.n	80031aa <NVIC_EncodePriority+0x32>
 80031a8:	2300      	movs	r3, #0
 80031aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031ac:	f04f 32ff 	mov.w	r2, #4294967295
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	fa02 f303 	lsl.w	r3, r2, r3
 80031b6:	43da      	mvns	r2, r3
 80031b8:	68bb      	ldr	r3, [r7, #8]
 80031ba:	401a      	ands	r2, r3
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80031c0:	f04f 31ff 	mov.w	r1, #4294967295
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	fa01 f303 	lsl.w	r3, r1, r3
 80031ca:	43d9      	mvns	r1, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031d0:	4313      	orrs	r3, r2
         );
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3724      	adds	r7, #36	@ 0x24
 80031d6:	46bd      	mov	sp, r7
 80031d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031dc:	4770      	bx	lr
	...

080031e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	3b01      	subs	r3, #1
 80031ec:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80031f0:	d301      	bcc.n	80031f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031f2:	2301      	movs	r3, #1
 80031f4:	e00f      	b.n	8003216 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003220 <SysTick_Config+0x40>)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3b01      	subs	r3, #1
 80031fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031fe:	210f      	movs	r1, #15
 8003200:	f04f 30ff 	mov.w	r0, #4294967295
 8003204:	f7ff ff8e 	bl	8003124 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003208:	4b05      	ldr	r3, [pc, #20]	@ (8003220 <SysTick_Config+0x40>)
 800320a:	2200      	movs	r2, #0
 800320c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800320e:	4b04      	ldr	r3, [pc, #16]	@ (8003220 <SysTick_Config+0x40>)
 8003210:	2207      	movs	r2, #7
 8003212:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3708      	adds	r7, #8
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	e000e010 	.word	0xe000e010

08003224 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800322c:	6878      	ldr	r0, [r7, #4]
 800322e:	f7ff ff29 	bl	8003084 <__NVIC_SetPriorityGrouping>
}
 8003232:	bf00      	nop
 8003234:	3708      	adds	r7, #8
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}

0800323a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800323a:	b580      	push	{r7, lr}
 800323c:	b086      	sub	sp, #24
 800323e:	af00      	add	r7, sp, #0
 8003240:	4603      	mov	r3, r0
 8003242:	60b9      	str	r1, [r7, #8]
 8003244:	607a      	str	r2, [r7, #4]
 8003246:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003248:	2300      	movs	r3, #0
 800324a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800324c:	f7ff ff3e 	bl	80030cc <__NVIC_GetPriorityGrouping>
 8003250:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	68b9      	ldr	r1, [r7, #8]
 8003256:	6978      	ldr	r0, [r7, #20]
 8003258:	f7ff ff8e 	bl	8003178 <NVIC_EncodePriority>
 800325c:	4602      	mov	r2, r0
 800325e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003262:	4611      	mov	r1, r2
 8003264:	4618      	mov	r0, r3
 8003266:	f7ff ff5d 	bl	8003124 <__NVIC_SetPriority>
}
 800326a:	bf00      	nop
 800326c:	3718      	adds	r7, #24
 800326e:	46bd      	mov	sp, r7
 8003270:	bd80      	pop	{r7, pc}

08003272 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003272:	b580      	push	{r7, lr}
 8003274:	b082      	sub	sp, #8
 8003276:	af00      	add	r7, sp, #0
 8003278:	4603      	mov	r3, r0
 800327a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800327c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff ff31 	bl	80030e8 <__NVIC_EnableIRQ>
}
 8003286:	bf00      	nop
 8003288:	3708      	adds	r7, #8
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b082      	sub	sp, #8
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7ff ffa2 	bl	80031e0 <SysTick_Config>
 800329c:	4603      	mov	r3, r0
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3708      	adds	r7, #8
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
	...

080032a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032a8:	b480      	push	{r7}
 80032aa:	b089      	sub	sp, #36	@ 0x24
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032b2:	2300      	movs	r3, #0
 80032b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032b6:	2300      	movs	r3, #0
 80032b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032ba:	2300      	movs	r3, #0
 80032bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032be:	2300      	movs	r3, #0
 80032c0:	61fb      	str	r3, [r7, #28]
 80032c2:	e16b      	b.n	800359c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032c4:	2201      	movs	r2, #1
 80032c6:	69fb      	ldr	r3, [r7, #28]
 80032c8:	fa02 f303 	lsl.w	r3, r2, r3
 80032cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	697a      	ldr	r2, [r7, #20]
 80032d4:	4013      	ands	r3, r2
 80032d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80032d8:	693a      	ldr	r2, [r7, #16]
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	429a      	cmp	r2, r3
 80032de:	f040 815a 	bne.w	8003596 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f003 0303 	and.w	r3, r3, #3
 80032ea:	2b01      	cmp	r3, #1
 80032ec:	d005      	beq.n	80032fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d130      	bne.n	800335c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	2203      	movs	r2, #3
 8003306:	fa02 f303 	lsl.w	r3, r2, r3
 800330a:	43db      	mvns	r3, r3
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	4013      	ands	r3, r2
 8003310:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	68da      	ldr	r2, [r3, #12]
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	005b      	lsls	r3, r3, #1
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	69ba      	ldr	r2, [r7, #24]
 8003320:	4313      	orrs	r3, r2
 8003322:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	69ba      	ldr	r2, [r7, #24]
 8003328:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
 800332e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003330:	2201      	movs	r2, #1
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	fa02 f303 	lsl.w	r3, r2, r3
 8003338:	43db      	mvns	r3, r3
 800333a:	69ba      	ldr	r2, [r7, #24]
 800333c:	4013      	ands	r3, r2
 800333e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	091b      	lsrs	r3, r3, #4
 8003346:	f003 0201 	and.w	r2, r3, #1
 800334a:	69fb      	ldr	r3, [r7, #28]
 800334c:	fa02 f303 	lsl.w	r3, r2, r3
 8003350:	69ba      	ldr	r2, [r7, #24]
 8003352:	4313      	orrs	r3, r2
 8003354:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f003 0303 	and.w	r3, r3, #3
 8003364:	2b03      	cmp	r3, #3
 8003366:	d017      	beq.n	8003398 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800336e:	69fb      	ldr	r3, [r7, #28]
 8003370:	005b      	lsls	r3, r3, #1
 8003372:	2203      	movs	r2, #3
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	43db      	mvns	r3, r3
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	4013      	ands	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	689a      	ldr	r2, [r3, #8]
 8003384:	69fb      	ldr	r3, [r7, #28]
 8003386:	005b      	lsls	r3, r3, #1
 8003388:	fa02 f303 	lsl.w	r3, r2, r3
 800338c:	69ba      	ldr	r2, [r7, #24]
 800338e:	4313      	orrs	r3, r2
 8003390:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	69ba      	ldr	r2, [r7, #24]
 8003396:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f003 0303 	and.w	r3, r3, #3
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d123      	bne.n	80033ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033a4:	69fb      	ldr	r3, [r7, #28]
 80033a6:	08da      	lsrs	r2, r3, #3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	3208      	adds	r2, #8
 80033ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	f003 0307 	and.w	r3, r3, #7
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	220f      	movs	r2, #15
 80033bc:	fa02 f303 	lsl.w	r3, r2, r3
 80033c0:	43db      	mvns	r3, r3
 80033c2:	69ba      	ldr	r2, [r7, #24]
 80033c4:	4013      	ands	r3, r2
 80033c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	691a      	ldr	r2, [r3, #16]
 80033cc:	69fb      	ldr	r3, [r7, #28]
 80033ce:	f003 0307 	and.w	r3, r3, #7
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	fa02 f303 	lsl.w	r3, r2, r3
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	4313      	orrs	r3, r2
 80033dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	08da      	lsrs	r2, r3, #3
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	3208      	adds	r2, #8
 80033e6:	69b9      	ldr	r1, [r7, #24]
 80033e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	2203      	movs	r2, #3
 80033f8:	fa02 f303 	lsl.w	r3, r2, r3
 80033fc:	43db      	mvns	r3, r3
 80033fe:	69ba      	ldr	r2, [r7, #24]
 8003400:	4013      	ands	r3, r2
 8003402:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f003 0203 	and.w	r2, r3, #3
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	005b      	lsls	r3, r3, #1
 8003410:	fa02 f303 	lsl.w	r3, r2, r3
 8003414:	69ba      	ldr	r2, [r7, #24]
 8003416:	4313      	orrs	r3, r2
 8003418:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	69ba      	ldr	r2, [r7, #24]
 800341e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003428:	2b00      	cmp	r3, #0
 800342a:	f000 80b4 	beq.w	8003596 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800342e:	2300      	movs	r3, #0
 8003430:	60fb      	str	r3, [r7, #12]
 8003432:	4b60      	ldr	r3, [pc, #384]	@ (80035b4 <HAL_GPIO_Init+0x30c>)
 8003434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003436:	4a5f      	ldr	r2, [pc, #380]	@ (80035b4 <HAL_GPIO_Init+0x30c>)
 8003438:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800343c:	6453      	str	r3, [r2, #68]	@ 0x44
 800343e:	4b5d      	ldr	r3, [pc, #372]	@ (80035b4 <HAL_GPIO_Init+0x30c>)
 8003440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003442:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003446:	60fb      	str	r3, [r7, #12]
 8003448:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800344a:	4a5b      	ldr	r2, [pc, #364]	@ (80035b8 <HAL_GPIO_Init+0x310>)
 800344c:	69fb      	ldr	r3, [r7, #28]
 800344e:	089b      	lsrs	r3, r3, #2
 8003450:	3302      	adds	r3, #2
 8003452:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003456:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	f003 0303 	and.w	r3, r3, #3
 800345e:	009b      	lsls	r3, r3, #2
 8003460:	220f      	movs	r2, #15
 8003462:	fa02 f303 	lsl.w	r3, r2, r3
 8003466:	43db      	mvns	r3, r3
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	4013      	ands	r3, r2
 800346c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a52      	ldr	r2, [pc, #328]	@ (80035bc <HAL_GPIO_Init+0x314>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d02b      	beq.n	80034ce <HAL_GPIO_Init+0x226>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	4a51      	ldr	r2, [pc, #324]	@ (80035c0 <HAL_GPIO_Init+0x318>)
 800347a:	4293      	cmp	r3, r2
 800347c:	d025      	beq.n	80034ca <HAL_GPIO_Init+0x222>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a50      	ldr	r2, [pc, #320]	@ (80035c4 <HAL_GPIO_Init+0x31c>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d01f      	beq.n	80034c6 <HAL_GPIO_Init+0x21e>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	4a4f      	ldr	r2, [pc, #316]	@ (80035c8 <HAL_GPIO_Init+0x320>)
 800348a:	4293      	cmp	r3, r2
 800348c:	d019      	beq.n	80034c2 <HAL_GPIO_Init+0x21a>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a4e      	ldr	r2, [pc, #312]	@ (80035cc <HAL_GPIO_Init+0x324>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d013      	beq.n	80034be <HAL_GPIO_Init+0x216>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a4d      	ldr	r2, [pc, #308]	@ (80035d0 <HAL_GPIO_Init+0x328>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d00d      	beq.n	80034ba <HAL_GPIO_Init+0x212>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a4c      	ldr	r2, [pc, #304]	@ (80035d4 <HAL_GPIO_Init+0x32c>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d007      	beq.n	80034b6 <HAL_GPIO_Init+0x20e>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a4b      	ldr	r2, [pc, #300]	@ (80035d8 <HAL_GPIO_Init+0x330>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d101      	bne.n	80034b2 <HAL_GPIO_Init+0x20a>
 80034ae:	2307      	movs	r3, #7
 80034b0:	e00e      	b.n	80034d0 <HAL_GPIO_Init+0x228>
 80034b2:	2308      	movs	r3, #8
 80034b4:	e00c      	b.n	80034d0 <HAL_GPIO_Init+0x228>
 80034b6:	2306      	movs	r3, #6
 80034b8:	e00a      	b.n	80034d0 <HAL_GPIO_Init+0x228>
 80034ba:	2305      	movs	r3, #5
 80034bc:	e008      	b.n	80034d0 <HAL_GPIO_Init+0x228>
 80034be:	2304      	movs	r3, #4
 80034c0:	e006      	b.n	80034d0 <HAL_GPIO_Init+0x228>
 80034c2:	2303      	movs	r3, #3
 80034c4:	e004      	b.n	80034d0 <HAL_GPIO_Init+0x228>
 80034c6:	2302      	movs	r3, #2
 80034c8:	e002      	b.n	80034d0 <HAL_GPIO_Init+0x228>
 80034ca:	2301      	movs	r3, #1
 80034cc:	e000      	b.n	80034d0 <HAL_GPIO_Init+0x228>
 80034ce:	2300      	movs	r3, #0
 80034d0:	69fa      	ldr	r2, [r7, #28]
 80034d2:	f002 0203 	and.w	r2, r2, #3
 80034d6:	0092      	lsls	r2, r2, #2
 80034d8:	4093      	lsls	r3, r2
 80034da:	69ba      	ldr	r2, [r7, #24]
 80034dc:	4313      	orrs	r3, r2
 80034de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80034e0:	4935      	ldr	r1, [pc, #212]	@ (80035b8 <HAL_GPIO_Init+0x310>)
 80034e2:	69fb      	ldr	r3, [r7, #28]
 80034e4:	089b      	lsrs	r3, r3, #2
 80034e6:	3302      	adds	r3, #2
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80034ee:	4b3b      	ldr	r3, [pc, #236]	@ (80035dc <HAL_GPIO_Init+0x334>)
 80034f0:	689b      	ldr	r3, [r3, #8]
 80034f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	43db      	mvns	r3, r3
 80034f8:	69ba      	ldr	r2, [r7, #24]
 80034fa:	4013      	ands	r3, r2
 80034fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d003      	beq.n	8003512 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	4313      	orrs	r3, r2
 8003510:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003512:	4a32      	ldr	r2, [pc, #200]	@ (80035dc <HAL_GPIO_Init+0x334>)
 8003514:	69bb      	ldr	r3, [r7, #24]
 8003516:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003518:	4b30      	ldr	r3, [pc, #192]	@ (80035dc <HAL_GPIO_Init+0x334>)
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	43db      	mvns	r3, r3
 8003522:	69ba      	ldr	r2, [r7, #24]
 8003524:	4013      	ands	r3, r2
 8003526:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d003      	beq.n	800353c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	4313      	orrs	r3, r2
 800353a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800353c:	4a27      	ldr	r2, [pc, #156]	@ (80035dc <HAL_GPIO_Init+0x334>)
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003542:	4b26      	ldr	r3, [pc, #152]	@ (80035dc <HAL_GPIO_Init+0x334>)
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	43db      	mvns	r3, r3
 800354c:	69ba      	ldr	r2, [r7, #24]
 800354e:	4013      	ands	r3, r2
 8003550:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800355a:	2b00      	cmp	r3, #0
 800355c:	d003      	beq.n	8003566 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800355e:	69ba      	ldr	r2, [r7, #24]
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	4313      	orrs	r3, r2
 8003564:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003566:	4a1d      	ldr	r2, [pc, #116]	@ (80035dc <HAL_GPIO_Init+0x334>)
 8003568:	69bb      	ldr	r3, [r7, #24]
 800356a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800356c:	4b1b      	ldr	r3, [pc, #108]	@ (80035dc <HAL_GPIO_Init+0x334>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	43db      	mvns	r3, r3
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	4013      	ands	r3, r2
 800357a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003584:	2b00      	cmp	r3, #0
 8003586:	d003      	beq.n	8003590 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003588:	69ba      	ldr	r2, [r7, #24]
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	4313      	orrs	r3, r2
 800358e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003590:	4a12      	ldr	r2, [pc, #72]	@ (80035dc <HAL_GPIO_Init+0x334>)
 8003592:	69bb      	ldr	r3, [r7, #24]
 8003594:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	3301      	adds	r3, #1
 800359a:	61fb      	str	r3, [r7, #28]
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	2b0f      	cmp	r3, #15
 80035a0:	f67f ae90 	bls.w	80032c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035a4:	bf00      	nop
 80035a6:	bf00      	nop
 80035a8:	3724      	adds	r7, #36	@ 0x24
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
 80035b2:	bf00      	nop
 80035b4:	40023800 	.word	0x40023800
 80035b8:	40013800 	.word	0x40013800
 80035bc:	40020000 	.word	0x40020000
 80035c0:	40020400 	.word	0x40020400
 80035c4:	40020800 	.word	0x40020800
 80035c8:	40020c00 	.word	0x40020c00
 80035cc:	40021000 	.word	0x40021000
 80035d0:	40021400 	.word	0x40021400
 80035d4:	40021800 	.word	0x40021800
 80035d8:	40021c00 	.word	0x40021c00
 80035dc:	40013c00 	.word	0x40013c00

080035e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035e0:	b480      	push	{r7}
 80035e2:	b083      	sub	sp, #12
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
 80035e8:	460b      	mov	r3, r1
 80035ea:	807b      	strh	r3, [r7, #2]
 80035ec:	4613      	mov	r3, r2
 80035ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80035f0:	787b      	ldrb	r3, [r7, #1]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d003      	beq.n	80035fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035f6:	887a      	ldrh	r2, [r7, #2]
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80035fc:	e003      	b.n	8003606 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80035fe:	887b      	ldrh	r3, [r7, #2]
 8003600:	041a      	lsls	r2, r3, #16
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	619a      	str	r2, [r3, #24]
}
 8003606:	bf00      	nop
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003610:	4770      	bx	lr
	...

08003614 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b082      	sub	sp, #8
 8003618:	af00      	add	r7, sp, #0
 800361a:	4603      	mov	r3, r0
 800361c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800361e:	4b08      	ldr	r3, [pc, #32]	@ (8003640 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003620:	695a      	ldr	r2, [r3, #20]
 8003622:	88fb      	ldrh	r3, [r7, #6]
 8003624:	4013      	ands	r3, r2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d006      	beq.n	8003638 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800362a:	4a05      	ldr	r2, [pc, #20]	@ (8003640 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800362c:	88fb      	ldrh	r3, [r7, #6]
 800362e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003630:	88fb      	ldrh	r3, [r7, #6]
 8003632:	4618      	mov	r0, r3
 8003634:	f000 f806 	bl	8003644 <HAL_GPIO_EXTI_Callback>
  }
}
 8003638:	bf00      	nop
 800363a:	3708      	adds	r7, #8
 800363c:	46bd      	mov	sp, r7
 800363e:	bd80      	pop	{r7, pc}
 8003640:	40013c00 	.word	0x40013c00

08003644 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003644:	b480      	push	{r7}
 8003646:	b083      	sub	sp, #12
 8003648:	af00      	add	r7, sp, #0
 800364a:	4603      	mov	r3, r0
 800364c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800364e:	bf00      	nop
 8003650:	370c      	adds	r7, #12
 8003652:	46bd      	mov	sp, r7
 8003654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003658:	4770      	bx	lr
	...

0800365c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b084      	sub	sp, #16
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e12b      	b.n	80038c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003674:	b2db      	uxtb	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d106      	bne.n	8003688 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7fe ffde 	bl	8002644 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2224      	movs	r2, #36	@ 0x24
 800368c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f022 0201 	bic.w	r2, r2, #1
 800369e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	681a      	ldr	r2, [r3, #0]
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80036ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80036be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036c0:	f001 fc60 	bl	8004f84 <HAL_RCC_GetPCLK1Freq>
 80036c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	4a81      	ldr	r2, [pc, #516]	@ (80038d0 <HAL_I2C_Init+0x274>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d807      	bhi.n	80036e0 <HAL_I2C_Init+0x84>
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	4a80      	ldr	r2, [pc, #512]	@ (80038d4 <HAL_I2C_Init+0x278>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	bf94      	ite	ls
 80036d8:	2301      	movls	r3, #1
 80036da:	2300      	movhi	r3, #0
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	e006      	b.n	80036ee <HAL_I2C_Init+0x92>
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	4a7d      	ldr	r2, [pc, #500]	@ (80038d8 <HAL_I2C_Init+0x27c>)
 80036e4:	4293      	cmp	r3, r2
 80036e6:	bf94      	ite	ls
 80036e8:	2301      	movls	r3, #1
 80036ea:	2300      	movhi	r3, #0
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d001      	beq.n	80036f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036f2:	2301      	movs	r3, #1
 80036f4:	e0e7      	b.n	80038c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	4a78      	ldr	r2, [pc, #480]	@ (80038dc <HAL_I2C_Init+0x280>)
 80036fa:	fba2 2303 	umull	r2, r3, r2, r3
 80036fe:	0c9b      	lsrs	r3, r3, #18
 8003700:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	430a      	orrs	r2, r1
 8003714:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	6a1b      	ldr	r3, [r3, #32]
 800371c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	4a6a      	ldr	r2, [pc, #424]	@ (80038d0 <HAL_I2C_Init+0x274>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d802      	bhi.n	8003730 <HAL_I2C_Init+0xd4>
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	3301      	adds	r3, #1
 800372e:	e009      	b.n	8003744 <HAL_I2C_Init+0xe8>
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003736:	fb02 f303 	mul.w	r3, r2, r3
 800373a:	4a69      	ldr	r2, [pc, #420]	@ (80038e0 <HAL_I2C_Init+0x284>)
 800373c:	fba2 2303 	umull	r2, r3, r2, r3
 8003740:	099b      	lsrs	r3, r3, #6
 8003742:	3301      	adds	r3, #1
 8003744:	687a      	ldr	r2, [r7, #4]
 8003746:	6812      	ldr	r2, [r2, #0]
 8003748:	430b      	orrs	r3, r1
 800374a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	69db      	ldr	r3, [r3, #28]
 8003752:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003756:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	495c      	ldr	r1, [pc, #368]	@ (80038d0 <HAL_I2C_Init+0x274>)
 8003760:	428b      	cmp	r3, r1
 8003762:	d819      	bhi.n	8003798 <HAL_I2C_Init+0x13c>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	1e59      	subs	r1, r3, #1
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003772:	1c59      	adds	r1, r3, #1
 8003774:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003778:	400b      	ands	r3, r1
 800377a:	2b00      	cmp	r3, #0
 800377c:	d00a      	beq.n	8003794 <HAL_I2C_Init+0x138>
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	1e59      	subs	r1, r3, #1
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	fbb1 f3f3 	udiv	r3, r1, r3
 800378c:	3301      	adds	r3, #1
 800378e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003792:	e051      	b.n	8003838 <HAL_I2C_Init+0x1dc>
 8003794:	2304      	movs	r3, #4
 8003796:	e04f      	b.n	8003838 <HAL_I2C_Init+0x1dc>
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	689b      	ldr	r3, [r3, #8]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d111      	bne.n	80037c4 <HAL_I2C_Init+0x168>
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	1e58      	subs	r0, r3, #1
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	6859      	ldr	r1, [r3, #4]
 80037a8:	460b      	mov	r3, r1
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	440b      	add	r3, r1
 80037ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80037b2:	3301      	adds	r3, #1
 80037b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	bf0c      	ite	eq
 80037bc:	2301      	moveq	r3, #1
 80037be:	2300      	movne	r3, #0
 80037c0:	b2db      	uxtb	r3, r3
 80037c2:	e012      	b.n	80037ea <HAL_I2C_Init+0x18e>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	1e58      	subs	r0, r3, #1
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6859      	ldr	r1, [r3, #4]
 80037cc:	460b      	mov	r3, r1
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	440b      	add	r3, r1
 80037d2:	0099      	lsls	r1, r3, #2
 80037d4:	440b      	add	r3, r1
 80037d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037da:	3301      	adds	r3, #1
 80037dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	bf0c      	ite	eq
 80037e4:	2301      	moveq	r3, #1
 80037e6:	2300      	movne	r3, #0
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <HAL_I2C_Init+0x196>
 80037ee:	2301      	movs	r3, #1
 80037f0:	e022      	b.n	8003838 <HAL_I2C_Init+0x1dc>
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	689b      	ldr	r3, [r3, #8]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d10e      	bne.n	8003818 <HAL_I2C_Init+0x1bc>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	1e58      	subs	r0, r3, #1
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6859      	ldr	r1, [r3, #4]
 8003802:	460b      	mov	r3, r1
 8003804:	005b      	lsls	r3, r3, #1
 8003806:	440b      	add	r3, r1
 8003808:	fbb0 f3f3 	udiv	r3, r0, r3
 800380c:	3301      	adds	r3, #1
 800380e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003812:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003816:	e00f      	b.n	8003838 <HAL_I2C_Init+0x1dc>
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	1e58      	subs	r0, r3, #1
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6859      	ldr	r1, [r3, #4]
 8003820:	460b      	mov	r3, r1
 8003822:	009b      	lsls	r3, r3, #2
 8003824:	440b      	add	r3, r1
 8003826:	0099      	lsls	r1, r3, #2
 8003828:	440b      	add	r3, r1
 800382a:	fbb0 f3f3 	udiv	r3, r0, r3
 800382e:	3301      	adds	r3, #1
 8003830:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003834:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003838:	6879      	ldr	r1, [r7, #4]
 800383a:	6809      	ldr	r1, [r1, #0]
 800383c:	4313      	orrs	r3, r2
 800383e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	69da      	ldr	r2, [r3, #28]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6a1b      	ldr	r3, [r3, #32]
 8003852:	431a      	orrs	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	430a      	orrs	r2, r1
 800385a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003866:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	6911      	ldr	r1, [r2, #16]
 800386e:	687a      	ldr	r2, [r7, #4]
 8003870:	68d2      	ldr	r2, [r2, #12]
 8003872:	4311      	orrs	r1, r2
 8003874:	687a      	ldr	r2, [r7, #4]
 8003876:	6812      	ldr	r2, [r2, #0]
 8003878:	430b      	orrs	r3, r1
 800387a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	695a      	ldr	r2, [r3, #20]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	431a      	orrs	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	430a      	orrs	r2, r1
 8003896:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f042 0201 	orr.w	r2, r2, #1
 80038a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2200      	movs	r2, #0
 80038ac:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2220      	movs	r2, #32
 80038b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2200      	movs	r2, #0
 80038ba:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	2200      	movs	r2, #0
 80038c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	000186a0 	.word	0x000186a0
 80038d4:	001e847f 	.word	0x001e847f
 80038d8:	003d08ff 	.word	0x003d08ff
 80038dc:	431bde83 	.word	0x431bde83
 80038e0:	10624dd3 	.word	0x10624dd3

080038e4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b088      	sub	sp, #32
 80038e8:	af02      	add	r7, sp, #8
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	4608      	mov	r0, r1
 80038ee:	4611      	mov	r1, r2
 80038f0:	461a      	mov	r2, r3
 80038f2:	4603      	mov	r3, r0
 80038f4:	817b      	strh	r3, [r7, #10]
 80038f6:	460b      	mov	r3, r1
 80038f8:	813b      	strh	r3, [r7, #8]
 80038fa:	4613      	mov	r3, r2
 80038fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80038fe:	f7ff f92f 	bl	8002b60 <HAL_GetTick>
 8003902:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800390a:	b2db      	uxtb	r3, r3
 800390c:	2b20      	cmp	r3, #32
 800390e:	f040 80d9 	bne.w	8003ac4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	9300      	str	r3, [sp, #0]
 8003916:	2319      	movs	r3, #25
 8003918:	2201      	movs	r2, #1
 800391a:	496d      	ldr	r1, [pc, #436]	@ (8003ad0 <HAL_I2C_Mem_Write+0x1ec>)
 800391c:	68f8      	ldr	r0, [r7, #12]
 800391e:	f000 fc8b 	bl	8004238 <I2C_WaitOnFlagUntilTimeout>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003928:	2302      	movs	r3, #2
 800392a:	e0cc      	b.n	8003ac6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003932:	2b01      	cmp	r3, #1
 8003934:	d101      	bne.n	800393a <HAL_I2C_Mem_Write+0x56>
 8003936:	2302      	movs	r3, #2
 8003938:	e0c5      	b.n	8003ac6 <HAL_I2C_Mem_Write+0x1e2>
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2201      	movs	r2, #1
 800393e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0301 	and.w	r3, r3, #1
 800394c:	2b01      	cmp	r3, #1
 800394e:	d007      	beq.n	8003960 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681a      	ldr	r2, [r3, #0]
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f042 0201 	orr.w	r2, r2, #1
 800395e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800396e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2221      	movs	r2, #33	@ 0x21
 8003974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2240      	movs	r2, #64	@ 0x40
 800397c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6a3a      	ldr	r2, [r7, #32]
 800398a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003990:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003996:	b29a      	uxth	r2, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	4a4d      	ldr	r2, [pc, #308]	@ (8003ad4 <HAL_I2C_Mem_Write+0x1f0>)
 80039a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80039a2:	88f8      	ldrh	r0, [r7, #6]
 80039a4:	893a      	ldrh	r2, [r7, #8]
 80039a6:	8979      	ldrh	r1, [r7, #10]
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	9301      	str	r3, [sp, #4]
 80039ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80039ae:	9300      	str	r3, [sp, #0]
 80039b0:	4603      	mov	r3, r0
 80039b2:	68f8      	ldr	r0, [r7, #12]
 80039b4:	f000 fac2 	bl	8003f3c <I2C_RequestMemoryWrite>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d052      	beq.n	8003a64 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e081      	b.n	8003ac6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039c6:	68f8      	ldr	r0, [r7, #12]
 80039c8:	f000 fd50 	bl	800446c <I2C_WaitOnTXEFlagUntilTimeout>
 80039cc:	4603      	mov	r3, r0
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d00d      	beq.n	80039ee <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039d6:	2b04      	cmp	r3, #4
 80039d8:	d107      	bne.n	80039ea <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e06b      	b.n	8003ac6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039f2:	781a      	ldrb	r2, [r3, #0]
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039fe:	1c5a      	adds	r2, r3, #1
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a08:	3b01      	subs	r3, #1
 8003a0a:	b29a      	uxth	r2, r3
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a14:	b29b      	uxth	r3, r3
 8003a16:	3b01      	subs	r3, #1
 8003a18:	b29a      	uxth	r2, r3
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	695b      	ldr	r3, [r3, #20]
 8003a24:	f003 0304 	and.w	r3, r3, #4
 8003a28:	2b04      	cmp	r3, #4
 8003a2a:	d11b      	bne.n	8003a64 <HAL_I2C_Mem_Write+0x180>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d017      	beq.n	8003a64 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a38:	781a      	ldrb	r2, [r3, #0]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a44:	1c5a      	adds	r2, r3, #1
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	b29a      	uxth	r2, r3
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a5a:	b29b      	uxth	r3, r3
 8003a5c:	3b01      	subs	r3, #1
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1aa      	bne.n	80039c2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a6c:	697a      	ldr	r2, [r7, #20]
 8003a6e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a70:	68f8      	ldr	r0, [r7, #12]
 8003a72:	f000 fd43 	bl	80044fc <I2C_WaitOnBTFFlagUntilTimeout>
 8003a76:	4603      	mov	r3, r0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d00d      	beq.n	8003a98 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a80:	2b04      	cmp	r3, #4
 8003a82:	d107      	bne.n	8003a94 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	681a      	ldr	r2, [r3, #0]
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a92:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e016      	b.n	8003ac6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003aa6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2220      	movs	r2, #32
 8003aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2200      	movs	r2, #0
 8003abc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	e000      	b.n	8003ac6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003ac4:	2302      	movs	r3, #2
  }
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3718      	adds	r7, #24
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	00100002 	.word	0x00100002
 8003ad4:	ffff0000 	.word	0xffff0000

08003ad8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b08c      	sub	sp, #48	@ 0x30
 8003adc:	af02      	add	r7, sp, #8
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	4608      	mov	r0, r1
 8003ae2:	4611      	mov	r1, r2
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	817b      	strh	r3, [r7, #10]
 8003aea:	460b      	mov	r3, r1
 8003aec:	813b      	strh	r3, [r7, #8]
 8003aee:	4613      	mov	r3, r2
 8003af0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003af2:	f7ff f835 	bl	8002b60 <HAL_GetTick>
 8003af6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b20      	cmp	r3, #32
 8003b02:	f040 8214 	bne.w	8003f2e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	2319      	movs	r3, #25
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	497b      	ldr	r1, [pc, #492]	@ (8003cfc <HAL_I2C_Mem_Read+0x224>)
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f000 fb91 	bl	8004238 <I2C_WaitOnFlagUntilTimeout>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003b1c:	2302      	movs	r3, #2
 8003b1e:	e207      	b.n	8003f30 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b26:	2b01      	cmp	r3, #1
 8003b28:	d101      	bne.n	8003b2e <HAL_I2C_Mem_Read+0x56>
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	e200      	b.n	8003f30 <HAL_I2C_Mem_Read+0x458>
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	2201      	movs	r2, #1
 8003b32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f003 0301 	and.w	r3, r3, #1
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d007      	beq.n	8003b54 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681a      	ldr	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f042 0201 	orr.w	r2, r2, #1
 8003b52:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	681a      	ldr	r2, [r3, #0]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b62:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2222      	movs	r2, #34	@ 0x22
 8003b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2240      	movs	r2, #64	@ 0x40
 8003b70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2200      	movs	r2, #0
 8003b78:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b7e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003b84:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	4a5b      	ldr	r2, [pc, #364]	@ (8003d00 <HAL_I2C_Mem_Read+0x228>)
 8003b94:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b96:	88f8      	ldrh	r0, [r7, #6]
 8003b98:	893a      	ldrh	r2, [r7, #8]
 8003b9a:	8979      	ldrh	r1, [r7, #10]
 8003b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b9e:	9301      	str	r3, [sp, #4]
 8003ba0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ba2:	9300      	str	r3, [sp, #0]
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f000 fa5e 	bl	8004068 <I2C_RequestMemoryRead>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d001      	beq.n	8003bb6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	e1bc      	b.n	8003f30 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d113      	bne.n	8003be6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	623b      	str	r3, [r7, #32]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	695b      	ldr	r3, [r3, #20]
 8003bc8:	623b      	str	r3, [r7, #32]
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	699b      	ldr	r3, [r3, #24]
 8003bd0:	623b      	str	r3, [r7, #32]
 8003bd2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003be2:	601a      	str	r2, [r3, #0]
 8003be4:	e190      	b.n	8003f08 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bea:	2b01      	cmp	r3, #1
 8003bec:	d11b      	bne.n	8003c26 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bfc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bfe:	2300      	movs	r3, #0
 8003c00:	61fb      	str	r3, [r7, #28]
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	695b      	ldr	r3, [r3, #20]
 8003c08:	61fb      	str	r3, [r7, #28]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	699b      	ldr	r3, [r3, #24]
 8003c10:	61fb      	str	r3, [r7, #28]
 8003c12:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c22:	601a      	str	r2, [r3, #0]
 8003c24:	e170      	b.n	8003f08 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c2a:	2b02      	cmp	r3, #2
 8003c2c:	d11b      	bne.n	8003c66 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c3c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	681a      	ldr	r2, [r3, #0]
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003c4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c4e:	2300      	movs	r3, #0
 8003c50:	61bb      	str	r3, [r7, #24]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	695b      	ldr	r3, [r3, #20]
 8003c58:	61bb      	str	r3, [r7, #24]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	699b      	ldr	r3, [r3, #24]
 8003c60:	61bb      	str	r3, [r7, #24]
 8003c62:	69bb      	ldr	r3, [r7, #24]
 8003c64:	e150      	b.n	8003f08 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c66:	2300      	movs	r3, #0
 8003c68:	617b      	str	r3, [r7, #20]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	695b      	ldr	r3, [r3, #20]
 8003c70:	617b      	str	r3, [r7, #20]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	617b      	str	r3, [r7, #20]
 8003c7a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003c7c:	e144      	b.n	8003f08 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c82:	2b03      	cmp	r3, #3
 8003c84:	f200 80f1 	bhi.w	8003e6a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d123      	bne.n	8003cd8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c90:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c92:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f000 fc79 	bl	800458c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c9a:	4603      	mov	r3, r0
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d001      	beq.n	8003ca4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e145      	b.n	8003f30 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	691a      	ldr	r2, [r3, #16]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cae:	b2d2      	uxtb	r2, r2
 8003cb0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb6:	1c5a      	adds	r2, r3, #1
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cc0:	3b01      	subs	r3, #1
 8003cc2:	b29a      	uxth	r2, r3
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	b29a      	uxth	r2, r3
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003cd6:	e117      	b.n	8003f08 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d14e      	bne.n	8003d7e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ce0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce2:	9300      	str	r3, [sp, #0]
 8003ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	4906      	ldr	r1, [pc, #24]	@ (8003d04 <HAL_I2C_Mem_Read+0x22c>)
 8003cea:	68f8      	ldr	r0, [r7, #12]
 8003cec:	f000 faa4 	bl	8004238 <I2C_WaitOnFlagUntilTimeout>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d008      	beq.n	8003d08 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e11a      	b.n	8003f30 <HAL_I2C_Mem_Read+0x458>
 8003cfa:	bf00      	nop
 8003cfc:	00100002 	.word	0x00100002
 8003d00:	ffff0000 	.word	0xffff0000
 8003d04:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	681a      	ldr	r2, [r3, #0]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	691a      	ldr	r2, [r3, #16]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d22:	b2d2      	uxtb	r2, r2
 8003d24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2a:	1c5a      	adds	r2, r3, #1
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d34:	3b01      	subs	r3, #1
 8003d36:	b29a      	uxth	r2, r3
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d40:	b29b      	uxth	r3, r3
 8003d42:	3b01      	subs	r3, #1
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	691a      	ldr	r2, [r3, #16]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d54:	b2d2      	uxtb	r2, r2
 8003d56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d5c:	1c5a      	adds	r2, r3, #1
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d66:	3b01      	subs	r3, #1
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	3b01      	subs	r3, #1
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003d7c:	e0c4      	b.n	8003f08 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d80:	9300      	str	r3, [sp, #0]
 8003d82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d84:	2200      	movs	r2, #0
 8003d86:	496c      	ldr	r1, [pc, #432]	@ (8003f38 <HAL_I2C_Mem_Read+0x460>)
 8003d88:	68f8      	ldr	r0, [r7, #12]
 8003d8a:	f000 fa55 	bl	8004238 <I2C_WaitOnFlagUntilTimeout>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d001      	beq.n	8003d98 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003d94:	2301      	movs	r3, #1
 8003d96:	e0cb      	b.n	8003f30 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003da6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	691a      	ldr	r2, [r3, #16]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003db2:	b2d2      	uxtb	r2, r2
 8003db4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dba:	1c5a      	adds	r2, r3, #1
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dc4:	3b01      	subs	r3, #1
 8003dc6:	b29a      	uxth	r2, r3
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dd0:	b29b      	uxth	r3, r3
 8003dd2:	3b01      	subs	r3, #1
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003de0:	2200      	movs	r2, #0
 8003de2:	4955      	ldr	r1, [pc, #340]	@ (8003f38 <HAL_I2C_Mem_Read+0x460>)
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f000 fa27 	bl	8004238 <I2C_WaitOnFlagUntilTimeout>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d001      	beq.n	8003df4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e09d      	b.n	8003f30 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	691a      	ldr	r2, [r3, #16]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0e:	b2d2      	uxtb	r2, r2
 8003e10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e16:	1c5a      	adds	r2, r3, #1
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e20:	3b01      	subs	r3, #1
 8003e22:	b29a      	uxth	r2, r3
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e2c:	b29b      	uxth	r3, r3
 8003e2e:	3b01      	subs	r3, #1
 8003e30:	b29a      	uxth	r2, r3
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	691a      	ldr	r2, [r3, #16]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e40:	b2d2      	uxtb	r2, r2
 8003e42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e48:	1c5a      	adds	r2, r3, #1
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e52:	3b01      	subs	r3, #1
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	3b01      	subs	r3, #1
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e68:	e04e      	b.n	8003f08 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e6c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f000 fb8c 	bl	800458c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d001      	beq.n	8003e7e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e058      	b.n	8003f30 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	691a      	ldr	r2, [r3, #16]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e88:	b2d2      	uxtb	r2, r2
 8003e8a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e90:	1c5a      	adds	r2, r3, #1
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	f003 0304 	and.w	r3, r3, #4
 8003eba:	2b04      	cmp	r3, #4
 8003ebc:	d124      	bne.n	8003f08 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ec2:	2b03      	cmp	r3, #3
 8003ec4:	d107      	bne.n	8003ed6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ed4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	691a      	ldr	r2, [r3, #16]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee0:	b2d2      	uxtb	r2, r2
 8003ee2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee8:	1c5a      	adds	r2, r3, #1
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ef2:	3b01      	subs	r3, #1
 8003ef4:	b29a      	uxth	r2, r3
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	3b01      	subs	r3, #1
 8003f02:	b29a      	uxth	r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f47f aeb6 	bne.w	8003c7e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	2220      	movs	r2, #32
 8003f16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2200      	movs	r2, #0
 8003f26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	e000      	b.n	8003f30 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003f2e:	2302      	movs	r3, #2
  }
}
 8003f30:	4618      	mov	r0, r3
 8003f32:	3728      	adds	r7, #40	@ 0x28
 8003f34:	46bd      	mov	sp, r7
 8003f36:	bd80      	pop	{r7, pc}
 8003f38:	00010004 	.word	0x00010004

08003f3c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b088      	sub	sp, #32
 8003f40:	af02      	add	r7, sp, #8
 8003f42:	60f8      	str	r0, [r7, #12]
 8003f44:	4608      	mov	r0, r1
 8003f46:	4611      	mov	r1, r2
 8003f48:	461a      	mov	r2, r3
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	817b      	strh	r3, [r7, #10]
 8003f4e:	460b      	mov	r3, r1
 8003f50:	813b      	strh	r3, [r7, #8]
 8003f52:	4613      	mov	r3, r2
 8003f54:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681a      	ldr	r2, [r3, #0]
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f64:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f68:	9300      	str	r3, [sp, #0]
 8003f6a:	6a3b      	ldr	r3, [r7, #32]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f72:	68f8      	ldr	r0, [r7, #12]
 8003f74:	f000 f960 	bl	8004238 <I2C_WaitOnFlagUntilTimeout>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d00d      	beq.n	8003f9a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f8c:	d103      	bne.n	8003f96 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f94:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e05f      	b.n	800405a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f9a:	897b      	ldrh	r3, [r7, #10]
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	461a      	mov	r2, r3
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003fa8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fac:	6a3a      	ldr	r2, [r7, #32]
 8003fae:	492d      	ldr	r1, [pc, #180]	@ (8004064 <I2C_RequestMemoryWrite+0x128>)
 8003fb0:	68f8      	ldr	r0, [r7, #12]
 8003fb2:	f000 f9bb 	bl	800432c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d001      	beq.n	8003fc0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e04c      	b.n	800405a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	617b      	str	r3, [r7, #20]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	617b      	str	r3, [r7, #20]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	699b      	ldr	r3, [r3, #24]
 8003fd2:	617b      	str	r3, [r7, #20]
 8003fd4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fd6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fd8:	6a39      	ldr	r1, [r7, #32]
 8003fda:	68f8      	ldr	r0, [r7, #12]
 8003fdc:	f000 fa46 	bl	800446c <I2C_WaitOnTXEFlagUntilTimeout>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00d      	beq.n	8004002 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fea:	2b04      	cmp	r3, #4
 8003fec:	d107      	bne.n	8003ffe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ffc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e02b      	b.n	800405a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004002:	88fb      	ldrh	r3, [r7, #6]
 8004004:	2b01      	cmp	r3, #1
 8004006:	d105      	bne.n	8004014 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004008:	893b      	ldrh	r3, [r7, #8]
 800400a:	b2da      	uxtb	r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	611a      	str	r2, [r3, #16]
 8004012:	e021      	b.n	8004058 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004014:	893b      	ldrh	r3, [r7, #8]
 8004016:	0a1b      	lsrs	r3, r3, #8
 8004018:	b29b      	uxth	r3, r3
 800401a:	b2da      	uxtb	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004022:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004024:	6a39      	ldr	r1, [r7, #32]
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f000 fa20 	bl	800446c <I2C_WaitOnTXEFlagUntilTimeout>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00d      	beq.n	800404e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004036:	2b04      	cmp	r3, #4
 8004038:	d107      	bne.n	800404a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004048:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e005      	b.n	800405a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800404e:	893b      	ldrh	r3, [r7, #8]
 8004050:	b2da      	uxtb	r2, r3
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3718      	adds	r7, #24
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	00010002 	.word	0x00010002

08004068 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b088      	sub	sp, #32
 800406c:	af02      	add	r7, sp, #8
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	4608      	mov	r0, r1
 8004072:	4611      	mov	r1, r2
 8004074:	461a      	mov	r2, r3
 8004076:	4603      	mov	r3, r0
 8004078:	817b      	strh	r3, [r7, #10]
 800407a:	460b      	mov	r3, r1
 800407c:	813b      	strh	r3, [r7, #8]
 800407e:	4613      	mov	r3, r2
 8004080:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004090:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681a      	ldr	r2, [r3, #0]
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040a4:	9300      	str	r3, [sp, #0]
 80040a6:	6a3b      	ldr	r3, [r7, #32]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f000 f8c2 	bl	8004238 <I2C_WaitOnFlagUntilTimeout>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00d      	beq.n	80040d6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040c8:	d103      	bne.n	80040d2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040d0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e0aa      	b.n	800422c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80040d6:	897b      	ldrh	r3, [r7, #10]
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	461a      	mov	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80040e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040e8:	6a3a      	ldr	r2, [r7, #32]
 80040ea:	4952      	ldr	r1, [pc, #328]	@ (8004234 <I2C_RequestMemoryRead+0x1cc>)
 80040ec:	68f8      	ldr	r0, [r7, #12]
 80040ee:	f000 f91d 	bl	800432c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040f2:	4603      	mov	r3, r0
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d001      	beq.n	80040fc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80040f8:	2301      	movs	r3, #1
 80040fa:	e097      	b.n	800422c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040fc:	2300      	movs	r3, #0
 80040fe:	617b      	str	r3, [r7, #20]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	695b      	ldr	r3, [r3, #20]
 8004106:	617b      	str	r3, [r7, #20]
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	699b      	ldr	r3, [r3, #24]
 800410e:	617b      	str	r3, [r7, #20]
 8004110:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004112:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004114:	6a39      	ldr	r1, [r7, #32]
 8004116:	68f8      	ldr	r0, [r7, #12]
 8004118:	f000 f9a8 	bl	800446c <I2C_WaitOnTXEFlagUntilTimeout>
 800411c:	4603      	mov	r3, r0
 800411e:	2b00      	cmp	r3, #0
 8004120:	d00d      	beq.n	800413e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004126:	2b04      	cmp	r3, #4
 8004128:	d107      	bne.n	800413a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004138:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800413a:	2301      	movs	r3, #1
 800413c:	e076      	b.n	800422c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800413e:	88fb      	ldrh	r3, [r7, #6]
 8004140:	2b01      	cmp	r3, #1
 8004142:	d105      	bne.n	8004150 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004144:	893b      	ldrh	r3, [r7, #8]
 8004146:	b2da      	uxtb	r2, r3
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	611a      	str	r2, [r3, #16]
 800414e:	e021      	b.n	8004194 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004150:	893b      	ldrh	r3, [r7, #8]
 8004152:	0a1b      	lsrs	r3, r3, #8
 8004154:	b29b      	uxth	r3, r3
 8004156:	b2da      	uxtb	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800415e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004160:	6a39      	ldr	r1, [r7, #32]
 8004162:	68f8      	ldr	r0, [r7, #12]
 8004164:	f000 f982 	bl	800446c <I2C_WaitOnTXEFlagUntilTimeout>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d00d      	beq.n	800418a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004172:	2b04      	cmp	r3, #4
 8004174:	d107      	bne.n	8004186 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	681a      	ldr	r2, [r3, #0]
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004184:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e050      	b.n	800422c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800418a:	893b      	ldrh	r3, [r7, #8]
 800418c:	b2da      	uxtb	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004194:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004196:	6a39      	ldr	r1, [r7, #32]
 8004198:	68f8      	ldr	r0, [r7, #12]
 800419a:	f000 f967 	bl	800446c <I2C_WaitOnTXEFlagUntilTimeout>
 800419e:	4603      	mov	r3, r0
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00d      	beq.n	80041c0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a8:	2b04      	cmp	r3, #4
 80041aa:	d107      	bne.n	80041bc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041ba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80041bc:	2301      	movs	r3, #1
 80041be:	e035      	b.n	800422c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041ce:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041d2:	9300      	str	r3, [sp, #0]
 80041d4:	6a3b      	ldr	r3, [r7, #32]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 f82b 	bl	8004238 <I2C_WaitOnFlagUntilTimeout>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00d      	beq.n	8004204 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041f6:	d103      	bne.n	8004200 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041fe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e013      	b.n	800422c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004204:	897b      	ldrh	r3, [r7, #10]
 8004206:	b2db      	uxtb	r3, r3
 8004208:	f043 0301 	orr.w	r3, r3, #1
 800420c:	b2da      	uxtb	r2, r3
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004216:	6a3a      	ldr	r2, [r7, #32]
 8004218:	4906      	ldr	r1, [pc, #24]	@ (8004234 <I2C_RequestMemoryRead+0x1cc>)
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f000 f886 	bl	800432c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d001      	beq.n	800422a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e000      	b.n	800422c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3718      	adds	r7, #24
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	00010002 	.word	0x00010002

08004238 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b084      	sub	sp, #16
 800423c:	af00      	add	r7, sp, #0
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	60b9      	str	r1, [r7, #8]
 8004242:	603b      	str	r3, [r7, #0]
 8004244:	4613      	mov	r3, r2
 8004246:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004248:	e048      	b.n	80042dc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004250:	d044      	beq.n	80042dc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004252:	f7fe fc85 	bl	8002b60 <HAL_GetTick>
 8004256:	4602      	mov	r2, r0
 8004258:	69bb      	ldr	r3, [r7, #24]
 800425a:	1ad3      	subs	r3, r2, r3
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	429a      	cmp	r2, r3
 8004260:	d302      	bcc.n	8004268 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d139      	bne.n	80042dc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	0c1b      	lsrs	r3, r3, #16
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b01      	cmp	r3, #1
 8004270:	d10d      	bne.n	800428e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	695b      	ldr	r3, [r3, #20]
 8004278:	43da      	mvns	r2, r3
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	4013      	ands	r3, r2
 800427e:	b29b      	uxth	r3, r3
 8004280:	2b00      	cmp	r3, #0
 8004282:	bf0c      	ite	eq
 8004284:	2301      	moveq	r3, #1
 8004286:	2300      	movne	r3, #0
 8004288:	b2db      	uxtb	r3, r3
 800428a:	461a      	mov	r2, r3
 800428c:	e00c      	b.n	80042a8 <I2C_WaitOnFlagUntilTimeout+0x70>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	699b      	ldr	r3, [r3, #24]
 8004294:	43da      	mvns	r2, r3
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	4013      	ands	r3, r2
 800429a:	b29b      	uxth	r3, r3
 800429c:	2b00      	cmp	r3, #0
 800429e:	bf0c      	ite	eq
 80042a0:	2301      	moveq	r3, #1
 80042a2:	2300      	movne	r3, #0
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	461a      	mov	r2, r3
 80042a8:	79fb      	ldrb	r3, [r7, #7]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d116      	bne.n	80042dc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2220      	movs	r2, #32
 80042b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c8:	f043 0220 	orr.w	r2, r3, #32
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042d8:	2301      	movs	r3, #1
 80042da:	e023      	b.n	8004324 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	0c1b      	lsrs	r3, r3, #16
 80042e0:	b2db      	uxtb	r3, r3
 80042e2:	2b01      	cmp	r3, #1
 80042e4:	d10d      	bne.n	8004302 <I2C_WaitOnFlagUntilTimeout+0xca>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	43da      	mvns	r2, r3
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	4013      	ands	r3, r2
 80042f2:	b29b      	uxth	r3, r3
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	bf0c      	ite	eq
 80042f8:	2301      	moveq	r3, #1
 80042fa:	2300      	movne	r3, #0
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	461a      	mov	r2, r3
 8004300:	e00c      	b.n	800431c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	699b      	ldr	r3, [r3, #24]
 8004308:	43da      	mvns	r2, r3
 800430a:	68bb      	ldr	r3, [r7, #8]
 800430c:	4013      	ands	r3, r2
 800430e:	b29b      	uxth	r3, r3
 8004310:	2b00      	cmp	r3, #0
 8004312:	bf0c      	ite	eq
 8004314:	2301      	moveq	r3, #1
 8004316:	2300      	movne	r3, #0
 8004318:	b2db      	uxtb	r3, r3
 800431a:	461a      	mov	r2, r3
 800431c:	79fb      	ldrb	r3, [r7, #7]
 800431e:	429a      	cmp	r2, r3
 8004320:	d093      	beq.n	800424a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004322:	2300      	movs	r3, #0
}
 8004324:	4618      	mov	r0, r3
 8004326:	3710      	adds	r7, #16
 8004328:	46bd      	mov	sp, r7
 800432a:	bd80      	pop	{r7, pc}

0800432c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b084      	sub	sp, #16
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
 8004338:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800433a:	e071      	b.n	8004420 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004346:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800434a:	d123      	bne.n	8004394 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	681a      	ldr	r2, [r3, #0]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800435a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004364:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	2200      	movs	r2, #0
 800436a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2220      	movs	r2, #32
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004380:	f043 0204 	orr.w	r2, r3, #4
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	2200      	movs	r2, #0
 800438c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004390:	2301      	movs	r3, #1
 8004392:	e067      	b.n	8004464 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f1b3 3fff 	cmp.w	r3, #4294967295
 800439a:	d041      	beq.n	8004420 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800439c:	f7fe fbe0 	bl	8002b60 <HAL_GetTick>
 80043a0:	4602      	mov	r2, r0
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	1ad3      	subs	r3, r2, r3
 80043a6:	687a      	ldr	r2, [r7, #4]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d302      	bcc.n	80043b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d136      	bne.n	8004420 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	0c1b      	lsrs	r3, r3, #16
 80043b6:	b2db      	uxtb	r3, r3
 80043b8:	2b01      	cmp	r3, #1
 80043ba:	d10c      	bne.n	80043d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	695b      	ldr	r3, [r3, #20]
 80043c2:	43da      	mvns	r2, r3
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	4013      	ands	r3, r2
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	bf14      	ite	ne
 80043ce:	2301      	movne	r3, #1
 80043d0:	2300      	moveq	r3, #0
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	e00b      	b.n	80043ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	43da      	mvns	r2, r3
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	4013      	ands	r3, r2
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	bf14      	ite	ne
 80043e8:	2301      	movne	r3, #1
 80043ea:	2300      	moveq	r3, #0
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d016      	beq.n	8004420 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2220      	movs	r2, #32
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800440c:	f043 0220 	orr.w	r2, r3, #32
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800441c:	2301      	movs	r3, #1
 800441e:	e021      	b.n	8004464 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	0c1b      	lsrs	r3, r3, #16
 8004424:	b2db      	uxtb	r3, r3
 8004426:	2b01      	cmp	r3, #1
 8004428:	d10c      	bne.n	8004444 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	43da      	mvns	r2, r3
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	4013      	ands	r3, r2
 8004436:	b29b      	uxth	r3, r3
 8004438:	2b00      	cmp	r3, #0
 800443a:	bf14      	ite	ne
 800443c:	2301      	movne	r3, #1
 800443e:	2300      	moveq	r3, #0
 8004440:	b2db      	uxtb	r3, r3
 8004442:	e00b      	b.n	800445c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	43da      	mvns	r2, r3
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	4013      	ands	r3, r2
 8004450:	b29b      	uxth	r3, r3
 8004452:	2b00      	cmp	r3, #0
 8004454:	bf14      	ite	ne
 8004456:	2301      	movne	r3, #1
 8004458:	2300      	moveq	r3, #0
 800445a:	b2db      	uxtb	r3, r3
 800445c:	2b00      	cmp	r3, #0
 800445e:	f47f af6d 	bne.w	800433c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3710      	adds	r7, #16
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004478:	e034      	b.n	80044e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f000 f8e3 	bl	8004646 <I2C_IsAcknowledgeFailed>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d001      	beq.n	800448a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004486:	2301      	movs	r3, #1
 8004488:	e034      	b.n	80044f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004490:	d028      	beq.n	80044e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004492:	f7fe fb65 	bl	8002b60 <HAL_GetTick>
 8004496:	4602      	mov	r2, r0
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	1ad3      	subs	r3, r2, r3
 800449c:	68ba      	ldr	r2, [r7, #8]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d302      	bcc.n	80044a8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d11d      	bne.n	80044e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044b2:	2b80      	cmp	r3, #128	@ 0x80
 80044b4:	d016      	beq.n	80044e4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2220      	movs	r2, #32
 80044c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d0:	f043 0220 	orr.w	r2, r3, #32
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e007      	b.n	80044f4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044ee:	2b80      	cmp	r3, #128	@ 0x80
 80044f0:	d1c3      	bne.n	800447a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80044f2:	2300      	movs	r3, #0
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3710      	adds	r7, #16
 80044f8:	46bd      	mov	sp, r7
 80044fa:	bd80      	pop	{r7, pc}

080044fc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b084      	sub	sp, #16
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004508:	e034      	b.n	8004574 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f000 f89b 	bl	8004646 <I2C_IsAcknowledgeFailed>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d001      	beq.n	800451a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e034      	b.n	8004584 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004520:	d028      	beq.n	8004574 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004522:	f7fe fb1d 	bl	8002b60 <HAL_GetTick>
 8004526:	4602      	mov	r2, r0
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	1ad3      	subs	r3, r2, r3
 800452c:	68ba      	ldr	r2, [r7, #8]
 800452e:	429a      	cmp	r2, r3
 8004530:	d302      	bcc.n	8004538 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d11d      	bne.n	8004574 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	695b      	ldr	r3, [r3, #20]
 800453e:	f003 0304 	and.w	r3, r3, #4
 8004542:	2b04      	cmp	r3, #4
 8004544:	d016      	beq.n	8004574 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2200      	movs	r2, #0
 800454a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2220      	movs	r2, #32
 8004550:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004560:	f043 0220 	orr.w	r2, r3, #32
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e007      	b.n	8004584 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	695b      	ldr	r3, [r3, #20]
 800457a:	f003 0304 	and.w	r3, r3, #4
 800457e:	2b04      	cmp	r3, #4
 8004580:	d1c3      	bne.n	800450a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004582:	2300      	movs	r3, #0
}
 8004584:	4618      	mov	r0, r3
 8004586:	3710      	adds	r7, #16
 8004588:	46bd      	mov	sp, r7
 800458a:	bd80      	pop	{r7, pc}

0800458c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b084      	sub	sp, #16
 8004590:	af00      	add	r7, sp, #0
 8004592:	60f8      	str	r0, [r7, #12]
 8004594:	60b9      	str	r1, [r7, #8]
 8004596:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004598:	e049      	b.n	800462e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	695b      	ldr	r3, [r3, #20]
 80045a0:	f003 0310 	and.w	r3, r3, #16
 80045a4:	2b10      	cmp	r3, #16
 80045a6:	d119      	bne.n	80045dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f06f 0210 	mvn.w	r2, #16
 80045b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	2200      	movs	r2, #0
 80045b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2220      	movs	r2, #32
 80045bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2200      	movs	r2, #0
 80045c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80045d8:	2301      	movs	r3, #1
 80045da:	e030      	b.n	800463e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045dc:	f7fe fac0 	bl	8002b60 <HAL_GetTick>
 80045e0:	4602      	mov	r2, r0
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	1ad3      	subs	r3, r2, r3
 80045e6:	68ba      	ldr	r2, [r7, #8]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d302      	bcc.n	80045f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d11d      	bne.n	800462e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	695b      	ldr	r3, [r3, #20]
 80045f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045fc:	2b40      	cmp	r3, #64	@ 0x40
 80045fe:	d016      	beq.n	800462e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	2200      	movs	r2, #0
 8004604:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2220      	movs	r2, #32
 800460a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800461a:	f043 0220 	orr.w	r2, r3, #32
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800462a:	2301      	movs	r3, #1
 800462c:	e007      	b.n	800463e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	695b      	ldr	r3, [r3, #20]
 8004634:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004638:	2b40      	cmp	r3, #64	@ 0x40
 800463a:	d1ae      	bne.n	800459a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}

08004646 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004646:	b480      	push	{r7}
 8004648:	b083      	sub	sp, #12
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	695b      	ldr	r3, [r3, #20]
 8004654:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004658:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800465c:	d11b      	bne.n	8004696 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004666:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2200      	movs	r2, #0
 800466c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2220      	movs	r2, #32
 8004672:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004682:	f043 0204 	orr.w	r2, r3, #4
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004692:	2301      	movs	r3, #1
 8004694:	e000      	b.n	8004698 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	370c      	adds	r7, #12
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b086      	sub	sp, #24
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d101      	bne.n	80046b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046b2:	2301      	movs	r3, #1
 80046b4:	e267      	b.n	8004b86 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d075      	beq.n	80047ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80046c2:	4b88      	ldr	r3, [pc, #544]	@ (80048e4 <HAL_RCC_OscConfig+0x240>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f003 030c 	and.w	r3, r3, #12
 80046ca:	2b04      	cmp	r3, #4
 80046cc:	d00c      	beq.n	80046e8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046ce:	4b85      	ldr	r3, [pc, #532]	@ (80048e4 <HAL_RCC_OscConfig+0x240>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80046d6:	2b08      	cmp	r3, #8
 80046d8:	d112      	bne.n	8004700 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046da:	4b82      	ldr	r3, [pc, #520]	@ (80048e4 <HAL_RCC_OscConfig+0x240>)
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046e2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80046e6:	d10b      	bne.n	8004700 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046e8:	4b7e      	ldr	r3, [pc, #504]	@ (80048e4 <HAL_RCC_OscConfig+0x240>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d05b      	beq.n	80047ac <HAL_RCC_OscConfig+0x108>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d157      	bne.n	80047ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e242      	b.n	8004b86 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004708:	d106      	bne.n	8004718 <HAL_RCC_OscConfig+0x74>
 800470a:	4b76      	ldr	r3, [pc, #472]	@ (80048e4 <HAL_RCC_OscConfig+0x240>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	4a75      	ldr	r2, [pc, #468]	@ (80048e4 <HAL_RCC_OscConfig+0x240>)
 8004710:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004714:	6013      	str	r3, [r2, #0]
 8004716:	e01d      	b.n	8004754 <HAL_RCC_OscConfig+0xb0>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	685b      	ldr	r3, [r3, #4]
 800471c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004720:	d10c      	bne.n	800473c <HAL_RCC_OscConfig+0x98>
 8004722:	4b70      	ldr	r3, [pc, #448]	@ (80048e4 <HAL_RCC_OscConfig+0x240>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a6f      	ldr	r2, [pc, #444]	@ (80048e4 <HAL_RCC_OscConfig+0x240>)
 8004728:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800472c:	6013      	str	r3, [r2, #0]
 800472e:	4b6d      	ldr	r3, [pc, #436]	@ (80048e4 <HAL_RCC_OscConfig+0x240>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a6c      	ldr	r2, [pc, #432]	@ (80048e4 <HAL_RCC_OscConfig+0x240>)
 8004734:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004738:	6013      	str	r3, [r2, #0]
 800473a:	e00b      	b.n	8004754 <HAL_RCC_OscConfig+0xb0>
 800473c:	4b69      	ldr	r3, [pc, #420]	@ (80048e4 <HAL_RCC_OscConfig+0x240>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a68      	ldr	r2, [pc, #416]	@ (80048e4 <HAL_RCC_OscConfig+0x240>)
 8004742:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004746:	6013      	str	r3, [r2, #0]
 8004748:	4b66      	ldr	r3, [pc, #408]	@ (80048e4 <HAL_RCC_OscConfig+0x240>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a65      	ldr	r2, [pc, #404]	@ (80048e4 <HAL_RCC_OscConfig+0x240>)
 800474e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004752:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d013      	beq.n	8004784 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800475c:	f7fe fa00 	bl	8002b60 <HAL_GetTick>
 8004760:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004762:	e008      	b.n	8004776 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004764:	f7fe f9fc 	bl	8002b60 <HAL_GetTick>
 8004768:	4602      	mov	r2, r0
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	1ad3      	subs	r3, r2, r3
 800476e:	2b64      	cmp	r3, #100	@ 0x64
 8004770:	d901      	bls.n	8004776 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004772:	2303      	movs	r3, #3
 8004774:	e207      	b.n	8004b86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004776:	4b5b      	ldr	r3, [pc, #364]	@ (80048e4 <HAL_RCC_OscConfig+0x240>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800477e:	2b00      	cmp	r3, #0
 8004780:	d0f0      	beq.n	8004764 <HAL_RCC_OscConfig+0xc0>
 8004782:	e014      	b.n	80047ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004784:	f7fe f9ec 	bl	8002b60 <HAL_GetTick>
 8004788:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800478a:	e008      	b.n	800479e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800478c:	f7fe f9e8 	bl	8002b60 <HAL_GetTick>
 8004790:	4602      	mov	r2, r0
 8004792:	693b      	ldr	r3, [r7, #16]
 8004794:	1ad3      	subs	r3, r2, r3
 8004796:	2b64      	cmp	r3, #100	@ 0x64
 8004798:	d901      	bls.n	800479e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800479a:	2303      	movs	r3, #3
 800479c:	e1f3      	b.n	8004b86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800479e:	4b51      	ldr	r3, [pc, #324]	@ (80048e4 <HAL_RCC_OscConfig+0x240>)
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1f0      	bne.n	800478c <HAL_RCC_OscConfig+0xe8>
 80047aa:	e000      	b.n	80047ae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d063      	beq.n	8004882 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80047ba:	4b4a      	ldr	r3, [pc, #296]	@ (80048e4 <HAL_RCC_OscConfig+0x240>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f003 030c 	and.w	r3, r3, #12
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00b      	beq.n	80047de <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047c6:	4b47      	ldr	r3, [pc, #284]	@ (80048e4 <HAL_RCC_OscConfig+0x240>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80047ce:	2b08      	cmp	r3, #8
 80047d0:	d11c      	bne.n	800480c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047d2:	4b44      	ldr	r3, [pc, #272]	@ (80048e4 <HAL_RCC_OscConfig+0x240>)
 80047d4:	685b      	ldr	r3, [r3, #4]
 80047d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d116      	bne.n	800480c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047de:	4b41      	ldr	r3, [pc, #260]	@ (80048e4 <HAL_RCC_OscConfig+0x240>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0302 	and.w	r3, r3, #2
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d005      	beq.n	80047f6 <HAL_RCC_OscConfig+0x152>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	2b01      	cmp	r3, #1
 80047f0:	d001      	beq.n	80047f6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e1c7      	b.n	8004b86 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047f6:	4b3b      	ldr	r3, [pc, #236]	@ (80048e4 <HAL_RCC_OscConfig+0x240>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	00db      	lsls	r3, r3, #3
 8004804:	4937      	ldr	r1, [pc, #220]	@ (80048e4 <HAL_RCC_OscConfig+0x240>)
 8004806:	4313      	orrs	r3, r2
 8004808:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800480a:	e03a      	b.n	8004882 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d020      	beq.n	8004856 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004814:	4b34      	ldr	r3, [pc, #208]	@ (80048e8 <HAL_RCC_OscConfig+0x244>)
 8004816:	2201      	movs	r2, #1
 8004818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800481a:	f7fe f9a1 	bl	8002b60 <HAL_GetTick>
 800481e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004820:	e008      	b.n	8004834 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004822:	f7fe f99d 	bl	8002b60 <HAL_GetTick>
 8004826:	4602      	mov	r2, r0
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	1ad3      	subs	r3, r2, r3
 800482c:	2b02      	cmp	r3, #2
 800482e:	d901      	bls.n	8004834 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004830:	2303      	movs	r3, #3
 8004832:	e1a8      	b.n	8004b86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004834:	4b2b      	ldr	r3, [pc, #172]	@ (80048e4 <HAL_RCC_OscConfig+0x240>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f003 0302 	and.w	r3, r3, #2
 800483c:	2b00      	cmp	r3, #0
 800483e:	d0f0      	beq.n	8004822 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004840:	4b28      	ldr	r3, [pc, #160]	@ (80048e4 <HAL_RCC_OscConfig+0x240>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	00db      	lsls	r3, r3, #3
 800484e:	4925      	ldr	r1, [pc, #148]	@ (80048e4 <HAL_RCC_OscConfig+0x240>)
 8004850:	4313      	orrs	r3, r2
 8004852:	600b      	str	r3, [r1, #0]
 8004854:	e015      	b.n	8004882 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004856:	4b24      	ldr	r3, [pc, #144]	@ (80048e8 <HAL_RCC_OscConfig+0x244>)
 8004858:	2200      	movs	r2, #0
 800485a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800485c:	f7fe f980 	bl	8002b60 <HAL_GetTick>
 8004860:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004862:	e008      	b.n	8004876 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004864:	f7fe f97c 	bl	8002b60 <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b02      	cmp	r3, #2
 8004870:	d901      	bls.n	8004876 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004872:	2303      	movs	r3, #3
 8004874:	e187      	b.n	8004b86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004876:	4b1b      	ldr	r3, [pc, #108]	@ (80048e4 <HAL_RCC_OscConfig+0x240>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b00      	cmp	r3, #0
 8004880:	d1f0      	bne.n	8004864 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0308 	and.w	r3, r3, #8
 800488a:	2b00      	cmp	r3, #0
 800488c:	d036      	beq.n	80048fc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	695b      	ldr	r3, [r3, #20]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d016      	beq.n	80048c4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004896:	4b15      	ldr	r3, [pc, #84]	@ (80048ec <HAL_RCC_OscConfig+0x248>)
 8004898:	2201      	movs	r2, #1
 800489a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800489c:	f7fe f960 	bl	8002b60 <HAL_GetTick>
 80048a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048a2:	e008      	b.n	80048b6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048a4:	f7fe f95c 	bl	8002b60 <HAL_GetTick>
 80048a8:	4602      	mov	r2, r0
 80048aa:	693b      	ldr	r3, [r7, #16]
 80048ac:	1ad3      	subs	r3, r2, r3
 80048ae:	2b02      	cmp	r3, #2
 80048b0:	d901      	bls.n	80048b6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048b2:	2303      	movs	r3, #3
 80048b4:	e167      	b.n	8004b86 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048b6:	4b0b      	ldr	r3, [pc, #44]	@ (80048e4 <HAL_RCC_OscConfig+0x240>)
 80048b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d0f0      	beq.n	80048a4 <HAL_RCC_OscConfig+0x200>
 80048c2:	e01b      	b.n	80048fc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048c4:	4b09      	ldr	r3, [pc, #36]	@ (80048ec <HAL_RCC_OscConfig+0x248>)
 80048c6:	2200      	movs	r2, #0
 80048c8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048ca:	f7fe f949 	bl	8002b60 <HAL_GetTick>
 80048ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048d0:	e00e      	b.n	80048f0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80048d2:	f7fe f945 	bl	8002b60 <HAL_GetTick>
 80048d6:	4602      	mov	r2, r0
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	2b02      	cmp	r3, #2
 80048de:	d907      	bls.n	80048f0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048e0:	2303      	movs	r3, #3
 80048e2:	e150      	b.n	8004b86 <HAL_RCC_OscConfig+0x4e2>
 80048e4:	40023800 	.word	0x40023800
 80048e8:	42470000 	.word	0x42470000
 80048ec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048f0:	4b88      	ldr	r3, [pc, #544]	@ (8004b14 <HAL_RCC_OscConfig+0x470>)
 80048f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048f4:	f003 0302 	and.w	r3, r3, #2
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1ea      	bne.n	80048d2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f003 0304 	and.w	r3, r3, #4
 8004904:	2b00      	cmp	r3, #0
 8004906:	f000 8097 	beq.w	8004a38 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800490a:	2300      	movs	r3, #0
 800490c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800490e:	4b81      	ldr	r3, [pc, #516]	@ (8004b14 <HAL_RCC_OscConfig+0x470>)
 8004910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004912:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004916:	2b00      	cmp	r3, #0
 8004918:	d10f      	bne.n	800493a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800491a:	2300      	movs	r3, #0
 800491c:	60bb      	str	r3, [r7, #8]
 800491e:	4b7d      	ldr	r3, [pc, #500]	@ (8004b14 <HAL_RCC_OscConfig+0x470>)
 8004920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004922:	4a7c      	ldr	r2, [pc, #496]	@ (8004b14 <HAL_RCC_OscConfig+0x470>)
 8004924:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004928:	6413      	str	r3, [r2, #64]	@ 0x40
 800492a:	4b7a      	ldr	r3, [pc, #488]	@ (8004b14 <HAL_RCC_OscConfig+0x470>)
 800492c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800492e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004932:	60bb      	str	r3, [r7, #8]
 8004934:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004936:	2301      	movs	r3, #1
 8004938:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800493a:	4b77      	ldr	r3, [pc, #476]	@ (8004b18 <HAL_RCC_OscConfig+0x474>)
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004942:	2b00      	cmp	r3, #0
 8004944:	d118      	bne.n	8004978 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004946:	4b74      	ldr	r3, [pc, #464]	@ (8004b18 <HAL_RCC_OscConfig+0x474>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a73      	ldr	r2, [pc, #460]	@ (8004b18 <HAL_RCC_OscConfig+0x474>)
 800494c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004950:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004952:	f7fe f905 	bl	8002b60 <HAL_GetTick>
 8004956:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004958:	e008      	b.n	800496c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800495a:	f7fe f901 	bl	8002b60 <HAL_GetTick>
 800495e:	4602      	mov	r2, r0
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	2b02      	cmp	r3, #2
 8004966:	d901      	bls.n	800496c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e10c      	b.n	8004b86 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800496c:	4b6a      	ldr	r3, [pc, #424]	@ (8004b18 <HAL_RCC_OscConfig+0x474>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004974:	2b00      	cmp	r3, #0
 8004976:	d0f0      	beq.n	800495a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d106      	bne.n	800498e <HAL_RCC_OscConfig+0x2ea>
 8004980:	4b64      	ldr	r3, [pc, #400]	@ (8004b14 <HAL_RCC_OscConfig+0x470>)
 8004982:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004984:	4a63      	ldr	r2, [pc, #396]	@ (8004b14 <HAL_RCC_OscConfig+0x470>)
 8004986:	f043 0301 	orr.w	r3, r3, #1
 800498a:	6713      	str	r3, [r2, #112]	@ 0x70
 800498c:	e01c      	b.n	80049c8 <HAL_RCC_OscConfig+0x324>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	2b05      	cmp	r3, #5
 8004994:	d10c      	bne.n	80049b0 <HAL_RCC_OscConfig+0x30c>
 8004996:	4b5f      	ldr	r3, [pc, #380]	@ (8004b14 <HAL_RCC_OscConfig+0x470>)
 8004998:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800499a:	4a5e      	ldr	r2, [pc, #376]	@ (8004b14 <HAL_RCC_OscConfig+0x470>)
 800499c:	f043 0304 	orr.w	r3, r3, #4
 80049a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80049a2:	4b5c      	ldr	r3, [pc, #368]	@ (8004b14 <HAL_RCC_OscConfig+0x470>)
 80049a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049a6:	4a5b      	ldr	r2, [pc, #364]	@ (8004b14 <HAL_RCC_OscConfig+0x470>)
 80049a8:	f043 0301 	orr.w	r3, r3, #1
 80049ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80049ae:	e00b      	b.n	80049c8 <HAL_RCC_OscConfig+0x324>
 80049b0:	4b58      	ldr	r3, [pc, #352]	@ (8004b14 <HAL_RCC_OscConfig+0x470>)
 80049b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049b4:	4a57      	ldr	r2, [pc, #348]	@ (8004b14 <HAL_RCC_OscConfig+0x470>)
 80049b6:	f023 0301 	bic.w	r3, r3, #1
 80049ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80049bc:	4b55      	ldr	r3, [pc, #340]	@ (8004b14 <HAL_RCC_OscConfig+0x470>)
 80049be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049c0:	4a54      	ldr	r2, [pc, #336]	@ (8004b14 <HAL_RCC_OscConfig+0x470>)
 80049c2:	f023 0304 	bic.w	r3, r3, #4
 80049c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	689b      	ldr	r3, [r3, #8]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d015      	beq.n	80049fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049d0:	f7fe f8c6 	bl	8002b60 <HAL_GetTick>
 80049d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049d6:	e00a      	b.n	80049ee <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049d8:	f7fe f8c2 	bl	8002b60 <HAL_GetTick>
 80049dc:	4602      	mov	r2, r0
 80049de:	693b      	ldr	r3, [r7, #16]
 80049e0:	1ad3      	subs	r3, r2, r3
 80049e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d901      	bls.n	80049ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80049ea:	2303      	movs	r3, #3
 80049ec:	e0cb      	b.n	8004b86 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049ee:	4b49      	ldr	r3, [pc, #292]	@ (8004b14 <HAL_RCC_OscConfig+0x470>)
 80049f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80049f2:	f003 0302 	and.w	r3, r3, #2
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d0ee      	beq.n	80049d8 <HAL_RCC_OscConfig+0x334>
 80049fa:	e014      	b.n	8004a26 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049fc:	f7fe f8b0 	bl	8002b60 <HAL_GetTick>
 8004a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a02:	e00a      	b.n	8004a1a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a04:	f7fe f8ac 	bl	8002b60 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d901      	bls.n	8004a1a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e0b5      	b.n	8004b86 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a1a:	4b3e      	ldr	r3, [pc, #248]	@ (8004b14 <HAL_RCC_OscConfig+0x470>)
 8004a1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004a1e:	f003 0302 	and.w	r3, r3, #2
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d1ee      	bne.n	8004a04 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004a26:	7dfb      	ldrb	r3, [r7, #23]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d105      	bne.n	8004a38 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a2c:	4b39      	ldr	r3, [pc, #228]	@ (8004b14 <HAL_RCC_OscConfig+0x470>)
 8004a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a30:	4a38      	ldr	r2, [pc, #224]	@ (8004b14 <HAL_RCC_OscConfig+0x470>)
 8004a32:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004a36:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	f000 80a1 	beq.w	8004b84 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a42:	4b34      	ldr	r3, [pc, #208]	@ (8004b14 <HAL_RCC_OscConfig+0x470>)
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f003 030c 	and.w	r3, r3, #12
 8004a4a:	2b08      	cmp	r3, #8
 8004a4c:	d05c      	beq.n	8004b08 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d141      	bne.n	8004ada <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a56:	4b31      	ldr	r3, [pc, #196]	@ (8004b1c <HAL_RCC_OscConfig+0x478>)
 8004a58:	2200      	movs	r2, #0
 8004a5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a5c:	f7fe f880 	bl	8002b60 <HAL_GetTick>
 8004a60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a62:	e008      	b.n	8004a76 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a64:	f7fe f87c 	bl	8002b60 <HAL_GetTick>
 8004a68:	4602      	mov	r2, r0
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	2b02      	cmp	r3, #2
 8004a70:	d901      	bls.n	8004a76 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a72:	2303      	movs	r3, #3
 8004a74:	e087      	b.n	8004b86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a76:	4b27      	ldr	r3, [pc, #156]	@ (8004b14 <HAL_RCC_OscConfig+0x470>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d1f0      	bne.n	8004a64 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	69da      	ldr	r2, [r3, #28]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a1b      	ldr	r3, [r3, #32]
 8004a8a:	431a      	orrs	r2, r3
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a90:	019b      	lsls	r3, r3, #6
 8004a92:	431a      	orrs	r2, r3
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a98:	085b      	lsrs	r3, r3, #1
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	041b      	lsls	r3, r3, #16
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aa4:	061b      	lsls	r3, r3, #24
 8004aa6:	491b      	ldr	r1, [pc, #108]	@ (8004b14 <HAL_RCC_OscConfig+0x470>)
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004aac:	4b1b      	ldr	r3, [pc, #108]	@ (8004b1c <HAL_RCC_OscConfig+0x478>)
 8004aae:	2201      	movs	r2, #1
 8004ab0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ab2:	f7fe f855 	bl	8002b60 <HAL_GetTick>
 8004ab6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ab8:	e008      	b.n	8004acc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004aba:	f7fe f851 	bl	8002b60 <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	2b02      	cmp	r3, #2
 8004ac6:	d901      	bls.n	8004acc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e05c      	b.n	8004b86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004acc:	4b11      	ldr	r3, [pc, #68]	@ (8004b14 <HAL_RCC_OscConfig+0x470>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d0f0      	beq.n	8004aba <HAL_RCC_OscConfig+0x416>
 8004ad8:	e054      	b.n	8004b84 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ada:	4b10      	ldr	r3, [pc, #64]	@ (8004b1c <HAL_RCC_OscConfig+0x478>)
 8004adc:	2200      	movs	r2, #0
 8004ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ae0:	f7fe f83e 	bl	8002b60 <HAL_GetTick>
 8004ae4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ae6:	e008      	b.n	8004afa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ae8:	f7fe f83a 	bl	8002b60 <HAL_GetTick>
 8004aec:	4602      	mov	r2, r0
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	1ad3      	subs	r3, r2, r3
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	d901      	bls.n	8004afa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	e045      	b.n	8004b86 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004afa:	4b06      	ldr	r3, [pc, #24]	@ (8004b14 <HAL_RCC_OscConfig+0x470>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1f0      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x444>
 8004b06:	e03d      	b.n	8004b84 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	699b      	ldr	r3, [r3, #24]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d107      	bne.n	8004b20 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b10:	2301      	movs	r3, #1
 8004b12:	e038      	b.n	8004b86 <HAL_RCC_OscConfig+0x4e2>
 8004b14:	40023800 	.word	0x40023800
 8004b18:	40007000 	.word	0x40007000
 8004b1c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b20:	4b1b      	ldr	r3, [pc, #108]	@ (8004b90 <HAL_RCC_OscConfig+0x4ec>)
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	699b      	ldr	r3, [r3, #24]
 8004b2a:	2b01      	cmp	r3, #1
 8004b2c:	d028      	beq.n	8004b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b38:	429a      	cmp	r2, r3
 8004b3a:	d121      	bne.n	8004b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b46:	429a      	cmp	r2, r3
 8004b48:	d11a      	bne.n	8004b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004b50:	4013      	ands	r3, r2
 8004b52:	687a      	ldr	r2, [r7, #4]
 8004b54:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004b56:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d111      	bne.n	8004b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b66:	085b      	lsrs	r3, r3, #1
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b6c:	429a      	cmp	r2, r3
 8004b6e:	d107      	bne.n	8004b80 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b7a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d001      	beq.n	8004b84 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e000      	b.n	8004b86 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b84:	2300      	movs	r3, #0
}
 8004b86:	4618      	mov	r0, r3
 8004b88:	3718      	adds	r7, #24
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	bd80      	pop	{r7, pc}
 8004b8e:	bf00      	nop
 8004b90:	40023800 	.word	0x40023800

08004b94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b084      	sub	sp, #16
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
 8004b9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d101      	bne.n	8004ba8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ba4:	2301      	movs	r3, #1
 8004ba6:	e0cc      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ba8:	4b68      	ldr	r3, [pc, #416]	@ (8004d4c <HAL_RCC_ClockConfig+0x1b8>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f003 0307 	and.w	r3, r3, #7
 8004bb0:	683a      	ldr	r2, [r7, #0]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d90c      	bls.n	8004bd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bb6:	4b65      	ldr	r3, [pc, #404]	@ (8004d4c <HAL_RCC_ClockConfig+0x1b8>)
 8004bb8:	683a      	ldr	r2, [r7, #0]
 8004bba:	b2d2      	uxtb	r2, r2
 8004bbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bbe:	4b63      	ldr	r3, [pc, #396]	@ (8004d4c <HAL_RCC_ClockConfig+0x1b8>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f003 0307 	and.w	r3, r3, #7
 8004bc6:	683a      	ldr	r2, [r7, #0]
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	d001      	beq.n	8004bd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e0b8      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	f003 0302 	and.w	r3, r3, #2
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d020      	beq.n	8004c1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0304 	and.w	r3, r3, #4
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d005      	beq.n	8004bf4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004be8:	4b59      	ldr	r3, [pc, #356]	@ (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	4a58      	ldr	r2, [pc, #352]	@ (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004bee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004bf2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 0308 	and.w	r3, r3, #8
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d005      	beq.n	8004c0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c00:	4b53      	ldr	r3, [pc, #332]	@ (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	4a52      	ldr	r2, [pc, #328]	@ (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c06:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004c0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c0c:	4b50      	ldr	r3, [pc, #320]	@ (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	689b      	ldr	r3, [r3, #8]
 8004c18:	494d      	ldr	r1, [pc, #308]	@ (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d044      	beq.n	8004cb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d107      	bne.n	8004c42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c32:	4b47      	ldr	r3, [pc, #284]	@ (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d119      	bne.n	8004c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	e07f      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	2b02      	cmp	r3, #2
 8004c48:	d003      	beq.n	8004c52 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c4e:	2b03      	cmp	r3, #3
 8004c50:	d107      	bne.n	8004c62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c52:	4b3f      	ldr	r3, [pc, #252]	@ (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d109      	bne.n	8004c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c5e:	2301      	movs	r3, #1
 8004c60:	e06f      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c62:	4b3b      	ldr	r3, [pc, #236]	@ (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 0302 	and.w	r3, r3, #2
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d101      	bne.n	8004c72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	e067      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c72:	4b37      	ldr	r3, [pc, #220]	@ (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f023 0203 	bic.w	r2, r3, #3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	4934      	ldr	r1, [pc, #208]	@ (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004c80:	4313      	orrs	r3, r2
 8004c82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c84:	f7fd ff6c 	bl	8002b60 <HAL_GetTick>
 8004c88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c8a:	e00a      	b.n	8004ca2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c8c:	f7fd ff68 	bl	8002b60 <HAL_GetTick>
 8004c90:	4602      	mov	r2, r0
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d901      	bls.n	8004ca2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e04f      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ca2:	4b2b      	ldr	r3, [pc, #172]	@ (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f003 020c 	and.w	r2, r3, #12
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	009b      	lsls	r3, r3, #2
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d1eb      	bne.n	8004c8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004cb4:	4b25      	ldr	r3, [pc, #148]	@ (8004d4c <HAL_RCC_ClockConfig+0x1b8>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0307 	and.w	r3, r3, #7
 8004cbc:	683a      	ldr	r2, [r7, #0]
 8004cbe:	429a      	cmp	r2, r3
 8004cc0:	d20c      	bcs.n	8004cdc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cc2:	4b22      	ldr	r3, [pc, #136]	@ (8004d4c <HAL_RCC_ClockConfig+0x1b8>)
 8004cc4:	683a      	ldr	r2, [r7, #0]
 8004cc6:	b2d2      	uxtb	r2, r2
 8004cc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cca:	4b20      	ldr	r3, [pc, #128]	@ (8004d4c <HAL_RCC_ClockConfig+0x1b8>)
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0307 	and.w	r3, r3, #7
 8004cd2:	683a      	ldr	r2, [r7, #0]
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	d001      	beq.n	8004cdc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	e032      	b.n	8004d42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	f003 0304 	and.w	r3, r3, #4
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d008      	beq.n	8004cfa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ce8:	4b19      	ldr	r3, [pc, #100]	@ (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	4916      	ldr	r1, [pc, #88]	@ (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 0308 	and.w	r3, r3, #8
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d009      	beq.n	8004d1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d06:	4b12      	ldr	r3, [pc, #72]	@ (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	691b      	ldr	r3, [r3, #16]
 8004d12:	00db      	lsls	r3, r3, #3
 8004d14:	490e      	ldr	r1, [pc, #56]	@ (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004d16:	4313      	orrs	r3, r2
 8004d18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004d1a:	f000 f821 	bl	8004d60 <HAL_RCC_GetSysClockFreq>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	4b0b      	ldr	r3, [pc, #44]	@ (8004d50 <HAL_RCC_ClockConfig+0x1bc>)
 8004d22:	689b      	ldr	r3, [r3, #8]
 8004d24:	091b      	lsrs	r3, r3, #4
 8004d26:	f003 030f 	and.w	r3, r3, #15
 8004d2a:	490a      	ldr	r1, [pc, #40]	@ (8004d54 <HAL_RCC_ClockConfig+0x1c0>)
 8004d2c:	5ccb      	ldrb	r3, [r1, r3]
 8004d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8004d32:	4a09      	ldr	r2, [pc, #36]	@ (8004d58 <HAL_RCC_ClockConfig+0x1c4>)
 8004d34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004d36:	4b09      	ldr	r3, [pc, #36]	@ (8004d5c <HAL_RCC_ClockConfig+0x1c8>)
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f7fd fecc 	bl	8002ad8 <HAL_InitTick>

  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3710      	adds	r7, #16
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bd80      	pop	{r7, pc}
 8004d4a:	bf00      	nop
 8004d4c:	40023c00 	.word	0x40023c00
 8004d50:	40023800 	.word	0x40023800
 8004d54:	08007f24 	.word	0x08007f24
 8004d58:	20000028 	.word	0x20000028
 8004d5c:	2000002c 	.word	0x2000002c

08004d60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d64:	b094      	sub	sp, #80	@ 0x50
 8004d66:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004d68:	2300      	movs	r3, #0
 8004d6a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004d70:	2300      	movs	r3, #0
 8004d72:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004d74:	2300      	movs	r3, #0
 8004d76:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d78:	4b79      	ldr	r3, [pc, #484]	@ (8004f60 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d7a:	689b      	ldr	r3, [r3, #8]
 8004d7c:	f003 030c 	and.w	r3, r3, #12
 8004d80:	2b08      	cmp	r3, #8
 8004d82:	d00d      	beq.n	8004da0 <HAL_RCC_GetSysClockFreq+0x40>
 8004d84:	2b08      	cmp	r3, #8
 8004d86:	f200 80e1 	bhi.w	8004f4c <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d002      	beq.n	8004d94 <HAL_RCC_GetSysClockFreq+0x34>
 8004d8e:	2b04      	cmp	r3, #4
 8004d90:	d003      	beq.n	8004d9a <HAL_RCC_GetSysClockFreq+0x3a>
 8004d92:	e0db      	b.n	8004f4c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d94:	4b73      	ldr	r3, [pc, #460]	@ (8004f64 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d96:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d98:	e0db      	b.n	8004f52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d9a:	4b73      	ldr	r3, [pc, #460]	@ (8004f68 <HAL_RCC_GetSysClockFreq+0x208>)
 8004d9c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004d9e:	e0d8      	b.n	8004f52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004da0:	4b6f      	ldr	r3, [pc, #444]	@ (8004f60 <HAL_RCC_GetSysClockFreq+0x200>)
 8004da2:	685b      	ldr	r3, [r3, #4]
 8004da4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004da8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004daa:	4b6d      	ldr	r3, [pc, #436]	@ (8004f60 <HAL_RCC_GetSysClockFreq+0x200>)
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d063      	beq.n	8004e7e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004db6:	4b6a      	ldr	r3, [pc, #424]	@ (8004f60 <HAL_RCC_GetSysClockFreq+0x200>)
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	099b      	lsrs	r3, r3, #6
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004dc0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8004dca:	2300      	movs	r3, #0
 8004dcc:	637b      	str	r3, [r7, #52]	@ 0x34
 8004dce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004dd2:	4622      	mov	r2, r4
 8004dd4:	462b      	mov	r3, r5
 8004dd6:	f04f 0000 	mov.w	r0, #0
 8004dda:	f04f 0100 	mov.w	r1, #0
 8004dde:	0159      	lsls	r1, r3, #5
 8004de0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004de4:	0150      	lsls	r0, r2, #5
 8004de6:	4602      	mov	r2, r0
 8004de8:	460b      	mov	r3, r1
 8004dea:	4621      	mov	r1, r4
 8004dec:	1a51      	subs	r1, r2, r1
 8004dee:	6139      	str	r1, [r7, #16]
 8004df0:	4629      	mov	r1, r5
 8004df2:	eb63 0301 	sbc.w	r3, r3, r1
 8004df6:	617b      	str	r3, [r7, #20]
 8004df8:	f04f 0200 	mov.w	r2, #0
 8004dfc:	f04f 0300 	mov.w	r3, #0
 8004e00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e04:	4659      	mov	r1, fp
 8004e06:	018b      	lsls	r3, r1, #6
 8004e08:	4651      	mov	r1, sl
 8004e0a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e0e:	4651      	mov	r1, sl
 8004e10:	018a      	lsls	r2, r1, #6
 8004e12:	4651      	mov	r1, sl
 8004e14:	ebb2 0801 	subs.w	r8, r2, r1
 8004e18:	4659      	mov	r1, fp
 8004e1a:	eb63 0901 	sbc.w	r9, r3, r1
 8004e1e:	f04f 0200 	mov.w	r2, #0
 8004e22:	f04f 0300 	mov.w	r3, #0
 8004e26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e32:	4690      	mov	r8, r2
 8004e34:	4699      	mov	r9, r3
 8004e36:	4623      	mov	r3, r4
 8004e38:	eb18 0303 	adds.w	r3, r8, r3
 8004e3c:	60bb      	str	r3, [r7, #8]
 8004e3e:	462b      	mov	r3, r5
 8004e40:	eb49 0303 	adc.w	r3, r9, r3
 8004e44:	60fb      	str	r3, [r7, #12]
 8004e46:	f04f 0200 	mov.w	r2, #0
 8004e4a:	f04f 0300 	mov.w	r3, #0
 8004e4e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e52:	4629      	mov	r1, r5
 8004e54:	024b      	lsls	r3, r1, #9
 8004e56:	4621      	mov	r1, r4
 8004e58:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e5c:	4621      	mov	r1, r4
 8004e5e:	024a      	lsls	r2, r1, #9
 8004e60:	4610      	mov	r0, r2
 8004e62:	4619      	mov	r1, r3
 8004e64:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004e66:	2200      	movs	r2, #0
 8004e68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e6a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e6c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004e70:	f7fb fa06 	bl	8000280 <__aeabi_uldivmod>
 8004e74:	4602      	mov	r2, r0
 8004e76:	460b      	mov	r3, r1
 8004e78:	4613      	mov	r3, r2
 8004e7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e7c:	e058      	b.n	8004f30 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e7e:	4b38      	ldr	r3, [pc, #224]	@ (8004f60 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	099b      	lsrs	r3, r3, #6
 8004e84:	2200      	movs	r2, #0
 8004e86:	4618      	mov	r0, r3
 8004e88:	4611      	mov	r1, r2
 8004e8a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e8e:	623b      	str	r3, [r7, #32]
 8004e90:	2300      	movs	r3, #0
 8004e92:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e94:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e98:	4642      	mov	r2, r8
 8004e9a:	464b      	mov	r3, r9
 8004e9c:	f04f 0000 	mov.w	r0, #0
 8004ea0:	f04f 0100 	mov.w	r1, #0
 8004ea4:	0159      	lsls	r1, r3, #5
 8004ea6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004eaa:	0150      	lsls	r0, r2, #5
 8004eac:	4602      	mov	r2, r0
 8004eae:	460b      	mov	r3, r1
 8004eb0:	4641      	mov	r1, r8
 8004eb2:	ebb2 0a01 	subs.w	sl, r2, r1
 8004eb6:	4649      	mov	r1, r9
 8004eb8:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ebc:	f04f 0200 	mov.w	r2, #0
 8004ec0:	f04f 0300 	mov.w	r3, #0
 8004ec4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ec8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ecc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004ed0:	ebb2 040a 	subs.w	r4, r2, sl
 8004ed4:	eb63 050b 	sbc.w	r5, r3, fp
 8004ed8:	f04f 0200 	mov.w	r2, #0
 8004edc:	f04f 0300 	mov.w	r3, #0
 8004ee0:	00eb      	lsls	r3, r5, #3
 8004ee2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ee6:	00e2      	lsls	r2, r4, #3
 8004ee8:	4614      	mov	r4, r2
 8004eea:	461d      	mov	r5, r3
 8004eec:	4643      	mov	r3, r8
 8004eee:	18e3      	adds	r3, r4, r3
 8004ef0:	603b      	str	r3, [r7, #0]
 8004ef2:	464b      	mov	r3, r9
 8004ef4:	eb45 0303 	adc.w	r3, r5, r3
 8004ef8:	607b      	str	r3, [r7, #4]
 8004efa:	f04f 0200 	mov.w	r2, #0
 8004efe:	f04f 0300 	mov.w	r3, #0
 8004f02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f06:	4629      	mov	r1, r5
 8004f08:	028b      	lsls	r3, r1, #10
 8004f0a:	4621      	mov	r1, r4
 8004f0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f10:	4621      	mov	r1, r4
 8004f12:	028a      	lsls	r2, r1, #10
 8004f14:	4610      	mov	r0, r2
 8004f16:	4619      	mov	r1, r3
 8004f18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	61bb      	str	r3, [r7, #24]
 8004f1e:	61fa      	str	r2, [r7, #28]
 8004f20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f24:	f7fb f9ac 	bl	8000280 <__aeabi_uldivmod>
 8004f28:	4602      	mov	r2, r0
 8004f2a:	460b      	mov	r3, r1
 8004f2c:	4613      	mov	r3, r2
 8004f2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004f30:	4b0b      	ldr	r3, [pc, #44]	@ (8004f60 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	0c1b      	lsrs	r3, r3, #16
 8004f36:	f003 0303 	and.w	r3, r3, #3
 8004f3a:	3301      	adds	r3, #1
 8004f3c:	005b      	lsls	r3, r3, #1
 8004f3e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8004f40:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004f42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f48:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f4a:	e002      	b.n	8004f52 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f4c:	4b05      	ldr	r3, [pc, #20]	@ (8004f64 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f4e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004f50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f52:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8004f54:	4618      	mov	r0, r3
 8004f56:	3750      	adds	r7, #80	@ 0x50
 8004f58:	46bd      	mov	sp, r7
 8004f5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f5e:	bf00      	nop
 8004f60:	40023800 	.word	0x40023800
 8004f64:	00f42400 	.word	0x00f42400
 8004f68:	007a1200 	.word	0x007a1200

08004f6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f70:	4b03      	ldr	r3, [pc, #12]	@ (8004f80 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f72:	681b      	ldr	r3, [r3, #0]
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	20000028 	.word	0x20000028

08004f84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f88:	f7ff fff0 	bl	8004f6c <HAL_RCC_GetHCLKFreq>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	4b05      	ldr	r3, [pc, #20]	@ (8004fa4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	0a9b      	lsrs	r3, r3, #10
 8004f94:	f003 0307 	and.w	r3, r3, #7
 8004f98:	4903      	ldr	r1, [pc, #12]	@ (8004fa8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f9a:	5ccb      	ldrb	r3, [r1, r3]
 8004f9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fa0:	4618      	mov	r0, r3
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	40023800 	.word	0x40023800
 8004fa8:	08007f34 	.word	0x08007f34

08004fac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004fb0:	f7ff ffdc 	bl	8004f6c <HAL_RCC_GetHCLKFreq>
 8004fb4:	4602      	mov	r2, r0
 8004fb6:	4b05      	ldr	r3, [pc, #20]	@ (8004fcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fb8:	689b      	ldr	r3, [r3, #8]
 8004fba:	0b5b      	lsrs	r3, r3, #13
 8004fbc:	f003 0307 	and.w	r3, r3, #7
 8004fc0:	4903      	ldr	r1, [pc, #12]	@ (8004fd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fc2:	5ccb      	ldrb	r3, [r1, r3]
 8004fc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fc8:	4618      	mov	r0, r3
 8004fca:	bd80      	pop	{r7, pc}
 8004fcc:	40023800 	.word	0x40023800
 8004fd0:	08007f34 	.word	0x08007f34

08004fd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d101      	bne.n	8004fe6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	e07b      	b.n	80050de <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d108      	bne.n	8005000 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004ff6:	d009      	beq.n	800500c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	61da      	str	r2, [r3, #28]
 8004ffe:	e005      	b.n	800500c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2200      	movs	r2, #0
 8005010:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b00      	cmp	r3, #0
 800501c:	d106      	bne.n	800502c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005026:	6878      	ldr	r0, [r7, #4]
 8005028:	f7fd fb54 	bl	80026d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2202      	movs	r2, #2
 8005030:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	681a      	ldr	r2, [r3, #0]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005042:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	685b      	ldr	r3, [r3, #4]
 8005048:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005054:	431a      	orrs	r2, r3
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800505e:	431a      	orrs	r2, r3
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	691b      	ldr	r3, [r3, #16]
 8005064:	f003 0302 	and.w	r3, r3, #2
 8005068:	431a      	orrs	r2, r3
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	695b      	ldr	r3, [r3, #20]
 800506e:	f003 0301 	and.w	r3, r3, #1
 8005072:	431a      	orrs	r2, r3
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	699b      	ldr	r3, [r3, #24]
 8005078:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800507c:	431a      	orrs	r2, r3
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	69db      	ldr	r3, [r3, #28]
 8005082:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005086:	431a      	orrs	r2, r3
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a1b      	ldr	r3, [r3, #32]
 800508c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005090:	ea42 0103 	orr.w	r1, r2, r3
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005098:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	430a      	orrs	r2, r1
 80050a2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	699b      	ldr	r3, [r3, #24]
 80050a8:	0c1b      	lsrs	r3, r3, #16
 80050aa:	f003 0104 	and.w	r1, r3, #4
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050b2:	f003 0210 	and.w	r2, r3, #16
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	430a      	orrs	r2, r1
 80050bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	69da      	ldr	r2, [r3, #28]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80050cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2201      	movs	r2, #1
 80050d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80050dc:	2300      	movs	r3, #0
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3708      	adds	r7, #8
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}

080050e6 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80050e6:	b580      	push	{r7, lr}
 80050e8:	b084      	sub	sp, #16
 80050ea:	af00      	add	r7, sp, #0
 80050ec:	60f8      	str	r0, [r7, #12]
 80050ee:	60b9      	str	r1, [r7, #8]
 80050f0:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d101      	bne.n	80050fc <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80050f8:	2301      	movs	r3, #1
 80050fa:	e038      	b.n	800516e <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8005102:	b2db      	uxtb	r3, r3
 8005104:	2b00      	cmp	r3, #0
 8005106:	d106      	bne.n	8005116 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8005110:	68f8      	ldr	r0, [r7, #12]
 8005112:	f7fd fbdb 	bl	80028cc <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	3308      	adds	r3, #8
 800511e:	4619      	mov	r1, r3
 8005120:	4610      	mov	r0, r2
 8005122:	f000 ff7d 	bl	8006020 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	6818      	ldr	r0, [r3, #0]
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	689b      	ldr	r3, [r3, #8]
 800512e:	461a      	mov	r2, r3
 8005130:	68b9      	ldr	r1, [r7, #8]
 8005132:	f000 ffdf 	bl	80060f4 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	6858      	ldr	r0, [r3, #4]
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	689a      	ldr	r2, [r3, #8]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005142:	6879      	ldr	r1, [r7, #4]
 8005144:	f001 f80c 	bl	8006160 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	6892      	ldr	r2, [r2, #8]
 8005150:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	68fa      	ldr	r2, [r7, #12]
 800515a:	6892      	ldr	r2, [r2, #8]
 800515c:	f041 0101 	orr.w	r1, r1, #1
 8005160:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3710      	adds	r7, #16
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}

08005176 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005176:	b580      	push	{r7, lr}
 8005178:	b082      	sub	sp, #8
 800517a:	af00      	add	r7, sp, #0
 800517c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	2b00      	cmp	r3, #0
 8005182:	d101      	bne.n	8005188 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e041      	b.n	800520c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b00      	cmp	r3, #0
 8005192:	d106      	bne.n	80051a2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2200      	movs	r2, #0
 8005198:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800519c:	6878      	ldr	r0, [r7, #4]
 800519e:	f7fd fae1 	bl	8002764 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2202      	movs	r2, #2
 80051a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	3304      	adds	r3, #4
 80051b2:	4619      	mov	r1, r3
 80051b4:	4610      	mov	r0, r2
 80051b6:	f000 f965 	bl	8005484 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2201      	movs	r2, #1
 80051be:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2201      	movs	r2, #1
 80051c6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2201      	movs	r2, #1
 80051ce:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2201      	movs	r2, #1
 80051d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2201      	movs	r2, #1
 80051e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2201      	movs	r2, #1
 80051ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2201      	movs	r2, #1
 80051f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2201      	movs	r2, #1
 80051fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800520a:	2300      	movs	r3, #0
}
 800520c:	4618      	mov	r0, r3
 800520e:	3708      	adds	r7, #8
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005222:	b2db      	uxtb	r3, r3
 8005224:	2b01      	cmp	r3, #1
 8005226:	d001      	beq.n	800522c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e04e      	b.n	80052ca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2202      	movs	r2, #2
 8005230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68da      	ldr	r2, [r3, #12]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f042 0201 	orr.w	r2, r2, #1
 8005242:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a23      	ldr	r2, [pc, #140]	@ (80052d8 <HAL_TIM_Base_Start_IT+0xc4>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d022      	beq.n	8005294 <HAL_TIM_Base_Start_IT+0x80>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005256:	d01d      	beq.n	8005294 <HAL_TIM_Base_Start_IT+0x80>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4a1f      	ldr	r2, [pc, #124]	@ (80052dc <HAL_TIM_Base_Start_IT+0xc8>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d018      	beq.n	8005294 <HAL_TIM_Base_Start_IT+0x80>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a1e      	ldr	r2, [pc, #120]	@ (80052e0 <HAL_TIM_Base_Start_IT+0xcc>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d013      	beq.n	8005294 <HAL_TIM_Base_Start_IT+0x80>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a1c      	ldr	r2, [pc, #112]	@ (80052e4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d00e      	beq.n	8005294 <HAL_TIM_Base_Start_IT+0x80>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a1b      	ldr	r2, [pc, #108]	@ (80052e8 <HAL_TIM_Base_Start_IT+0xd4>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d009      	beq.n	8005294 <HAL_TIM_Base_Start_IT+0x80>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a19      	ldr	r2, [pc, #100]	@ (80052ec <HAL_TIM_Base_Start_IT+0xd8>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d004      	beq.n	8005294 <HAL_TIM_Base_Start_IT+0x80>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a18      	ldr	r2, [pc, #96]	@ (80052f0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d111      	bne.n	80052b8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	f003 0307 	and.w	r3, r3, #7
 800529e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2b06      	cmp	r3, #6
 80052a4:	d010      	beq.n	80052c8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	681a      	ldr	r2, [r3, #0]
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f042 0201 	orr.w	r2, r2, #1
 80052b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052b6:	e007      	b.n	80052c8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f042 0201 	orr.w	r2, r2, #1
 80052c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3714      	adds	r7, #20
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	40010000 	.word	0x40010000
 80052dc:	40000400 	.word	0x40000400
 80052e0:	40000800 	.word	0x40000800
 80052e4:	40000c00 	.word	0x40000c00
 80052e8:	40010400 	.word	0x40010400
 80052ec:	40014000 	.word	0x40014000
 80052f0:	40001800 	.word	0x40001800

080052f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
 80052fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052fe:	2300      	movs	r3, #0
 8005300:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005308:	2b01      	cmp	r3, #1
 800530a:	d101      	bne.n	8005310 <HAL_TIM_ConfigClockSource+0x1c>
 800530c:	2302      	movs	r3, #2
 800530e:	e0b4      	b.n	800547a <HAL_TIM_ConfigClockSource+0x186>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	2201      	movs	r2, #1
 8005314:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2202      	movs	r2, #2
 800531c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005328:	68bb      	ldr	r3, [r7, #8]
 800532a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800532e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005336:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68ba      	ldr	r2, [r7, #8]
 800533e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005348:	d03e      	beq.n	80053c8 <HAL_TIM_ConfigClockSource+0xd4>
 800534a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800534e:	f200 8087 	bhi.w	8005460 <HAL_TIM_ConfigClockSource+0x16c>
 8005352:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005356:	f000 8086 	beq.w	8005466 <HAL_TIM_ConfigClockSource+0x172>
 800535a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800535e:	d87f      	bhi.n	8005460 <HAL_TIM_ConfigClockSource+0x16c>
 8005360:	2b70      	cmp	r3, #112	@ 0x70
 8005362:	d01a      	beq.n	800539a <HAL_TIM_ConfigClockSource+0xa6>
 8005364:	2b70      	cmp	r3, #112	@ 0x70
 8005366:	d87b      	bhi.n	8005460 <HAL_TIM_ConfigClockSource+0x16c>
 8005368:	2b60      	cmp	r3, #96	@ 0x60
 800536a:	d050      	beq.n	800540e <HAL_TIM_ConfigClockSource+0x11a>
 800536c:	2b60      	cmp	r3, #96	@ 0x60
 800536e:	d877      	bhi.n	8005460 <HAL_TIM_ConfigClockSource+0x16c>
 8005370:	2b50      	cmp	r3, #80	@ 0x50
 8005372:	d03c      	beq.n	80053ee <HAL_TIM_ConfigClockSource+0xfa>
 8005374:	2b50      	cmp	r3, #80	@ 0x50
 8005376:	d873      	bhi.n	8005460 <HAL_TIM_ConfigClockSource+0x16c>
 8005378:	2b40      	cmp	r3, #64	@ 0x40
 800537a:	d058      	beq.n	800542e <HAL_TIM_ConfigClockSource+0x13a>
 800537c:	2b40      	cmp	r3, #64	@ 0x40
 800537e:	d86f      	bhi.n	8005460 <HAL_TIM_ConfigClockSource+0x16c>
 8005380:	2b30      	cmp	r3, #48	@ 0x30
 8005382:	d064      	beq.n	800544e <HAL_TIM_ConfigClockSource+0x15a>
 8005384:	2b30      	cmp	r3, #48	@ 0x30
 8005386:	d86b      	bhi.n	8005460 <HAL_TIM_ConfigClockSource+0x16c>
 8005388:	2b20      	cmp	r3, #32
 800538a:	d060      	beq.n	800544e <HAL_TIM_ConfigClockSource+0x15a>
 800538c:	2b20      	cmp	r3, #32
 800538e:	d867      	bhi.n	8005460 <HAL_TIM_ConfigClockSource+0x16c>
 8005390:	2b00      	cmp	r3, #0
 8005392:	d05c      	beq.n	800544e <HAL_TIM_ConfigClockSource+0x15a>
 8005394:	2b10      	cmp	r3, #16
 8005396:	d05a      	beq.n	800544e <HAL_TIM_ConfigClockSource+0x15a>
 8005398:	e062      	b.n	8005460 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053aa:	f000 f991 	bl	80056d0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80053bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68ba      	ldr	r2, [r7, #8]
 80053c4:	609a      	str	r2, [r3, #8]
      break;
 80053c6:	e04f      	b.n	8005468 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80053d8:	f000 f97a 	bl	80056d0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	689a      	ldr	r2, [r3, #8]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80053ea:	609a      	str	r2, [r3, #8]
      break;
 80053ec:	e03c      	b.n	8005468 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053fa:	461a      	mov	r2, r3
 80053fc:	f000 f8ee 	bl	80055dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2150      	movs	r1, #80	@ 0x50
 8005406:	4618      	mov	r0, r3
 8005408:	f000 f947 	bl	800569a <TIM_ITRx_SetConfig>
      break;
 800540c:	e02c      	b.n	8005468 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800541a:	461a      	mov	r2, r3
 800541c:	f000 f90d 	bl	800563a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2160      	movs	r1, #96	@ 0x60
 8005426:	4618      	mov	r0, r3
 8005428:	f000 f937 	bl	800569a <TIM_ITRx_SetConfig>
      break;
 800542c:	e01c      	b.n	8005468 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800543a:	461a      	mov	r2, r3
 800543c:	f000 f8ce 	bl	80055dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	2140      	movs	r1, #64	@ 0x40
 8005446:	4618      	mov	r0, r3
 8005448:	f000 f927 	bl	800569a <TIM_ITRx_SetConfig>
      break;
 800544c:	e00c      	b.n	8005468 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681a      	ldr	r2, [r3, #0]
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	4619      	mov	r1, r3
 8005458:	4610      	mov	r0, r2
 800545a:	f000 f91e 	bl	800569a <TIM_ITRx_SetConfig>
      break;
 800545e:	e003      	b.n	8005468 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	73fb      	strb	r3, [r7, #15]
      break;
 8005464:	e000      	b.n	8005468 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005466:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2201      	movs	r2, #1
 800546c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005478:	7bfb      	ldrb	r3, [r7, #15]
}
 800547a:	4618      	mov	r0, r3
 800547c:	3710      	adds	r7, #16
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}
	...

08005484 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005484:	b480      	push	{r7}
 8005486:	b085      	sub	sp, #20
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a46      	ldr	r2, [pc, #280]	@ (80055b0 <TIM_Base_SetConfig+0x12c>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d013      	beq.n	80054c4 <TIM_Base_SetConfig+0x40>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054a2:	d00f      	beq.n	80054c4 <TIM_Base_SetConfig+0x40>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a43      	ldr	r2, [pc, #268]	@ (80055b4 <TIM_Base_SetConfig+0x130>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d00b      	beq.n	80054c4 <TIM_Base_SetConfig+0x40>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a42      	ldr	r2, [pc, #264]	@ (80055b8 <TIM_Base_SetConfig+0x134>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d007      	beq.n	80054c4 <TIM_Base_SetConfig+0x40>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	4a41      	ldr	r2, [pc, #260]	@ (80055bc <TIM_Base_SetConfig+0x138>)
 80054b8:	4293      	cmp	r3, r2
 80054ba:	d003      	beq.n	80054c4 <TIM_Base_SetConfig+0x40>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	4a40      	ldr	r2, [pc, #256]	@ (80055c0 <TIM_Base_SetConfig+0x13c>)
 80054c0:	4293      	cmp	r3, r2
 80054c2:	d108      	bne.n	80054d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80054ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	68fa      	ldr	r2, [r7, #12]
 80054d2:	4313      	orrs	r3, r2
 80054d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a35      	ldr	r2, [pc, #212]	@ (80055b0 <TIM_Base_SetConfig+0x12c>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d02b      	beq.n	8005536 <TIM_Base_SetConfig+0xb2>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054e4:	d027      	beq.n	8005536 <TIM_Base_SetConfig+0xb2>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a32      	ldr	r2, [pc, #200]	@ (80055b4 <TIM_Base_SetConfig+0x130>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d023      	beq.n	8005536 <TIM_Base_SetConfig+0xb2>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a31      	ldr	r2, [pc, #196]	@ (80055b8 <TIM_Base_SetConfig+0x134>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d01f      	beq.n	8005536 <TIM_Base_SetConfig+0xb2>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a30      	ldr	r2, [pc, #192]	@ (80055bc <TIM_Base_SetConfig+0x138>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d01b      	beq.n	8005536 <TIM_Base_SetConfig+0xb2>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a2f      	ldr	r2, [pc, #188]	@ (80055c0 <TIM_Base_SetConfig+0x13c>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d017      	beq.n	8005536 <TIM_Base_SetConfig+0xb2>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a2e      	ldr	r2, [pc, #184]	@ (80055c4 <TIM_Base_SetConfig+0x140>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d013      	beq.n	8005536 <TIM_Base_SetConfig+0xb2>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a2d      	ldr	r2, [pc, #180]	@ (80055c8 <TIM_Base_SetConfig+0x144>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d00f      	beq.n	8005536 <TIM_Base_SetConfig+0xb2>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a2c      	ldr	r2, [pc, #176]	@ (80055cc <TIM_Base_SetConfig+0x148>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d00b      	beq.n	8005536 <TIM_Base_SetConfig+0xb2>
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a2b      	ldr	r2, [pc, #172]	@ (80055d0 <TIM_Base_SetConfig+0x14c>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d007      	beq.n	8005536 <TIM_Base_SetConfig+0xb2>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a2a      	ldr	r2, [pc, #168]	@ (80055d4 <TIM_Base_SetConfig+0x150>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d003      	beq.n	8005536 <TIM_Base_SetConfig+0xb2>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a29      	ldr	r2, [pc, #164]	@ (80055d8 <TIM_Base_SetConfig+0x154>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d108      	bne.n	8005548 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800553c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	68db      	ldr	r3, [r3, #12]
 8005542:	68fa      	ldr	r2, [r7, #12]
 8005544:	4313      	orrs	r3, r2
 8005546:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	4313      	orrs	r3, r2
 8005554:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	68fa      	ldr	r2, [r7, #12]
 800555a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	689a      	ldr	r2, [r3, #8]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	681a      	ldr	r2, [r3, #0]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	4a10      	ldr	r2, [pc, #64]	@ (80055b0 <TIM_Base_SetConfig+0x12c>)
 8005570:	4293      	cmp	r3, r2
 8005572:	d003      	beq.n	800557c <TIM_Base_SetConfig+0xf8>
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	4a12      	ldr	r2, [pc, #72]	@ (80055c0 <TIM_Base_SetConfig+0x13c>)
 8005578:	4293      	cmp	r3, r2
 800557a:	d103      	bne.n	8005584 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800557c:	683b      	ldr	r3, [r7, #0]
 800557e:	691a      	ldr	r2, [r3, #16]
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2201      	movs	r2, #1
 8005588:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	691b      	ldr	r3, [r3, #16]
 800558e:	f003 0301 	and.w	r3, r3, #1
 8005592:	2b01      	cmp	r3, #1
 8005594:	d105      	bne.n	80055a2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	691b      	ldr	r3, [r3, #16]
 800559a:	f023 0201 	bic.w	r2, r3, #1
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	611a      	str	r2, [r3, #16]
  }
}
 80055a2:	bf00      	nop
 80055a4:	3714      	adds	r7, #20
 80055a6:	46bd      	mov	sp, r7
 80055a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ac:	4770      	bx	lr
 80055ae:	bf00      	nop
 80055b0:	40010000 	.word	0x40010000
 80055b4:	40000400 	.word	0x40000400
 80055b8:	40000800 	.word	0x40000800
 80055bc:	40000c00 	.word	0x40000c00
 80055c0:	40010400 	.word	0x40010400
 80055c4:	40014000 	.word	0x40014000
 80055c8:	40014400 	.word	0x40014400
 80055cc:	40014800 	.word	0x40014800
 80055d0:	40001800 	.word	0x40001800
 80055d4:	40001c00 	.word	0x40001c00
 80055d8:	40002000 	.word	0x40002000

080055dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80055dc:	b480      	push	{r7}
 80055de:	b087      	sub	sp, #28
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	60f8      	str	r0, [r7, #12]
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	6a1b      	ldr	r3, [r3, #32]
 80055ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	6a1b      	ldr	r3, [r3, #32]
 80055f2:	f023 0201 	bic.w	r2, r3, #1
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	699b      	ldr	r3, [r3, #24]
 80055fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005606:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	011b      	lsls	r3, r3, #4
 800560c:	693a      	ldr	r2, [r7, #16]
 800560e:	4313      	orrs	r3, r2
 8005610:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005612:	697b      	ldr	r3, [r7, #20]
 8005614:	f023 030a 	bic.w	r3, r3, #10
 8005618:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800561a:	697a      	ldr	r2, [r7, #20]
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	4313      	orrs	r3, r2
 8005620:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	693a      	ldr	r2, [r7, #16]
 8005626:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	697a      	ldr	r2, [r7, #20]
 800562c:	621a      	str	r2, [r3, #32]
}
 800562e:	bf00      	nop
 8005630:	371c      	adds	r7, #28
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr

0800563a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800563a:	b480      	push	{r7}
 800563c:	b087      	sub	sp, #28
 800563e:	af00      	add	r7, sp, #0
 8005640:	60f8      	str	r0, [r7, #12]
 8005642:	60b9      	str	r1, [r7, #8]
 8005644:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	6a1b      	ldr	r3, [r3, #32]
 800564a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6a1b      	ldr	r3, [r3, #32]
 8005650:	f023 0210 	bic.w	r2, r3, #16
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800565e:	693b      	ldr	r3, [r7, #16]
 8005660:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005664:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	031b      	lsls	r3, r3, #12
 800566a:	693a      	ldr	r2, [r7, #16]
 800566c:	4313      	orrs	r3, r2
 800566e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005676:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005678:	68bb      	ldr	r3, [r7, #8]
 800567a:	011b      	lsls	r3, r3, #4
 800567c:	697a      	ldr	r2, [r7, #20]
 800567e:	4313      	orrs	r3, r2
 8005680:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	693a      	ldr	r2, [r7, #16]
 8005686:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	697a      	ldr	r2, [r7, #20]
 800568c:	621a      	str	r2, [r3, #32]
}
 800568e:	bf00      	nop
 8005690:	371c      	adds	r7, #28
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr

0800569a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800569a:	b480      	push	{r7}
 800569c:	b085      	sub	sp, #20
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
 80056a2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056b0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056b2:	683a      	ldr	r2, [r7, #0]
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	f043 0307 	orr.w	r3, r3, #7
 80056bc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	609a      	str	r2, [r3, #8]
}
 80056c4:	bf00      	nop
 80056c6:	3714      	adds	r7, #20
 80056c8:	46bd      	mov	sp, r7
 80056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ce:	4770      	bx	lr

080056d0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80056d0:	b480      	push	{r7}
 80056d2:	b087      	sub	sp, #28
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
 80056dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80056ea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	021a      	lsls	r2, r3, #8
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	431a      	orrs	r2, r3
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	4313      	orrs	r3, r2
 80056f8:	697a      	ldr	r2, [r7, #20]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	697a      	ldr	r2, [r7, #20]
 8005702:	609a      	str	r2, [r3, #8]
}
 8005704:	bf00      	nop
 8005706:	371c      	adds	r7, #28
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
 8005718:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005720:	2b01      	cmp	r3, #1
 8005722:	d101      	bne.n	8005728 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005724:	2302      	movs	r3, #2
 8005726:	e05a      	b.n	80057de <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2202      	movs	r2, #2
 8005734:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800574e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68fa      	ldr	r2, [r7, #12]
 8005756:	4313      	orrs	r3, r2
 8005758:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a21      	ldr	r2, [pc, #132]	@ (80057ec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d022      	beq.n	80057b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005774:	d01d      	beq.n	80057b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	4a1d      	ldr	r2, [pc, #116]	@ (80057f0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800577c:	4293      	cmp	r3, r2
 800577e:	d018      	beq.n	80057b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	4a1b      	ldr	r2, [pc, #108]	@ (80057f4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005786:	4293      	cmp	r3, r2
 8005788:	d013      	beq.n	80057b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a1a      	ldr	r2, [pc, #104]	@ (80057f8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005790:	4293      	cmp	r3, r2
 8005792:	d00e      	beq.n	80057b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a18      	ldr	r2, [pc, #96]	@ (80057fc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d009      	beq.n	80057b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a17      	ldr	r2, [pc, #92]	@ (8005800 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d004      	beq.n	80057b2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a15      	ldr	r2, [pc, #84]	@ (8005804 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d10c      	bne.n	80057cc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80057b2:	68bb      	ldr	r3, [r7, #8]
 80057b4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80057b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	68ba      	ldr	r2, [r7, #8]
 80057c0:	4313      	orrs	r3, r2
 80057c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	68ba      	ldr	r2, [r7, #8]
 80057ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80057dc:	2300      	movs	r3, #0
}
 80057de:	4618      	mov	r0, r3
 80057e0:	3714      	adds	r7, #20
 80057e2:	46bd      	mov	sp, r7
 80057e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e8:	4770      	bx	lr
 80057ea:	bf00      	nop
 80057ec:	40010000 	.word	0x40010000
 80057f0:	40000400 	.word	0x40000400
 80057f4:	40000800 	.word	0x40000800
 80057f8:	40000c00 	.word	0x40000c00
 80057fc:	40010400 	.word	0x40010400
 8005800:	40014000 	.word	0x40014000
 8005804:	40001800 	.word	0x40001800

08005808 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b082      	sub	sp, #8
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2b00      	cmp	r3, #0
 8005814:	d101      	bne.n	800581a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005816:	2301      	movs	r3, #1
 8005818:	e042      	b.n	80058a0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005820:	b2db      	uxtb	r3, r3
 8005822:	2b00      	cmp	r3, #0
 8005824:	d106      	bne.n	8005834 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7fc ffb8 	bl	80027a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2224      	movs	r2, #36	@ 0x24
 8005838:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	68da      	ldr	r2, [r3, #12]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800584a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 f973 	bl	8005b38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	691a      	ldr	r2, [r3, #16]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005860:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	695a      	ldr	r2, [r3, #20]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005870:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68da      	ldr	r2, [r3, #12]
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005880:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2200      	movs	r2, #0
 8005886:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2220      	movs	r2, #32
 800588c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	2220      	movs	r2, #32
 8005894:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3708      	adds	r7, #8
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b08a      	sub	sp, #40	@ 0x28
 80058ac:	af02      	add	r7, sp, #8
 80058ae:	60f8      	str	r0, [r7, #12]
 80058b0:	60b9      	str	r1, [r7, #8]
 80058b2:	603b      	str	r3, [r7, #0]
 80058b4:	4613      	mov	r3, r2
 80058b6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80058b8:	2300      	movs	r3, #0
 80058ba:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058c2:	b2db      	uxtb	r3, r3
 80058c4:	2b20      	cmp	r3, #32
 80058c6:	d175      	bne.n	80059b4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d002      	beq.n	80058d4 <HAL_UART_Transmit+0x2c>
 80058ce:	88fb      	ldrh	r3, [r7, #6]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d101      	bne.n	80058d8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	e06e      	b.n	80059b6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2221      	movs	r2, #33	@ 0x21
 80058e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80058e6:	f7fd f93b 	bl	8002b60 <HAL_GetTick>
 80058ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	88fa      	ldrh	r2, [r7, #6]
 80058f0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	88fa      	ldrh	r2, [r7, #6]
 80058f6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005900:	d108      	bne.n	8005914 <HAL_UART_Transmit+0x6c>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d104      	bne.n	8005914 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800590a:	2300      	movs	r3, #0
 800590c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	61bb      	str	r3, [r7, #24]
 8005912:	e003      	b.n	800591c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005918:	2300      	movs	r3, #0
 800591a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800591c:	e02e      	b.n	800597c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	9300      	str	r3, [sp, #0]
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	2200      	movs	r2, #0
 8005926:	2180      	movs	r1, #128	@ 0x80
 8005928:	68f8      	ldr	r0, [r7, #12]
 800592a:	f000 f848 	bl	80059be <UART_WaitOnFlagUntilTimeout>
 800592e:	4603      	mov	r3, r0
 8005930:	2b00      	cmp	r3, #0
 8005932:	d005      	beq.n	8005940 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2220      	movs	r2, #32
 8005938:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800593c:	2303      	movs	r3, #3
 800593e:	e03a      	b.n	80059b6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005940:	69fb      	ldr	r3, [r7, #28]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d10b      	bne.n	800595e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	881b      	ldrh	r3, [r3, #0]
 800594a:	461a      	mov	r2, r3
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005954:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	3302      	adds	r3, #2
 800595a:	61bb      	str	r3, [r7, #24]
 800595c:	e007      	b.n	800596e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	781a      	ldrb	r2, [r3, #0]
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005968:	69fb      	ldr	r3, [r7, #28]
 800596a:	3301      	adds	r3, #1
 800596c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005972:	b29b      	uxth	r3, r3
 8005974:	3b01      	subs	r3, #1
 8005976:	b29a      	uxth	r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005980:	b29b      	uxth	r3, r3
 8005982:	2b00      	cmp	r3, #0
 8005984:	d1cb      	bne.n	800591e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	9300      	str	r3, [sp, #0]
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	2200      	movs	r2, #0
 800598e:	2140      	movs	r1, #64	@ 0x40
 8005990:	68f8      	ldr	r0, [r7, #12]
 8005992:	f000 f814 	bl	80059be <UART_WaitOnFlagUntilTimeout>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d005      	beq.n	80059a8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2220      	movs	r2, #32
 80059a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80059a4:	2303      	movs	r3, #3
 80059a6:	e006      	b.n	80059b6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	2220      	movs	r2, #32
 80059ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80059b0:	2300      	movs	r3, #0
 80059b2:	e000      	b.n	80059b6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80059b4:	2302      	movs	r3, #2
  }
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3720      	adds	r7, #32
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}

080059be <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80059be:	b580      	push	{r7, lr}
 80059c0:	b086      	sub	sp, #24
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	60f8      	str	r0, [r7, #12]
 80059c6:	60b9      	str	r1, [r7, #8]
 80059c8:	603b      	str	r3, [r7, #0]
 80059ca:	4613      	mov	r3, r2
 80059cc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059ce:	e03b      	b.n	8005a48 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80059d0:	6a3b      	ldr	r3, [r7, #32]
 80059d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059d6:	d037      	beq.n	8005a48 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80059d8:	f7fd f8c2 	bl	8002b60 <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	6a3a      	ldr	r2, [r7, #32]
 80059e4:	429a      	cmp	r2, r3
 80059e6:	d302      	bcc.n	80059ee <UART_WaitOnFlagUntilTimeout+0x30>
 80059e8:	6a3b      	ldr	r3, [r7, #32]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d101      	bne.n	80059f2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e03a      	b.n	8005a68 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	68db      	ldr	r3, [r3, #12]
 80059f8:	f003 0304 	and.w	r3, r3, #4
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d023      	beq.n	8005a48 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	2b80      	cmp	r3, #128	@ 0x80
 8005a04:	d020      	beq.n	8005a48 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	2b40      	cmp	r3, #64	@ 0x40
 8005a0a:	d01d      	beq.n	8005a48 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f003 0308 	and.w	r3, r3, #8
 8005a16:	2b08      	cmp	r3, #8
 8005a18:	d116      	bne.n	8005a48 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005a1a:	2300      	movs	r3, #0
 8005a1c:	617b      	str	r3, [r7, #20]
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	617b      	str	r3, [r7, #20]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	617b      	str	r3, [r7, #20]
 8005a2e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005a30:	68f8      	ldr	r0, [r7, #12]
 8005a32:	f000 f81d 	bl	8005a70 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	2208      	movs	r2, #8
 8005a3a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e00f      	b.n	8005a68 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	681a      	ldr	r2, [r3, #0]
 8005a4e:	68bb      	ldr	r3, [r7, #8]
 8005a50:	4013      	ands	r3, r2
 8005a52:	68ba      	ldr	r2, [r7, #8]
 8005a54:	429a      	cmp	r2, r3
 8005a56:	bf0c      	ite	eq
 8005a58:	2301      	moveq	r3, #1
 8005a5a:	2300      	movne	r3, #0
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	461a      	mov	r2, r3
 8005a60:	79fb      	ldrb	r3, [r7, #7]
 8005a62:	429a      	cmp	r2, r3
 8005a64:	d0b4      	beq.n	80059d0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3718      	adds	r7, #24
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b095      	sub	sp, #84	@ 0x54
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	330c      	adds	r3, #12
 8005a7e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a82:	e853 3f00 	ldrex	r3, [r3]
 8005a86:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a8a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005a8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	330c      	adds	r3, #12
 8005a96:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005a98:	643a      	str	r2, [r7, #64]	@ 0x40
 8005a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a9c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005a9e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005aa0:	e841 2300 	strex	r3, r2, [r1]
 8005aa4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005aa6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d1e5      	bne.n	8005a78 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	3314      	adds	r3, #20
 8005ab2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ab4:	6a3b      	ldr	r3, [r7, #32]
 8005ab6:	e853 3f00 	ldrex	r3, [r3]
 8005aba:	61fb      	str	r3, [r7, #28]
   return(result);
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	f023 0301 	bic.w	r3, r3, #1
 8005ac2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	3314      	adds	r3, #20
 8005aca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005acc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005ace:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ad0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005ad2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005ad4:	e841 2300 	strex	r3, r2, [r1]
 8005ad8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005ada:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1e5      	bne.n	8005aac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d119      	bne.n	8005b1c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	330c      	adds	r3, #12
 8005aee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	e853 3f00 	ldrex	r3, [r3]
 8005af6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	f023 0310 	bic.w	r3, r3, #16
 8005afe:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	330c      	adds	r3, #12
 8005b06:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b08:	61ba      	str	r2, [r7, #24]
 8005b0a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0c:	6979      	ldr	r1, [r7, #20]
 8005b0e:	69ba      	ldr	r2, [r7, #24]
 8005b10:	e841 2300 	strex	r3, r2, [r1]
 8005b14:	613b      	str	r3, [r7, #16]
   return(result);
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d1e5      	bne.n	8005ae8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2220      	movs	r2, #32
 8005b20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2200      	movs	r2, #0
 8005b28:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005b2a:	bf00      	nop
 8005b2c:	3754      	adds	r7, #84	@ 0x54
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b34:	4770      	bx	lr
	...

08005b38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005b38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b3c:	b0c0      	sub	sp, #256	@ 0x100
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b54:	68d9      	ldr	r1, [r3, #12]
 8005b56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	ea40 0301 	orr.w	r3, r0, r1
 8005b60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005b62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b66:	689a      	ldr	r2, [r3, #8]
 8005b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	431a      	orrs	r2, r3
 8005b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b74:	695b      	ldr	r3, [r3, #20]
 8005b76:	431a      	orrs	r2, r3
 8005b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b7c:	69db      	ldr	r3, [r3, #28]
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005b90:	f021 010c 	bic.w	r1, r1, #12
 8005b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b98:	681a      	ldr	r2, [r3, #0]
 8005b9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005b9e:	430b      	orrs	r3, r1
 8005ba0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ba2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005bae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bb2:	6999      	ldr	r1, [r3, #24]
 8005bb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	ea40 0301 	orr.w	r3, r0, r1
 8005bbe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bc4:	681a      	ldr	r2, [r3, #0]
 8005bc6:	4b8f      	ldr	r3, [pc, #572]	@ (8005e04 <UART_SetConfig+0x2cc>)
 8005bc8:	429a      	cmp	r2, r3
 8005bca:	d005      	beq.n	8005bd8 <UART_SetConfig+0xa0>
 8005bcc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	4b8d      	ldr	r3, [pc, #564]	@ (8005e08 <UART_SetConfig+0x2d0>)
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	d104      	bne.n	8005be2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005bd8:	f7ff f9e8 	bl	8004fac <HAL_RCC_GetPCLK2Freq>
 8005bdc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005be0:	e003      	b.n	8005bea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005be2:	f7ff f9cf 	bl	8004f84 <HAL_RCC_GetPCLK1Freq>
 8005be6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005bee:	69db      	ldr	r3, [r3, #28]
 8005bf0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bf4:	f040 810c 	bne.w	8005e10 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005bf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005c02:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005c06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005c0a:	4622      	mov	r2, r4
 8005c0c:	462b      	mov	r3, r5
 8005c0e:	1891      	adds	r1, r2, r2
 8005c10:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005c12:	415b      	adcs	r3, r3
 8005c14:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005c16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005c1a:	4621      	mov	r1, r4
 8005c1c:	eb12 0801 	adds.w	r8, r2, r1
 8005c20:	4629      	mov	r1, r5
 8005c22:	eb43 0901 	adc.w	r9, r3, r1
 8005c26:	f04f 0200 	mov.w	r2, #0
 8005c2a:	f04f 0300 	mov.w	r3, #0
 8005c2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c3a:	4690      	mov	r8, r2
 8005c3c:	4699      	mov	r9, r3
 8005c3e:	4623      	mov	r3, r4
 8005c40:	eb18 0303 	adds.w	r3, r8, r3
 8005c44:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005c48:	462b      	mov	r3, r5
 8005c4a:	eb49 0303 	adc.w	r3, r9, r3
 8005c4e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	2200      	movs	r2, #0
 8005c5a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005c5e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005c62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005c66:	460b      	mov	r3, r1
 8005c68:	18db      	adds	r3, r3, r3
 8005c6a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c6c:	4613      	mov	r3, r2
 8005c6e:	eb42 0303 	adc.w	r3, r2, r3
 8005c72:	657b      	str	r3, [r7, #84]	@ 0x54
 8005c74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005c78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005c7c:	f7fa fb00 	bl	8000280 <__aeabi_uldivmod>
 8005c80:	4602      	mov	r2, r0
 8005c82:	460b      	mov	r3, r1
 8005c84:	4b61      	ldr	r3, [pc, #388]	@ (8005e0c <UART_SetConfig+0x2d4>)
 8005c86:	fba3 2302 	umull	r2, r3, r3, r2
 8005c8a:	095b      	lsrs	r3, r3, #5
 8005c8c:	011c      	lsls	r4, r3, #4
 8005c8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005c92:	2200      	movs	r2, #0
 8005c94:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005c98:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005c9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005ca0:	4642      	mov	r2, r8
 8005ca2:	464b      	mov	r3, r9
 8005ca4:	1891      	adds	r1, r2, r2
 8005ca6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005ca8:	415b      	adcs	r3, r3
 8005caa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005cac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005cb0:	4641      	mov	r1, r8
 8005cb2:	eb12 0a01 	adds.w	sl, r2, r1
 8005cb6:	4649      	mov	r1, r9
 8005cb8:	eb43 0b01 	adc.w	fp, r3, r1
 8005cbc:	f04f 0200 	mov.w	r2, #0
 8005cc0:	f04f 0300 	mov.w	r3, #0
 8005cc4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005cc8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ccc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005cd0:	4692      	mov	sl, r2
 8005cd2:	469b      	mov	fp, r3
 8005cd4:	4643      	mov	r3, r8
 8005cd6:	eb1a 0303 	adds.w	r3, sl, r3
 8005cda:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005cde:	464b      	mov	r3, r9
 8005ce0:	eb4b 0303 	adc.w	r3, fp, r3
 8005ce4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cec:	685b      	ldr	r3, [r3, #4]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005cf4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005cf8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	18db      	adds	r3, r3, r3
 8005d00:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d02:	4613      	mov	r3, r2
 8005d04:	eb42 0303 	adc.w	r3, r2, r3
 8005d08:	647b      	str	r3, [r7, #68]	@ 0x44
 8005d0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005d0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005d12:	f7fa fab5 	bl	8000280 <__aeabi_uldivmod>
 8005d16:	4602      	mov	r2, r0
 8005d18:	460b      	mov	r3, r1
 8005d1a:	4611      	mov	r1, r2
 8005d1c:	4b3b      	ldr	r3, [pc, #236]	@ (8005e0c <UART_SetConfig+0x2d4>)
 8005d1e:	fba3 2301 	umull	r2, r3, r3, r1
 8005d22:	095b      	lsrs	r3, r3, #5
 8005d24:	2264      	movs	r2, #100	@ 0x64
 8005d26:	fb02 f303 	mul.w	r3, r2, r3
 8005d2a:	1acb      	subs	r3, r1, r3
 8005d2c:	00db      	lsls	r3, r3, #3
 8005d2e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005d32:	4b36      	ldr	r3, [pc, #216]	@ (8005e0c <UART_SetConfig+0x2d4>)
 8005d34:	fba3 2302 	umull	r2, r3, r3, r2
 8005d38:	095b      	lsrs	r3, r3, #5
 8005d3a:	005b      	lsls	r3, r3, #1
 8005d3c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005d40:	441c      	add	r4, r3
 8005d42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d46:	2200      	movs	r2, #0
 8005d48:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005d4c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005d50:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005d54:	4642      	mov	r2, r8
 8005d56:	464b      	mov	r3, r9
 8005d58:	1891      	adds	r1, r2, r2
 8005d5a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005d5c:	415b      	adcs	r3, r3
 8005d5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005d60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005d64:	4641      	mov	r1, r8
 8005d66:	1851      	adds	r1, r2, r1
 8005d68:	6339      	str	r1, [r7, #48]	@ 0x30
 8005d6a:	4649      	mov	r1, r9
 8005d6c:	414b      	adcs	r3, r1
 8005d6e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005d70:	f04f 0200 	mov.w	r2, #0
 8005d74:	f04f 0300 	mov.w	r3, #0
 8005d78:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005d7c:	4659      	mov	r1, fp
 8005d7e:	00cb      	lsls	r3, r1, #3
 8005d80:	4651      	mov	r1, sl
 8005d82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005d86:	4651      	mov	r1, sl
 8005d88:	00ca      	lsls	r2, r1, #3
 8005d8a:	4610      	mov	r0, r2
 8005d8c:	4619      	mov	r1, r3
 8005d8e:	4603      	mov	r3, r0
 8005d90:	4642      	mov	r2, r8
 8005d92:	189b      	adds	r3, r3, r2
 8005d94:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005d98:	464b      	mov	r3, r9
 8005d9a:	460a      	mov	r2, r1
 8005d9c:	eb42 0303 	adc.w	r3, r2, r3
 8005da0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005db0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005db4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005db8:	460b      	mov	r3, r1
 8005dba:	18db      	adds	r3, r3, r3
 8005dbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005dbe:	4613      	mov	r3, r2
 8005dc0:	eb42 0303 	adc.w	r3, r2, r3
 8005dc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005dc6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005dca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005dce:	f7fa fa57 	bl	8000280 <__aeabi_uldivmod>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	460b      	mov	r3, r1
 8005dd6:	4b0d      	ldr	r3, [pc, #52]	@ (8005e0c <UART_SetConfig+0x2d4>)
 8005dd8:	fba3 1302 	umull	r1, r3, r3, r2
 8005ddc:	095b      	lsrs	r3, r3, #5
 8005dde:	2164      	movs	r1, #100	@ 0x64
 8005de0:	fb01 f303 	mul.w	r3, r1, r3
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	00db      	lsls	r3, r3, #3
 8005de8:	3332      	adds	r3, #50	@ 0x32
 8005dea:	4a08      	ldr	r2, [pc, #32]	@ (8005e0c <UART_SetConfig+0x2d4>)
 8005dec:	fba2 2303 	umull	r2, r3, r2, r3
 8005df0:	095b      	lsrs	r3, r3, #5
 8005df2:	f003 0207 	and.w	r2, r3, #7
 8005df6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	4422      	add	r2, r4
 8005dfe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005e00:	e106      	b.n	8006010 <UART_SetConfig+0x4d8>
 8005e02:	bf00      	nop
 8005e04:	40011000 	.word	0x40011000
 8005e08:	40011400 	.word	0x40011400
 8005e0c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005e10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e14:	2200      	movs	r2, #0
 8005e16:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005e1a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005e1e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005e22:	4642      	mov	r2, r8
 8005e24:	464b      	mov	r3, r9
 8005e26:	1891      	adds	r1, r2, r2
 8005e28:	6239      	str	r1, [r7, #32]
 8005e2a:	415b      	adcs	r3, r3
 8005e2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005e32:	4641      	mov	r1, r8
 8005e34:	1854      	adds	r4, r2, r1
 8005e36:	4649      	mov	r1, r9
 8005e38:	eb43 0501 	adc.w	r5, r3, r1
 8005e3c:	f04f 0200 	mov.w	r2, #0
 8005e40:	f04f 0300 	mov.w	r3, #0
 8005e44:	00eb      	lsls	r3, r5, #3
 8005e46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005e4a:	00e2      	lsls	r2, r4, #3
 8005e4c:	4614      	mov	r4, r2
 8005e4e:	461d      	mov	r5, r3
 8005e50:	4643      	mov	r3, r8
 8005e52:	18e3      	adds	r3, r4, r3
 8005e54:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005e58:	464b      	mov	r3, r9
 8005e5a:	eb45 0303 	adc.w	r3, r5, r3
 8005e5e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005e62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e66:	685b      	ldr	r3, [r3, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005e6e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005e72:	f04f 0200 	mov.w	r2, #0
 8005e76:	f04f 0300 	mov.w	r3, #0
 8005e7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005e7e:	4629      	mov	r1, r5
 8005e80:	008b      	lsls	r3, r1, #2
 8005e82:	4621      	mov	r1, r4
 8005e84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e88:	4621      	mov	r1, r4
 8005e8a:	008a      	lsls	r2, r1, #2
 8005e8c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005e90:	f7fa f9f6 	bl	8000280 <__aeabi_uldivmod>
 8005e94:	4602      	mov	r2, r0
 8005e96:	460b      	mov	r3, r1
 8005e98:	4b60      	ldr	r3, [pc, #384]	@ (800601c <UART_SetConfig+0x4e4>)
 8005e9a:	fba3 2302 	umull	r2, r3, r3, r2
 8005e9e:	095b      	lsrs	r3, r3, #5
 8005ea0:	011c      	lsls	r4, r3, #4
 8005ea2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005eac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005eb0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005eb4:	4642      	mov	r2, r8
 8005eb6:	464b      	mov	r3, r9
 8005eb8:	1891      	adds	r1, r2, r2
 8005eba:	61b9      	str	r1, [r7, #24]
 8005ebc:	415b      	adcs	r3, r3
 8005ebe:	61fb      	str	r3, [r7, #28]
 8005ec0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005ec4:	4641      	mov	r1, r8
 8005ec6:	1851      	adds	r1, r2, r1
 8005ec8:	6139      	str	r1, [r7, #16]
 8005eca:	4649      	mov	r1, r9
 8005ecc:	414b      	adcs	r3, r1
 8005ece:	617b      	str	r3, [r7, #20]
 8005ed0:	f04f 0200 	mov.w	r2, #0
 8005ed4:	f04f 0300 	mov.w	r3, #0
 8005ed8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005edc:	4659      	mov	r1, fp
 8005ede:	00cb      	lsls	r3, r1, #3
 8005ee0:	4651      	mov	r1, sl
 8005ee2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ee6:	4651      	mov	r1, sl
 8005ee8:	00ca      	lsls	r2, r1, #3
 8005eea:	4610      	mov	r0, r2
 8005eec:	4619      	mov	r1, r3
 8005eee:	4603      	mov	r3, r0
 8005ef0:	4642      	mov	r2, r8
 8005ef2:	189b      	adds	r3, r3, r2
 8005ef4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005ef8:	464b      	mov	r3, r9
 8005efa:	460a      	mov	r2, r1
 8005efc:	eb42 0303 	adc.w	r3, r2, r3
 8005f00:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f08:	685b      	ldr	r3, [r3, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005f0e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005f10:	f04f 0200 	mov.w	r2, #0
 8005f14:	f04f 0300 	mov.w	r3, #0
 8005f18:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005f1c:	4649      	mov	r1, r9
 8005f1e:	008b      	lsls	r3, r1, #2
 8005f20:	4641      	mov	r1, r8
 8005f22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005f26:	4641      	mov	r1, r8
 8005f28:	008a      	lsls	r2, r1, #2
 8005f2a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005f2e:	f7fa f9a7 	bl	8000280 <__aeabi_uldivmod>
 8005f32:	4602      	mov	r2, r0
 8005f34:	460b      	mov	r3, r1
 8005f36:	4611      	mov	r1, r2
 8005f38:	4b38      	ldr	r3, [pc, #224]	@ (800601c <UART_SetConfig+0x4e4>)
 8005f3a:	fba3 2301 	umull	r2, r3, r3, r1
 8005f3e:	095b      	lsrs	r3, r3, #5
 8005f40:	2264      	movs	r2, #100	@ 0x64
 8005f42:	fb02 f303 	mul.w	r3, r2, r3
 8005f46:	1acb      	subs	r3, r1, r3
 8005f48:	011b      	lsls	r3, r3, #4
 8005f4a:	3332      	adds	r3, #50	@ 0x32
 8005f4c:	4a33      	ldr	r2, [pc, #204]	@ (800601c <UART_SetConfig+0x4e4>)
 8005f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f52:	095b      	lsrs	r3, r3, #5
 8005f54:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005f58:	441c      	add	r4, r3
 8005f5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f5e:	2200      	movs	r2, #0
 8005f60:	673b      	str	r3, [r7, #112]	@ 0x70
 8005f62:	677a      	str	r2, [r7, #116]	@ 0x74
 8005f64:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005f68:	4642      	mov	r2, r8
 8005f6a:	464b      	mov	r3, r9
 8005f6c:	1891      	adds	r1, r2, r2
 8005f6e:	60b9      	str	r1, [r7, #8]
 8005f70:	415b      	adcs	r3, r3
 8005f72:	60fb      	str	r3, [r7, #12]
 8005f74:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005f78:	4641      	mov	r1, r8
 8005f7a:	1851      	adds	r1, r2, r1
 8005f7c:	6039      	str	r1, [r7, #0]
 8005f7e:	4649      	mov	r1, r9
 8005f80:	414b      	adcs	r3, r1
 8005f82:	607b      	str	r3, [r7, #4]
 8005f84:	f04f 0200 	mov.w	r2, #0
 8005f88:	f04f 0300 	mov.w	r3, #0
 8005f8c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005f90:	4659      	mov	r1, fp
 8005f92:	00cb      	lsls	r3, r1, #3
 8005f94:	4651      	mov	r1, sl
 8005f96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f9a:	4651      	mov	r1, sl
 8005f9c:	00ca      	lsls	r2, r1, #3
 8005f9e:	4610      	mov	r0, r2
 8005fa0:	4619      	mov	r1, r3
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	4642      	mov	r2, r8
 8005fa6:	189b      	adds	r3, r3, r2
 8005fa8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005faa:	464b      	mov	r3, r9
 8005fac:	460a      	mov	r2, r1
 8005fae:	eb42 0303 	adc.w	r3, r2, r3
 8005fb2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005fb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	663b      	str	r3, [r7, #96]	@ 0x60
 8005fbe:	667a      	str	r2, [r7, #100]	@ 0x64
 8005fc0:	f04f 0200 	mov.w	r2, #0
 8005fc4:	f04f 0300 	mov.w	r3, #0
 8005fc8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005fcc:	4649      	mov	r1, r9
 8005fce:	008b      	lsls	r3, r1, #2
 8005fd0:	4641      	mov	r1, r8
 8005fd2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fd6:	4641      	mov	r1, r8
 8005fd8:	008a      	lsls	r2, r1, #2
 8005fda:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005fde:	f7fa f94f 	bl	8000280 <__aeabi_uldivmod>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	4b0d      	ldr	r3, [pc, #52]	@ (800601c <UART_SetConfig+0x4e4>)
 8005fe8:	fba3 1302 	umull	r1, r3, r3, r2
 8005fec:	095b      	lsrs	r3, r3, #5
 8005fee:	2164      	movs	r1, #100	@ 0x64
 8005ff0:	fb01 f303 	mul.w	r3, r1, r3
 8005ff4:	1ad3      	subs	r3, r2, r3
 8005ff6:	011b      	lsls	r3, r3, #4
 8005ff8:	3332      	adds	r3, #50	@ 0x32
 8005ffa:	4a08      	ldr	r2, [pc, #32]	@ (800601c <UART_SetConfig+0x4e4>)
 8005ffc:	fba2 2303 	umull	r2, r3, r2, r3
 8006000:	095b      	lsrs	r3, r3, #5
 8006002:	f003 020f 	and.w	r2, r3, #15
 8006006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4422      	add	r2, r4
 800600e:	609a      	str	r2, [r3, #8]
}
 8006010:	bf00      	nop
 8006012:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006016:	46bd      	mov	sp, r7
 8006018:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800601c:	51eb851f 	.word	0x51eb851f

08006020 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8006020:	b480      	push	{r7}
 8006022:	b087      	sub	sp, #28
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006034:	683a      	ldr	r2, [r7, #0]
 8006036:	6812      	ldr	r2, [r2, #0]
 8006038:	f023 0101 	bic.w	r1, r3, #1
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	2b08      	cmp	r3, #8
 8006048:	d102      	bne.n	8006050 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 800604a:	2340      	movs	r3, #64	@ 0x40
 800604c:	617b      	str	r3, [r7, #20]
 800604e:	e001      	b.n	8006054 <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8006050:	2300      	movs	r3, #0
 8006052:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8006060:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8006066:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 800606c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8006072:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8006078:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 800607e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8006084:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 800608a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8006090:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8006096:	4313      	orrs	r3, r2
 8006098:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	699b      	ldr	r3, [r3, #24]
 800609e:	693a      	ldr	r2, [r7, #16]
 80060a0:	4313      	orrs	r3, r2
 80060a2:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 80060a4:	683b      	ldr	r3, [r7, #0]
 80060a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060a8:	693a      	ldr	r2, [r7, #16]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 80060ae:	4b10      	ldr	r3, [pc, #64]	@ (80060f0 <FSMC_NORSRAM_Init+0xd0>)
 80060b0:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80060b8:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 80060c0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	43db      	mvns	r3, r3
 80060d0:	ea02 0103 	and.w	r1, r2, r3
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	681a      	ldr	r2, [r3, #0]
 80060d8:	693b      	ldr	r3, [r7, #16]
 80060da:	4319      	orrs	r1, r3
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 80060e2:	2300      	movs	r3, #0
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	371c      	adds	r7, #28
 80060e8:	46bd      	mov	sp, r7
 80060ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ee:	4770      	bx	lr
 80060f0:	0008fb7f 	.word	0x0008fb7f

080060f4 <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b085      	sub	sp, #20
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	60f8      	str	r0, [r7, #12]
 80060fc:	60b9      	str	r1, [r7, #8]
 80060fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	1c5a      	adds	r2, r3, #1
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800610a:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	68bb      	ldr	r3, [r7, #8]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	011b      	lsls	r3, r3, #4
 8006118:	431a      	orrs	r2, r3
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	689b      	ldr	r3, [r3, #8]
 800611e:	021b      	lsls	r3, r3, #8
 8006120:	431a      	orrs	r2, r3
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	68db      	ldr	r3, [r3, #12]
 8006126:	041b      	lsls	r3, r3, #16
 8006128:	431a      	orrs	r2, r3
 800612a:	68bb      	ldr	r3, [r7, #8]
 800612c:	691b      	ldr	r3, [r3, #16]
 800612e:	3b01      	subs	r3, #1
 8006130:	051b      	lsls	r3, r3, #20
 8006132:	431a      	orrs	r2, r3
 8006134:	68bb      	ldr	r3, [r7, #8]
 8006136:	695b      	ldr	r3, [r3, #20]
 8006138:	3b02      	subs	r3, #2
 800613a:	061b      	lsls	r3, r3, #24
 800613c:	431a      	orrs	r2, r3
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	699b      	ldr	r3, [r3, #24]
 8006142:	4313      	orrs	r3, r2
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	3201      	adds	r2, #1
 8006148:	4319      	orrs	r1, r3
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8006150:	2300      	movs	r3, #0
}
 8006152:	4618      	mov	r0, r3
 8006154:	3714      	adds	r7, #20
 8006156:	46bd      	mov	sp, r7
 8006158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615c:	4770      	bx	lr
	...

08006160 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8006160:	b480      	push	{r7}
 8006162:	b085      	sub	sp, #20
 8006164:	af00      	add	r7, sp, #0
 8006166:	60f8      	str	r0, [r7, #12]
 8006168:	60b9      	str	r1, [r7, #8]
 800616a:	607a      	str	r2, [r7, #4]
 800616c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006174:	d11d      	bne.n	80061b2 <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	687a      	ldr	r2, [r7, #4]
 800617a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800617e:	4b13      	ldr	r3, [pc, #76]	@ (80061cc <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8006180:	4013      	ands	r3, r2
 8006182:	68ba      	ldr	r2, [r7, #8]
 8006184:	6811      	ldr	r1, [r2, #0]
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	6852      	ldr	r2, [r2, #4]
 800618a:	0112      	lsls	r2, r2, #4
 800618c:	4311      	orrs	r1, r2
 800618e:	68ba      	ldr	r2, [r7, #8]
 8006190:	6892      	ldr	r2, [r2, #8]
 8006192:	0212      	lsls	r2, r2, #8
 8006194:	4311      	orrs	r1, r2
 8006196:	68ba      	ldr	r2, [r7, #8]
 8006198:	6992      	ldr	r2, [r2, #24]
 800619a:	4311      	orrs	r1, r2
 800619c:	68ba      	ldr	r2, [r7, #8]
 800619e:	68d2      	ldr	r2, [r2, #12]
 80061a0:	0412      	lsls	r2, r2, #16
 80061a2:	430a      	orrs	r2, r1
 80061a4:	ea43 0102 	orr.w	r1, r3, r2
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	687a      	ldr	r2, [r7, #4]
 80061ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80061b0:	e005      	b.n	80061be <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 80061ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 80061be:	2300      	movs	r3, #0
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	3714      	adds	r7, #20
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr
 80061cc:	cff00000 	.word	0xcff00000

080061d0 <sbrk_aligned>:
 80061d0:	b570      	push	{r4, r5, r6, lr}
 80061d2:	4e0f      	ldr	r6, [pc, #60]	@ (8006210 <sbrk_aligned+0x40>)
 80061d4:	460c      	mov	r4, r1
 80061d6:	6831      	ldr	r1, [r6, #0]
 80061d8:	4605      	mov	r5, r0
 80061da:	b911      	cbnz	r1, 80061e2 <sbrk_aligned+0x12>
 80061dc:	f000 f91c 	bl	8006418 <_sbrk_r>
 80061e0:	6030      	str	r0, [r6, #0]
 80061e2:	4621      	mov	r1, r4
 80061e4:	4628      	mov	r0, r5
 80061e6:	f000 f917 	bl	8006418 <_sbrk_r>
 80061ea:	1c43      	adds	r3, r0, #1
 80061ec:	d103      	bne.n	80061f6 <sbrk_aligned+0x26>
 80061ee:	f04f 34ff 	mov.w	r4, #4294967295
 80061f2:	4620      	mov	r0, r4
 80061f4:	bd70      	pop	{r4, r5, r6, pc}
 80061f6:	1cc4      	adds	r4, r0, #3
 80061f8:	f024 0403 	bic.w	r4, r4, #3
 80061fc:	42a0      	cmp	r0, r4
 80061fe:	d0f8      	beq.n	80061f2 <sbrk_aligned+0x22>
 8006200:	1a21      	subs	r1, r4, r0
 8006202:	4628      	mov	r0, r5
 8006204:	f000 f908 	bl	8006418 <_sbrk_r>
 8006208:	3001      	adds	r0, #1
 800620a:	d1f2      	bne.n	80061f2 <sbrk_aligned+0x22>
 800620c:	e7ef      	b.n	80061ee <sbrk_aligned+0x1e>
 800620e:	bf00      	nop
 8006210:	20000850 	.word	0x20000850

08006214 <_malloc_r>:
 8006214:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006218:	1ccd      	adds	r5, r1, #3
 800621a:	f025 0503 	bic.w	r5, r5, #3
 800621e:	3508      	adds	r5, #8
 8006220:	2d0c      	cmp	r5, #12
 8006222:	bf38      	it	cc
 8006224:	250c      	movcc	r5, #12
 8006226:	2d00      	cmp	r5, #0
 8006228:	4606      	mov	r6, r0
 800622a:	db01      	blt.n	8006230 <_malloc_r+0x1c>
 800622c:	42a9      	cmp	r1, r5
 800622e:	d904      	bls.n	800623a <_malloc_r+0x26>
 8006230:	230c      	movs	r3, #12
 8006232:	6033      	str	r3, [r6, #0]
 8006234:	2000      	movs	r0, #0
 8006236:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800623a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006310 <_malloc_r+0xfc>
 800623e:	f000 f869 	bl	8006314 <__malloc_lock>
 8006242:	f8d8 3000 	ldr.w	r3, [r8]
 8006246:	461c      	mov	r4, r3
 8006248:	bb44      	cbnz	r4, 800629c <_malloc_r+0x88>
 800624a:	4629      	mov	r1, r5
 800624c:	4630      	mov	r0, r6
 800624e:	f7ff ffbf 	bl	80061d0 <sbrk_aligned>
 8006252:	1c43      	adds	r3, r0, #1
 8006254:	4604      	mov	r4, r0
 8006256:	d158      	bne.n	800630a <_malloc_r+0xf6>
 8006258:	f8d8 4000 	ldr.w	r4, [r8]
 800625c:	4627      	mov	r7, r4
 800625e:	2f00      	cmp	r7, #0
 8006260:	d143      	bne.n	80062ea <_malloc_r+0xd6>
 8006262:	2c00      	cmp	r4, #0
 8006264:	d04b      	beq.n	80062fe <_malloc_r+0xea>
 8006266:	6823      	ldr	r3, [r4, #0]
 8006268:	4639      	mov	r1, r7
 800626a:	4630      	mov	r0, r6
 800626c:	eb04 0903 	add.w	r9, r4, r3
 8006270:	f000 f8d2 	bl	8006418 <_sbrk_r>
 8006274:	4581      	cmp	r9, r0
 8006276:	d142      	bne.n	80062fe <_malloc_r+0xea>
 8006278:	6821      	ldr	r1, [r4, #0]
 800627a:	1a6d      	subs	r5, r5, r1
 800627c:	4629      	mov	r1, r5
 800627e:	4630      	mov	r0, r6
 8006280:	f7ff ffa6 	bl	80061d0 <sbrk_aligned>
 8006284:	3001      	adds	r0, #1
 8006286:	d03a      	beq.n	80062fe <_malloc_r+0xea>
 8006288:	6823      	ldr	r3, [r4, #0]
 800628a:	442b      	add	r3, r5
 800628c:	6023      	str	r3, [r4, #0]
 800628e:	f8d8 3000 	ldr.w	r3, [r8]
 8006292:	685a      	ldr	r2, [r3, #4]
 8006294:	bb62      	cbnz	r2, 80062f0 <_malloc_r+0xdc>
 8006296:	f8c8 7000 	str.w	r7, [r8]
 800629a:	e00f      	b.n	80062bc <_malloc_r+0xa8>
 800629c:	6822      	ldr	r2, [r4, #0]
 800629e:	1b52      	subs	r2, r2, r5
 80062a0:	d420      	bmi.n	80062e4 <_malloc_r+0xd0>
 80062a2:	2a0b      	cmp	r2, #11
 80062a4:	d917      	bls.n	80062d6 <_malloc_r+0xc2>
 80062a6:	1961      	adds	r1, r4, r5
 80062a8:	42a3      	cmp	r3, r4
 80062aa:	6025      	str	r5, [r4, #0]
 80062ac:	bf18      	it	ne
 80062ae:	6059      	strne	r1, [r3, #4]
 80062b0:	6863      	ldr	r3, [r4, #4]
 80062b2:	bf08      	it	eq
 80062b4:	f8c8 1000 	streq.w	r1, [r8]
 80062b8:	5162      	str	r2, [r4, r5]
 80062ba:	604b      	str	r3, [r1, #4]
 80062bc:	4630      	mov	r0, r6
 80062be:	f000 f82f 	bl	8006320 <__malloc_unlock>
 80062c2:	f104 000b 	add.w	r0, r4, #11
 80062c6:	1d23      	adds	r3, r4, #4
 80062c8:	f020 0007 	bic.w	r0, r0, #7
 80062cc:	1ac2      	subs	r2, r0, r3
 80062ce:	bf1c      	itt	ne
 80062d0:	1a1b      	subne	r3, r3, r0
 80062d2:	50a3      	strne	r3, [r4, r2]
 80062d4:	e7af      	b.n	8006236 <_malloc_r+0x22>
 80062d6:	6862      	ldr	r2, [r4, #4]
 80062d8:	42a3      	cmp	r3, r4
 80062da:	bf0c      	ite	eq
 80062dc:	f8c8 2000 	streq.w	r2, [r8]
 80062e0:	605a      	strne	r2, [r3, #4]
 80062e2:	e7eb      	b.n	80062bc <_malloc_r+0xa8>
 80062e4:	4623      	mov	r3, r4
 80062e6:	6864      	ldr	r4, [r4, #4]
 80062e8:	e7ae      	b.n	8006248 <_malloc_r+0x34>
 80062ea:	463c      	mov	r4, r7
 80062ec:	687f      	ldr	r7, [r7, #4]
 80062ee:	e7b6      	b.n	800625e <_malloc_r+0x4a>
 80062f0:	461a      	mov	r2, r3
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	42a3      	cmp	r3, r4
 80062f6:	d1fb      	bne.n	80062f0 <_malloc_r+0xdc>
 80062f8:	2300      	movs	r3, #0
 80062fa:	6053      	str	r3, [r2, #4]
 80062fc:	e7de      	b.n	80062bc <_malloc_r+0xa8>
 80062fe:	230c      	movs	r3, #12
 8006300:	6033      	str	r3, [r6, #0]
 8006302:	4630      	mov	r0, r6
 8006304:	f000 f80c 	bl	8006320 <__malloc_unlock>
 8006308:	e794      	b.n	8006234 <_malloc_r+0x20>
 800630a:	6005      	str	r5, [r0, #0]
 800630c:	e7d6      	b.n	80062bc <_malloc_r+0xa8>
 800630e:	bf00      	nop
 8006310:	20000854 	.word	0x20000854

08006314 <__malloc_lock>:
 8006314:	4801      	ldr	r0, [pc, #4]	@ (800631c <__malloc_lock+0x8>)
 8006316:	f000 b8b9 	b.w	800648c <__retarget_lock_acquire_recursive>
 800631a:	bf00      	nop
 800631c:	20000994 	.word	0x20000994

08006320 <__malloc_unlock>:
 8006320:	4801      	ldr	r0, [pc, #4]	@ (8006328 <__malloc_unlock+0x8>)
 8006322:	f000 b8b4 	b.w	800648e <__retarget_lock_release_recursive>
 8006326:	bf00      	nop
 8006328:	20000994 	.word	0x20000994

0800632c <_realloc_r>:
 800632c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006330:	4680      	mov	r8, r0
 8006332:	4615      	mov	r5, r2
 8006334:	460c      	mov	r4, r1
 8006336:	b921      	cbnz	r1, 8006342 <_realloc_r+0x16>
 8006338:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800633c:	4611      	mov	r1, r2
 800633e:	f7ff bf69 	b.w	8006214 <_malloc_r>
 8006342:	b92a      	cbnz	r2, 8006350 <_realloc_r+0x24>
 8006344:	f000 f8b8 	bl	80064b8 <_free_r>
 8006348:	2400      	movs	r4, #0
 800634a:	4620      	mov	r0, r4
 800634c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006350:	f000 f8fc 	bl	800654c <_malloc_usable_size_r>
 8006354:	4285      	cmp	r5, r0
 8006356:	4606      	mov	r6, r0
 8006358:	d802      	bhi.n	8006360 <_realloc_r+0x34>
 800635a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800635e:	d8f4      	bhi.n	800634a <_realloc_r+0x1e>
 8006360:	4629      	mov	r1, r5
 8006362:	4640      	mov	r0, r8
 8006364:	f7ff ff56 	bl	8006214 <_malloc_r>
 8006368:	4607      	mov	r7, r0
 800636a:	2800      	cmp	r0, #0
 800636c:	d0ec      	beq.n	8006348 <_realloc_r+0x1c>
 800636e:	42b5      	cmp	r5, r6
 8006370:	462a      	mov	r2, r5
 8006372:	4621      	mov	r1, r4
 8006374:	bf28      	it	cs
 8006376:	4632      	movcs	r2, r6
 8006378:	f000 f88a 	bl	8006490 <memcpy>
 800637c:	4621      	mov	r1, r4
 800637e:	4640      	mov	r0, r8
 8006380:	f000 f89a 	bl	80064b8 <_free_r>
 8006384:	463c      	mov	r4, r7
 8006386:	e7e0      	b.n	800634a <_realloc_r+0x1e>

08006388 <siprintf>:
 8006388:	b40e      	push	{r1, r2, r3}
 800638a:	b500      	push	{lr}
 800638c:	b09c      	sub	sp, #112	@ 0x70
 800638e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006390:	9002      	str	r0, [sp, #8]
 8006392:	9006      	str	r0, [sp, #24]
 8006394:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006398:	4809      	ldr	r0, [pc, #36]	@ (80063c0 <siprintf+0x38>)
 800639a:	9107      	str	r1, [sp, #28]
 800639c:	9104      	str	r1, [sp, #16]
 800639e:	4909      	ldr	r1, [pc, #36]	@ (80063c4 <siprintf+0x3c>)
 80063a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80063a4:	9105      	str	r1, [sp, #20]
 80063a6:	6800      	ldr	r0, [r0, #0]
 80063a8:	9301      	str	r3, [sp, #4]
 80063aa:	a902      	add	r1, sp, #8
 80063ac:	f000 f932 	bl	8006614 <_svfiprintf_r>
 80063b0:	9b02      	ldr	r3, [sp, #8]
 80063b2:	2200      	movs	r2, #0
 80063b4:	701a      	strb	r2, [r3, #0]
 80063b6:	b01c      	add	sp, #112	@ 0x70
 80063b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80063bc:	b003      	add	sp, #12
 80063be:	4770      	bx	lr
 80063c0:	20000034 	.word	0x20000034
 80063c4:	ffff0208 	.word	0xffff0208

080063c8 <_vsiprintf_r>:
 80063c8:	b500      	push	{lr}
 80063ca:	b09b      	sub	sp, #108	@ 0x6c
 80063cc:	9100      	str	r1, [sp, #0]
 80063ce:	9104      	str	r1, [sp, #16]
 80063d0:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80063d4:	9105      	str	r1, [sp, #20]
 80063d6:	9102      	str	r1, [sp, #8]
 80063d8:	4905      	ldr	r1, [pc, #20]	@ (80063f0 <_vsiprintf_r+0x28>)
 80063da:	9103      	str	r1, [sp, #12]
 80063dc:	4669      	mov	r1, sp
 80063de:	f000 f919 	bl	8006614 <_svfiprintf_r>
 80063e2:	9b00      	ldr	r3, [sp, #0]
 80063e4:	2200      	movs	r2, #0
 80063e6:	701a      	strb	r2, [r3, #0]
 80063e8:	b01b      	add	sp, #108	@ 0x6c
 80063ea:	f85d fb04 	ldr.w	pc, [sp], #4
 80063ee:	bf00      	nop
 80063f0:	ffff0208 	.word	0xffff0208

080063f4 <vsiprintf>:
 80063f4:	4613      	mov	r3, r2
 80063f6:	460a      	mov	r2, r1
 80063f8:	4601      	mov	r1, r0
 80063fa:	4802      	ldr	r0, [pc, #8]	@ (8006404 <vsiprintf+0x10>)
 80063fc:	6800      	ldr	r0, [r0, #0]
 80063fe:	f7ff bfe3 	b.w	80063c8 <_vsiprintf_r>
 8006402:	bf00      	nop
 8006404:	20000034 	.word	0x20000034

08006408 <memset>:
 8006408:	4402      	add	r2, r0
 800640a:	4603      	mov	r3, r0
 800640c:	4293      	cmp	r3, r2
 800640e:	d100      	bne.n	8006412 <memset+0xa>
 8006410:	4770      	bx	lr
 8006412:	f803 1b01 	strb.w	r1, [r3], #1
 8006416:	e7f9      	b.n	800640c <memset+0x4>

08006418 <_sbrk_r>:
 8006418:	b538      	push	{r3, r4, r5, lr}
 800641a:	4d06      	ldr	r5, [pc, #24]	@ (8006434 <_sbrk_r+0x1c>)
 800641c:	2300      	movs	r3, #0
 800641e:	4604      	mov	r4, r0
 8006420:	4608      	mov	r0, r1
 8006422:	602b      	str	r3, [r5, #0]
 8006424:	f7fc fa96 	bl	8002954 <_sbrk>
 8006428:	1c43      	adds	r3, r0, #1
 800642a:	d102      	bne.n	8006432 <_sbrk_r+0x1a>
 800642c:	682b      	ldr	r3, [r5, #0]
 800642e:	b103      	cbz	r3, 8006432 <_sbrk_r+0x1a>
 8006430:	6023      	str	r3, [r4, #0]
 8006432:	bd38      	pop	{r3, r4, r5, pc}
 8006434:	20000990 	.word	0x20000990

08006438 <__errno>:
 8006438:	4b01      	ldr	r3, [pc, #4]	@ (8006440 <__errno+0x8>)
 800643a:	6818      	ldr	r0, [r3, #0]
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop
 8006440:	20000034 	.word	0x20000034

08006444 <__libc_init_array>:
 8006444:	b570      	push	{r4, r5, r6, lr}
 8006446:	4d0d      	ldr	r5, [pc, #52]	@ (800647c <__libc_init_array+0x38>)
 8006448:	4c0d      	ldr	r4, [pc, #52]	@ (8006480 <__libc_init_array+0x3c>)
 800644a:	1b64      	subs	r4, r4, r5
 800644c:	10a4      	asrs	r4, r4, #2
 800644e:	2600      	movs	r6, #0
 8006450:	42a6      	cmp	r6, r4
 8006452:	d109      	bne.n	8006468 <__libc_init_array+0x24>
 8006454:	4d0b      	ldr	r5, [pc, #44]	@ (8006484 <__libc_init_array+0x40>)
 8006456:	4c0c      	ldr	r4, [pc, #48]	@ (8006488 <__libc_init_array+0x44>)
 8006458:	f000 fca0 	bl	8006d9c <_init>
 800645c:	1b64      	subs	r4, r4, r5
 800645e:	10a4      	asrs	r4, r4, #2
 8006460:	2600      	movs	r6, #0
 8006462:	42a6      	cmp	r6, r4
 8006464:	d105      	bne.n	8006472 <__libc_init_array+0x2e>
 8006466:	bd70      	pop	{r4, r5, r6, pc}
 8006468:	f855 3b04 	ldr.w	r3, [r5], #4
 800646c:	4798      	blx	r3
 800646e:	3601      	adds	r6, #1
 8006470:	e7ee      	b.n	8006450 <__libc_init_array+0xc>
 8006472:	f855 3b04 	ldr.w	r3, [r5], #4
 8006476:	4798      	blx	r3
 8006478:	3601      	adds	r6, #1
 800647a:	e7f2      	b.n	8006462 <__libc_init_array+0x1e>
 800647c:	08007f78 	.word	0x08007f78
 8006480:	08007f78 	.word	0x08007f78
 8006484:	08007f78 	.word	0x08007f78
 8006488:	08007f7c 	.word	0x08007f7c

0800648c <__retarget_lock_acquire_recursive>:
 800648c:	4770      	bx	lr

0800648e <__retarget_lock_release_recursive>:
 800648e:	4770      	bx	lr

08006490 <memcpy>:
 8006490:	440a      	add	r2, r1
 8006492:	4291      	cmp	r1, r2
 8006494:	f100 33ff 	add.w	r3, r0, #4294967295
 8006498:	d100      	bne.n	800649c <memcpy+0xc>
 800649a:	4770      	bx	lr
 800649c:	b510      	push	{r4, lr}
 800649e:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064a2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064a6:	4291      	cmp	r1, r2
 80064a8:	d1f9      	bne.n	800649e <memcpy+0xe>
 80064aa:	bd10      	pop	{r4, pc}

080064ac <nanf>:
 80064ac:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80064b4 <nanf+0x8>
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	7fc00000 	.word	0x7fc00000

080064b8 <_free_r>:
 80064b8:	b538      	push	{r3, r4, r5, lr}
 80064ba:	4605      	mov	r5, r0
 80064bc:	2900      	cmp	r1, #0
 80064be:	d041      	beq.n	8006544 <_free_r+0x8c>
 80064c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80064c4:	1f0c      	subs	r4, r1, #4
 80064c6:	2b00      	cmp	r3, #0
 80064c8:	bfb8      	it	lt
 80064ca:	18e4      	addlt	r4, r4, r3
 80064cc:	f7ff ff22 	bl	8006314 <__malloc_lock>
 80064d0:	4a1d      	ldr	r2, [pc, #116]	@ (8006548 <_free_r+0x90>)
 80064d2:	6813      	ldr	r3, [r2, #0]
 80064d4:	b933      	cbnz	r3, 80064e4 <_free_r+0x2c>
 80064d6:	6063      	str	r3, [r4, #4]
 80064d8:	6014      	str	r4, [r2, #0]
 80064da:	4628      	mov	r0, r5
 80064dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064e0:	f7ff bf1e 	b.w	8006320 <__malloc_unlock>
 80064e4:	42a3      	cmp	r3, r4
 80064e6:	d908      	bls.n	80064fa <_free_r+0x42>
 80064e8:	6820      	ldr	r0, [r4, #0]
 80064ea:	1821      	adds	r1, r4, r0
 80064ec:	428b      	cmp	r3, r1
 80064ee:	bf01      	itttt	eq
 80064f0:	6819      	ldreq	r1, [r3, #0]
 80064f2:	685b      	ldreq	r3, [r3, #4]
 80064f4:	1809      	addeq	r1, r1, r0
 80064f6:	6021      	streq	r1, [r4, #0]
 80064f8:	e7ed      	b.n	80064d6 <_free_r+0x1e>
 80064fa:	461a      	mov	r2, r3
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	b10b      	cbz	r3, 8006504 <_free_r+0x4c>
 8006500:	42a3      	cmp	r3, r4
 8006502:	d9fa      	bls.n	80064fa <_free_r+0x42>
 8006504:	6811      	ldr	r1, [r2, #0]
 8006506:	1850      	adds	r0, r2, r1
 8006508:	42a0      	cmp	r0, r4
 800650a:	d10b      	bne.n	8006524 <_free_r+0x6c>
 800650c:	6820      	ldr	r0, [r4, #0]
 800650e:	4401      	add	r1, r0
 8006510:	1850      	adds	r0, r2, r1
 8006512:	4283      	cmp	r3, r0
 8006514:	6011      	str	r1, [r2, #0]
 8006516:	d1e0      	bne.n	80064da <_free_r+0x22>
 8006518:	6818      	ldr	r0, [r3, #0]
 800651a:	685b      	ldr	r3, [r3, #4]
 800651c:	6053      	str	r3, [r2, #4]
 800651e:	4408      	add	r0, r1
 8006520:	6010      	str	r0, [r2, #0]
 8006522:	e7da      	b.n	80064da <_free_r+0x22>
 8006524:	d902      	bls.n	800652c <_free_r+0x74>
 8006526:	230c      	movs	r3, #12
 8006528:	602b      	str	r3, [r5, #0]
 800652a:	e7d6      	b.n	80064da <_free_r+0x22>
 800652c:	6820      	ldr	r0, [r4, #0]
 800652e:	1821      	adds	r1, r4, r0
 8006530:	428b      	cmp	r3, r1
 8006532:	bf04      	itt	eq
 8006534:	6819      	ldreq	r1, [r3, #0]
 8006536:	685b      	ldreq	r3, [r3, #4]
 8006538:	6063      	str	r3, [r4, #4]
 800653a:	bf04      	itt	eq
 800653c:	1809      	addeq	r1, r1, r0
 800653e:	6021      	streq	r1, [r4, #0]
 8006540:	6054      	str	r4, [r2, #4]
 8006542:	e7ca      	b.n	80064da <_free_r+0x22>
 8006544:	bd38      	pop	{r3, r4, r5, pc}
 8006546:	bf00      	nop
 8006548:	20000854 	.word	0x20000854

0800654c <_malloc_usable_size_r>:
 800654c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006550:	1f18      	subs	r0, r3, #4
 8006552:	2b00      	cmp	r3, #0
 8006554:	bfbc      	itt	lt
 8006556:	580b      	ldrlt	r3, [r1, r0]
 8006558:	18c0      	addlt	r0, r0, r3
 800655a:	4770      	bx	lr

0800655c <__ssputs_r>:
 800655c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006560:	688e      	ldr	r6, [r1, #8]
 8006562:	461f      	mov	r7, r3
 8006564:	42be      	cmp	r6, r7
 8006566:	680b      	ldr	r3, [r1, #0]
 8006568:	4682      	mov	sl, r0
 800656a:	460c      	mov	r4, r1
 800656c:	4690      	mov	r8, r2
 800656e:	d82d      	bhi.n	80065cc <__ssputs_r+0x70>
 8006570:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006574:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006578:	d026      	beq.n	80065c8 <__ssputs_r+0x6c>
 800657a:	6965      	ldr	r5, [r4, #20]
 800657c:	6909      	ldr	r1, [r1, #16]
 800657e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006582:	eba3 0901 	sub.w	r9, r3, r1
 8006586:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800658a:	1c7b      	adds	r3, r7, #1
 800658c:	444b      	add	r3, r9
 800658e:	106d      	asrs	r5, r5, #1
 8006590:	429d      	cmp	r5, r3
 8006592:	bf38      	it	cc
 8006594:	461d      	movcc	r5, r3
 8006596:	0553      	lsls	r3, r2, #21
 8006598:	d527      	bpl.n	80065ea <__ssputs_r+0x8e>
 800659a:	4629      	mov	r1, r5
 800659c:	f7ff fe3a 	bl	8006214 <_malloc_r>
 80065a0:	4606      	mov	r6, r0
 80065a2:	b360      	cbz	r0, 80065fe <__ssputs_r+0xa2>
 80065a4:	6921      	ldr	r1, [r4, #16]
 80065a6:	464a      	mov	r2, r9
 80065a8:	f7ff ff72 	bl	8006490 <memcpy>
 80065ac:	89a3      	ldrh	r3, [r4, #12]
 80065ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80065b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80065b6:	81a3      	strh	r3, [r4, #12]
 80065b8:	6126      	str	r6, [r4, #16]
 80065ba:	6165      	str	r5, [r4, #20]
 80065bc:	444e      	add	r6, r9
 80065be:	eba5 0509 	sub.w	r5, r5, r9
 80065c2:	6026      	str	r6, [r4, #0]
 80065c4:	60a5      	str	r5, [r4, #8]
 80065c6:	463e      	mov	r6, r7
 80065c8:	42be      	cmp	r6, r7
 80065ca:	d900      	bls.n	80065ce <__ssputs_r+0x72>
 80065cc:	463e      	mov	r6, r7
 80065ce:	6820      	ldr	r0, [r4, #0]
 80065d0:	4632      	mov	r2, r6
 80065d2:	4641      	mov	r1, r8
 80065d4:	f000 faa8 	bl	8006b28 <memmove>
 80065d8:	68a3      	ldr	r3, [r4, #8]
 80065da:	1b9b      	subs	r3, r3, r6
 80065dc:	60a3      	str	r3, [r4, #8]
 80065de:	6823      	ldr	r3, [r4, #0]
 80065e0:	4433      	add	r3, r6
 80065e2:	6023      	str	r3, [r4, #0]
 80065e4:	2000      	movs	r0, #0
 80065e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065ea:	462a      	mov	r2, r5
 80065ec:	f7ff fe9e 	bl	800632c <_realloc_r>
 80065f0:	4606      	mov	r6, r0
 80065f2:	2800      	cmp	r0, #0
 80065f4:	d1e0      	bne.n	80065b8 <__ssputs_r+0x5c>
 80065f6:	6921      	ldr	r1, [r4, #16]
 80065f8:	4650      	mov	r0, sl
 80065fa:	f7ff ff5d 	bl	80064b8 <_free_r>
 80065fe:	230c      	movs	r3, #12
 8006600:	f8ca 3000 	str.w	r3, [sl]
 8006604:	89a3      	ldrh	r3, [r4, #12]
 8006606:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800660a:	81a3      	strh	r3, [r4, #12]
 800660c:	f04f 30ff 	mov.w	r0, #4294967295
 8006610:	e7e9      	b.n	80065e6 <__ssputs_r+0x8a>
	...

08006614 <_svfiprintf_r>:
 8006614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006618:	4698      	mov	r8, r3
 800661a:	898b      	ldrh	r3, [r1, #12]
 800661c:	061b      	lsls	r3, r3, #24
 800661e:	b09d      	sub	sp, #116	@ 0x74
 8006620:	4607      	mov	r7, r0
 8006622:	460d      	mov	r5, r1
 8006624:	4614      	mov	r4, r2
 8006626:	d510      	bpl.n	800664a <_svfiprintf_r+0x36>
 8006628:	690b      	ldr	r3, [r1, #16]
 800662a:	b973      	cbnz	r3, 800664a <_svfiprintf_r+0x36>
 800662c:	2140      	movs	r1, #64	@ 0x40
 800662e:	f7ff fdf1 	bl	8006214 <_malloc_r>
 8006632:	6028      	str	r0, [r5, #0]
 8006634:	6128      	str	r0, [r5, #16]
 8006636:	b930      	cbnz	r0, 8006646 <_svfiprintf_r+0x32>
 8006638:	230c      	movs	r3, #12
 800663a:	603b      	str	r3, [r7, #0]
 800663c:	f04f 30ff 	mov.w	r0, #4294967295
 8006640:	b01d      	add	sp, #116	@ 0x74
 8006642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006646:	2340      	movs	r3, #64	@ 0x40
 8006648:	616b      	str	r3, [r5, #20]
 800664a:	2300      	movs	r3, #0
 800664c:	9309      	str	r3, [sp, #36]	@ 0x24
 800664e:	2320      	movs	r3, #32
 8006650:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006654:	f8cd 800c 	str.w	r8, [sp, #12]
 8006658:	2330      	movs	r3, #48	@ 0x30
 800665a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80067f8 <_svfiprintf_r+0x1e4>
 800665e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006662:	f04f 0901 	mov.w	r9, #1
 8006666:	4623      	mov	r3, r4
 8006668:	469a      	mov	sl, r3
 800666a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800666e:	b10a      	cbz	r2, 8006674 <_svfiprintf_r+0x60>
 8006670:	2a25      	cmp	r2, #37	@ 0x25
 8006672:	d1f9      	bne.n	8006668 <_svfiprintf_r+0x54>
 8006674:	ebba 0b04 	subs.w	fp, sl, r4
 8006678:	d00b      	beq.n	8006692 <_svfiprintf_r+0x7e>
 800667a:	465b      	mov	r3, fp
 800667c:	4622      	mov	r2, r4
 800667e:	4629      	mov	r1, r5
 8006680:	4638      	mov	r0, r7
 8006682:	f7ff ff6b 	bl	800655c <__ssputs_r>
 8006686:	3001      	adds	r0, #1
 8006688:	f000 80a7 	beq.w	80067da <_svfiprintf_r+0x1c6>
 800668c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800668e:	445a      	add	r2, fp
 8006690:	9209      	str	r2, [sp, #36]	@ 0x24
 8006692:	f89a 3000 	ldrb.w	r3, [sl]
 8006696:	2b00      	cmp	r3, #0
 8006698:	f000 809f 	beq.w	80067da <_svfiprintf_r+0x1c6>
 800669c:	2300      	movs	r3, #0
 800669e:	f04f 32ff 	mov.w	r2, #4294967295
 80066a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80066a6:	f10a 0a01 	add.w	sl, sl, #1
 80066aa:	9304      	str	r3, [sp, #16]
 80066ac:	9307      	str	r3, [sp, #28]
 80066ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80066b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80066b4:	4654      	mov	r4, sl
 80066b6:	2205      	movs	r2, #5
 80066b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80066bc:	484e      	ldr	r0, [pc, #312]	@ (80067f8 <_svfiprintf_r+0x1e4>)
 80066be:	f7f9 fd8f 	bl	80001e0 <memchr>
 80066c2:	9a04      	ldr	r2, [sp, #16]
 80066c4:	b9d8      	cbnz	r0, 80066fe <_svfiprintf_r+0xea>
 80066c6:	06d0      	lsls	r0, r2, #27
 80066c8:	bf44      	itt	mi
 80066ca:	2320      	movmi	r3, #32
 80066cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80066d0:	0711      	lsls	r1, r2, #28
 80066d2:	bf44      	itt	mi
 80066d4:	232b      	movmi	r3, #43	@ 0x2b
 80066d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80066da:	f89a 3000 	ldrb.w	r3, [sl]
 80066de:	2b2a      	cmp	r3, #42	@ 0x2a
 80066e0:	d015      	beq.n	800670e <_svfiprintf_r+0xfa>
 80066e2:	9a07      	ldr	r2, [sp, #28]
 80066e4:	4654      	mov	r4, sl
 80066e6:	2000      	movs	r0, #0
 80066e8:	f04f 0c0a 	mov.w	ip, #10
 80066ec:	4621      	mov	r1, r4
 80066ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066f2:	3b30      	subs	r3, #48	@ 0x30
 80066f4:	2b09      	cmp	r3, #9
 80066f6:	d94b      	bls.n	8006790 <_svfiprintf_r+0x17c>
 80066f8:	b1b0      	cbz	r0, 8006728 <_svfiprintf_r+0x114>
 80066fa:	9207      	str	r2, [sp, #28]
 80066fc:	e014      	b.n	8006728 <_svfiprintf_r+0x114>
 80066fe:	eba0 0308 	sub.w	r3, r0, r8
 8006702:	fa09 f303 	lsl.w	r3, r9, r3
 8006706:	4313      	orrs	r3, r2
 8006708:	9304      	str	r3, [sp, #16]
 800670a:	46a2      	mov	sl, r4
 800670c:	e7d2      	b.n	80066b4 <_svfiprintf_r+0xa0>
 800670e:	9b03      	ldr	r3, [sp, #12]
 8006710:	1d19      	adds	r1, r3, #4
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	9103      	str	r1, [sp, #12]
 8006716:	2b00      	cmp	r3, #0
 8006718:	bfbb      	ittet	lt
 800671a:	425b      	neglt	r3, r3
 800671c:	f042 0202 	orrlt.w	r2, r2, #2
 8006720:	9307      	strge	r3, [sp, #28]
 8006722:	9307      	strlt	r3, [sp, #28]
 8006724:	bfb8      	it	lt
 8006726:	9204      	strlt	r2, [sp, #16]
 8006728:	7823      	ldrb	r3, [r4, #0]
 800672a:	2b2e      	cmp	r3, #46	@ 0x2e
 800672c:	d10a      	bne.n	8006744 <_svfiprintf_r+0x130>
 800672e:	7863      	ldrb	r3, [r4, #1]
 8006730:	2b2a      	cmp	r3, #42	@ 0x2a
 8006732:	d132      	bne.n	800679a <_svfiprintf_r+0x186>
 8006734:	9b03      	ldr	r3, [sp, #12]
 8006736:	1d1a      	adds	r2, r3, #4
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	9203      	str	r2, [sp, #12]
 800673c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006740:	3402      	adds	r4, #2
 8006742:	9305      	str	r3, [sp, #20]
 8006744:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006808 <_svfiprintf_r+0x1f4>
 8006748:	7821      	ldrb	r1, [r4, #0]
 800674a:	2203      	movs	r2, #3
 800674c:	4650      	mov	r0, sl
 800674e:	f7f9 fd47 	bl	80001e0 <memchr>
 8006752:	b138      	cbz	r0, 8006764 <_svfiprintf_r+0x150>
 8006754:	9b04      	ldr	r3, [sp, #16]
 8006756:	eba0 000a 	sub.w	r0, r0, sl
 800675a:	2240      	movs	r2, #64	@ 0x40
 800675c:	4082      	lsls	r2, r0
 800675e:	4313      	orrs	r3, r2
 8006760:	3401      	adds	r4, #1
 8006762:	9304      	str	r3, [sp, #16]
 8006764:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006768:	4824      	ldr	r0, [pc, #144]	@ (80067fc <_svfiprintf_r+0x1e8>)
 800676a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800676e:	2206      	movs	r2, #6
 8006770:	f7f9 fd36 	bl	80001e0 <memchr>
 8006774:	2800      	cmp	r0, #0
 8006776:	d036      	beq.n	80067e6 <_svfiprintf_r+0x1d2>
 8006778:	4b21      	ldr	r3, [pc, #132]	@ (8006800 <_svfiprintf_r+0x1ec>)
 800677a:	bb1b      	cbnz	r3, 80067c4 <_svfiprintf_r+0x1b0>
 800677c:	9b03      	ldr	r3, [sp, #12]
 800677e:	3307      	adds	r3, #7
 8006780:	f023 0307 	bic.w	r3, r3, #7
 8006784:	3308      	adds	r3, #8
 8006786:	9303      	str	r3, [sp, #12]
 8006788:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800678a:	4433      	add	r3, r6
 800678c:	9309      	str	r3, [sp, #36]	@ 0x24
 800678e:	e76a      	b.n	8006666 <_svfiprintf_r+0x52>
 8006790:	fb0c 3202 	mla	r2, ip, r2, r3
 8006794:	460c      	mov	r4, r1
 8006796:	2001      	movs	r0, #1
 8006798:	e7a8      	b.n	80066ec <_svfiprintf_r+0xd8>
 800679a:	2300      	movs	r3, #0
 800679c:	3401      	adds	r4, #1
 800679e:	9305      	str	r3, [sp, #20]
 80067a0:	4619      	mov	r1, r3
 80067a2:	f04f 0c0a 	mov.w	ip, #10
 80067a6:	4620      	mov	r0, r4
 80067a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80067ac:	3a30      	subs	r2, #48	@ 0x30
 80067ae:	2a09      	cmp	r2, #9
 80067b0:	d903      	bls.n	80067ba <_svfiprintf_r+0x1a6>
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d0c6      	beq.n	8006744 <_svfiprintf_r+0x130>
 80067b6:	9105      	str	r1, [sp, #20]
 80067b8:	e7c4      	b.n	8006744 <_svfiprintf_r+0x130>
 80067ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80067be:	4604      	mov	r4, r0
 80067c0:	2301      	movs	r3, #1
 80067c2:	e7f0      	b.n	80067a6 <_svfiprintf_r+0x192>
 80067c4:	ab03      	add	r3, sp, #12
 80067c6:	9300      	str	r3, [sp, #0]
 80067c8:	462a      	mov	r2, r5
 80067ca:	4b0e      	ldr	r3, [pc, #56]	@ (8006804 <_svfiprintf_r+0x1f0>)
 80067cc:	a904      	add	r1, sp, #16
 80067ce:	4638      	mov	r0, r7
 80067d0:	f3af 8000 	nop.w
 80067d4:	1c42      	adds	r2, r0, #1
 80067d6:	4606      	mov	r6, r0
 80067d8:	d1d6      	bne.n	8006788 <_svfiprintf_r+0x174>
 80067da:	89ab      	ldrh	r3, [r5, #12]
 80067dc:	065b      	lsls	r3, r3, #25
 80067de:	f53f af2d 	bmi.w	800663c <_svfiprintf_r+0x28>
 80067e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80067e4:	e72c      	b.n	8006640 <_svfiprintf_r+0x2c>
 80067e6:	ab03      	add	r3, sp, #12
 80067e8:	9300      	str	r3, [sp, #0]
 80067ea:	462a      	mov	r2, r5
 80067ec:	4b05      	ldr	r3, [pc, #20]	@ (8006804 <_svfiprintf_r+0x1f0>)
 80067ee:	a904      	add	r1, sp, #16
 80067f0:	4638      	mov	r0, r7
 80067f2:	f000 f879 	bl	80068e8 <_printf_i>
 80067f6:	e7ed      	b.n	80067d4 <_svfiprintf_r+0x1c0>
 80067f8:	08007f3c 	.word	0x08007f3c
 80067fc:	08007f46 	.word	0x08007f46
 8006800:	00000000 	.word	0x00000000
 8006804:	0800655d 	.word	0x0800655d
 8006808:	08007f42 	.word	0x08007f42

0800680c <_printf_common>:
 800680c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006810:	4616      	mov	r6, r2
 8006812:	4698      	mov	r8, r3
 8006814:	688a      	ldr	r2, [r1, #8]
 8006816:	690b      	ldr	r3, [r1, #16]
 8006818:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800681c:	4293      	cmp	r3, r2
 800681e:	bfb8      	it	lt
 8006820:	4613      	movlt	r3, r2
 8006822:	6033      	str	r3, [r6, #0]
 8006824:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006828:	4607      	mov	r7, r0
 800682a:	460c      	mov	r4, r1
 800682c:	b10a      	cbz	r2, 8006832 <_printf_common+0x26>
 800682e:	3301      	adds	r3, #1
 8006830:	6033      	str	r3, [r6, #0]
 8006832:	6823      	ldr	r3, [r4, #0]
 8006834:	0699      	lsls	r1, r3, #26
 8006836:	bf42      	ittt	mi
 8006838:	6833      	ldrmi	r3, [r6, #0]
 800683a:	3302      	addmi	r3, #2
 800683c:	6033      	strmi	r3, [r6, #0]
 800683e:	6825      	ldr	r5, [r4, #0]
 8006840:	f015 0506 	ands.w	r5, r5, #6
 8006844:	d106      	bne.n	8006854 <_printf_common+0x48>
 8006846:	f104 0a19 	add.w	sl, r4, #25
 800684a:	68e3      	ldr	r3, [r4, #12]
 800684c:	6832      	ldr	r2, [r6, #0]
 800684e:	1a9b      	subs	r3, r3, r2
 8006850:	42ab      	cmp	r3, r5
 8006852:	dc26      	bgt.n	80068a2 <_printf_common+0x96>
 8006854:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006858:	6822      	ldr	r2, [r4, #0]
 800685a:	3b00      	subs	r3, #0
 800685c:	bf18      	it	ne
 800685e:	2301      	movne	r3, #1
 8006860:	0692      	lsls	r2, r2, #26
 8006862:	d42b      	bmi.n	80068bc <_printf_common+0xb0>
 8006864:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006868:	4641      	mov	r1, r8
 800686a:	4638      	mov	r0, r7
 800686c:	47c8      	blx	r9
 800686e:	3001      	adds	r0, #1
 8006870:	d01e      	beq.n	80068b0 <_printf_common+0xa4>
 8006872:	6823      	ldr	r3, [r4, #0]
 8006874:	6922      	ldr	r2, [r4, #16]
 8006876:	f003 0306 	and.w	r3, r3, #6
 800687a:	2b04      	cmp	r3, #4
 800687c:	bf02      	ittt	eq
 800687e:	68e5      	ldreq	r5, [r4, #12]
 8006880:	6833      	ldreq	r3, [r6, #0]
 8006882:	1aed      	subeq	r5, r5, r3
 8006884:	68a3      	ldr	r3, [r4, #8]
 8006886:	bf0c      	ite	eq
 8006888:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800688c:	2500      	movne	r5, #0
 800688e:	4293      	cmp	r3, r2
 8006890:	bfc4      	itt	gt
 8006892:	1a9b      	subgt	r3, r3, r2
 8006894:	18ed      	addgt	r5, r5, r3
 8006896:	2600      	movs	r6, #0
 8006898:	341a      	adds	r4, #26
 800689a:	42b5      	cmp	r5, r6
 800689c:	d11a      	bne.n	80068d4 <_printf_common+0xc8>
 800689e:	2000      	movs	r0, #0
 80068a0:	e008      	b.n	80068b4 <_printf_common+0xa8>
 80068a2:	2301      	movs	r3, #1
 80068a4:	4652      	mov	r2, sl
 80068a6:	4641      	mov	r1, r8
 80068a8:	4638      	mov	r0, r7
 80068aa:	47c8      	blx	r9
 80068ac:	3001      	adds	r0, #1
 80068ae:	d103      	bne.n	80068b8 <_printf_common+0xac>
 80068b0:	f04f 30ff 	mov.w	r0, #4294967295
 80068b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068b8:	3501      	adds	r5, #1
 80068ba:	e7c6      	b.n	800684a <_printf_common+0x3e>
 80068bc:	18e1      	adds	r1, r4, r3
 80068be:	1c5a      	adds	r2, r3, #1
 80068c0:	2030      	movs	r0, #48	@ 0x30
 80068c2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80068c6:	4422      	add	r2, r4
 80068c8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80068cc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80068d0:	3302      	adds	r3, #2
 80068d2:	e7c7      	b.n	8006864 <_printf_common+0x58>
 80068d4:	2301      	movs	r3, #1
 80068d6:	4622      	mov	r2, r4
 80068d8:	4641      	mov	r1, r8
 80068da:	4638      	mov	r0, r7
 80068dc:	47c8      	blx	r9
 80068de:	3001      	adds	r0, #1
 80068e0:	d0e6      	beq.n	80068b0 <_printf_common+0xa4>
 80068e2:	3601      	adds	r6, #1
 80068e4:	e7d9      	b.n	800689a <_printf_common+0x8e>
	...

080068e8 <_printf_i>:
 80068e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80068ec:	7e0f      	ldrb	r7, [r1, #24]
 80068ee:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80068f0:	2f78      	cmp	r7, #120	@ 0x78
 80068f2:	4691      	mov	r9, r2
 80068f4:	4680      	mov	r8, r0
 80068f6:	460c      	mov	r4, r1
 80068f8:	469a      	mov	sl, r3
 80068fa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80068fe:	d807      	bhi.n	8006910 <_printf_i+0x28>
 8006900:	2f62      	cmp	r7, #98	@ 0x62
 8006902:	d80a      	bhi.n	800691a <_printf_i+0x32>
 8006904:	2f00      	cmp	r7, #0
 8006906:	f000 80d2 	beq.w	8006aae <_printf_i+0x1c6>
 800690a:	2f58      	cmp	r7, #88	@ 0x58
 800690c:	f000 80b9 	beq.w	8006a82 <_printf_i+0x19a>
 8006910:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006914:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006918:	e03a      	b.n	8006990 <_printf_i+0xa8>
 800691a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800691e:	2b15      	cmp	r3, #21
 8006920:	d8f6      	bhi.n	8006910 <_printf_i+0x28>
 8006922:	a101      	add	r1, pc, #4	@ (adr r1, 8006928 <_printf_i+0x40>)
 8006924:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006928:	08006981 	.word	0x08006981
 800692c:	08006995 	.word	0x08006995
 8006930:	08006911 	.word	0x08006911
 8006934:	08006911 	.word	0x08006911
 8006938:	08006911 	.word	0x08006911
 800693c:	08006911 	.word	0x08006911
 8006940:	08006995 	.word	0x08006995
 8006944:	08006911 	.word	0x08006911
 8006948:	08006911 	.word	0x08006911
 800694c:	08006911 	.word	0x08006911
 8006950:	08006911 	.word	0x08006911
 8006954:	08006a95 	.word	0x08006a95
 8006958:	080069bf 	.word	0x080069bf
 800695c:	08006a4f 	.word	0x08006a4f
 8006960:	08006911 	.word	0x08006911
 8006964:	08006911 	.word	0x08006911
 8006968:	08006ab7 	.word	0x08006ab7
 800696c:	08006911 	.word	0x08006911
 8006970:	080069bf 	.word	0x080069bf
 8006974:	08006911 	.word	0x08006911
 8006978:	08006911 	.word	0x08006911
 800697c:	08006a57 	.word	0x08006a57
 8006980:	6833      	ldr	r3, [r6, #0]
 8006982:	1d1a      	adds	r2, r3, #4
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	6032      	str	r2, [r6, #0]
 8006988:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800698c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006990:	2301      	movs	r3, #1
 8006992:	e09d      	b.n	8006ad0 <_printf_i+0x1e8>
 8006994:	6833      	ldr	r3, [r6, #0]
 8006996:	6820      	ldr	r0, [r4, #0]
 8006998:	1d19      	adds	r1, r3, #4
 800699a:	6031      	str	r1, [r6, #0]
 800699c:	0606      	lsls	r6, r0, #24
 800699e:	d501      	bpl.n	80069a4 <_printf_i+0xbc>
 80069a0:	681d      	ldr	r5, [r3, #0]
 80069a2:	e003      	b.n	80069ac <_printf_i+0xc4>
 80069a4:	0645      	lsls	r5, r0, #25
 80069a6:	d5fb      	bpl.n	80069a0 <_printf_i+0xb8>
 80069a8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80069ac:	2d00      	cmp	r5, #0
 80069ae:	da03      	bge.n	80069b8 <_printf_i+0xd0>
 80069b0:	232d      	movs	r3, #45	@ 0x2d
 80069b2:	426d      	negs	r5, r5
 80069b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069b8:	4859      	ldr	r0, [pc, #356]	@ (8006b20 <_printf_i+0x238>)
 80069ba:	230a      	movs	r3, #10
 80069bc:	e011      	b.n	80069e2 <_printf_i+0xfa>
 80069be:	6821      	ldr	r1, [r4, #0]
 80069c0:	6833      	ldr	r3, [r6, #0]
 80069c2:	0608      	lsls	r0, r1, #24
 80069c4:	f853 5b04 	ldr.w	r5, [r3], #4
 80069c8:	d402      	bmi.n	80069d0 <_printf_i+0xe8>
 80069ca:	0649      	lsls	r1, r1, #25
 80069cc:	bf48      	it	mi
 80069ce:	b2ad      	uxthmi	r5, r5
 80069d0:	2f6f      	cmp	r7, #111	@ 0x6f
 80069d2:	4853      	ldr	r0, [pc, #332]	@ (8006b20 <_printf_i+0x238>)
 80069d4:	6033      	str	r3, [r6, #0]
 80069d6:	bf14      	ite	ne
 80069d8:	230a      	movne	r3, #10
 80069da:	2308      	moveq	r3, #8
 80069dc:	2100      	movs	r1, #0
 80069de:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80069e2:	6866      	ldr	r6, [r4, #4]
 80069e4:	60a6      	str	r6, [r4, #8]
 80069e6:	2e00      	cmp	r6, #0
 80069e8:	bfa2      	ittt	ge
 80069ea:	6821      	ldrge	r1, [r4, #0]
 80069ec:	f021 0104 	bicge.w	r1, r1, #4
 80069f0:	6021      	strge	r1, [r4, #0]
 80069f2:	b90d      	cbnz	r5, 80069f8 <_printf_i+0x110>
 80069f4:	2e00      	cmp	r6, #0
 80069f6:	d04b      	beq.n	8006a90 <_printf_i+0x1a8>
 80069f8:	4616      	mov	r6, r2
 80069fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80069fe:	fb03 5711 	mls	r7, r3, r1, r5
 8006a02:	5dc7      	ldrb	r7, [r0, r7]
 8006a04:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006a08:	462f      	mov	r7, r5
 8006a0a:	42bb      	cmp	r3, r7
 8006a0c:	460d      	mov	r5, r1
 8006a0e:	d9f4      	bls.n	80069fa <_printf_i+0x112>
 8006a10:	2b08      	cmp	r3, #8
 8006a12:	d10b      	bne.n	8006a2c <_printf_i+0x144>
 8006a14:	6823      	ldr	r3, [r4, #0]
 8006a16:	07df      	lsls	r7, r3, #31
 8006a18:	d508      	bpl.n	8006a2c <_printf_i+0x144>
 8006a1a:	6923      	ldr	r3, [r4, #16]
 8006a1c:	6861      	ldr	r1, [r4, #4]
 8006a1e:	4299      	cmp	r1, r3
 8006a20:	bfde      	ittt	le
 8006a22:	2330      	movle	r3, #48	@ 0x30
 8006a24:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006a28:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006a2c:	1b92      	subs	r2, r2, r6
 8006a2e:	6122      	str	r2, [r4, #16]
 8006a30:	f8cd a000 	str.w	sl, [sp]
 8006a34:	464b      	mov	r3, r9
 8006a36:	aa03      	add	r2, sp, #12
 8006a38:	4621      	mov	r1, r4
 8006a3a:	4640      	mov	r0, r8
 8006a3c:	f7ff fee6 	bl	800680c <_printf_common>
 8006a40:	3001      	adds	r0, #1
 8006a42:	d14a      	bne.n	8006ada <_printf_i+0x1f2>
 8006a44:	f04f 30ff 	mov.w	r0, #4294967295
 8006a48:	b004      	add	sp, #16
 8006a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a4e:	6823      	ldr	r3, [r4, #0]
 8006a50:	f043 0320 	orr.w	r3, r3, #32
 8006a54:	6023      	str	r3, [r4, #0]
 8006a56:	4833      	ldr	r0, [pc, #204]	@ (8006b24 <_printf_i+0x23c>)
 8006a58:	2778      	movs	r7, #120	@ 0x78
 8006a5a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006a5e:	6823      	ldr	r3, [r4, #0]
 8006a60:	6831      	ldr	r1, [r6, #0]
 8006a62:	061f      	lsls	r7, r3, #24
 8006a64:	f851 5b04 	ldr.w	r5, [r1], #4
 8006a68:	d402      	bmi.n	8006a70 <_printf_i+0x188>
 8006a6a:	065f      	lsls	r7, r3, #25
 8006a6c:	bf48      	it	mi
 8006a6e:	b2ad      	uxthmi	r5, r5
 8006a70:	6031      	str	r1, [r6, #0]
 8006a72:	07d9      	lsls	r1, r3, #31
 8006a74:	bf44      	itt	mi
 8006a76:	f043 0320 	orrmi.w	r3, r3, #32
 8006a7a:	6023      	strmi	r3, [r4, #0]
 8006a7c:	b11d      	cbz	r5, 8006a86 <_printf_i+0x19e>
 8006a7e:	2310      	movs	r3, #16
 8006a80:	e7ac      	b.n	80069dc <_printf_i+0xf4>
 8006a82:	4827      	ldr	r0, [pc, #156]	@ (8006b20 <_printf_i+0x238>)
 8006a84:	e7e9      	b.n	8006a5a <_printf_i+0x172>
 8006a86:	6823      	ldr	r3, [r4, #0]
 8006a88:	f023 0320 	bic.w	r3, r3, #32
 8006a8c:	6023      	str	r3, [r4, #0]
 8006a8e:	e7f6      	b.n	8006a7e <_printf_i+0x196>
 8006a90:	4616      	mov	r6, r2
 8006a92:	e7bd      	b.n	8006a10 <_printf_i+0x128>
 8006a94:	6833      	ldr	r3, [r6, #0]
 8006a96:	6825      	ldr	r5, [r4, #0]
 8006a98:	6961      	ldr	r1, [r4, #20]
 8006a9a:	1d18      	adds	r0, r3, #4
 8006a9c:	6030      	str	r0, [r6, #0]
 8006a9e:	062e      	lsls	r6, r5, #24
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	d501      	bpl.n	8006aa8 <_printf_i+0x1c0>
 8006aa4:	6019      	str	r1, [r3, #0]
 8006aa6:	e002      	b.n	8006aae <_printf_i+0x1c6>
 8006aa8:	0668      	lsls	r0, r5, #25
 8006aaa:	d5fb      	bpl.n	8006aa4 <_printf_i+0x1bc>
 8006aac:	8019      	strh	r1, [r3, #0]
 8006aae:	2300      	movs	r3, #0
 8006ab0:	6123      	str	r3, [r4, #16]
 8006ab2:	4616      	mov	r6, r2
 8006ab4:	e7bc      	b.n	8006a30 <_printf_i+0x148>
 8006ab6:	6833      	ldr	r3, [r6, #0]
 8006ab8:	1d1a      	adds	r2, r3, #4
 8006aba:	6032      	str	r2, [r6, #0]
 8006abc:	681e      	ldr	r6, [r3, #0]
 8006abe:	6862      	ldr	r2, [r4, #4]
 8006ac0:	2100      	movs	r1, #0
 8006ac2:	4630      	mov	r0, r6
 8006ac4:	f7f9 fb8c 	bl	80001e0 <memchr>
 8006ac8:	b108      	cbz	r0, 8006ace <_printf_i+0x1e6>
 8006aca:	1b80      	subs	r0, r0, r6
 8006acc:	6060      	str	r0, [r4, #4]
 8006ace:	6863      	ldr	r3, [r4, #4]
 8006ad0:	6123      	str	r3, [r4, #16]
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006ad8:	e7aa      	b.n	8006a30 <_printf_i+0x148>
 8006ada:	6923      	ldr	r3, [r4, #16]
 8006adc:	4632      	mov	r2, r6
 8006ade:	4649      	mov	r1, r9
 8006ae0:	4640      	mov	r0, r8
 8006ae2:	47d0      	blx	sl
 8006ae4:	3001      	adds	r0, #1
 8006ae6:	d0ad      	beq.n	8006a44 <_printf_i+0x15c>
 8006ae8:	6823      	ldr	r3, [r4, #0]
 8006aea:	079b      	lsls	r3, r3, #30
 8006aec:	d413      	bmi.n	8006b16 <_printf_i+0x22e>
 8006aee:	68e0      	ldr	r0, [r4, #12]
 8006af0:	9b03      	ldr	r3, [sp, #12]
 8006af2:	4298      	cmp	r0, r3
 8006af4:	bfb8      	it	lt
 8006af6:	4618      	movlt	r0, r3
 8006af8:	e7a6      	b.n	8006a48 <_printf_i+0x160>
 8006afa:	2301      	movs	r3, #1
 8006afc:	4632      	mov	r2, r6
 8006afe:	4649      	mov	r1, r9
 8006b00:	4640      	mov	r0, r8
 8006b02:	47d0      	blx	sl
 8006b04:	3001      	adds	r0, #1
 8006b06:	d09d      	beq.n	8006a44 <_printf_i+0x15c>
 8006b08:	3501      	adds	r5, #1
 8006b0a:	68e3      	ldr	r3, [r4, #12]
 8006b0c:	9903      	ldr	r1, [sp, #12]
 8006b0e:	1a5b      	subs	r3, r3, r1
 8006b10:	42ab      	cmp	r3, r5
 8006b12:	dcf2      	bgt.n	8006afa <_printf_i+0x212>
 8006b14:	e7eb      	b.n	8006aee <_printf_i+0x206>
 8006b16:	2500      	movs	r5, #0
 8006b18:	f104 0619 	add.w	r6, r4, #25
 8006b1c:	e7f5      	b.n	8006b0a <_printf_i+0x222>
 8006b1e:	bf00      	nop
 8006b20:	08007f4d 	.word	0x08007f4d
 8006b24:	08007f5e 	.word	0x08007f5e

08006b28 <memmove>:
 8006b28:	4288      	cmp	r0, r1
 8006b2a:	b510      	push	{r4, lr}
 8006b2c:	eb01 0402 	add.w	r4, r1, r2
 8006b30:	d902      	bls.n	8006b38 <memmove+0x10>
 8006b32:	4284      	cmp	r4, r0
 8006b34:	4623      	mov	r3, r4
 8006b36:	d807      	bhi.n	8006b48 <memmove+0x20>
 8006b38:	1e43      	subs	r3, r0, #1
 8006b3a:	42a1      	cmp	r1, r4
 8006b3c:	d008      	beq.n	8006b50 <memmove+0x28>
 8006b3e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b42:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b46:	e7f8      	b.n	8006b3a <memmove+0x12>
 8006b48:	4402      	add	r2, r0
 8006b4a:	4601      	mov	r1, r0
 8006b4c:	428a      	cmp	r2, r1
 8006b4e:	d100      	bne.n	8006b52 <memmove+0x2a>
 8006b50:	bd10      	pop	{r4, pc}
 8006b52:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b56:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b5a:	e7f7      	b.n	8006b4c <memmove+0x24>

08006b5c <logf>:
 8006b5c:	b508      	push	{r3, lr}
 8006b5e:	ed2d 8b02 	vpush	{d8}
 8006b62:	eeb0 8a40 	vmov.f32	s16, s0
 8006b66:	f000 f827 	bl	8006bb8 <__ieee754_logf>
 8006b6a:	eeb4 8a48 	vcmp.f32	s16, s16
 8006b6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b72:	d60f      	bvs.n	8006b94 <logf+0x38>
 8006b74:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8006b78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b7c:	dc0a      	bgt.n	8006b94 <logf+0x38>
 8006b7e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8006b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006b86:	d108      	bne.n	8006b9a <logf+0x3e>
 8006b88:	f7ff fc56 	bl	8006438 <__errno>
 8006b8c:	2322      	movs	r3, #34	@ 0x22
 8006b8e:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8006bb0 <logf+0x54>
 8006b92:	6003      	str	r3, [r0, #0]
 8006b94:	ecbd 8b02 	vpop	{d8}
 8006b98:	bd08      	pop	{r3, pc}
 8006b9a:	f7ff fc4d 	bl	8006438 <__errno>
 8006b9e:	ecbd 8b02 	vpop	{d8}
 8006ba2:	2321      	movs	r3, #33	@ 0x21
 8006ba4:	6003      	str	r3, [r0, #0]
 8006ba6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8006baa:	4802      	ldr	r0, [pc, #8]	@ (8006bb4 <logf+0x58>)
 8006bac:	f7ff bc7e 	b.w	80064ac <nanf>
 8006bb0:	ff800000 	.word	0xff800000
 8006bb4:	08007f41 	.word	0x08007f41

08006bb8 <__ieee754_logf>:
 8006bb8:	ee10 3a10 	vmov	r3, s0
 8006bbc:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8006bc0:	d106      	bne.n	8006bd0 <__ieee754_logf+0x18>
 8006bc2:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 8006d5c <__ieee754_logf+0x1a4>
 8006bc6:	eddf 7a66 	vldr	s15, [pc, #408]	@ 8006d60 <__ieee754_logf+0x1a8>
 8006bca:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8006bce:	4770      	bx	lr
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	da02      	bge.n	8006bdc <__ieee754_logf+0x24>
 8006bd6:	ee30 7a40 	vsub.f32	s14, s0, s0
 8006bda:	e7f4      	b.n	8006bc6 <__ieee754_logf+0xe>
 8006bdc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8006be0:	db02      	blt.n	8006be8 <__ieee754_logf+0x30>
 8006be2:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006be6:	4770      	bx	lr
 8006be8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006bec:	bfb8      	it	lt
 8006bee:	eddf 7a5d 	vldrlt	s15, [pc, #372]	@ 8006d64 <__ieee754_logf+0x1ac>
 8006bf2:	485d      	ldr	r0, [pc, #372]	@ (8006d68 <__ieee754_logf+0x1b0>)
 8006bf4:	bfbe      	ittt	lt
 8006bf6:	ee60 7a27 	vmullt.f32	s15, s0, s15
 8006bfa:	f06f 0118 	mvnlt.w	r1, #24
 8006bfe:	ee17 2a90 	vmovlt	r2, s15
 8006c02:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8006c06:	f3c2 0216 	ubfx	r2, r2, #0, #23
 8006c0a:	4410      	add	r0, r2
 8006c0c:	bfa8      	it	ge
 8006c0e:	2100      	movge	r1, #0
 8006c10:	3b7f      	subs	r3, #127	@ 0x7f
 8006c12:	440b      	add	r3, r1
 8006c14:	f400 0100 	and.w	r1, r0, #8388608	@ 0x800000
 8006c18:	f081 517e 	eor.w	r1, r1, #1065353216	@ 0x3f800000
 8006c1c:	4311      	orrs	r1, r2
 8006c1e:	ee00 1a10 	vmov	s0, r1
 8006c22:	4952      	ldr	r1, [pc, #328]	@ (8006d6c <__ieee754_logf+0x1b4>)
 8006c24:	eb03 53d0 	add.w	r3, r3, r0, lsr #23
 8006c28:	f102 000f 	add.w	r0, r2, #15
 8006c2c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8006c30:	4001      	ands	r1, r0
 8006c32:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006c36:	bb89      	cbnz	r1, 8006c9c <__ieee754_logf+0xe4>
 8006c38:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c40:	d10f      	bne.n	8006c62 <__ieee754_logf+0xaa>
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	f000 8087 	beq.w	8006d56 <__ieee754_logf+0x19e>
 8006c48:	ee07 3a90 	vmov	s15, r3
 8006c4c:	ed9f 0a48 	vldr	s0, [pc, #288]	@ 8006d70 <__ieee754_logf+0x1b8>
 8006c50:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8006d74 <__ieee754_logf+0x1bc>
 8006c54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c58:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006c5c:	eea7 0a87 	vfma.f32	s0, s15, s14
 8006c60:	4770      	bx	lr
 8006c62:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8006d78 <__ieee754_logf+0x1c0>
 8006c66:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8006c6a:	eee0 7a66 	vfms.f32	s15, s0, s13
 8006c6e:	ee20 7a00 	vmul.f32	s14, s0, s0
 8006c72:	ee27 7a27 	vmul.f32	s14, s14, s15
 8006c76:	b913      	cbnz	r3, 8006c7e <__ieee754_logf+0xc6>
 8006c78:	ee30 0a47 	vsub.f32	s0, s0, s14
 8006c7c:	4770      	bx	lr
 8006c7e:	ee07 3a90 	vmov	s15, r3
 8006c82:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8006d70 <__ieee754_logf+0x1b8>
 8006c86:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006c8a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8006c8e:	ee37 0a40 	vsub.f32	s0, s14, s0
 8006c92:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8006d74 <__ieee754_logf+0x1bc>
 8006c96:	ee97 0a87 	vfnms.f32	s0, s15, s14
 8006c9a:	4770      	bx	lr
 8006c9c:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 8006ca0:	ee70 7a27 	vadd.f32	s15, s0, s15
 8006ca4:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8006d7c <__ieee754_logf+0x1c4>
 8006ca8:	eddf 4a35 	vldr	s9, [pc, #212]	@ 8006d80 <__ieee754_logf+0x1c8>
 8006cac:	4935      	ldr	r1, [pc, #212]	@ (8006d84 <__ieee754_logf+0x1cc>)
 8006cae:	ee80 6a27 	vdiv.f32	s12, s0, s15
 8006cb2:	4411      	add	r1, r2
 8006cb4:	f5c2 1257 	rsb	r2, r2, #3522560	@ 0x35c000
 8006cb8:	f502 7222 	add.w	r2, r2, #648	@ 0x288
 8006cbc:	430a      	orrs	r2, r1
 8006cbe:	2a00      	cmp	r2, #0
 8006cc0:	ee07 3a90 	vmov	s15, r3
 8006cc4:	ee26 5a06 	vmul.f32	s10, s12, s12
 8006cc8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8006ccc:	ee25 7a05 	vmul.f32	s14, s10, s10
 8006cd0:	eddf 7a2d 	vldr	s15, [pc, #180]	@ 8006d88 <__ieee754_logf+0x1d0>
 8006cd4:	eee7 7a25 	vfma.f32	s15, s14, s11
 8006cd8:	eddf 5a2c 	vldr	s11, [pc, #176]	@ 8006d8c <__ieee754_logf+0x1d4>
 8006cdc:	eee7 5a87 	vfma.f32	s11, s15, s14
 8006ce0:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 8006d90 <__ieee754_logf+0x1d8>
 8006ce4:	eee7 7a24 	vfma.f32	s15, s14, s9
 8006ce8:	eddf 4a2a 	vldr	s9, [pc, #168]	@ 8006d94 <__ieee754_logf+0x1dc>
 8006cec:	eee7 4a87 	vfma.f32	s9, s15, s14
 8006cf0:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8006d98 <__ieee754_logf+0x1e0>
 8006cf4:	eee4 7a87 	vfma.f32	s15, s9, s14
 8006cf8:	ee67 7a85 	vmul.f32	s15, s15, s10
 8006cfc:	eee5 7a87 	vfma.f32	s15, s11, s14
 8006d00:	dd1a      	ble.n	8006d38 <__ieee754_logf+0x180>
 8006d02:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8006d06:	ee20 7a07 	vmul.f32	s14, s0, s14
 8006d0a:	ee27 7a00 	vmul.f32	s14, s14, s0
 8006d0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006d12:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006d16:	b913      	cbnz	r3, 8006d1e <__ieee754_logf+0x166>
 8006d18:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006d1c:	e7ac      	b.n	8006c78 <__ieee754_logf+0xc0>
 8006d1e:	ed9f 6a14 	vldr	s12, [pc, #80]	@ 8006d70 <__ieee754_logf+0x1b8>
 8006d22:	eee6 7a86 	vfma.f32	s15, s13, s12
 8006d26:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006d2a:	ee37 0a40 	vsub.f32	s0, s14, s0
 8006d2e:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8006d74 <__ieee754_logf+0x1bc>
 8006d32:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 8006d36:	4770      	bx	lr
 8006d38:	ee70 7a67 	vsub.f32	s15, s0, s15
 8006d3c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8006d40:	b913      	cbnz	r3, 8006d48 <__ieee754_logf+0x190>
 8006d42:	ee30 0a67 	vsub.f32	s0, s0, s15
 8006d46:	4770      	bx	lr
 8006d48:	ed9f 7a09 	vldr	s14, [pc, #36]	@ 8006d70 <__ieee754_logf+0x1b8>
 8006d4c:	eee6 7ac7 	vfms.f32	s15, s13, s14
 8006d50:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8006d54:	e7eb      	b.n	8006d2e <__ieee754_logf+0x176>
 8006d56:	ed9f 0a02 	vldr	s0, [pc, #8]	@ 8006d60 <__ieee754_logf+0x1a8>
 8006d5a:	4770      	bx	lr
 8006d5c:	cc000000 	.word	0xcc000000
 8006d60:	00000000 	.word	0x00000000
 8006d64:	4c000000 	.word	0x4c000000
 8006d68:	004afb20 	.word	0x004afb20
 8006d6c:	007ffff0 	.word	0x007ffff0
 8006d70:	3717f7d1 	.word	0x3717f7d1
 8006d74:	3f317180 	.word	0x3f317180
 8006d78:	3eaaaaab 	.word	0x3eaaaaab
 8006d7c:	3e1cd04f 	.word	0x3e1cd04f
 8006d80:	3e178897 	.word	0x3e178897
 8006d84:	ffcf5c30 	.word	0xffcf5c30
 8006d88:	3e638e29 	.word	0x3e638e29
 8006d8c:	3ecccccd 	.word	0x3ecccccd
 8006d90:	3e3a3325 	.word	0x3e3a3325
 8006d94:	3e924925 	.word	0x3e924925
 8006d98:	3f2aaaab 	.word	0x3f2aaaab

08006d9c <_init>:
 8006d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d9e:	bf00      	nop
 8006da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006da2:	bc08      	pop	{r3}
 8006da4:	469e      	mov	lr, r3
 8006da6:	4770      	bx	lr

08006da8 <_fini>:
 8006da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006daa:	bf00      	nop
 8006dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dae:	bc08      	pop	{r3}
 8006db0:	469e      	mov	lr, r3
 8006db2:	4770      	bx	lr
